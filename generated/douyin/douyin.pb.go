// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: douyin.proto

package douyin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentTypeTag int32

const (
	CommentTypeTag_COMMENTTYPETAGUNKNOWN CommentTypeTag = 0
	CommentTypeTag_COMMENTTYPETAGSTAR    CommentTypeTag = 1
)

// Enum value maps for CommentTypeTag.
var (
	CommentTypeTag_name = map[int32]string{
		0: "COMMENTTYPETAGUNKNOWN",
		1: "COMMENTTYPETAGSTAR",
	}
	CommentTypeTag_value = map[string]int32{
		"COMMENTTYPETAGUNKNOWN": 0,
		"COMMENTTYPETAGSTAR":    1,
	}
)

func (x CommentTypeTag) Enum() *CommentTypeTag {
	p := new(CommentTypeTag)
	*p = x
	return p
}

func (x CommentTypeTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentTypeTag) Descriptor() protoreflect.EnumDescriptor {
	return file_douyin_proto_enumTypes[0].Descriptor()
}

func (CommentTypeTag) Type() protoreflect.EnumType {
	return &file_douyin_proto_enumTypes[0]
}

func (x CommentTypeTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentTypeTag.Descriptor instead.
func (CommentTypeTag) EnumDescriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{0}
}

// from https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomMsgTypeEnum.proto
type RoomMsgTypeEnum int32

const (
	RoomMsgTypeEnum_DEFAULTROOMMSG              RoomMsgTypeEnum = 0
	RoomMsgTypeEnum_ECOMLIVEREPLAYSAVEROOMMSG   RoomMsgTypeEnum = 1
	RoomMsgTypeEnum_CONSUMERRELATIONROOMMSG     RoomMsgTypeEnum = 2
	RoomMsgTypeEnum_JUMANJIDATAAUTHNOTIFYMSG    RoomMsgTypeEnum = 3
	RoomMsgTypeEnum_VSWELCOMEMSG                RoomMsgTypeEnum = 4
	RoomMsgTypeEnum_MINORREFUNDMSG              RoomMsgTypeEnum = 5
	RoomMsgTypeEnum_PAIDLIVEROOMNOTIFYANCHORMSG RoomMsgTypeEnum = 6
	RoomMsgTypeEnum_HOSTTEAMSYSTEMMSG           RoomMsgTypeEnum = 7
)

// Enum value maps for RoomMsgTypeEnum.
var (
	RoomMsgTypeEnum_name = map[int32]string{
		0: "DEFAULTROOMMSG",
		1: "ECOMLIVEREPLAYSAVEROOMMSG",
		2: "CONSUMERRELATIONROOMMSG",
		3: "JUMANJIDATAAUTHNOTIFYMSG",
		4: "VSWELCOMEMSG",
		5: "MINORREFUNDMSG",
		6: "PAIDLIVEROOMNOTIFYANCHORMSG",
		7: "HOSTTEAMSYSTEMMSG",
	}
	RoomMsgTypeEnum_value = map[string]int32{
		"DEFAULTROOMMSG":              0,
		"ECOMLIVEREPLAYSAVEROOMMSG":   1,
		"CONSUMERRELATIONROOMMSG":     2,
		"JUMANJIDATAAUTHNOTIFYMSG":    3,
		"VSWELCOMEMSG":                4,
		"MINORREFUNDMSG":              5,
		"PAIDLIVEROOMNOTIFYANCHORMSG": 6,
		"HOSTTEAMSYSTEMMSG":           7,
	}
)

func (x RoomMsgTypeEnum) Enum() *RoomMsgTypeEnum {
	p := new(RoomMsgTypeEnum)
	*p = x
	return p
}

func (x RoomMsgTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomMsgTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_douyin_proto_enumTypes[1].Descriptor()
}

func (RoomMsgTypeEnum) Type() protoreflect.EnumType {
	return &file_douyin_proto_enumTypes[1]
}

func (x RoomMsgTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomMsgTypeEnum.Descriptor instead.
func (RoomMsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{1}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagesList      []*Message        `protobuf:"bytes,1,rep,name=messagesList,proto3" json:"messagesList,omitempty"`
	Cursor            string            `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	FetchInterval     uint64            `protobuf:"varint,3,opt,name=fetchInterval,proto3" json:"fetchInterval,omitempty"`
	Now               uint64            `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	InternalExt       string            `protobuf:"bytes,5,opt,name=internalExt,proto3" json:"internalExt,omitempty"`
	FetchType         uint32            `protobuf:"varint,6,opt,name=fetchType,proto3" json:"fetchType,omitempty"`
	RouteParams       map[string]string `protobuf:"bytes,7,rep,name=routeParams,proto3" json:"routeParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeartbeatDuration uint64            `protobuf:"varint,8,opt,name=heartbeatDuration,proto3" json:"heartbeatDuration,omitempty"`
	NeedAck           bool              `protobuf:"varint,9,opt,name=needAck,proto3" json:"needAck,omitempty"`
	PushServer        string            `protobuf:"bytes,10,opt,name=pushServer,proto3" json:"pushServer,omitempty"`
	LiveCursor        string            `protobuf:"bytes,11,opt,name=liveCursor,proto3" json:"liveCursor,omitempty"`
	HistoryNoMore     bool              `protobuf:"varint,12,opt,name=historyNoMore,proto3" json:"historyNoMore,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetMessagesList() []*Message {
	if x != nil {
		return x.MessagesList
	}
	return nil
}

func (x *Response) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *Response) GetFetchInterval() uint64 {
	if x != nil {
		return x.FetchInterval
	}
	return 0
}

func (x *Response) GetNow() uint64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *Response) GetInternalExt() string {
	if x != nil {
		return x.InternalExt
	}
	return ""
}

func (x *Response) GetFetchType() uint32 {
	if x != nil {
		return x.FetchType
	}
	return 0
}

func (x *Response) GetRouteParams() map[string]string {
	if x != nil {
		return x.RouteParams
	}
	return nil
}

func (x *Response) GetHeartbeatDuration() uint64 {
	if x != nil {
		return x.HeartbeatDuration
	}
	return 0
}

func (x *Response) GetNeedAck() bool {
	if x != nil {
		return x.NeedAck
	}
	return false
}

func (x *Response) GetPushServer() string {
	if x != nil {
		return x.PushServer
	}
	return ""
}

func (x *Response) GetLiveCursor() string {
	if x != nil {
		return x.LiveCursor
	}
	return ""
}

func (x *Response) GetHistoryNoMore() bool {
	if x != nil {
		return x.HistoryNoMore
	}
	return false
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method        string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	MsgId         int64  `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgType       int32  `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	NeedWrdsStore bool   `protobuf:"varint,6,opt,name=needWrdsStore,proto3" json:"needWrdsStore,omitempty"`
	WrdsVersion   int64  `protobuf:"varint,7,opt,name=wrdsVersion,proto3" json:"wrdsVersion,omitempty"`
	WrdsSubKey    string `protobuf:"bytes,8,opt,name=wrdsSubKey,proto3" json:"wrdsSubKey,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Message) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *Message) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *Message) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Message) GetNeedWrdsStore() bool {
	if x != nil {
		return x.NeedWrdsStore
	}
	return false
}

func (x *Message) GetWrdsVersion() int64 {
	if x != nil {
		return x.WrdsVersion
	}
	return 0
}

func (x *Message) GetWrdsSubKey() string {
	if x != nil {
		return x.WrdsSubKey
	}
	return ""
}

type EmojiChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common               *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                 *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	EmojiId              uint64            `protobuf:"varint,3,opt,name=emojiId,proto3" json:"emojiId,omitempty"`
	EmojiContent         *Text             `protobuf:"bytes,4,opt,name=emojiContent,proto3" json:"emojiContent,omitempty"`
	DefaultContent       string            `protobuf:"bytes,5,opt,name=defaultContent,proto3" json:"defaultContent,omitempty"`
	BackgroundImage      *Image            `protobuf:"bytes,6,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	FromIntercom         bool              `protobuf:"varint,7,opt,name=fromIntercom,proto3" json:"fromIntercom,omitempty"`
	IntercomHideUserCard bool              `protobuf:"varint,8,opt,name=intercomHideUserCard,proto3" json:"intercomHideUserCard,omitempty"`
	PublicAreaCommon     *PublicAreaCommon `protobuf:"bytes,9,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`
}

func (x *EmojiChatMessage) Reset() {
	*x = EmojiChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojiChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiChatMessage) ProtoMessage() {}

func (x *EmojiChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiChatMessage.ProtoReflect.Descriptor instead.
func (*EmojiChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{2}
}

func (x *EmojiChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *EmojiChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EmojiChatMessage) GetEmojiId() uint64 {
	if x != nil {
		return x.EmojiId
	}
	return 0
}

func (x *EmojiChatMessage) GetEmojiContent() *Text {
	if x != nil {
		return x.EmojiContent
	}
	return nil
}

func (x *EmojiChatMessage) GetDefaultContent() string {
	if x != nil {
		return x.DefaultContent
	}
	return ""
}

func (x *EmojiChatMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *EmojiChatMessage) GetFromIntercom() bool {
	if x != nil {
		return x.FromIntercom
	}
	return false
}

func (x *EmojiChatMessage) GetIntercomHideUserCard() bool {
	if x != nil {
		return x.IntercomHideUserCard
	}
	return false
}

func (x *EmojiChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

// 聊天
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common               *Common              `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                 *User                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content              string               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	VisibleToSender      bool                 `protobuf:"varint,4,opt,name=visibleToSender,proto3" json:"visibleToSender,omitempty"`
	BackgroundImage      *Image               `protobuf:"bytes,5,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	FullScreenTextColor  string               `protobuf:"bytes,6,opt,name=fullScreenTextColor,proto3" json:"fullScreenTextColor,omitempty"`
	BackgroundImageV2    *Image               `protobuf:"bytes,7,opt,name=backgroundImageV2,proto3" json:"backgroundImageV2,omitempty"`
	PublicAreaCommon     *PublicAreaCommon    `protobuf:"bytes,9,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
	GiftImage            *Image               `protobuf:"bytes,10,opt,name=giftImage,proto3" json:"giftImage,omitempty"`
	AgreeMsgId           uint64               `protobuf:"varint,11,opt,name=agreeMsgId,proto3" json:"agreeMsgId,omitempty"`
	PriorityLevel        uint32               `protobuf:"varint,12,opt,name=priorityLevel,proto3" json:"priorityLevel,omitempty"`
	LandscapeAreaCommon  *LandscapeAreaCommon `protobuf:"bytes,13,opt,name=landscapeAreaCommon,proto3" json:"landscapeAreaCommon,omitempty"`
	EventTime            uint64               `protobuf:"varint,15,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	SendReview           bool                 `protobuf:"varint,16,opt,name=sendReview,proto3" json:"sendReview,omitempty"`
	FromIntercom         bool                 `protobuf:"varint,17,opt,name=fromIntercom,proto3" json:"fromIntercom,omitempty"`
	IntercomHideUserCard bool                 `protobuf:"varint,18,opt,name=intercomHideUserCard,proto3" json:"intercomHideUserCard,omitempty"`
	// repeated chatTagsList = 19;
	ChatBy                 string `protobuf:"bytes,20,opt,name=chatBy,proto3" json:"chatBy,omitempty"`
	IndividualChatPriority uint32 `protobuf:"varint,21,opt,name=individualChatPriority,proto3" json:"individualChatPriority,omitempty"`
	RtfContent             *Text  `protobuf:"bytes,22,opt,name=rtfContent,proto3" json:"rtfContent,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{3}
}

func (x *ChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetVisibleToSender() bool {
	if x != nil {
		return x.VisibleToSender
	}
	return false
}

func (x *ChatMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *ChatMessage) GetFullScreenTextColor() string {
	if x != nil {
		return x.FullScreenTextColor
	}
	return ""
}

func (x *ChatMessage) GetBackgroundImageV2() *Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *ChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *ChatMessage) GetGiftImage() *Image {
	if x != nil {
		return x.GiftImage
	}
	return nil
}

func (x *ChatMessage) GetAgreeMsgId() uint64 {
	if x != nil {
		return x.AgreeMsgId
	}
	return 0
}

func (x *ChatMessage) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *ChatMessage) GetLandscapeAreaCommon() *LandscapeAreaCommon {
	if x != nil {
		return x.LandscapeAreaCommon
	}
	return nil
}

func (x *ChatMessage) GetEventTime() uint64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *ChatMessage) GetSendReview() bool {
	if x != nil {
		return x.SendReview
	}
	return false
}

func (x *ChatMessage) GetFromIntercom() bool {
	if x != nil {
		return x.FromIntercom
	}
	return false
}

func (x *ChatMessage) GetIntercomHideUserCard() bool {
	if x != nil {
		return x.IntercomHideUserCard
	}
	return false
}

func (x *ChatMessage) GetChatBy() string {
	if x != nil {
		return x.ChatBy
	}
	return ""
}

func (x *ChatMessage) GetIndividualChatPriority() uint32 {
	if x != nil {
		return x.IndividualChatPriority
	}
	return 0
}

func (x *ChatMessage) GetRtfContent() *Text {
	if x != nil {
		return x.RtfContent
	}
	return nil
}

type LandscapeAreaCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowHead            bool             `protobuf:"varint,1,opt,name=showHead,proto3" json:"showHead,omitempty"`
	ShowNickname        bool             `protobuf:"varint,2,opt,name=showNickname,proto3" json:"showNickname,omitempty"`
	ShowFontColor       bool             `protobuf:"varint,3,opt,name=showFontColor,proto3" json:"showFontColor,omitempty"`
	ColorValueList      []string         `protobuf:"bytes,4,rep,name=colorValueList,proto3" json:"colorValueList,omitempty"`
	CommentTypeTagsList []CommentTypeTag `protobuf:"varint,5,rep,packed,name=commentTypeTagsList,proto3,enum=CommentTypeTag" json:"commentTypeTagsList,omitempty"`
}

func (x *LandscapeAreaCommon) Reset() {
	*x = LandscapeAreaCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandscapeAreaCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandscapeAreaCommon) ProtoMessage() {}

func (x *LandscapeAreaCommon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandscapeAreaCommon.ProtoReflect.Descriptor instead.
func (*LandscapeAreaCommon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{4}
}

func (x *LandscapeAreaCommon) GetShowHead() bool {
	if x != nil {
		return x.ShowHead
	}
	return false
}

func (x *LandscapeAreaCommon) GetShowNickname() bool {
	if x != nil {
		return x.ShowNickname
	}
	return false
}

func (x *LandscapeAreaCommon) GetShowFontColor() bool {
	if x != nil {
		return x.ShowFontColor
	}
	return false
}

func (x *LandscapeAreaCommon) GetColorValueList() []string {
	if x != nil {
		return x.ColorValueList
	}
	return nil
}

func (x *LandscapeAreaCommon) GetCommentTypeTagsList() []CommentTypeTag {
	if x != nil {
		return x.CommentTypeTagsList
	}
	return nil
}

type RoomUserSeqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                  *Common                          `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RanksList               []*RoomUserSeqMessageContributor `protobuf:"bytes,2,rep,name=ranksList,proto3" json:"ranksList,omitempty"`
	Total                   int64                            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	PopStr                  string                           `protobuf:"bytes,4,opt,name=popStr,proto3" json:"popStr,omitempty"`
	SeatsList               []*RoomUserSeqMessageContributor `protobuf:"bytes,5,rep,name=seatsList,proto3" json:"seatsList,omitempty"`
	Popularity              int64                            `protobuf:"varint,6,opt,name=popularity,proto3" json:"popularity,omitempty"`
	TotalUser               int64                            `protobuf:"varint,7,opt,name=totalUser,proto3" json:"totalUser,omitempty"`
	TotalUserStr            string                           `protobuf:"bytes,8,opt,name=totalUserStr,proto3" json:"totalUserStr,omitempty"`
	TotalStr                string                           `protobuf:"bytes,9,opt,name=totalStr,proto3" json:"totalStr,omitempty"`
	OnlineUserForAnchor     string                           `protobuf:"bytes,10,opt,name=onlineUserForAnchor,proto3" json:"onlineUserForAnchor,omitempty"`
	TotalPvForAnchor        string                           `protobuf:"bytes,11,opt,name=totalPvForAnchor,proto3" json:"totalPvForAnchor,omitempty"`
	UpRightStatsStr         string                           `protobuf:"bytes,12,opt,name=upRightStatsStr,proto3" json:"upRightStatsStr,omitempty"`
	UpRightStatsStrComplete string                           `protobuf:"bytes,13,opt,name=upRightStatsStrComplete,proto3" json:"upRightStatsStrComplete,omitempty"`
}

func (x *RoomUserSeqMessage) Reset() {
	*x = RoomUserSeqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomUserSeqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomUserSeqMessage) ProtoMessage() {}

func (x *RoomUserSeqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomUserSeqMessage.ProtoReflect.Descriptor instead.
func (*RoomUserSeqMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{5}
}

func (x *RoomUserSeqMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomUserSeqMessage) GetRanksList() []*RoomUserSeqMessageContributor {
	if x != nil {
		return x.RanksList
	}
	return nil
}

func (x *RoomUserSeqMessage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoomUserSeqMessage) GetPopStr() string {
	if x != nil {
		return x.PopStr
	}
	return ""
}

func (x *RoomUserSeqMessage) GetSeatsList() []*RoomUserSeqMessageContributor {
	if x != nil {
		return x.SeatsList
	}
	return nil
}

func (x *RoomUserSeqMessage) GetPopularity() int64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *RoomUserSeqMessage) GetTotalUser() int64 {
	if x != nil {
		return x.TotalUser
	}
	return 0
}

func (x *RoomUserSeqMessage) GetTotalUserStr() string {
	if x != nil {
		return x.TotalUserStr
	}
	return ""
}

func (x *RoomUserSeqMessage) GetTotalStr() string {
	if x != nil {
		return x.TotalStr
	}
	return ""
}

func (x *RoomUserSeqMessage) GetOnlineUserForAnchor() string {
	if x != nil {
		return x.OnlineUserForAnchor
	}
	return ""
}

func (x *RoomUserSeqMessage) GetTotalPvForAnchor() string {
	if x != nil {
		return x.TotalPvForAnchor
	}
	return ""
}

func (x *RoomUserSeqMessage) GetUpRightStatsStr() string {
	if x != nil {
		return x.UpRightStatsStr
	}
	return ""
}

func (x *RoomUserSeqMessage) GetUpRightStatsStrComplete() string {
	if x != nil {
		return x.UpRightStatsStrComplete
	}
	return ""
}

type CommonTextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User   *User   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Scene  string  `protobuf:"bytes,3,opt,name=scene,proto3" json:"scene,omitempty"`
}

func (x *CommonTextMessage) Reset() {
	*x = CommonTextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTextMessage) ProtoMessage() {}

func (x *CommonTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTextMessage.ProtoReflect.Descriptor instead.
func (*CommonTextMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{6}
}

func (x *CommonTextMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CommonTextMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CommonTextMessage) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

type RoomUserSeqMessageContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            uint64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	User             *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Rank             uint64 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Delta            uint64 `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	IsHidden         bool   `protobuf:"varint,5,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
	ScoreDescription string `protobuf:"bytes,6,opt,name=scoreDescription,proto3" json:"scoreDescription,omitempty"`
	ExactlyScore     string `protobuf:"bytes,7,opt,name=exactlyScore,proto3" json:"exactlyScore,omitempty"`
}

func (x *RoomUserSeqMessageContributor) Reset() {
	*x = RoomUserSeqMessageContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomUserSeqMessageContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomUserSeqMessageContributor) ProtoMessage() {}

func (x *RoomUserSeqMessageContributor) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomUserSeqMessageContributor.ProtoReflect.Descriptor instead.
func (*RoomUserSeqMessageContributor) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{7}
}

func (x *RoomUserSeqMessageContributor) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RoomUserSeqMessageContributor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RoomUserSeqMessageContributor) GetRank() uint64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RoomUserSeqMessageContributor) GetDelta() uint64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *RoomUserSeqMessageContributor) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *RoomUserSeqMessageContributor) GetScoreDescription() string {
	if x != nil {
		return x.ScoreDescription
	}
	return ""
}

func (x *RoomUserSeqMessageContributor) GetExactlyScore() string {
	if x != nil {
		return x.ExactlyScore
	}
	return ""
}

// 礼物消息
type GiftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common               *Common             `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                               // 公共信息
	GiftId               int64               `protobuf:"varint,2,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`                                                // 礼物ID
	FanTicketCount       string              `protobuf:"bytes,3,opt,name=fan_ticket_count,json=fanTicketCount,proto3" json:"fan_ticket_count,omitempty"`                       // 粉丝票数量
	GroupCount           uint64              `protobuf:"varint,4,opt,name=group_count,json=groupCount,proto3" json:"group_count,omitempty"`                                    // 组数
	RepeatCount          uint64              `protobuf:"varint,5,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"`                                 // 重复次数
	ComboCount           uint64              `protobuf:"varint,6,opt,name=combo_count,json=comboCount,proto3" json:"combo_count,omitempty"`                                    // 组合数
	User                 *User               `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`                                                                   // 用户信息
	ToUser               *User               `protobuf:"bytes,8,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`                                                 // 接收用户信息
	RepeatEnd            int32               `protobuf:"varint,9,opt,name=repeat_end,json=repeatEnd,proto3" json:"repeat_end,omitempty"`                                       // 重复结束标志
	TextEffect           *TextEffect         `protobuf:"bytes,10,opt,name=text_effect,json=textEffect,proto3" json:"text_effect,omitempty"`                                    // 文字效果
	GroupId              string              `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                             // 组ID
	IncomeTaskgifts      string              `protobuf:"bytes,12,opt,name=income_taskgifts,json=incomeTaskgifts,proto3" json:"income_taskgifts,omitempty"`                     // 收入任务礼物
	RoomFanTicketCount   string              `protobuf:"bytes,13,opt,name=room_fan_ticket_count,json=roomFanTicketCount,proto3" json:"room_fan_ticket_count,omitempty"`        // 房间粉丝票数量
	Priority             *GiftIMPriority     `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`                                                          // 礼物优先级
	Gift                 *GiftStruct         `protobuf:"bytes,15,opt,name=gift,proto3" json:"gift,omitempty"`                                                                  // 礼物结构
	LogId                string              `protobuf:"bytes,16,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`                                                   // 日志ID
	SendType             string              `protobuf:"bytes,17,opt,name=send_type,json=sendType,proto3" json:"send_type,omitempty"`                                          // 发送类型
	PublicAreaCommon     *PublicAreaCommon   `protobuf:"bytes,18,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`                // 公共区域信息
	TrayDisplayText      *Text               `protobuf:"bytes,19,opt,name=tray_display_text,json=trayDisplayText,proto3" json:"tray_display_text,omitempty"`                   // 托盘显示文本
	BannedDisplayEffects string              `protobuf:"bytes,20,opt,name=banned_display_effects,json=bannedDisplayEffects,proto3" json:"banned_display_effects,omitempty"`    // 禁止显示效果
	TrayInfo             *GiftTrayInfo       `protobuf:"bytes,21,opt,name=tray_info,json=trayInfo,proto3" json:"tray_info,omitempty"`                                          // 礼物托盘信息
	AssetEffectMixInfo   *AssetEffectMixInfo `protobuf:"bytes,24,opt,name=asset_effect_mix_info,json=assetEffectMixInfo,proto3" json:"asset_effect_mix_info,omitempty"`        // 资产效果混合信息
	DisplayForSelf       bool                `protobuf:"varint,25,opt,name=display_for_self,json=displayForSelf,proto3" json:"display_for_self,omitempty"`                     // 是否仅自己显示
	InteractGiftInfo     string              `protobuf:"bytes,26,opt,name=interact_gift_info,json=interactGiftInfo,proto3" json:"interact_gift_info,omitempty"`                // 交互礼物信息
	DiyItemInfo          string              `protobuf:"bytes,27,opt,name=diy_item_info,json=diyItemInfo,proto3" json:"diy_item_info,omitempty"`                               // 自定义项目信息
	MinAssetSet          int64               `protobuf:"varint,28,opt,name=min_asset_set,json=minAssetSet,proto3" json:"min_asset_set,omitempty"`                              // 最小资产集
	TotalCount           string              `protobuf:"bytes,29,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`                                    // 总数
	ClientGiftSource     int32               `protobuf:"varint,30,opt,name=client_gift_source,json=clientGiftSource,proto3" json:"client_gift_source,omitempty"`               // 客户端礼物来源
	AnchorGift           *AnchorGiftData     `protobuf:"bytes,31,opt,name=anchor_gift,json=anchorGift,proto3" json:"anchor_gift,omitempty"`                                    // 主持人礼物数据
	ToUserIds            []string            `protobuf:"bytes,32,rep,name=to_user_ids,json=toUserIds,proto3" json:"to_user_ids,omitempty"`                                     // 接收用户IDs列表
	SendTime             string              `protobuf:"bytes,33,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`                                          // 发送时间
	ForceDisplayEffects  string              `protobuf:"bytes,34,opt,name=force_display_effects,json=forceDisplayEffects,proto3" json:"force_display_effects,omitempty"`       // 强制显示效果
	TraceId              string              `protobuf:"bytes,35,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                                             // 追踪ID
	EffectDisplayTs      string              `protobuf:"bytes,36,opt,name=effect_display_ts,json=effectDisplayTs,proto3" json:"effect_display_ts,omitempty"`                   // 效果显示时间戳
	SendTogether         *SendTogether       `protobuf:"bytes,37,opt,name=send_together,json=sendTogether,proto3" json:"send_together,omitempty"`                              // 一起发送信息
	ExtraEffect          *ExtraEffect        `protobuf:"bytes,38,opt,name=extra_effect,json=extraEffect,proto3" json:"extra_effect,omitempty"`                                 // 额外效果信息
	RoomHotInfo          *RoomHotInfo        `protobuf:"bytes,39,opt,name=room_hot_info,json=roomHotInfo,proto3" json:"room_hot_info,omitempty"`                               // 房间热门信息
	GiftPlayParam        string              `protobuf:"bytes,40,opt,name=GiftPlayParam,proto3" json:"GiftPlayParam,omitempty"`                                                // 礼物播放参数
	MultiSendEffectLevel int32               `protobuf:"varint,41,opt,name=multi_send_effect_level,json=multiSendEffectLevel,proto3" json:"multi_send_effect_level,omitempty"` // 多发送效果等级
	SeriesGiftData       []*SeriesPlayGift   `protobuf:"bytes,42,rep,name=series_gift_data,json=seriesGiftData,proto3" json:"series_gift_data,omitempty"`                      // 系列礼物数据列表
}

func (x *GiftMessage) Reset() {
	*x = GiftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftMessage) ProtoMessage() {}

func (x *GiftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftMessage.ProtoReflect.Descriptor instead.
func (*GiftMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{8}
}

func (x *GiftMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GiftMessage) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *GiftMessage) GetFanTicketCount() string {
	if x != nil {
		return x.FanTicketCount
	}
	return ""
}

func (x *GiftMessage) GetGroupCount() uint64 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *GiftMessage) GetRepeatCount() uint64 {
	if x != nil {
		return x.RepeatCount
	}
	return 0
}

func (x *GiftMessage) GetComboCount() uint64 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

func (x *GiftMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GiftMessage) GetToUser() *User {
	if x != nil {
		return x.ToUser
	}
	return nil
}

func (x *GiftMessage) GetRepeatEnd() int32 {
	if x != nil {
		return x.RepeatEnd
	}
	return 0
}

func (x *GiftMessage) GetTextEffect() *TextEffect {
	if x != nil {
		return x.TextEffect
	}
	return nil
}

func (x *GiftMessage) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GiftMessage) GetIncomeTaskgifts() string {
	if x != nil {
		return x.IncomeTaskgifts
	}
	return ""
}

func (x *GiftMessage) GetRoomFanTicketCount() string {
	if x != nil {
		return x.RoomFanTicketCount
	}
	return ""
}

func (x *GiftMessage) GetPriority() *GiftIMPriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *GiftMessage) GetGift() *GiftStruct {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *GiftMessage) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *GiftMessage) GetSendType() string {
	if x != nil {
		return x.SendType
	}
	return ""
}

func (x *GiftMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *GiftMessage) GetTrayDisplayText() *Text {
	if x != nil {
		return x.TrayDisplayText
	}
	return nil
}

func (x *GiftMessage) GetBannedDisplayEffects() string {
	if x != nil {
		return x.BannedDisplayEffects
	}
	return ""
}

func (x *GiftMessage) GetTrayInfo() *GiftTrayInfo {
	if x != nil {
		return x.TrayInfo
	}
	return nil
}

func (x *GiftMessage) GetAssetEffectMixInfo() *AssetEffectMixInfo {
	if x != nil {
		return x.AssetEffectMixInfo
	}
	return nil
}

func (x *GiftMessage) GetDisplayForSelf() bool {
	if x != nil {
		return x.DisplayForSelf
	}
	return false
}

func (x *GiftMessage) GetInteractGiftInfo() string {
	if x != nil {
		return x.InteractGiftInfo
	}
	return ""
}

func (x *GiftMessage) GetDiyItemInfo() string {
	if x != nil {
		return x.DiyItemInfo
	}
	return ""
}

func (x *GiftMessage) GetMinAssetSet() int64 {
	if x != nil {
		return x.MinAssetSet
	}
	return 0
}

func (x *GiftMessage) GetTotalCount() string {
	if x != nil {
		return x.TotalCount
	}
	return ""
}

func (x *GiftMessage) GetClientGiftSource() int32 {
	if x != nil {
		return x.ClientGiftSource
	}
	return 0
}

func (x *GiftMessage) GetAnchorGift() *AnchorGiftData {
	if x != nil {
		return x.AnchorGift
	}
	return nil
}

func (x *GiftMessage) GetToUserIds() []string {
	if x != nil {
		return x.ToUserIds
	}
	return nil
}

func (x *GiftMessage) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *GiftMessage) GetForceDisplayEffects() string {
	if x != nil {
		return x.ForceDisplayEffects
	}
	return ""
}

func (x *GiftMessage) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *GiftMessage) GetEffectDisplayTs() string {
	if x != nil {
		return x.EffectDisplayTs
	}
	return ""
}

func (x *GiftMessage) GetSendTogether() *SendTogether {
	if x != nil {
		return x.SendTogether
	}
	return nil
}

func (x *GiftMessage) GetExtraEffect() *ExtraEffect {
	if x != nil {
		return x.ExtraEffect
	}
	return nil
}

func (x *GiftMessage) GetRoomHotInfo() *RoomHotInfo {
	if x != nil {
		return x.RoomHotInfo
	}
	return nil
}

func (x *GiftMessage) GetGiftPlayParam() string {
	if x != nil {
		return x.GiftPlayParam
	}
	return ""
}

func (x *GiftMessage) GetMultiSendEffectLevel() int32 {
	if x != nil {
		return x.MultiSendEffectLevel
	}
	return 0
}

func (x *GiftMessage) GetSeriesGiftData() []*SeriesPlayGift {
	if x != nil {
		return x.SeriesGiftData
	}
	return nil
}

type SeriesPlayGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftStruct         *GiftStruct         `protobuf:"bytes,1,opt,name=gift_struct,json=giftStruct,proto3" json:"gift_struct,omitempty"`                             // 礼物结构
	SeriesTrayInfo     *SeriesTrayInfo     `protobuf:"bytes,2,opt,name=series_tray_info,json=seriesTrayInfo,proto3" json:"series_tray_info,omitempty"`               // 系列托盘信息
	SendTogether       *SendTogether       `protobuf:"bytes,3,opt,name=send_together,json=sendTogether,proto3" json:"send_together,omitempty"`                       // 一起发送信息
	DiyItemInfo        string              `protobuf:"bytes,4,opt,name=diy_item_info,json=diyItemInfo,proto3" json:"diy_item_info,omitempty"`                        // 自定义项目信息
	AnchorGift         *AnchorGiftData     `protobuf:"bytes,5,opt,name=anchor_gift,json=anchorGift,proto3" json:"anchor_gift,omitempty"`                             // 主持人礼物数据
	AssetEffectMixInfo *AssetEffectMixInfo `protobuf:"bytes,6,opt,name=asset_effect_mix_info,json=assetEffectMixInfo,proto3" json:"asset_effect_mix_info,omitempty"` // 资产效果混合信息
}

func (x *SeriesPlayGift) Reset() {
	*x = SeriesPlayGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesPlayGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesPlayGift) ProtoMessage() {}

func (x *SeriesPlayGift) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesPlayGift.ProtoReflect.Descriptor instead.
func (*SeriesPlayGift) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{9}
}

func (x *SeriesPlayGift) GetGiftStruct() *GiftStruct {
	if x != nil {
		return x.GiftStruct
	}
	return nil
}

func (x *SeriesPlayGift) GetSeriesTrayInfo() *SeriesTrayInfo {
	if x != nil {
		return x.SeriesTrayInfo
	}
	return nil
}

func (x *SeriesPlayGift) GetSendTogether() *SendTogether {
	if x != nil {
		return x.SendTogether
	}
	return nil
}

func (x *SeriesPlayGift) GetDiyItemInfo() string {
	if x != nil {
		return x.DiyItemInfo
	}
	return ""
}

func (x *SeriesPlayGift) GetAnchorGift() *AnchorGiftData {
	if x != nil {
		return x.AnchorGift
	}
	return nil
}

func (x *SeriesPlayGift) GetAssetEffectMixInfo() *AssetEffectMixInfo {
	if x != nil {
		return x.AssetEffectMixInfo
	}
	return nil
}

type SeriesTrayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration   int64  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`                      // 持续时间
	StaticImg  *Image `protobuf:"bytes,2,opt,name=static_img,json=staticImg,proto3" json:"static_img,omitempty"`    // 静态图像信息
	DynamicImg *Image `protobuf:"bytes,3,opt,name=dynamic_img,json=dynamicImg,proto3" json:"dynamic_img,omitempty"` // 动态图像信息
}

func (x *SeriesTrayInfo) Reset() {
	*x = SeriesTrayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesTrayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesTrayInfo) ProtoMessage() {}

func (x *SeriesTrayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesTrayInfo.ProtoReflect.Descriptor instead.
func (*SeriesTrayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{10}
}

func (x *SeriesTrayInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SeriesTrayInfo) GetStaticImg() *Image {
	if x != nil {
		return x.StaticImg
	}
	return nil
}

func (x *SeriesTrayInfo) GetDynamicImg() *Image {
	if x != nil {
		return x.DynamicImg
	}
	return nil
}

type RoomHotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalHotStrategy int32 `protobuf:"varint,1,opt,name=local_hot_strategy,json=localHotStrategy,proto3" json:"local_hot_strategy,omitempty"` // 本地热门策略
	PublicAreaLevel  int32 `protobuf:"varint,2,opt,name=public_area_level,json=publicAreaLevel,proto3" json:"public_area_level,omitempty"`    // 公共区域等级
	GiftLevel        int32 `protobuf:"varint,3,opt,name=gift_level,json=giftLevel,proto3" json:"gift_level,omitempty"`                        // 礼物等级
}

func (x *RoomHotInfo) Reset() {
	*x = RoomHotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomHotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomHotInfo) ProtoMessage() {}

func (x *RoomHotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomHotInfo.ProtoReflect.Descriptor instead.
func (*RoomHotInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{11}
}

func (x *RoomHotInfo) GetLocalHotStrategy() int32 {
	if x != nil {
		return x.LocalHotStrategy
	}
	return 0
}

func (x *RoomHotInfo) GetPublicAreaLevel() int32 {
	if x != nil {
		return x.PublicAreaLevel
	}
	return 0
}

func (x *RoomHotInfo) GetGiftLevel() int32 {
	if x != nil {
		return x.GiftLevel
	}
	return 0
}

type ExtraEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId     string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`              // 资源ID
	DisplayForm int32  `protobuf:"varint,2,opt,name=display_form,json=displayForm,proto3" json:"display_form,omitempty"` // 显示形式
}

func (x *ExtraEffect) Reset() {
	*x = ExtraEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraEffect) ProtoMessage() {}

func (x *ExtraEffect) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraEffect.ProtoReflect.Descriptor instead.
func (*ExtraEffect) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{12}
}

func (x *ExtraEffect) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ExtraEffect) GetDisplayForm() int32 {
	if x != nil {
		return x.DisplayForm
	}
	return 0
}

type SendTogether struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // 唯一标识符
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始时间（int64字符串表示）
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 结束时间（int64字符串表示）
}

func (x *SendTogether) Reset() {
	*x = SendTogether{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTogether) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTogether) ProtoMessage() {}

func (x *SendTogether) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTogether.ProtoReflect.Descriptor instead.
func (*SendTogether) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{13}
}

func (x *SendTogether) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SendTogether) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SendTogether) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type AssetEffectMixInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一个重复的EffectMixImageInfo消息类型列表
	EffectMixImageInfos []*EffectMixImageInfo `protobuf:"bytes,1,rep,name=effect_mix_image_infos,json=effectMixImageInfos,proto3" json:"effect_mix_image_infos,omitempty"`
}

func (x *AssetEffectMixInfo) Reset() {
	*x = AssetEffectMixInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetEffectMixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetEffectMixInfo) ProtoMessage() {}

func (x *AssetEffectMixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetEffectMixInfo.ProtoReflect.Descriptor instead.
func (*AssetEffectMixInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{14}
}

func (x *AssetEffectMixInfo) GetEffectMixImageInfos() []*EffectMixImageInfo {
	if x != nil {
		return x.EffectMixImageInfos
	}
	return nil
}

type AnchorGiftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorDiyOriginImg *Image `protobuf:"bytes,1,opt,name=anchor_diy_origin_img,json=anchorDiyOriginImg,proto3" json:"anchor_diy_origin_img,omitempty"` // 主持人自定义原始图像
}

func (x *AnchorGiftData) Reset() {
	*x = AnchorGiftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorGiftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorGiftData) ProtoMessage() {}

func (x *AnchorGiftData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorGiftData.ProtoReflect.Descriptor instead.
func (*AnchorGiftData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{15}
}

func (x *AnchorGiftData) GetAnchorDiyOriginImg() *Image {
	if x != nil {
		return x.AnchorDiyOriginImg
	}
	return nil
}

type EffectMixImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageKey string `protobuf:"bytes,1,opt,name=image_key,json=imageKey,proto3" json:"image_key,omitempty"` // 图片关键字
	MixImage *Image `protobuf:"bytes,2,opt,name=mix_image,json=mixImage,proto3" json:"mix_image,omitempty"` // 混合图像信息
}

func (x *EffectMixImageInfo) Reset() {
	*x = EffectMixImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectMixImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectMixImageInfo) ProtoMessage() {}

func (x *EffectMixImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectMixImageInfo.ProtoReflect.Descriptor instead.
func (*EffectMixImageInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{16}
}

func (x *EffectMixImageInfo) GetImageKey() string {
	if x != nil {
		return x.ImageKey
	}
	return ""
}

func (x *EffectMixImageInfo) GetMixImage() *Image {
	if x != nil {
		return x.MixImage
	}
	return nil
}

type GiftTrayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrayDisplayText *Text           `protobuf:"bytes,1,opt,name=tray_display_text,json=trayDisplayText,proto3" json:"tray_display_text,omitempty"`    // 托盘显示文本
	TrayBaseImg     *Image          `protobuf:"bytes,2,opt,name=tray_base_img,json=trayBaseImg,proto3" json:"tray_base_img,omitempty"`                // 托盘基础图像
	TrayHeadImg     *Image          `protobuf:"bytes,3,opt,name=tray_head_img,json=trayHeadImg,proto3" json:"tray_head_img,omitempty"`                // 托盘头部图像
	TrayRightImg    *Image          `protobuf:"bytes,4,opt,name=tray_right_img,json=trayRightImg,proto3" json:"tray_right_img,omitempty"`             // 托盘右侧图像
	TrayLevel       string          `protobuf:"bytes,5,opt,name=tray_level,json=trayLevel,proto3" json:"tray_level,omitempty"`                        // 托盘等级
	TrayDynamicImg  *Image          `protobuf:"bytes,6,opt,name=tray_dynamic_img,json=trayDynamicImg,proto3" json:"tray_dynamic_img,omitempty"`       // 托盘动态图像
	TraySchemaUrl   string          `protobuf:"bytes,7,opt,name=tray_schema_url,json=traySchemaUrl,proto3" json:"tray_schema_url,omitempty"`          // 托盘模式URL
	TrayType        int32           `protobuf:"varint,8,opt,name=tray_type,json=trayType,proto3" json:"tray_type,omitempty"`                          // 托盘类型
	TrayBaseImgV2   *Image          `protobuf:"bytes,9,opt,name=tray_base_img_v2,json=trayBaseImgV2,proto3" json:"tray_base_img_v2,omitempty"`        // 托盘基础图像v2
	TrayRightImgV2  *Image          `protobuf:"bytes,10,opt,name=tray_right_img_v2,json=trayRightImgV2,proto3" json:"tray_right_img_v2,omitempty"`    // 托盘右侧图像v2
	UseHighLayer    bool            `protobuf:"varint,11,opt,name=use_high_layer,json=useHighLayer,proto3" json:"use_high_layer,omitempty"`           // 是否使用高層
	Duration        string          `protobuf:"bytes,12,opt,name=duration,proto3" json:"duration,omitempty"`                                          // 持续时间
	Toast           string          `protobuf:"bytes,13,opt,name=toast,proto3" json:"toast,omitempty"`                                                // 弹出提示
	TraySlideRate   int32           `protobuf:"varint,14,opt,name=tray_slide_rate,json=traySlideRate,proto3" json:"tray_slide_rate,omitempty"`        // 托盘滑动速率
	TrayPreEffect   *TrayPreEffect  `protobuf:"bytes,15,opt,name=tray_pre_effect,json=trayPreEffect,proto3" json:"tray_pre_effect,omitempty"`         // 托盘前效果
	TrayPostEffect  *TrayPostEffect `protobuf:"bytes,16,opt,name=tray_post_effect,json=trayPostEffect,proto3" json:"tray_post_effect,omitempty"`      // 托盘后效果
	OriginGiftId    string          `protobuf:"bytes,17,opt,name=origin_gift_id,json=originGiftId,proto3" json:"origin_gift_id,omitempty"`            // 原始礼物ID
	BuffLevel       string          `protobuf:"bytes,18,opt,name=buff_level,json=buffLevel,proto3" json:"buff_level,omitempty"`                       // 增益等级
	ToolbarCardName string          `protobuf:"bytes,19,opt,name=toolbar_card_name,json=toolbarCardName,proto3" json:"toolbar_card_name,omitempty"`   // 工具栏卡片名称
	TrayBaseWebpImg *Image          `protobuf:"bytes,20,opt,name=tray_base_webp_img,json=trayBaseWebpImg,proto3" json:"tray_base_webp_img,omitempty"` // 托盘基础Webp图像
	TrayGroupMode   int32           `protobuf:"varint,21,opt,name=tray_group_mode,json=trayGroupMode,proto3" json:"tray_group_mode,omitempty"`        // 托盘组模式
}

func (x *GiftTrayInfo) Reset() {
	*x = GiftTrayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTrayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTrayInfo) ProtoMessage() {}

func (x *GiftTrayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTrayInfo.ProtoReflect.Descriptor instead.
func (*GiftTrayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{17}
}

func (x *GiftTrayInfo) GetTrayDisplayText() *Text {
	if x != nil {
		return x.TrayDisplayText
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayBaseImg() *Image {
	if x != nil {
		return x.TrayBaseImg
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayHeadImg() *Image {
	if x != nil {
		return x.TrayHeadImg
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayRightImg() *Image {
	if x != nil {
		return x.TrayRightImg
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayLevel() string {
	if x != nil {
		return x.TrayLevel
	}
	return ""
}

func (x *GiftTrayInfo) GetTrayDynamicImg() *Image {
	if x != nil {
		return x.TrayDynamicImg
	}
	return nil
}

func (x *GiftTrayInfo) GetTraySchemaUrl() string {
	if x != nil {
		return x.TraySchemaUrl
	}
	return ""
}

func (x *GiftTrayInfo) GetTrayType() int32 {
	if x != nil {
		return x.TrayType
	}
	return 0
}

func (x *GiftTrayInfo) GetTrayBaseImgV2() *Image {
	if x != nil {
		return x.TrayBaseImgV2
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayRightImgV2() *Image {
	if x != nil {
		return x.TrayRightImgV2
	}
	return nil
}

func (x *GiftTrayInfo) GetUseHighLayer() bool {
	if x != nil {
		return x.UseHighLayer
	}
	return false
}

func (x *GiftTrayInfo) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *GiftTrayInfo) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

func (x *GiftTrayInfo) GetTraySlideRate() int32 {
	if x != nil {
		return x.TraySlideRate
	}
	return 0
}

func (x *GiftTrayInfo) GetTrayPreEffect() *TrayPreEffect {
	if x != nil {
		return x.TrayPreEffect
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayPostEffect() *TrayPostEffect {
	if x != nil {
		return x.TrayPostEffect
	}
	return nil
}

func (x *GiftTrayInfo) GetOriginGiftId() string {
	if x != nil {
		return x.OriginGiftId
	}
	return ""
}

func (x *GiftTrayInfo) GetBuffLevel() string {
	if x != nil {
		return x.BuffLevel
	}
	return ""
}

func (x *GiftTrayInfo) GetToolbarCardName() string {
	if x != nil {
		return x.ToolbarCardName
	}
	return ""
}

func (x *GiftTrayInfo) GetTrayBaseWebpImg() *Image {
	if x != nil {
		return x.TrayBaseWebpImg
	}
	return nil
}

func (x *GiftTrayInfo) GetTrayGroupMode() int32 {
	if x != nil {
		return x.TrayGroupMode
	}
	return 0
}

// TrayPostEffect 主消息
type TrayPostEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostEffectImg    *Image            `protobuf:"bytes,1,opt,name=post_effect_img,json=postEffectImg,proto3" json:"post_effect_img,omitempty"`                                                                                        // 后处理效果的图像
	PostSchema       string            `protobuf:"bytes,2,opt,name=post_schema,json=postSchema,proto3" json:"post_schema,omitempty"`                                                                                                   // 后处理效果的 schema
	PostDuration     int64             `protobuf:"varint,3,opt,name=post_duration,json=postDuration,proto3" json:"post_duration,omitempty"`                                                                                            // 后处理效果的持续时间
	PostEffectSource int32             `protobuf:"varint,4,opt,name=post_effect_source,json=postEffectSource,proto3" json:"post_effect_source,omitempty"`                                                                              // 后处理效果的来源
	SubTitle         *Text             `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                                                                                         // 副标题文本
	ShowType         int32             `protobuf:"varint,6,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`                                                                                                        // 显示类型
	EventTracking    map[string]string `protobuf:"bytes,10,rep,name=event_tracking,json=eventTracking,proto3" json:"event_tracking,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 事件跟踪信息
}

func (x *TrayPostEffect) Reset() {
	*x = TrayPostEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrayPostEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrayPostEffect) ProtoMessage() {}

func (x *TrayPostEffect) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrayPostEffect.ProtoReflect.Descriptor instead.
func (*TrayPostEffect) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{18}
}

func (x *TrayPostEffect) GetPostEffectImg() *Image {
	if x != nil {
		return x.PostEffectImg
	}
	return nil
}

func (x *TrayPostEffect) GetPostSchema() string {
	if x != nil {
		return x.PostSchema
	}
	return ""
}

func (x *TrayPostEffect) GetPostDuration() int64 {
	if x != nil {
		return x.PostDuration
	}
	return 0
}

func (x *TrayPostEffect) GetPostEffectSource() int32 {
	if x != nil {
		return x.PostEffectSource
	}
	return 0
}

func (x *TrayPostEffect) GetSubTitle() *Text {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *TrayPostEffect) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *TrayPostEffect) GetEventTracking() map[string]string {
	if x != nil {
		return x.EventTracking
	}
	return nil
}

type TrayPreEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreEffectImg    *Image `protobuf:"bytes,1,opt,name=pre_effect_img,json=preEffectImg,proto3" json:"pre_effect_img,omitempty"`           // 预效果图像
	TrayStartTime   string `protobuf:"bytes,2,opt,name=tray_start_time,json=trayStartTime,proto3" json:"tray_start_time,omitempty"`        // 托盘开始时间（int64字符串表示）
	TrayRipple      *Image `protobuf:"bytes,3,opt,name=tray_ripple,json=trayRipple,proto3" json:"tray_ripple,omitempty"`                   // 托盘涟漪效果图像
	PreSchema       string `protobuf:"bytes,4,opt,name=pre_schema,json=preSchema,proto3" json:"pre_schema,omitempty"`                      // 预效果模式
	PreDuration     string `protobuf:"bytes,5,opt,name=pre_duration,json=preDuration,proto3" json:"pre_duration,omitempty"`                // 预效果持续时间（int64字符串表示）
	PreEffectSource int32  `protobuf:"varint,6,opt,name=pre_effect_source,json=preEffectSource,proto3" json:"pre_effect_source,omitempty"` // 预效果来源
	Extra           string `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`                                               // 额外信息
}

func (x *TrayPreEffect) Reset() {
	*x = TrayPreEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrayPreEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrayPreEffect) ProtoMessage() {}

func (x *TrayPreEffect) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrayPreEffect.ProtoReflect.Descriptor instead.
func (*TrayPreEffect) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{19}
}

func (x *TrayPreEffect) GetPreEffectImg() *Image {
	if x != nil {
		return x.PreEffectImg
	}
	return nil
}

func (x *TrayPreEffect) GetTrayStartTime() string {
	if x != nil {
		return x.TrayStartTime
	}
	return ""
}

func (x *TrayPreEffect) GetTrayRipple() *Image {
	if x != nil {
		return x.TrayRipple
	}
	return nil
}

func (x *TrayPreEffect) GetPreSchema() string {
	if x != nil {
		return x.PreSchema
	}
	return ""
}

func (x *TrayPreEffect) GetPreDuration() string {
	if x != nil {
		return x.PreDuration
	}
	return ""
}

func (x *TrayPreEffect) GetPreEffectSource() int32 {
	if x != nil {
		return x.PreEffectSource
	}
	return 0
}

func (x *TrayPreEffect) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GiftStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Describe string `protobuf:"bytes,2,opt,name=describe,proto3" json:"describe,omitempty"`
	Notify   bool   `protobuf:"varint,3,opt,name=notify,proto3" json:"notify,omitempty"`
	Duration uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Id       uint64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// GiftStructFansClubInfo fansclubInfo = 6;
	ForLinkmic         bool   `protobuf:"varint,7,opt,name=forLinkmic,proto3" json:"forLinkmic,omitempty"`
	Doodle             bool   `protobuf:"varint,8,opt,name=doodle,proto3" json:"doodle,omitempty"`
	ForFansclub        bool   `protobuf:"varint,9,opt,name=forFansclub,proto3" json:"forFansclub,omitempty"`
	Combo              bool   `protobuf:"varint,10,opt,name=combo,proto3" json:"combo,omitempty"`
	Type               uint32 `protobuf:"varint,11,opt,name=type,proto3" json:"type,omitempty"`
	DiamondCount       uint32 `protobuf:"varint,12,opt,name=diamondCount,proto3" json:"diamondCount,omitempty"`
	IsDisplayedOnPanel bool   `protobuf:"varint,13,opt,name=isDisplayedOnPanel,proto3" json:"isDisplayedOnPanel,omitempty"`
	PrimaryEffectId    uint64 `protobuf:"varint,14,opt,name=primaryEffectId,proto3" json:"primaryEffectId,omitempty"`
	GiftLabelIcon      *Image `protobuf:"bytes,15,opt,name=giftLabelIcon,proto3" json:"giftLabelIcon,omitempty"`
	Name               string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Region             string `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Manual             string `protobuf:"bytes,18,opt,name=manual,proto3" json:"manual,omitempty"`
	ForCustom          bool   `protobuf:"varint,19,opt,name=forCustom,proto3" json:"forCustom,omitempty"`
	// specialEffectsMap = 20;
	Icon       *Image `protobuf:"bytes,21,opt,name=icon,proto3" json:"icon,omitempty"`
	ActionType uint32 `protobuf:"varint,22,opt,name=actionType,proto3" json:"actionType,omitempty"` // fixme 后面的就不写了还有几十个属性
}

func (x *GiftStruct) Reset() {
	*x = GiftStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct) ProtoMessage() {}

func (x *GiftStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct.ProtoReflect.Descriptor instead.
func (*GiftStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{20}
}

func (x *GiftStruct) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GiftStruct) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GiftStruct) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *GiftStruct) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GiftStruct) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftStruct) GetForLinkmic() bool {
	if x != nil {
		return x.ForLinkmic
	}
	return false
}

func (x *GiftStruct) GetDoodle() bool {
	if x != nil {
		return x.Doodle
	}
	return false
}

func (x *GiftStruct) GetForFansclub() bool {
	if x != nil {
		return x.ForFansclub
	}
	return false
}

func (x *GiftStruct) GetCombo() bool {
	if x != nil {
		return x.Combo
	}
	return false
}

func (x *GiftStruct) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GiftStruct) GetDiamondCount() uint32 {
	if x != nil {
		return x.DiamondCount
	}
	return 0
}

func (x *GiftStruct) GetIsDisplayedOnPanel() bool {
	if x != nil {
		return x.IsDisplayedOnPanel
	}
	return false
}

func (x *GiftStruct) GetPrimaryEffectId() uint64 {
	if x != nil {
		return x.PrimaryEffectId
	}
	return 0
}

func (x *GiftStruct) GetGiftLabelIcon() *Image {
	if x != nil {
		return x.GiftLabelIcon
	}
	return nil
}

func (x *GiftStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiftStruct) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GiftStruct) GetManual() string {
	if x != nil {
		return x.Manual
	}
	return ""
}

func (x *GiftStruct) GetForCustom() bool {
	if x != nil {
		return x.ForCustom
	}
	return false
}

func (x *GiftStruct) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GiftStruct) GetActionType() uint32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

type GiftIMPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueSizesList    []uint64 `protobuf:"varint,1,rep,packed,name=queueSizesList,proto3" json:"queueSizesList,omitempty"`
	SelfQueuePriority uint64   `protobuf:"varint,2,opt,name=selfQueuePriority,proto3" json:"selfQueuePriority,omitempty"`
	Priority          uint64   `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *GiftIMPriority) Reset() {
	*x = GiftIMPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftIMPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftIMPriority) ProtoMessage() {}

func (x *GiftIMPriority) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftIMPriority.ProtoReflect.Descriptor instead.
func (*GiftIMPriority) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{21}
}

func (x *GiftIMPriority) GetQueueSizesList() []uint64 {
	if x != nil {
		return x.QueueSizesList
	}
	return nil
}

func (x *GiftIMPriority) GetSelfQueuePriority() uint64 {
	if x != nil {
		return x.SelfQueuePriority
	}
	return 0
}

func (x *GiftIMPriority) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type TextEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portrait  *TextEffectDetail `protobuf:"bytes,1,opt,name=portrait,proto3" json:"portrait,omitempty"`
	Landscape *TextEffectDetail `protobuf:"bytes,2,opt,name=landscape,proto3" json:"landscape,omitempty"`
}

func (x *TextEffect) Reset() {
	*x = TextEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEffect) ProtoMessage() {}

func (x *TextEffect) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEffect.ProtoReflect.Descriptor instead.
func (*TextEffect) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{22}
}

func (x *TextEffect) GetPortrait() *TextEffectDetail {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *TextEffect) GetLandscape() *TextEffectDetail {
	if x != nil {
		return x.Landscape
	}
	return nil
}

type TextEffectDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         *Text  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextFontSize uint32 `protobuf:"varint,2,opt,name=textFontSize,proto3" json:"textFontSize,omitempty"`
	Background   *Image `protobuf:"bytes,3,opt,name=background,proto3" json:"background,omitempty"`
	Start        uint32 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	Duration     uint32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	X            uint32 `protobuf:"varint,6,opt,name=x,proto3" json:"x,omitempty"`
	Y            uint32 `protobuf:"varint,7,opt,name=y,proto3" json:"y,omitempty"`
	Width        uint32 `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height       uint32 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	ShadowDx     uint32 `protobuf:"varint,10,opt,name=shadowDx,proto3" json:"shadowDx,omitempty"`
	ShadowDy     uint32 `protobuf:"varint,11,opt,name=shadowDy,proto3" json:"shadowDy,omitempty"`
	ShadowRadius uint32 `protobuf:"varint,12,opt,name=shadowRadius,proto3" json:"shadowRadius,omitempty"`
	ShadowColor  string `protobuf:"bytes,13,opt,name=shadowColor,proto3" json:"shadowColor,omitempty"`
	StrokeColor  string `protobuf:"bytes,14,opt,name=strokeColor,proto3" json:"strokeColor,omitempty"`
	StrokeWidth  uint32 `protobuf:"varint,15,opt,name=strokeWidth,proto3" json:"strokeWidth,omitempty"`
}

func (x *TextEffectDetail) Reset() {
	*x = TextEffectDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEffectDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEffectDetail) ProtoMessage() {}

func (x *TextEffectDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEffectDetail.ProtoReflect.Descriptor instead.
func (*TextEffectDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{23}
}

func (x *TextEffectDetail) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextEffectDetail) GetTextFontSize() uint32 {
	if x != nil {
		return x.TextFontSize
	}
	return 0
}

func (x *TextEffectDetail) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *TextEffectDetail) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TextEffectDetail) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TextEffectDetail) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TextEffectDetail) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TextEffectDetail) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TextEffectDetail) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TextEffectDetail) GetShadowDx() uint32 {
	if x != nil {
		return x.ShadowDx
	}
	return 0
}

func (x *TextEffectDetail) GetShadowDy() uint32 {
	if x != nil {
		return x.ShadowDy
	}
	return 0
}

func (x *TextEffectDetail) GetShadowRadius() uint32 {
	if x != nil {
		return x.ShadowRadius
	}
	return 0
}

func (x *TextEffectDetail) GetShadowColor() string {
	if x != nil {
		return x.ShadowColor
	}
	return ""
}

func (x *TextEffectDetail) GetStrokeColor() string {
	if x != nil {
		return x.StrokeColor
	}
	return ""
}

func (x *TextEffectDetail) GetStrokeWidth() uint32 {
	if x != nil {
		return x.StrokeWidth
	}
	return 0
}

// MemberMessage 主消息
type MemberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                  *Common                                `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                                                                                                                             // 通用信息
	User                    *User                                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                                                                                                                                                 // 用户信息
	MemberCount             int64                                  `protobuf:"varint,3,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`                                                                                                                               // 成员数量
	Operator                *User                                  `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                                                                                         // 操作者信息
	IsSetToAdmin            bool                                   `protobuf:"varint,5,opt,name=is_set_to_admin,json=isSetToAdmin,proto3" json:"is_set_to_admin,omitempty"`                                                                                                                        // 是否设置为管理员
	IsTopUser               bool                                   `protobuf:"varint,6,opt,name=is_top_user,json=isTopUser,proto3" json:"is_top_user,omitempty"`                                                                                                                                   // 是否为顶级用户
	RankScore               int64                                  `protobuf:"varint,7,opt,name=rank_score,json=rankScore,proto3" json:"rank_score,omitempty"`                                                                                                                                     // 排名得分
	TopUserNo               int64                                  `protobuf:"varint,8,opt,name=top_user_no,json=topUserNo,proto3" json:"top_user_no,omitempty"`                                                                                                                                   // 顶级用户编号
	EnterType               int64                                  `protobuf:"varint,9,opt,name=enter_type,json=enterType,proto3" json:"enter_type,omitempty"`                                                                                                                                     // 进入类型
	Action                  int64                                  `protobuf:"varint,10,opt,name=action,proto3" json:"action,omitempty"`                                                                                                                                                           // 动作
	ActionDescription       string                                 `protobuf:"bytes,11,opt,name=action_description,json=actionDescription,proto3" json:"action_description,omitempty"`                                                                                                             // 动作描述
	UserId                  int64                                  `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                                                                                             // 用户 ID
	EffectConfig            *MemberMessage_EffectConfig            `protobuf:"bytes,13,opt,name=effect_config,json=effectConfig,proto3" json:"effect_config,omitempty"`                                                                                                                            // 效果配置
	PopStr                  string                                 `protobuf:"bytes,14,opt,name=pop_str,json=popStr,proto3" json:"pop_str,omitempty"`                                                                                                                                              // 弹出字符串
	EnterEffectConfig       *MemberMessage_EffectConfig            `protobuf:"bytes,15,opt,name=enter_effect_config,json=enterEffectConfig,proto3" json:"enter_effect_config,omitempty"`                                                                                                           // 进入效果配置
	BackgroundImage         *Image                                 `protobuf:"bytes,16,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`                                                                                                                   // 背景图像
	BackgroundImageV2       *Image                                 `protobuf:"bytes,17,opt,name=background_image_v2,json=backgroundImageV2,proto3" json:"background_image_v2,omitempty"`                                                                                                           // 背景图像 V2
	AnchorDisplayText       *Text                                  `protobuf:"bytes,18,opt,name=anchor_display_text,json=anchorDisplayText,proto3" json:"anchor_display_text,omitempty"`                                                                                                           // 主播显示文本
	PublicAreaCommon        *PublicAreaCommon                      `protobuf:"bytes,19,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`                                                                                                              // 公共区域通用信息
	UserEnterTipType        int64                                  `protobuf:"varint,20,opt,name=user_enter_tip_type,json=userEnterTipType,proto3" json:"user_enter_tip_type,omitempty"`                                                                                                           // 用户进入提示类型
	AnchorEnterTipType      int64                                  `protobuf:"varint,21,opt,name=anchor_enter_tip_type,json=anchorEnterTipType,proto3" json:"anchor_enter_tip_type,omitempty"`                                                                                                     // 主播进入提示类型
	BuriedPoint             map[string]string                      `protobuf:"bytes,22,rep,name=buried_point,json=buriedPoint,proto3" json:"buried_point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                       // 埋点信息
	AlternativeEffectConfig map[string]*MemberMessage_EffectConfig `protobuf:"bytes,23,rep,name=alternative_effect_config,json=alternativeEffectConfig,proto3" json:"alternative_effect_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 替代效果配置
	PicoEnterEffectConfig   *MemberMessage_PicoEffectConfig        `protobuf:"bytes,24,opt,name=pico_enter_effect_config,json=picoEnterEffectConfig,proto3" json:"pico_enter_effect_config,omitempty"`                                                                                             // Pico 进入效果配置
	UserOpenId              string                                 `protobuf:"bytes,5000,opt,name=user_open_id,json=userOpenId,proto3" json:"user_open_id,omitempty"`                                                                                                                              // 用户开放 ID
}

func (x *MemberMessage) Reset() {
	*x = MemberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberMessage) ProtoMessage() {}

func (x *MemberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberMessage.ProtoReflect.Descriptor instead.
func (*MemberMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{24}
}

func (x *MemberMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MemberMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MemberMessage) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *MemberMessage) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *MemberMessage) GetIsSetToAdmin() bool {
	if x != nil {
		return x.IsSetToAdmin
	}
	return false
}

func (x *MemberMessage) GetIsTopUser() bool {
	if x != nil {
		return x.IsTopUser
	}
	return false
}

func (x *MemberMessage) GetRankScore() int64 {
	if x != nil {
		return x.RankScore
	}
	return 0
}

func (x *MemberMessage) GetTopUserNo() int64 {
	if x != nil {
		return x.TopUserNo
	}
	return 0
}

func (x *MemberMessage) GetEnterType() int64 {
	if x != nil {
		return x.EnterType
	}
	return 0
}

func (x *MemberMessage) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *MemberMessage) GetActionDescription() string {
	if x != nil {
		return x.ActionDescription
	}
	return ""
}

func (x *MemberMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberMessage) GetEffectConfig() *MemberMessage_EffectConfig {
	if x != nil {
		return x.EffectConfig
	}
	return nil
}

func (x *MemberMessage) GetPopStr() string {
	if x != nil {
		return x.PopStr
	}
	return ""
}

func (x *MemberMessage) GetEnterEffectConfig() *MemberMessage_EffectConfig {
	if x != nil {
		return x.EnterEffectConfig
	}
	return nil
}

func (x *MemberMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *MemberMessage) GetBackgroundImageV2() *Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *MemberMessage) GetAnchorDisplayText() *Text {
	if x != nil {
		return x.AnchorDisplayText
	}
	return nil
}

func (x *MemberMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *MemberMessage) GetUserEnterTipType() int64 {
	if x != nil {
		return x.UserEnterTipType
	}
	return 0
}

func (x *MemberMessage) GetAnchorEnterTipType() int64 {
	if x != nil {
		return x.AnchorEnterTipType
	}
	return 0
}

func (x *MemberMessage) GetBuriedPoint() map[string]string {
	if x != nil {
		return x.BuriedPoint
	}
	return nil
}

func (x *MemberMessage) GetAlternativeEffectConfig() map[string]*MemberMessage_EffectConfig {
	if x != nil {
		return x.AlternativeEffectConfig
	}
	return nil
}

func (x *MemberMessage) GetPicoEnterEffectConfig() *MemberMessage_PicoEffectConfig {
	if x != nil {
		return x.PicoEnterEffectConfig
	}
	return nil
}

func (x *MemberMessage) GetUserOpenId() string {
	if x != nil {
		return x.UserOpenId
	}
	return ""
}

type PublicAreaCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLabel                *Image             `protobuf:"bytes,1,opt,name=user_label,json=userLabel,proto3" json:"user_label,omitempty"`
	UserConsumeInRoom        string             `protobuf:"bytes,2,opt,name=user_consume_in_room,json=userConsumeInRoom,proto3" json:"user_consume_in_room,omitempty"`
	UserSendGiftCntInRoom    string             `protobuf:"bytes,3,opt,name=user_send_gift_cnt_in_room,json=userSendGiftCntInRoom,proto3" json:"user_send_gift_cnt_in_room,omitempty"`
	IndividualPriority       string             `protobuf:"bytes,4,opt,name=individual_priority,json=individualPriority,proto3" json:"individual_priority,omitempty"`
	SupportPin               string             `protobuf:"bytes,6,opt,name=support_pin,json=supportPin,proto3" json:"support_pin,omitempty"`
	SuffixText               *SuffixText        `protobuf:"bytes,7,opt,name=suffix_text,json=suffixText,proto3" json:"suffix_text,omitempty"`
	ImAction                 int32              `protobuf:"varint,8,opt,name=im_action,json=imAction,proto3" json:"im_action,omitempty"`
	ForbiddenProfile         bool               `protobuf:"varint,9,opt,name=forbidden_profile,json=forbiddenProfile,proto3" json:"forbidden_profile,omitempty"`
	ReplyResp                *ChatReplyRespInfo `protobuf:"bytes,10,opt,name=reply_resp,json=replyResp,proto3" json:"reply_resp,omitempty"`
	IsFeatured               string             `protobuf:"bytes,12,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	NeedFilterDisplay        bool               `protobuf:"varint,13,opt,name=need_filter_display,json=needFilterDisplay,proto3" json:"need_filter_display,omitempty"`
	IndividualStrategyResult map[string]string  `protobuf:"bytes,5,rep,name=individual_strategy_result,json=individualStrategyResult,proto3" json:"individual_strategy_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrackingParams           map[string]string  `protobuf:"bytes,11,rep,name=tracking_params,json=trackingParams,proto3" json:"tracking_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublicAreaCommon) Reset() {
	*x = PublicAreaCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicAreaCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicAreaCommon) ProtoMessage() {}

func (x *PublicAreaCommon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicAreaCommon.ProtoReflect.Descriptor instead.
func (*PublicAreaCommon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{25}
}

func (x *PublicAreaCommon) GetUserLabel() *Image {
	if x != nil {
		return x.UserLabel
	}
	return nil
}

func (x *PublicAreaCommon) GetUserConsumeInRoom() string {
	if x != nil {
		return x.UserConsumeInRoom
	}
	return ""
}

func (x *PublicAreaCommon) GetUserSendGiftCntInRoom() string {
	if x != nil {
		return x.UserSendGiftCntInRoom
	}
	return ""
}

func (x *PublicAreaCommon) GetIndividualPriority() string {
	if x != nil {
		return x.IndividualPriority
	}
	return ""
}

func (x *PublicAreaCommon) GetSupportPin() string {
	if x != nil {
		return x.SupportPin
	}
	return ""
}

func (x *PublicAreaCommon) GetSuffixText() *SuffixText {
	if x != nil {
		return x.SuffixText
	}
	return nil
}

func (x *PublicAreaCommon) GetImAction() int32 {
	if x != nil {
		return x.ImAction
	}
	return 0
}

func (x *PublicAreaCommon) GetForbiddenProfile() bool {
	if x != nil {
		return x.ForbiddenProfile
	}
	return false
}

func (x *PublicAreaCommon) GetReplyResp() *ChatReplyRespInfo {
	if x != nil {
		return x.ReplyResp
	}
	return nil
}

func (x *PublicAreaCommon) GetIsFeatured() string {
	if x != nil {
		return x.IsFeatured
	}
	return ""
}

func (x *PublicAreaCommon) GetNeedFilterDisplay() bool {
	if x != nil {
		return x.NeedFilterDisplay
	}
	return false
}

func (x *PublicAreaCommon) GetIndividualStrategyResult() map[string]string {
	if x != nil {
		return x.IndividualStrategyResult
	}
	return nil
}

func (x *PublicAreaCommon) GetTrackingParams() map[string]string {
	if x != nil {
		return x.TrackingParams
	}
	return nil
}

type SuffixText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType uint64 `protobuf:"varint,1,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	Text    *Text  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SuffixText) Reset() {
	*x = SuffixText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuffixText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuffixText) ProtoMessage() {}

func (x *SuffixText) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuffixText.ProtoReflect.Descriptor instead.
func (*SuffixText) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{26}
}

func (x *SuffixText) GetBizType() uint64 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *SuffixText) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type ChatReplyRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyMsgId      uint64 `protobuf:"varint,1,opt,name=reply_msg_id,json=replyMsgId,proto3" json:"reply_msg_id,omitempty"`
	ReplyId         uint64 `protobuf:"varint,2,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	ReplyText       *Text  `protobuf:"bytes,3,opt,name=reply_text,json=replyText,proto3" json:"reply_text,omitempty"`
	ReplyUid        uint64 `protobuf:"varint,4,opt,name=reply_uid,json=replyUid,proto3" json:"reply_uid,omitempty"`
	ReplyWebcastUid string `protobuf:"bytes,5,opt,name=reply_webcast_uid,json=replyWebcastUid,proto3" json:"reply_webcast_uid,omitempty"`
}

func (x *ChatReplyRespInfo) Reset() {
	*x = ChatReplyRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatReplyRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReplyRespInfo) ProtoMessage() {}

func (x *ChatReplyRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReplyRespInfo.ProtoReflect.Descriptor instead.
func (*ChatReplyRespInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{27}
}

func (x *ChatReplyRespInfo) GetReplyMsgId() uint64 {
	if x != nil {
		return x.ReplyMsgId
	}
	return 0
}

func (x *ChatReplyRespInfo) GetReplyId() uint64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *ChatReplyRespInfo) GetReplyText() *Text {
	if x != nil {
		return x.ReplyText
	}
	return nil
}

func (x *ChatReplyRespInfo) GetReplyUid() uint64 {
	if x != nil {
		return x.ReplyUid
	}
	return 0
}

func (x *ChatReplyRespInfo) GetReplyWebcastUid() string {
	if x != nil {
		return x.ReplyWebcastUid
	}
	return ""
}

type EffectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     uint64            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Icon                     *Image            `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	AvatarPos                uint64            `protobuf:"varint,3,opt,name=avatarPos,proto3" json:"avatarPos,omitempty"`
	Text                     *Text             `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	TextIcon                 *Image            `protobuf:"bytes,5,opt,name=textIcon,proto3" json:"textIcon,omitempty"`
	StayTime                 uint32            `protobuf:"varint,6,opt,name=stayTime,proto3" json:"stayTime,omitempty"`
	AnimAssetId              uint64            `protobuf:"varint,7,opt,name=animAssetId,proto3" json:"animAssetId,omitempty"`
	Badge                    *Image            `protobuf:"bytes,8,opt,name=badge,proto3" json:"badge,omitempty"`
	FlexSettingArrayList     []uint64          `protobuf:"varint,9,rep,packed,name=flexSettingArrayList,proto3" json:"flexSettingArrayList,omitempty"`
	TextIconOverlay          *Image            `protobuf:"bytes,10,opt,name=textIconOverlay,proto3" json:"textIconOverlay,omitempty"`
	AnimatedBadge            *Image            `protobuf:"bytes,11,opt,name=animatedBadge,proto3" json:"animatedBadge,omitempty"`
	HasSweepLight            bool              `protobuf:"varint,12,opt,name=hasSweepLight,proto3" json:"hasSweepLight,omitempty"`
	TextFlexSettingArrayList []uint64          `protobuf:"varint,13,rep,packed,name=textFlexSettingArrayList,proto3" json:"textFlexSettingArrayList,omitempty"`
	CenterAnimAssetId        uint64            `protobuf:"varint,14,opt,name=centerAnimAssetId,proto3" json:"centerAnimAssetId,omitempty"`
	DynamicImage             *Image            `protobuf:"bytes,15,opt,name=dynamicImage,proto3" json:"dynamicImage,omitempty"`
	ExtraMap                 map[string]string `protobuf:"bytes,16,rep,name=extraMap,proto3" json:"extraMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mp4AnimAssetId           uint64            `protobuf:"varint,17,opt,name=mp4AnimAssetId,proto3" json:"mp4AnimAssetId,omitempty"`
	Priority                 uint64            `protobuf:"varint,18,opt,name=priority,proto3" json:"priority,omitempty"`
	MaxWaitTime              uint64            `protobuf:"varint,19,opt,name=maxWaitTime,proto3" json:"maxWaitTime,omitempty"`
	DressId                  string            `protobuf:"bytes,20,opt,name=dressId,proto3" json:"dressId,omitempty"`
	Alignment                uint64            `protobuf:"varint,21,opt,name=alignment,proto3" json:"alignment,omitempty"`
	AlignmentOffset          uint64            `protobuf:"varint,22,opt,name=alignmentOffset,proto3" json:"alignmentOffset,omitempty"`
}

func (x *EffectConfig) Reset() {
	*x = EffectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectConfig) ProtoMessage() {}

func (x *EffectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectConfig.ProtoReflect.Descriptor instead.
func (*EffectConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{28}
}

func (x *EffectConfig) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EffectConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *EffectConfig) GetAvatarPos() uint64 {
	if x != nil {
		return x.AvatarPos
	}
	return 0
}

func (x *EffectConfig) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EffectConfig) GetTextIcon() *Image {
	if x != nil {
		return x.TextIcon
	}
	return nil
}

func (x *EffectConfig) GetStayTime() uint32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *EffectConfig) GetAnimAssetId() uint64 {
	if x != nil {
		return x.AnimAssetId
	}
	return 0
}

func (x *EffectConfig) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *EffectConfig) GetFlexSettingArrayList() []uint64 {
	if x != nil {
		return x.FlexSettingArrayList
	}
	return nil
}

func (x *EffectConfig) GetTextIconOverlay() *Image {
	if x != nil {
		return x.TextIconOverlay
	}
	return nil
}

func (x *EffectConfig) GetAnimatedBadge() *Image {
	if x != nil {
		return x.AnimatedBadge
	}
	return nil
}

func (x *EffectConfig) GetHasSweepLight() bool {
	if x != nil {
		return x.HasSweepLight
	}
	return false
}

func (x *EffectConfig) GetTextFlexSettingArrayList() []uint64 {
	if x != nil {
		return x.TextFlexSettingArrayList
	}
	return nil
}

func (x *EffectConfig) GetCenterAnimAssetId() uint64 {
	if x != nil {
		return x.CenterAnimAssetId
	}
	return 0
}

func (x *EffectConfig) GetDynamicImage() *Image {
	if x != nil {
		return x.DynamicImage
	}
	return nil
}

func (x *EffectConfig) GetExtraMap() map[string]string {
	if x != nil {
		return x.ExtraMap
	}
	return nil
}

func (x *EffectConfig) GetMp4AnimAssetId() uint64 {
	if x != nil {
		return x.Mp4AnimAssetId
	}
	return 0
}

func (x *EffectConfig) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EffectConfig) GetMaxWaitTime() uint64 {
	if x != nil {
		return x.MaxWaitTime
	}
	return 0
}

func (x *EffectConfig) GetDressId() string {
	if x != nil {
		return x.DressId
	}
	return ""
}

func (x *EffectConfig) GetAlignment() uint64 {
	if x != nil {
		return x.Alignment
	}
	return 0
}

func (x *EffectConfig) GetAlignmentOffset() uint64 {
	if x != nil {
		return x.AlignmentOffset
	}
	return 0
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                                                                             // 字符串类型字段
	DefaultPattern string                 `protobuf:"bytes,2,opt,name=default_pattern,json=defaultPattern,proto3" json:"default_pattern,omitempty"`                                                                                 // 字符串类型字段
	DefaultFormat  *TextFormat            `protobuf:"bytes,3,opt,name=default_format,json=defaultFormat,proto3" json:"default_format,omitempty"`                                                                                    // 嵌套类型字段
	Pieces         []*TextPiece           `protobuf:"bytes,4,rep,name=pieces,proto3" json:"pieces,omitempty"`                                                                                                                       // 可重复的嵌套类型字段
	SchemaInfos    map[string]*SchemaInfo `protobuf:"bytes,20,rep,name=schema_infos,json=schemaInfos,proto3" json:"schema_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 映射类型字段
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{29}
}

func (x *Text) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Text) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

func (x *Text) GetDefaultFormat() *TextFormat {
	if x != nil {
		return x.DefaultFormat
	}
	return nil
}

func (x *Text) GetPieces() []*TextPiece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *Text) GetSchemaInfos() map[string]*SchemaInfo {
	if x != nil {
		return x.SchemaInfos
	}
	return nil
}

type TextPiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            uint32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Format          *TextFormat          `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	ValueRef        string               `protobuf:"bytes,3,opt,name=value_ref,json=valueRef,proto3" json:"value_ref,omitempty"`
	StringValue     string               `protobuf:"bytes,11,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	Uservalue       *TextPieceUser       `protobuf:"bytes,21,opt,name=uservalue,proto3" json:"uservalue,omitempty"`
	Giftvalue       *TextPieceGift       `protobuf:"bytes,22,opt,name=giftvalue,proto3" json:"giftvalue,omitempty"`
	Heartvalue      *TextPieceHeart      `protobuf:"bytes,23,opt,name=heartvalue,proto3" json:"heartvalue,omitempty"`
	Patternrefvalue *TextPiecePatternRef `protobuf:"bytes,24,opt,name=patternrefvalue,proto3" json:"patternrefvalue,omitempty"`
	Imagevalue      *TextPieceImage      `protobuf:"bytes,25,opt,name=imagevalue,proto3" json:"imagevalue,omitempty"`
	SchemaKey       string               `protobuf:"bytes,100,opt,name=schema_key,json=schemaKey,proto3" json:"schema_key,omitempty"`
}

func (x *TextPiece) Reset() {
	*x = TextPiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPiece) ProtoMessage() {}

func (x *TextPiece) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPiece.ProtoReflect.Descriptor instead.
func (*TextPiece) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{30}
}

func (x *TextPiece) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TextPiece) GetFormat() *TextFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *TextPiece) GetValueRef() string {
	if x != nil {
		return x.ValueRef
	}
	return ""
}

func (x *TextPiece) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TextPiece) GetUservalue() *TextPieceUser {
	if x != nil {
		return x.Uservalue
	}
	return nil
}

func (x *TextPiece) GetGiftvalue() *TextPieceGift {
	if x != nil {
		return x.Giftvalue
	}
	return nil
}

func (x *TextPiece) GetHeartvalue() *TextPieceHeart {
	if x != nil {
		return x.Heartvalue
	}
	return nil
}

func (x *TextPiece) GetPatternrefvalue() *TextPiecePatternRef {
	if x != nil {
		return x.Patternrefvalue
	}
	return nil
}

func (x *TextPiece) GetImagevalue() *TextPieceImage {
	if x != nil {
		return x.Imagevalue
	}
	return nil
}

func (x *TextPiece) GetSchemaKey() string {
	if x != nil {
		return x.SchemaKey
	}
	return ""
}

type TextPieceImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image       *Image  `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ScalingRate float32 `protobuf:"fixed32,2,opt,name=scalingRate,proto3" json:"scalingRate,omitempty"`
}

func (x *TextPieceImage) Reset() {
	*x = TextPieceImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPieceImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPieceImage) ProtoMessage() {}

func (x *TextPieceImage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPieceImage.ProtoReflect.Descriptor instead.
func (*TextPieceImage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{31}
}

func (x *TextPieceImage) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *TextPieceImage) GetScalingRate() float32 {
	if x != nil {
		return x.ScalingRate
	}
	return 0
}

type TextPiecePatternRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultPattern string `protobuf:"bytes,2,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
}

func (x *TextPiecePatternRef) Reset() {
	*x = TextPiecePatternRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPiecePatternRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPiecePatternRef) ProtoMessage() {}

func (x *TextPiecePatternRef) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPiecePatternRef.ProtoReflect.Descriptor instead.
func (*TextPiecePatternRef) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{32}
}

func (x *TextPiecePatternRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TextPiecePatternRef) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

type TextPieceHeart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color string `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *TextPieceHeart) Reset() {
	*x = TextPieceHeart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPieceHeart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPieceHeart) ProtoMessage() {}

func (x *TextPieceHeart) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPieceHeart.ProtoReflect.Descriptor instead.
func (*TextPieceHeart) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{33}
}

func (x *TextPieceHeart) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type TextPieceGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId  uint64      `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`
	NameRef *PatternRef `protobuf:"bytes,2,opt,name=nameRef,proto3" json:"nameRef,omitempty"`
}

func (x *TextPieceGift) Reset() {
	*x = TextPieceGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPieceGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPieceGift) ProtoMessage() {}

func (x *TextPieceGift) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPieceGift.ProtoReflect.Descriptor instead.
func (*TextPieceGift) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{34}
}

func (x *TextPieceGift) GetGiftId() uint64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *TextPieceGift) GetNameRef() *PatternRef {
	if x != nil {
		return x.NameRef
	}
	return nil
}

type PatternRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultPattern string `protobuf:"bytes,2,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
}

func (x *PatternRef) Reset() {
	*x = PatternRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternRef) ProtoMessage() {}

func (x *PatternRef) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternRef.ProtoReflect.Descriptor instead.
func (*PatternRef) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{35}
}

func (x *PatternRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PatternRef) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

type TextPieceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                   *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	WithColon              bool   `protobuf:"varint,2,opt,name=withColon,proto3" json:"withColon,omitempty"`
	SelfShowRealName       bool   `protobuf:"varint,3,opt,name=self_show_real_name,json=selfShowRealName,proto3" json:"self_show_real_name,omitempty"`
	LeftShowExtension      uint32 `protobuf:"varint,4,opt,name=left_show_extension,json=leftShowExtension,proto3" json:"left_show_extension,omitempty"`
	LeftAdditionalContent  string `protobuf:"bytes,5,opt,name=left_additional_content,json=leftAdditionalContent,proto3" json:"left_additional_content,omitempty"`
	RightAdditionalContent string `protobuf:"bytes,6,opt,name=right_additional_content,json=rightAdditionalContent,proto3" json:"right_additional_content,omitempty"`
}

func (x *TextPieceUser) Reset() {
	*x = TextPieceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPieceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPieceUser) ProtoMessage() {}

func (x *TextPieceUser) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPieceUser.ProtoReflect.Descriptor instead.
func (*TextPieceUser) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{36}
}

func (x *TextPieceUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TextPieceUser) GetWithColon() bool {
	if x != nil {
		return x.WithColon
	}
	return false
}

func (x *TextPieceUser) GetSelfShowRealName() bool {
	if x != nil {
		return x.SelfShowRealName
	}
	return false
}

func (x *TextPieceUser) GetLeftShowExtension() uint32 {
	if x != nil {
		return x.LeftShowExtension
	}
	return 0
}

func (x *TextPieceUser) GetLeftAdditionalContent() string {
	if x != nil {
		return x.LeftAdditionalContent
	}
	return ""
}

func (x *TextPieceUser) GetRightAdditionalContent() string {
	if x != nil {
		return x.RightAdditionalContent
	}
	return ""
}

type TextFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color              string `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Bold               bool   `protobuf:"varint,2,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic             bool   `protobuf:"varint,3,opt,name=italic,proto3" json:"italic,omitempty"`
	Weight             uint32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	ItalicAngle        uint32 `protobuf:"varint,5,opt,name=italic_angle,json=italicAngle,proto3" json:"italic_angle,omitempty"`
	FontSize           uint32 `protobuf:"varint,6,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	UseHeighLightColor bool   `protobuf:"varint,7,opt,name=use_heigh_light_color,json=useHeighLightColor,proto3" json:"use_heigh_light_color,omitempty"`
	UseRemoteClor      bool   `protobuf:"varint,8,opt,name=use_remote_clor,json=useRemoteClor,proto3" json:"use_remote_clor,omitempty"`
}

func (x *TextFormat) Reset() {
	*x = TextFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextFormat) ProtoMessage() {}

func (x *TextFormat) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextFormat.ProtoReflect.Descriptor instead.
func (*TextFormat) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{37}
}

func (x *TextFormat) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TextFormat) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

func (x *TextFormat) GetItalic() bool {
	if x != nil {
		return x.Italic
	}
	return false
}

func (x *TextFormat) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *TextFormat) GetItalicAngle() uint32 {
	if x != nil {
		return x.ItalicAngle
	}
	return 0
}

func (x *TextFormat) GetFontSize() uint32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *TextFormat) GetUseHeighLightColor() bool {
	if x != nil {
		return x.UseHeighLightColor
	}
	return false
}

func (x *TextFormat) GetUseRemoteClor() bool {
	if x != nil {
		return x.UseRemoteClor
	}
	return false
}

// 点赞
type LikeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common             *Common             `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Count              uint64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Total              uint64              `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Color              uint64              `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
	User               *User               `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Icon               string              `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	DoubleLikeDetail   *DoubleLikeDetail   `protobuf:"bytes,7,opt,name=doubleLikeDetail,proto3" json:"doubleLikeDetail,omitempty"`
	DisplayControlInfo *DisplayControlInfo `protobuf:"bytes,8,opt,name=displayControlInfo,proto3" json:"displayControlInfo,omitempty"`
	LinkmicGuestUid    uint64              `protobuf:"varint,9,opt,name=linkmicGuestUid,proto3" json:"linkmicGuestUid,omitempty"`
	Scene              string              `protobuf:"bytes,10,opt,name=scene,proto3" json:"scene,omitempty"`
	PicoDisplayInfo    *PicoDisplayInfo    `protobuf:"bytes,11,opt,name=picoDisplayInfo,proto3" json:"picoDisplayInfo,omitempty"`
}

func (x *LikeMessage) Reset() {
	*x = LikeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeMessage) ProtoMessage() {}

func (x *LikeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeMessage.ProtoReflect.Descriptor instead.
func (*LikeMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{38}
}

func (x *LikeMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *LikeMessage) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LikeMessage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LikeMessage) GetColor() uint64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *LikeMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LikeMessage) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *LikeMessage) GetDoubleLikeDetail() *DoubleLikeDetail {
	if x != nil {
		return x.DoubleLikeDetail
	}
	return nil
}

func (x *LikeMessage) GetDisplayControlInfo() *DisplayControlInfo {
	if x != nil {
		return x.DisplayControlInfo
	}
	return nil
}

func (x *LikeMessage) GetLinkmicGuestUid() uint64 {
	if x != nil {
		return x.LinkmicGuestUid
	}
	return 0
}

func (x *LikeMessage) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *LikeMessage) GetPicoDisplayInfo() *PicoDisplayInfo {
	if x != nil {
		return x.PicoDisplayInfo
	}
	return nil
}

type SocialMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common           *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User             *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ShareType        uint64            `protobuf:"varint,3,opt,name=shareType,proto3" json:"shareType,omitempty"`
	Action           uint64            `protobuf:"varint,4,opt,name=action,proto3" json:"action,omitempty"`
	ShareTarget      string            `protobuf:"bytes,5,opt,name=shareTarget,proto3" json:"shareTarget,omitempty"`
	FollowCount      uint64            `protobuf:"varint,6,opt,name=followCount,proto3" json:"followCount,omitempty"`
	PublicAreaCommon *PublicAreaCommon `protobuf:"bytes,7,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
}

func (x *SocialMessage) Reset() {
	*x = SocialMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialMessage) ProtoMessage() {}

func (x *SocialMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialMessage.ProtoReflect.Descriptor instead.
func (*SocialMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{39}
}

func (x *SocialMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SocialMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SocialMessage) GetShareType() uint64 {
	if x != nil {
		return x.ShareType
	}
	return 0
}

func (x *SocialMessage) GetAction() uint64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *SocialMessage) GetShareTarget() string {
	if x != nil {
		return x.ShareTarget
	}
	return ""
}

func (x *SocialMessage) GetFollowCount() uint64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *SocialMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

type PicoDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboSumCount uint64 `protobuf:"varint,1,opt,name=comboSumCount,proto3" json:"comboSumCount,omitempty"`
	Emoji         string `protobuf:"bytes,2,opt,name=emoji,proto3" json:"emoji,omitempty"`
	EmojiIcon     *Image `protobuf:"bytes,3,opt,name=emojiIcon,proto3" json:"emojiIcon,omitempty"`
	EmojiText     string `protobuf:"bytes,4,opt,name=emojiText,proto3" json:"emojiText,omitempty"`
}

func (x *PicoDisplayInfo) Reset() {
	*x = PicoDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicoDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicoDisplayInfo) ProtoMessage() {}

func (x *PicoDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicoDisplayInfo.ProtoReflect.Descriptor instead.
func (*PicoDisplayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{40}
}

func (x *PicoDisplayInfo) GetComboSumCount() uint64 {
	if x != nil {
		return x.ComboSumCount
	}
	return 0
}

func (x *PicoDisplayInfo) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

func (x *PicoDisplayInfo) GetEmojiIcon() *Image {
	if x != nil {
		return x.EmojiIcon
	}
	return nil
}

func (x *PicoDisplayInfo) GetEmojiText() string {
	if x != nil {
		return x.EmojiText
	}
	return ""
}

type DoubleLikeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleFlag  bool   `protobuf:"varint,1,opt,name=doubleFlag,proto3" json:"doubleFlag,omitempty"`
	SeqId       uint32 `protobuf:"varint,2,opt,name=seqId,proto3" json:"seqId,omitempty"`
	RenewalsNum uint32 `protobuf:"varint,3,opt,name=renewalsNum,proto3" json:"renewalsNum,omitempty"`
	TriggersNum uint32 `protobuf:"varint,4,opt,name=triggersNum,proto3" json:"triggersNum,omitempty"`
}

func (x *DoubleLikeDetail) Reset() {
	*x = DoubleLikeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleLikeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleLikeDetail) ProtoMessage() {}

func (x *DoubleLikeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleLikeDetail.ProtoReflect.Descriptor instead.
func (*DoubleLikeDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{41}
}

func (x *DoubleLikeDetail) GetDoubleFlag() bool {
	if x != nil {
		return x.DoubleFlag
	}
	return false
}

func (x *DoubleLikeDetail) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *DoubleLikeDetail) GetRenewalsNum() uint32 {
	if x != nil {
		return x.RenewalsNum
	}
	return 0
}

func (x *DoubleLikeDetail) GetTriggersNum() uint32 {
	if x != nil {
		return x.TriggersNum
	}
	return 0
}

type DisplayControlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowText  bool `protobuf:"varint,1,opt,name=showText,proto3" json:"showText,omitempty"`
	ShowIcons bool `protobuf:"varint,2,opt,name=showIcons,proto3" json:"showIcons,omitempty"`
}

func (x *DisplayControlInfo) Reset() {
	*x = DisplayControlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayControlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayControlInfo) ProtoMessage() {}

func (x *DisplayControlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayControlInfo.ProtoReflect.Descriptor instead.
func (*DisplayControlInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{42}
}

func (x *DisplayControlInfo) GetShowText() bool {
	if x != nil {
		return x.ShowText
	}
	return false
}

func (x *DisplayControlInfo) GetShowIcons() bool {
	if x != nil {
		return x.ShowIcons
	}
	return false
}

type EpisodeChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common         *Message `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User           *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content        string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	VisibleToSende bool     `protobuf:"varint,4,opt,name=visibleToSende,proto3" json:"visibleToSende,omitempty"`
	// BackgroundImage backgroundImage = 5;
	// PublicAreaCommon publicAreaCommon = 6;
	GiftImage      *Image   `protobuf:"bytes,7,opt,name=giftImage,proto3" json:"giftImage,omitempty"`
	AgreeMsgId     uint64   `protobuf:"varint,8,opt,name=agreeMsgId,proto3" json:"agreeMsgId,omitempty"`
	ColorValueList []string `protobuf:"bytes,9,rep,name=colorValueList,proto3" json:"colorValueList,omitempty"`
}

func (x *EpisodeChatMessage) Reset() {
	*x = EpisodeChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeChatMessage) ProtoMessage() {}

func (x *EpisodeChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeChatMessage.ProtoReflect.Descriptor instead.
func (*EpisodeChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{43}
}

func (x *EpisodeChatMessage) GetCommon() *Message {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *EpisodeChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EpisodeChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EpisodeChatMessage) GetVisibleToSende() bool {
	if x != nil {
		return x.VisibleToSende
	}
	return false
}

func (x *EpisodeChatMessage) GetGiftImage() *Image {
	if x != nil {
		return x.GiftImage
	}
	return nil
}

func (x *EpisodeChatMessage) GetAgreeMsgId() uint64 {
	if x != nil {
		return x.AgreeMsgId
	}
	return 0
}

func (x *EpisodeChatMessage) GetColorValueList() []string {
	if x != nil {
		return x.ColorValueList
	}
	return nil
}

type MatchAgainstScoreMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common        *Common  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Against       *Against `protobuf:"bytes,2,opt,name=against,proto3" json:"against,omitempty"`
	MatchStatus   uint32   `protobuf:"varint,3,opt,name=matchStatus,proto3" json:"matchStatus,omitempty"`
	DisplayStatus uint32   `protobuf:"varint,4,opt,name=displayStatus,proto3" json:"displayStatus,omitempty"`
}

func (x *MatchAgainstScoreMessage) Reset() {
	*x = MatchAgainstScoreMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAgainstScoreMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAgainstScoreMessage) ProtoMessage() {}

func (x *MatchAgainstScoreMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAgainstScoreMessage.ProtoReflect.Descriptor instead.
func (*MatchAgainstScoreMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{44}
}

func (x *MatchAgainstScoreMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MatchAgainstScoreMessage) GetAgainst() *Against {
	if x != nil {
		return x.Against
	}
	return nil
}

func (x *MatchAgainstScoreMessage) GetMatchStatus() uint32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *MatchAgainstScoreMessage) GetDisplayStatus() uint32 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

type Against struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftName string `protobuf:"bytes,1,opt,name=leftName,proto3" json:"leftName,omitempty"`
	LeftLogo *Image `protobuf:"bytes,2,opt,name=leftLogo,proto3" json:"leftLogo,omitempty"`
	LeftGoal string `protobuf:"bytes,3,opt,name=leftGoal,proto3" json:"leftGoal,omitempty"`
	// LeftPlayersList leftPlayersList = 4;
	// LeftGoalStageDetail leftGoalStageDetail = 5;
	RightName string `protobuf:"bytes,6,opt,name=rightName,proto3" json:"rightName,omitempty"`
	RightLogo *Image `protobuf:"bytes,7,opt,name=rightLogo,proto3" json:"rightLogo,omitempty"`
	RightGoal string `protobuf:"bytes,8,opt,name=rightGoal,proto3" json:"rightGoal,omitempty"`
	// RightPlayersList rightPlayersList  = 9;
	// RightGoalStageDetail rightGoalStageDetail = 10;
	Timestamp          uint64 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version            uint64 `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	LeftTeamId         uint64 `protobuf:"varint,13,opt,name=leftTeamId,proto3" json:"leftTeamId,omitempty"`
	RightTeamId        uint64 `protobuf:"varint,14,opt,name=rightTeamId,proto3" json:"rightTeamId,omitempty"`
	DiffSei2AbsSecond  uint64 `protobuf:"varint,15,opt,name=diffSei2absSecond,proto3" json:"diffSei2absSecond,omitempty"`
	FinalGoalStage     uint32 `protobuf:"varint,16,opt,name=finalGoalStage,proto3" json:"finalGoalStage,omitempty"`
	CurrentGoalStage   uint32 `protobuf:"varint,17,opt,name=currentGoalStage,proto3" json:"currentGoalStage,omitempty"`
	LeftScoreAddition  uint32 `protobuf:"varint,18,opt,name=leftScoreAddition,proto3" json:"leftScoreAddition,omitempty"`
	RightScoreAddition uint32 `protobuf:"varint,19,opt,name=rightScoreAddition,proto3" json:"rightScoreAddition,omitempty"`
	LeftGoalInt        uint64 `protobuf:"varint,20,opt,name=leftGoalInt,proto3" json:"leftGoalInt,omitempty"`
	RightGoalInt       uint64 `protobuf:"varint,21,opt,name=rightGoalInt,proto3" json:"rightGoalInt,omitempty"`
}

func (x *Against) Reset() {
	*x = Against{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Against) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Against) ProtoMessage() {}

func (x *Against) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Against.ProtoReflect.Descriptor instead.
func (*Against) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{45}
}

func (x *Against) GetLeftName() string {
	if x != nil {
		return x.LeftName
	}
	return ""
}

func (x *Against) GetLeftLogo() *Image {
	if x != nil {
		return x.LeftLogo
	}
	return nil
}

func (x *Against) GetLeftGoal() string {
	if x != nil {
		return x.LeftGoal
	}
	return ""
}

func (x *Against) GetRightName() string {
	if x != nil {
		return x.RightName
	}
	return ""
}

func (x *Against) GetRightLogo() *Image {
	if x != nil {
		return x.RightLogo
	}
	return nil
}

func (x *Against) GetRightGoal() string {
	if x != nil {
		return x.RightGoal
	}
	return ""
}

func (x *Against) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Against) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Against) GetLeftTeamId() uint64 {
	if x != nil {
		return x.LeftTeamId
	}
	return 0
}

func (x *Against) GetRightTeamId() uint64 {
	if x != nil {
		return x.RightTeamId
	}
	return 0
}

func (x *Against) GetDiffSei2AbsSecond() uint64 {
	if x != nil {
		return x.DiffSei2AbsSecond
	}
	return 0
}

func (x *Against) GetFinalGoalStage() uint32 {
	if x != nil {
		return x.FinalGoalStage
	}
	return 0
}

func (x *Against) GetCurrentGoalStage() uint32 {
	if x != nil {
		return x.CurrentGoalStage
	}
	return 0
}

func (x *Against) GetLeftScoreAddition() uint32 {
	if x != nil {
		return x.LeftScoreAddition
	}
	return 0
}

func (x *Against) GetRightScoreAddition() uint32 {
	if x != nil {
		return x.RightScoreAddition
	}
	return 0
}

func (x *Against) GetLeftGoalInt() uint64 {
	if x != nil {
		return x.LeftGoalInt
	}
	return 0
}

func (x *Against) GetRightGoalInt() uint64 {
	if x != nil {
		return x.RightGoalInt
	}
	return 0
}

// Common 消息定义
type Common struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method             string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`                                                           // 方法名称
	MsgId              int64  `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                               // 消息 ID
	RoomId             int64  `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                            // 房间 ID
	CreateTime         int64  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // 创建时间
	Monitor            int32  `protobuf:"varint,5,opt,name=monitor,proto3" json:"monitor,omitempty"`                                                        // 监控标识
	IsShowMsg          bool   `protobuf:"varint,6,opt,name=is_show_msg,json=isShowMsg,proto3" json:"is_show_msg,omitempty"`                                 // 是否显示消息
	Describe           string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`                                                       // 描述信息
	DisplayText        *Text  `protobuf:"bytes,8,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`                              // 显示文本
	FoldType           int64  `protobuf:"varint,9,opt,name=fold_type,json=foldType,proto3" json:"fold_type,omitempty"`                                      // 折叠类型
	AnchorFoldType     int64  `protobuf:"varint,10,opt,name=anchor_fold_type,json=anchorFoldType,proto3" json:"anchor_fold_type,omitempty"`                 // 主播折叠类型
	PriorityScore      int64  `protobuf:"varint,11,opt,name=priority_score,json=priorityScore,proto3" json:"priority_score,omitempty"`                      // 优先级分数
	LogId              string `protobuf:"bytes,12,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`                                               // 日志 ID
	MsgProcessFilterK  string `protobuf:"bytes,13,opt,name=msg_process_filter_k,json=msgProcessFilterK,proto3" json:"msg_process_filter_k,omitempty"`       // 消息处理过滤键
	MsgProcessFilterV  string `protobuf:"bytes,14,opt,name=msg_process_filter_v,json=msgProcessFilterV,proto3" json:"msg_process_filter_v,omitempty"`       // 消息处理过滤值
	User               *User  `protobuf:"bytes,15,opt,name=user,proto3" json:"user,omitempty"`                                                              // 用户信息
	Room               *Room  `protobuf:"bytes,16,opt,name=room,proto3" json:"room,omitempty"`                                                              // 房间信息
	AnchorFoldTypeV2   int64  `protobuf:"varint,17,opt,name=anchor_fold_type_v2,json=anchorFoldTypeV2,proto3" json:"anchor_fold_type_v2,omitempty"`         // 主播折叠类型 V2
	ProcessAtSeiTimeMs int64  `protobuf:"varint,18,opt,name=process_at_sei_time_ms,json=processAtSeiTimeMs,proto3" json:"process_at_sei_time_ms,omitempty"` // SEI 时间处理
	RandomDispatchMs   int64  `protobuf:"varint,19,opt,name=random_dispatch_ms,json=randomDispatchMs,proto3" json:"random_dispatch_ms,omitempty"`           // 随机分发时间
	IsDispatch         bool   `protobuf:"varint,20,opt,name=is_dispatch,json=isDispatch,proto3" json:"is_dispatch,omitempty"`                               // 是否分发
	ChannelId          int64  `protobuf:"varint,21,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                  // 频道 ID
	DiffSei2AbsSecond  int64  `protobuf:"varint,22,opt,name=diff_sei2abs_second,json=diffSei2absSecond,proto3" json:"diff_sei2abs_second,omitempty"`        // SEI 到绝对时间差
	AnchorFoldDuration int64  `protobuf:"varint,23,opt,name=anchor_fold_duration,json=anchorFoldDuration,proto3" json:"anchor_fold_duration,omitempty"`     // 主播折叠持续时间
	AppId              int64  `protobuf:"varint,24,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                              // 应用 ID
}

func (x *Common) Reset() {
	*x = Common{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Common) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Common) ProtoMessage() {}

func (x *Common) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Common.ProtoReflect.Descriptor instead.
func (*Common) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{46}
}

func (x *Common) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Common) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *Common) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Common) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Common) GetMonitor() int32 {
	if x != nil {
		return x.Monitor
	}
	return 0
}

func (x *Common) GetIsShowMsg() bool {
	if x != nil {
		return x.IsShowMsg
	}
	return false
}

func (x *Common) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Common) GetDisplayText() *Text {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *Common) GetFoldType() int64 {
	if x != nil {
		return x.FoldType
	}
	return 0
}

func (x *Common) GetAnchorFoldType() int64 {
	if x != nil {
		return x.AnchorFoldType
	}
	return 0
}

func (x *Common) GetPriorityScore() int64 {
	if x != nil {
		return x.PriorityScore
	}
	return 0
}

func (x *Common) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *Common) GetMsgProcessFilterK() string {
	if x != nil {
		return x.MsgProcessFilterK
	}
	return ""
}

func (x *Common) GetMsgProcessFilterV() string {
	if x != nil {
		return x.MsgProcessFilterV
	}
	return ""
}

func (x *Common) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Common) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *Common) GetAnchorFoldTypeV2() int64 {
	if x != nil {
		return x.AnchorFoldTypeV2
	}
	return 0
}

func (x *Common) GetProcessAtSeiTimeMs() int64 {
	if x != nil {
		return x.ProcessAtSeiTimeMs
	}
	return 0
}

func (x *Common) GetRandomDispatchMs() int64 {
	if x != nil {
		return x.RandomDispatchMs
	}
	return 0
}

func (x *Common) GetIsDispatch() bool {
	if x != nil {
		return x.IsDispatch
	}
	return false
}

func (x *Common) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Common) GetDiffSei2AbsSecond() int64 {
	if x != nil {
		return x.DiffSei2AbsSecond
	}
	return 0
}

func (x *Common) GetAnchorFoldDuration() int64 {
	if x != nil {
		return x.AnchorFoldDuration
	}
	return 0
}

func (x *Common) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// RegionRestriction 消息定义
type RegionRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                           // 类型
	WhiteList []string `protobuf:"bytes,2,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"` // 白名单
	BlackList []string `protobuf:"bytes,3,rep,name=black_list,json=blackList,proto3" json:"black_list,omitempty"` // 黑名单
}

func (x *RegionRestriction) Reset() {
	*x = RegionRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionRestriction) ProtoMessage() {}

func (x *RegionRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionRestriction.ProtoReflect.Descriptor instead.
func (*RegionRestriction) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{47}
}

func (x *RegionRestriction) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RegionRestriction) GetWhiteList() []string {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

func (x *RegionRestriction) GetBlackList() []string {
	if x != nil {
		return x.BlackList
	}
	return nil
}

// RegionMatch 消息定义
type RegionMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                           // 类型
	AllowList []string `protobuf:"bytes,2,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"` // 允许列表
	DenyList  []string `protobuf:"bytes,3,rep,name=deny_list,json=denyList,proto3" json:"deny_list,omitempty"`    // 拒绝列表
}

func (x *RegionMatch) Reset() {
	*x = RegionMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionMatch) ProtoMessage() {}

func (x *RegionMatch) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionMatch.ProtoReflect.Descriptor instead.
func (*RegionMatch) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{48}
}

func (x *RegionMatch) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RegionMatch) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

func (x *RegionMatch) GetDenyList() []string {
	if x != nil {
		return x.DenyList
	}
	return nil
}

// StreamUrl 消息定义
type StreamUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider             int64                                `protobuf:"varint,1,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                                                     // 提供者
	Id                   int64                                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                                                 // ID
	IdStr                string                               `protobuf:"bytes,3,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`                                                                                                                               // ID 字符串
	ResolutionName       map[string]string                    `protobuf:"bytes,4,rep,name=resolution_name,json=resolutionName,proto3" json:"resolution_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`            // 分辨率名称映射
	DefaultResolution    string                               `protobuf:"bytes,5,opt,name=default_resolution,json=defaultResolution,proto3" json:"default_resolution,omitempty"`                                                                                           // 默认分辨率
	Extra                *StreamUrlExtra                      `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                                                            // 额外信息
	RtmpPushUrl          string                               `protobuf:"bytes,7,opt,name=rtmp_push_url,json=rtmpPushUrl,proto3" json:"rtmp_push_url,omitempty"`                                                                                                           // RTMP 推流 URL
	RtmpPullUrl          string                               `protobuf:"bytes,8,opt,name=rtmp_pull_url,json=rtmpPullUrl,proto3" json:"rtmp_pull_url,omitempty"`                                                                                                           // RTMP 拉流 URL
	FlvPullUrl           map[string]string                    `protobuf:"bytes,9,rep,name=flv_pull_url,json=flvPullUrl,proto3" json:"flv_pull_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                      // FLV 拉流 URL 映射
	CandidateResolution  []string                             `protobuf:"bytes,10,rep,name=candidate_resolution,json=candidateResolution,proto3" json:"candidate_resolution,omitempty"`                                                                                    // 候选分辨率
	HlsPullUrl           string                               `protobuf:"bytes,11,opt,name=hls_pull_url,json=hlsPullUrl,proto3" json:"hls_pull_url,omitempty"`                                                                                                             // HLS 拉流 URL
	HlsPullUrlParams     string                               `protobuf:"bytes,12,opt,name=hls_pull_url_params,json=hlsPullUrlParams,proto3" json:"hls_pull_url_params,omitempty"`                                                                                         // HLS 拉流 URL 参数
	RtmpPullUrlParams    string                               `protobuf:"bytes,13,opt,name=rtmp_pull_url_params,json=rtmpPullUrlParams,proto3" json:"rtmp_pull_url_params,omitempty"`                                                                                      // RTMP 拉流 URL 参数
	FlvPullUrlParams     map[string]string                    `protobuf:"bytes,14,rep,name=flv_pull_url_params,json=flvPullUrlParams,proto3" json:"flv_pull_url_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // FLV 拉流 URL 参数映射
	RtmpPushUrlParams    string                               `protobuf:"bytes,15,opt,name=rtmp_push_url_params,json=rtmpPushUrlParams,proto3" json:"rtmp_push_url_params,omitempty"`                                                                                      // RTMP 推流 URL 参数
	PushUrls             []string                             `protobuf:"bytes,16,rep,name=push_urls,json=pushUrls,proto3" json:"push_urls,omitempty"`                                                                                                                     // 推流 URL 列表
	LiveCoreSdkData      *LiveCoreSDKData                     `protobuf:"bytes,17,opt,name=live_core_sdk_data,json=liveCoreSdkData,proto3" json:"live_core_sdk_data,omitempty"`                                                                                            // LiveCore SDK 数据
	HlsPullUrlMap        map[string]string                    `protobuf:"bytes,18,rep,name=hls_pull_url_map,json=hlsPullUrlMap,proto3" json:"hls_pull_url_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // HLS 拉流 URL 映射
	CompletePushUrls     []string                             `protobuf:"bytes,19,rep,name=complete_push_urls,json=completePushUrls,proto3" json:"complete_push_urls,omitempty"`                                                                                           // 完整推流 URL 列表
	StreamControlType    int32                                `protobuf:"varint,20,opt,name=stream_control_type,json=streamControlType,proto3" json:"stream_control_type,omitempty"`                                                                                       // 流控制类型
	StreamOrientation    int32                                `protobuf:"varint,21,opt,name=stream_orientation,json=streamOrientation,proto3" json:"stream_orientation,omitempty"`                                                                                         // 流方向
	PushStreamType       int32                                `protobuf:"varint,22,opt,name=push_stream_type,json=pushStreamType,proto3" json:"push_stream_type,omitempty"`                                                                                                // 推流类型
	PullDatas            map[string]*LiveCoreSDKData_PullData `protobuf:"bytes,23,rep,name=pull_datas,json=pullDatas,proto3" json:"pull_datas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                          // 拉流数据映射
	Play                 *PlaySetting                         `protobuf:"bytes,24,opt,name=play,proto3" json:"play,omitempty"`                                                                                                                                             // 播放设置
	PushDatas            map[string]*LiveCoreSDKData_PushData `protobuf:"bytes,25,rep,name=push_datas,json=pushDatas,proto3" json:"push_datas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                          // 推流数据映射
	VrType               int32                                `protobuf:"varint,26,opt,name=vr_type,json=vrType,proto3" json:"vr_type,omitempty"`                                                                                                                          // VR 类型
	OpenStreamUrlEncrypt *OpenStreamUrlEncrypt                `protobuf:"bytes,5000,opt,name=open_stream_url_encrypt,json=openStreamUrlEncrypt,proto3" json:"open_stream_url_encrypt,omitempty"`                                                                           // 打开流 URL 加密
}

func (x *StreamUrl) Reset() {
	*x = StreamUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUrl) ProtoMessage() {}

func (x *StreamUrl) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUrl.ProtoReflect.Descriptor instead.
func (*StreamUrl) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{49}
}

func (x *StreamUrl) GetProvider() int64 {
	if x != nil {
		return x.Provider
	}
	return 0
}

func (x *StreamUrl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamUrl) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *StreamUrl) GetResolutionName() map[string]string {
	if x != nil {
		return x.ResolutionName
	}
	return nil
}

func (x *StreamUrl) GetDefaultResolution() string {
	if x != nil {
		return x.DefaultResolution
	}
	return ""
}

func (x *StreamUrl) GetExtra() *StreamUrlExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *StreamUrl) GetRtmpPushUrl() string {
	if x != nil {
		return x.RtmpPushUrl
	}
	return ""
}

func (x *StreamUrl) GetRtmpPullUrl() string {
	if x != nil {
		return x.RtmpPullUrl
	}
	return ""
}

func (x *StreamUrl) GetFlvPullUrl() map[string]string {
	if x != nil {
		return x.FlvPullUrl
	}
	return nil
}

func (x *StreamUrl) GetCandidateResolution() []string {
	if x != nil {
		return x.CandidateResolution
	}
	return nil
}

func (x *StreamUrl) GetHlsPullUrl() string {
	if x != nil {
		return x.HlsPullUrl
	}
	return ""
}

func (x *StreamUrl) GetHlsPullUrlParams() string {
	if x != nil {
		return x.HlsPullUrlParams
	}
	return ""
}

func (x *StreamUrl) GetRtmpPullUrlParams() string {
	if x != nil {
		return x.RtmpPullUrlParams
	}
	return ""
}

func (x *StreamUrl) GetFlvPullUrlParams() map[string]string {
	if x != nil {
		return x.FlvPullUrlParams
	}
	return nil
}

func (x *StreamUrl) GetRtmpPushUrlParams() string {
	if x != nil {
		return x.RtmpPushUrlParams
	}
	return ""
}

func (x *StreamUrl) GetPushUrls() []string {
	if x != nil {
		return x.PushUrls
	}
	return nil
}

func (x *StreamUrl) GetLiveCoreSdkData() *LiveCoreSDKData {
	if x != nil {
		return x.LiveCoreSdkData
	}
	return nil
}

func (x *StreamUrl) GetHlsPullUrlMap() map[string]string {
	if x != nil {
		return x.HlsPullUrlMap
	}
	return nil
}

func (x *StreamUrl) GetCompletePushUrls() []string {
	if x != nil {
		return x.CompletePushUrls
	}
	return nil
}

func (x *StreamUrl) GetStreamControlType() int32 {
	if x != nil {
		return x.StreamControlType
	}
	return 0
}

func (x *StreamUrl) GetStreamOrientation() int32 {
	if x != nil {
		return x.StreamOrientation
	}
	return 0
}

func (x *StreamUrl) GetPushStreamType() int32 {
	if x != nil {
		return x.PushStreamType
	}
	return 0
}

func (x *StreamUrl) GetPullDatas() map[string]*LiveCoreSDKData_PullData {
	if x != nil {
		return x.PullDatas
	}
	return nil
}

func (x *StreamUrl) GetPlay() *PlaySetting {
	if x != nil {
		return x.Play
	}
	return nil
}

func (x *StreamUrl) GetPushDatas() map[string]*LiveCoreSDKData_PushData {
	if x != nil {
		return x.PushDatas
	}
	return nil
}

func (x *StreamUrl) GetVrType() int32 {
	if x != nil {
		return x.VrType
	}
	return 0
}

func (x *StreamUrl) GetOpenStreamUrlEncrypt() *OpenStreamUrlEncrypt {
	if x != nil {
		return x.OpenStreamUrlEncrypt
	}
	return nil
}

// StreamUrlExtra 消息定义
type StreamUrlExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                  int64                            `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`                                                                    // 高度
	Width                   int64                            `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`                                                                      // 宽度
	Fps                     int64                            `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`                                                                          // 帧率
	MaxBitrate              int64                            `protobuf:"varint,4,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`                                          // 最大比特率
	MinBitrate              int64                            `protobuf:"varint,5,opt,name=min_bitrate,json=minBitrate,proto3" json:"min_bitrate,omitempty"`                                          // 最小比特率
	DefaultBitrate          int64                            `protobuf:"varint,6,opt,name=default_bitrate,json=defaultBitrate,proto3" json:"default_bitrate,omitempty"`                              // 默认比特率
	BitrateAdaptStrategy    int64                            `protobuf:"varint,7,opt,name=bitrate_adapt_strategy,json=bitrateAdaptStrategy,proto3" json:"bitrate_adapt_strategy,omitempty"`          // 比特率适应策略
	AnchorInteractProfile   int64                            `protobuf:"varint,8,opt,name=anchor_interact_profile,json=anchorInteractProfile,proto3" json:"anchor_interact_profile,omitempty"`       // 主播互动配置
	AudienceInteractProfile int64                            `protobuf:"varint,9,opt,name=audience_interact_profile,json=audienceInteractProfile,proto3" json:"audience_interact_profile,omitempty"` // 观众互动配置
	HardwareEncode          bool                             `protobuf:"varint,10,opt,name=hardware_encode,json=hardwareEncode,proto3" json:"hardware_encode,omitempty"`                             // 硬件编码
	VideoProfile            int64                            `protobuf:"varint,12,opt,name=video_profile,json=videoProfile,proto3" json:"video_profile,omitempty"`                                   // 视频配置
	SuperResolution         *StreamUrlExtra_SuperResolution  `protobuf:"bytes,14,opt,name=super_resolution,json=superResolution,proto3" json:"super_resolution,omitempty"`                           // 超分辨率
	H265Enable              bool                             `protobuf:"varint,15,opt,name=h265_enable,json=h265Enable,proto3" json:"h265_enable,omitempty"`                                         // 是否启用 H265
	GopSec                  int64                            `protobuf:"varint,16,opt,name=gop_sec,json=gopSec,proto3" json:"gop_sec,omitempty"`                                                     // GOP 秒数
	BframeEnable            bool                             `protobuf:"varint,17,opt,name=bframe_enable,json=bframeEnable,proto3" json:"bframe_enable,omitempty"`                                   // 是否启用 B 帧
	Roi                     bool                             `protobuf:"varint,18,opt,name=roi,proto3" json:"roi,omitempty"`                                                                         // ROI
	SwRoi                   bool                             `protobuf:"varint,19,opt,name=sw_roi,json=swRoi,proto3" json:"sw_roi,omitempty"`                                                        // 软件 ROI
	Bytevc1Enable           bool                             `protobuf:"varint,20,opt,name=bytevc1_enable,json=bytevc1Enable,proto3" json:"bytevc1_enable,omitempty"`                                // 是否启用 ByteVC1
	AnchorClientInfo        *StreamUrlExtra_AnchorClientInfo `protobuf:"bytes,21,opt,name=anchor_client_info,json=anchorClientInfo,proto3" json:"anchor_client_info,omitempty"`                      // 主播客户端信息
	AdaptionInfo            *StreamUrlExtra_AdaptionInfo     `protobuf:"bytes,22,opt,name=adaption_info,json=adaptionInfo,proto3" json:"adaption_info,omitempty"`                                    // 适应信息
}

func (x *StreamUrlExtra) Reset() {
	*x = StreamUrlExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUrlExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUrlExtra) ProtoMessage() {}

func (x *StreamUrlExtra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUrlExtra.ProtoReflect.Descriptor instead.
func (*StreamUrlExtra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{50}
}

func (x *StreamUrlExtra) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StreamUrlExtra) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *StreamUrlExtra) GetFps() int64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *StreamUrlExtra) GetMaxBitrate() int64 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *StreamUrlExtra) GetMinBitrate() int64 {
	if x != nil {
		return x.MinBitrate
	}
	return 0
}

func (x *StreamUrlExtra) GetDefaultBitrate() int64 {
	if x != nil {
		return x.DefaultBitrate
	}
	return 0
}

func (x *StreamUrlExtra) GetBitrateAdaptStrategy() int64 {
	if x != nil {
		return x.BitrateAdaptStrategy
	}
	return 0
}

func (x *StreamUrlExtra) GetAnchorInteractProfile() int64 {
	if x != nil {
		return x.AnchorInteractProfile
	}
	return 0
}

func (x *StreamUrlExtra) GetAudienceInteractProfile() int64 {
	if x != nil {
		return x.AudienceInteractProfile
	}
	return 0
}

func (x *StreamUrlExtra) GetHardwareEncode() bool {
	if x != nil {
		return x.HardwareEncode
	}
	return false
}

func (x *StreamUrlExtra) GetVideoProfile() int64 {
	if x != nil {
		return x.VideoProfile
	}
	return 0
}

func (x *StreamUrlExtra) GetSuperResolution() *StreamUrlExtra_SuperResolution {
	if x != nil {
		return x.SuperResolution
	}
	return nil
}

func (x *StreamUrlExtra) GetH265Enable() bool {
	if x != nil {
		return x.H265Enable
	}
	return false
}

func (x *StreamUrlExtra) GetGopSec() int64 {
	if x != nil {
		return x.GopSec
	}
	return 0
}

func (x *StreamUrlExtra) GetBframeEnable() bool {
	if x != nil {
		return x.BframeEnable
	}
	return false
}

func (x *StreamUrlExtra) GetRoi() bool {
	if x != nil {
		return x.Roi
	}
	return false
}

func (x *StreamUrlExtra) GetSwRoi() bool {
	if x != nil {
		return x.SwRoi
	}
	return false
}

func (x *StreamUrlExtra) GetBytevc1Enable() bool {
	if x != nil {
		return x.Bytevc1Enable
	}
	return false
}

func (x *StreamUrlExtra) GetAnchorClientInfo() *StreamUrlExtra_AnchorClientInfo {
	if x != nil {
		return x.AnchorClientInfo
	}
	return nil
}

func (x *StreamUrlExtra) GetAdaptionInfo() *StreamUrlExtra_AdaptionInfo {
	if x != nil {
		return x.AdaptionInfo
	}
	return nil
}

// LiveCoreSDKData 消息定义
type LiveCoreSDKData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullData *LiveCoreSDKData_PullData `protobuf:"bytes,1,opt,name=pull_data,json=pullData,proto3" json:"pull_data,omitempty"` // 拉流数据
	PushData *LiveCoreSDKData_PushData `protobuf:"bytes,2,opt,name=push_data,json=pushData,proto3" json:"push_data,omitempty"` // 推流数据
	Size     string                    `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`                         // 尺寸信息
}

func (x *LiveCoreSDKData) Reset() {
	*x = LiveCoreSDKData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData) ProtoMessage() {}

func (x *LiveCoreSDKData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51}
}

func (x *LiveCoreSDKData) GetPullData() *LiveCoreSDKData_PullData {
	if x != nil {
		return x.PullData
	}
	return nil
}

func (x *LiveCoreSDKData) GetPushData() *LiveCoreSDKData_PushData {
	if x != nil {
		return x.PushData
	}
	return nil
}

func (x *LiveCoreSDKData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

// PlaySetting 消息定义
type PlaySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Horizontal string `protobuf:"bytes,1,opt,name=horizontal,proto3" json:"horizontal,omitempty"` // 水平设置
	Vertical   string `protobuf:"bytes,2,opt,name=vertical,proto3" json:"vertical,omitempty"`     // 垂直设置
}

func (x *PlaySetting) Reset() {
	*x = PlaySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySetting) ProtoMessage() {}

func (x *PlaySetting) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySetting.ProtoReflect.Descriptor instead.
func (*PlaySetting) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{52}
}

func (x *PlaySetting) GetHorizontal() string {
	if x != nil {
		return x.Horizontal
	}
	return ""
}

func (x *PlaySetting) GetVertical() string {
	if x != nil {
		return x.Vertical
	}
	return ""
}

// OpenStreamUrlEncrypt 消息定义
type OpenStreamUrlEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtmpPullUrl   string                               `protobuf:"bytes,1,opt,name=rtmp_pull_url,json=rtmpPullUrl,proto3" json:"rtmp_pull_url,omitempty"`                                                                                                 // RTMP 拉流 URL
	HlsPullUrl    string                               `protobuf:"bytes,2,opt,name=hls_pull_url,json=hlsPullUrl,proto3" json:"hls_pull_url,omitempty"`                                                                                                    // HLS 拉流 URL
	FlvPullUrl    map[string]string                    `protobuf:"bytes,3,rep,name=flv_pull_url,json=flvPullUrl,proto3" json:"flv_pull_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`            // FLV 拉流 URL 映射
	StreamData    string                               `protobuf:"bytes,4,opt,name=stream_data,json=streamData,proto3" json:"stream_data,omitempty"`                                                                                                      // 流数据
	Hls           []*LiveCoreSDKData_PullData_PlayInfo `protobuf:"bytes,5,rep,name=Hls,proto3" json:"Hls,omitempty"`                                                                                                                                      // HLS 播放信息
	Flv           []*LiveCoreSDKData_PullData_PlayInfo `protobuf:"bytes,6,rep,name=Flv,proto3" json:"Flv,omitempty"`                                                                                                                                      // FLV 播放信息
	HlsPullUrlMap map[string]string                    `protobuf:"bytes,7,rep,name=hls_pull_url_map,json=hlsPullUrlMap,proto3" json:"hls_pull_url_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // HLS 拉流 URL 映射
	PullDatas     map[string]*LiveCoreSDKData_PullData `protobuf:"bytes,8,rep,name=pull_datas,json=pullDatas,proto3" json:"pull_datas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                 // 拉流数据映射
}

func (x *OpenStreamUrlEncrypt) Reset() {
	*x = OpenStreamUrlEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenStreamUrlEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStreamUrlEncrypt) ProtoMessage() {}

func (x *OpenStreamUrlEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStreamUrlEncrypt.ProtoReflect.Descriptor instead.
func (*OpenStreamUrlEncrypt) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{53}
}

func (x *OpenStreamUrlEncrypt) GetRtmpPullUrl() string {
	if x != nil {
		return x.RtmpPullUrl
	}
	return ""
}

func (x *OpenStreamUrlEncrypt) GetHlsPullUrl() string {
	if x != nil {
		return x.HlsPullUrl
	}
	return ""
}

func (x *OpenStreamUrlEncrypt) GetFlvPullUrl() map[string]string {
	if x != nil {
		return x.FlvPullUrl
	}
	return nil
}

func (x *OpenStreamUrlEncrypt) GetStreamData() string {
	if x != nil {
		return x.StreamData
	}
	return ""
}

func (x *OpenStreamUrlEncrypt) GetHls() []*LiveCoreSDKData_PullData_PlayInfo {
	if x != nil {
		return x.Hls
	}
	return nil
}

func (x *OpenStreamUrlEncrypt) GetFlv() []*LiveCoreSDKData_PullData_PlayInfo {
	if x != nil {
		return x.Flv
	}
	return nil
}

func (x *OpenStreamUrlEncrypt) GetHlsPullUrlMap() map[string]string {
	if x != nil {
		return x.HlsPullUrlMap
	}
	return nil
}

func (x *OpenStreamUrlEncrypt) GetPullDatas() map[string]*LiveCoreSDKData_PullData {
	if x != nil {
		return x.PullDatas
	}
	return nil
}

// SafeReason 消息定义
type SafeReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafeType int32 `protobuf:"varint,1,opt,name=safe_type,json=safeType,proto3" json:"safe_type,omitempty"` // 安全类型
}

func (x *SafeReason) Reset() {
	*x = SafeReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeReason) ProtoMessage() {}

func (x *SafeReason) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeReason.ProtoReflect.Descriptor instead.
func (*SafeReason) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{54}
}

func (x *SafeReason) GetSafeType() int32 {
	if x != nil {
		return x.SafeType
	}
	return 0
}

// Quality 消息定义
type Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    // 名称
	SdkKey            string `protobuf:"bytes,2,opt,name=sdk_key,json=sdkKey,proto3" json:"sdk_key,omitempty"`                                  // SDK 键
	VCodec            string `protobuf:"bytes,3,opt,name=v_codec,json=vCodec,proto3" json:"v_codec,omitempty"`                                  // 视频编解码器
	Resolution        string `protobuf:"bytes,4,opt,name=resolution,proto3" json:"resolution,omitempty"`                                        // 分辨率
	Level             int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                                 // 级别
	VBitRate          int32  `protobuf:"varint,6,opt,name=v_bit_rate,json=vBitRate,proto3" json:"v_bit_rate,omitempty"`                         // 视频比特率
	AdditionalContent string `protobuf:"bytes,7,opt,name=additional_content,json=additionalContent,proto3" json:"additional_content,omitempty"` // 附加内容
	Fps               int32  `protobuf:"varint,8,opt,name=fps,proto3" json:"fps,omitempty"`                                                     // 帧率
	Disable           int32  `protobuf:"varint,9,opt,name=disable,proto3" json:"disable,omitempty"`                                             // 禁用标志
}

func (x *Quality) Reset() {
	*x = Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quality) ProtoMessage() {}

func (x *Quality) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quality.ProtoReflect.Descriptor instead.
func (*Quality) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{55}
}

func (x *Quality) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Quality) GetSdkKey() string {
	if x != nil {
		return x.SdkKey
	}
	return ""
}

func (x *Quality) GetVCodec() string {
	if x != nil {
		return x.VCodec
	}
	return ""
}

func (x *Quality) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *Quality) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Quality) GetVBitRate() int32 {
	if x != nil {
		return x.VBitRate
	}
	return 0
}

func (x *Quality) GetAdditionalContent() string {
	if x != nil {
		return x.AdditionalContent
	}
	return ""
}

func (x *Quality) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *Quality) GetDisable() int32 {
	if x != nil {
		return x.Disable
	}
	return 0
}

// RoomExtra 消息定义
type RoomExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSandbox                  bool               `protobuf:"varint,1,opt,name=is_sandbox,json=isSandbox,proto3" json:"is_sandbox,omitempty"`                                                         // 是否为沙盒环境
	EnterRegionRestriction     *RegionRestriction `protobuf:"bytes,2,opt,name=enter_region_restriction,json=enterRegionRestriction,proto3" json:"enter_region_restriction,omitempty"`                 // 进入区域限制
	EnterRegionMatch           *RegionMatch       `protobuf:"bytes,3,opt,name=enter_region_match,json=enterRegionMatch,proto3" json:"enter_region_match,omitempty"`                                   // 进入区域匹配
	FilterWithNoContext        *SafeReason        `protobuf:"bytes,4,opt,name=filter_with_no_context,json=filterWithNoContext,proto3" json:"filter_with_no_context,omitempty"`                        // 无上下文过滤
	XiguaUid                   int64              `protobuf:"varint,5,opt,name=xigua_uid,json=xiguaUid,proto3" json:"xigua_uid,omitempty"`                                                            // 西瓜 UID
	LimitStrategy              int64              `protobuf:"varint,6,opt,name=limit_strategy,json=limitStrategy,proto3" json:"limit_strategy,omitempty"`                                             // 限制策略
	LimitAppid                 string             `protobuf:"bytes,7,opt,name=limit_appid,json=limitAppid,proto3" json:"limit_appid,omitempty"`                                                       // 限制应用 ID
	GeoBlock                   int32              `protobuf:"varint,8,opt,name=geo_block,json=geoBlock,proto3" json:"geo_block,omitempty"`                                                            // 地理封锁
	VrType                     int32              `protobuf:"varint,9,opt,name=vr_type,json=vrType,proto3" json:"vr_type,omitempty"`                                                                  // VR 类型
	IsVirtualAnchor            bool               `protobuf:"varint,10,opt,name=is_virtual_anchor,json=isVirtualAnchor,proto3" json:"is_virtual_anchor,omitempty"`                                    // 是否为虚拟主播
	CreateScene                string             `protobuf:"bytes,11,opt,name=create_scene,json=createScene,proto3" json:"create_scene,omitempty"`                                                   // 创建场景
	RealtimeReplayEnabled      bool               `protobuf:"varint,12,opt,name=realtime_replay_enabled,json=realtimeReplayEnabled,proto3" json:"realtime_replay_enabled,omitempty"`                  // 实时重播启用
	RealtimePlaybackShift      int64              `protobuf:"varint,13,opt,name=realtime_playback_shift,json=realtimePlaybackShift,proto3" json:"realtime_playback_shift,omitempty"`                  // 实时播放偏移
	RealtimePlaybackStartShift int64              `protobuf:"varint,14,opt,name=realtime_playback_start_shift,json=realtimePlaybackStartShift,proto3" json:"realtime_playback_start_shift,omitempty"` // 实时播放开始偏移
	RealtimePlaybackQualities  []*Quality         `protobuf:"bytes,15,rep,name=realtime_playback_qualities,json=realtimePlaybackQualities,proto3" json:"realtime_playback_qualities,omitempty"`       // 实时播放质量
	FacialUnrecognised         int32              `protobuf:"varint,16,opt,name=facial_unrecognised,json=facialUnrecognised,proto3" json:"facial_unrecognised,omitempty"`                             // 面部未识别
}

func (x *RoomExtra) Reset() {
	*x = RoomExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomExtra) ProtoMessage() {}

func (x *RoomExtra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomExtra.ProtoReflect.Descriptor instead.
func (*RoomExtra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{56}
}

func (x *RoomExtra) GetIsSandbox() bool {
	if x != nil {
		return x.IsSandbox
	}
	return false
}

func (x *RoomExtra) GetEnterRegionRestriction() *RegionRestriction {
	if x != nil {
		return x.EnterRegionRestriction
	}
	return nil
}

func (x *RoomExtra) GetEnterRegionMatch() *RegionMatch {
	if x != nil {
		return x.EnterRegionMatch
	}
	return nil
}

func (x *RoomExtra) GetFilterWithNoContext() *SafeReason {
	if x != nil {
		return x.FilterWithNoContext
	}
	return nil
}

func (x *RoomExtra) GetXiguaUid() int64 {
	if x != nil {
		return x.XiguaUid
	}
	return 0
}

func (x *RoomExtra) GetLimitStrategy() int64 {
	if x != nil {
		return x.LimitStrategy
	}
	return 0
}

func (x *RoomExtra) GetLimitAppid() string {
	if x != nil {
		return x.LimitAppid
	}
	return ""
}

func (x *RoomExtra) GetGeoBlock() int32 {
	if x != nil {
		return x.GeoBlock
	}
	return 0
}

func (x *RoomExtra) GetVrType() int32 {
	if x != nil {
		return x.VrType
	}
	return 0
}

func (x *RoomExtra) GetIsVirtualAnchor() bool {
	if x != nil {
		return x.IsVirtualAnchor
	}
	return false
}

func (x *RoomExtra) GetCreateScene() string {
	if x != nil {
		return x.CreateScene
	}
	return ""
}

func (x *RoomExtra) GetRealtimeReplayEnabled() bool {
	if x != nil {
		return x.RealtimeReplayEnabled
	}
	return false
}

func (x *RoomExtra) GetRealtimePlaybackShift() int64 {
	if x != nil {
		return x.RealtimePlaybackShift
	}
	return 0
}

func (x *RoomExtra) GetRealtimePlaybackStartShift() int64 {
	if x != nil {
		return x.RealtimePlaybackStartShift
	}
	return 0
}

func (x *RoomExtra) GetRealtimePlaybackQualities() []*Quality {
	if x != nil {
		return x.RealtimePlaybackQualities
	}
	return nil
}

func (x *RoomExtra) GetFacialUnrecognised() int32 {
	if x != nil {
		return x.FacialUnrecognised
	}
	return 0
}

// RoomAuthStatus 消息定义
type RoomAuthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat                           bool                                 `protobuf:"varint,1,opt,name=Chat,proto3" json:"Chat,omitempty"`                                                      // 聊天权限
	Danmaku                        bool                                 `protobuf:"varint,2,opt,name=Danmaku,proto3" json:"Danmaku,omitempty"`                                                // 弹幕权限
	Gift                           bool                                 `protobuf:"varint,3,opt,name=Gift,proto3" json:"Gift,omitempty"`                                                      // 礼物权限
	LuckMoney                      bool                                 `protobuf:"varint,4,opt,name=LuckMoney,proto3" json:"LuckMoney,omitempty"`                                            // 红包权限
	Digg                           bool                                 `protobuf:"varint,5,opt,name=Digg,proto3" json:"Digg,omitempty"`                                                      // 点赞权限
	RoomContributor                bool                                 `protobuf:"varint,7,opt,name=RoomContributor,proto3" json:"RoomContributor,omitempty"`                                // 房间贡献者权限
	Props                          bool                                 `protobuf:"varint,8,opt,name=Props,proto3" json:"Props,omitempty"`                                                    // 道具权限
	UserCard                       bool                                 `protobuf:"varint,9,opt,name=UserCard,proto3" json:"UserCard,omitempty"`                                              // 用户卡片权限
	POI                            bool                                 `protobuf:"varint,10,opt,name=POI,proto3" json:"POI,omitempty"`                                                       // POI 权限
	MoreAnchor                     int64                                `protobuf:"varint,11,opt,name=MoreAnchor,proto3" json:"MoreAnchor,omitempty"`                                         // 更多主播权限
	Banner                         int64                                `protobuf:"varint,12,opt,name=Banner,proto3" json:"Banner,omitempty"`                                                 // 横幅权限
	Share                          int64                                `protobuf:"varint,13,opt,name=Share,proto3" json:"Share,omitempty"`                                                   // 分享权限
	UserCorner                     int64                                `protobuf:"varint,14,opt,name=UserCorner,proto3" json:"UserCorner,omitempty"`                                         // 用户角标权限
	Landscape                      int64                                `protobuf:"varint,15,opt,name=Landscape,proto3" json:"Landscape,omitempty"`                                           // 横屏权限
	LandscapeChat                  int64                                `protobuf:"varint,16,opt,name=LandscapeChat,proto3" json:"LandscapeChat,omitempty"`                                   // 横屏聊天权限
	PublicScreen                   int64                                `protobuf:"varint,17,opt,name=PublicScreen,proto3" json:"PublicScreen,omitempty"`                                     // 公共屏幕权限
	GiftAnchorMt                   int64                                `protobuf:"varint,18,opt,name=GiftAnchorMt,proto3" json:"GiftAnchorMt,omitempty"`                                     // 礼物主播 MT 权限
	RecordScreen                   int64                                `protobuf:"varint,19,opt,name=RecordScreen,proto3" json:"RecordScreen,omitempty"`                                     // 屏幕录制权限
	DonationSticker                int64                                `protobuf:"varint,20,opt,name=DonationSticker,proto3" json:"DonationSticker,omitempty"`                               // 捐赠贴纸权限
	HourRank                       int64                                `protobuf:"varint,21,opt,name=HourRank,proto3" json:"HourRank,omitempty"`                                             // 小时排名权限
	CommerceCard                   int64                                `protobuf:"varint,22,opt,name=CommerceCard,proto3" json:"CommerceCard,omitempty"`                                     // 商业卡片权限
	AudioChat                      int64                                `protobuf:"varint,23,opt,name=AudioChat,proto3" json:"AudioChat,omitempty"`                                           // 音频聊天权限
	DanmakuDefault                 int64                                `protobuf:"varint,24,opt,name=DanmakuDefault,proto3" json:"DanmakuDefault,omitempty"`                                 // 默认弹幕权限
	KtvOrderSong                   int64                                `protobuf:"varint,25,opt,name=KtvOrderSong,proto3" json:"KtvOrderSong,omitempty"`                                     // KTV 点歌权限
	SelectionAlbum                 int64                                `protobuf:"varint,26,opt,name=SelectionAlbum,proto3" json:"SelectionAlbum,omitempty"`                                 // 选择专辑权限
	Like                           int64                                `protobuf:"varint,27,opt,name=Like,proto3" json:"Like,omitempty"`                                                     // 喜欢权限
	MultiplierPlayback             int64                                `protobuf:"varint,28,opt,name=MultiplierPlayback,proto3" json:"MultiplierPlayback,omitempty"`                         // 倍速播放权限
	DownloadVideo                  int64                                `protobuf:"varint,29,opt,name=DownloadVideo,proto3" json:"DownloadVideo,omitempty"`                                   // 下载视频权限
	Collect                        int64                                `protobuf:"varint,30,opt,name=Collect,proto3" json:"Collect,omitempty"`                                               // 收藏权限
	TimedShutdown                  int64                                `protobuf:"varint,31,opt,name=TimedShutdown,proto3" json:"TimedShutdown,omitempty"`                                   // 定时关机权限
	Seek                           int64                                `protobuf:"varint,32,opt,name=Seek,proto3" json:"Seek,omitempty"`                                                     // 搜索权限
	Denounce                       int64                                `protobuf:"varint,33,opt,name=Denounce,proto3" json:"Denounce,omitempty"`                                             // 举报权限
	Dislike                        int64                                `protobuf:"varint,34,opt,name=Dislike,proto3" json:"Dislike,omitempty"`                                               // 不喜欢权限
	OnlyTa                         int64                                `protobuf:"varint,35,opt,name=OnlyTa,proto3" json:"OnlyTa,omitempty"`                                                 // 仅 TA 权限
	CastScreen                     int64                                `protobuf:"varint,36,opt,name=CastScreen,proto3" json:"CastScreen,omitempty"`                                         // 投屏权限
	CommentWall                    int64                                `protobuf:"varint,37,opt,name=CommentWall,proto3" json:"CommentWall,omitempty"`                                       // 评论墙权限
	BulletStyle                    int64                                `protobuf:"varint,38,opt,name=BulletStyle,proto3" json:"BulletStyle,omitempty"`                                       // 弹幕样式权限
	ShowGamePlugin                 int64                                `protobuf:"varint,39,opt,name=ShowGamePlugin,proto3" json:"ShowGamePlugin,omitempty"`                                 // 显示游戏插件权限
	VSGift                         int64                                `protobuf:"varint,40,opt,name=VSGift,proto3" json:"VSGift,omitempty"`                                                 // VS 礼物权限
	VSTopic                        int64                                `protobuf:"varint,41,opt,name=VSTopic,proto3" json:"VSTopic,omitempty"`                                               // VS 话题权限
	VSRank                         int64                                `protobuf:"varint,42,opt,name=VSRank,proto3" json:"VSRank,omitempty"`                                                 // VS 排名权限
	AdminCommentWall               int64                                `protobuf:"varint,43,opt,name=AdminCommentWall,proto3" json:"AdminCommentWall,omitempty"`                             // 管理员评论墙权限
	CommerceComponent              int64                                `protobuf:"varint,44,opt,name=CommerceComponent,proto3" json:"CommerceComponent,omitempty"`                           // 商业组件权限
	DouPlus                        int64                                `protobuf:"varint,45,opt,name=DouPlus,proto3" json:"DouPlus,omitempty"`                                               // Dou+ 权限
	GamePointsPlaying              int64                                `protobuf:"varint,46,opt,name=GamePointsPlaying,proto3" json:"GamePointsPlaying,omitempty"`                           // 游戏点数播放权限
	Poster                         int64                                `protobuf:"varint,47,opt,name=Poster,proto3" json:"Poster,omitempty"`                                                 // 海报权限
	Highlights                     int64                                `protobuf:"varint,48,opt,name=Highlights,proto3" json:"Highlights,omitempty"`                                         // 高光权限
	TypingCommentState             int64                                `protobuf:"varint,49,opt,name=TypingCommentState,proto3" json:"TypingCommentState,omitempty"`                         // 打字评论状态权限
	StrokeUpDownGuide              int64                                `protobuf:"varint,50,opt,name=StrokeUpDownGuide,proto3" json:"StrokeUpDownGuide,omitempty"`                           // 上下滑动引导权限
	UpRightStatsFloatingLayer      int64                                `protobuf:"varint,51,opt,name=UpRightStatsFloatingLayer,proto3" json:"UpRightStatsFloatingLayer,omitempty"`           // 右上角统计浮层权限
	CastScreenExplicit             int64                                `protobuf:"varint,52,opt,name=CastScreenExplicit,proto3" json:"CastScreenExplicit,omitempty"`                         // 明确投屏权限
	Selection                      int64                                `protobuf:"varint,53,opt,name=Selection,proto3" json:"Selection,omitempty"`                                           // 选择权限
	IndustryService                int64                                `protobuf:"varint,54,opt,name=IndustryService,proto3" json:"IndustryService,omitempty"`                               // 行业服务权限
	VerticalRank                   int64                                `protobuf:"varint,55,opt,name=VerticalRank,proto3" json:"VerticalRank,omitempty"`                                     // 垂直排名权限
	EnterEffects                   int64                                `protobuf:"varint,56,opt,name=EnterEffects,proto3" json:"EnterEffects,omitempty"`                                     // 进入效果权限
	FansClub                       int64                                `protobuf:"varint,57,opt,name=FansClub,proto3" json:"FansClub,omitempty"`                                             // 粉丝俱乐部权限
	EmojiOutside                   int64                                `protobuf:"varint,58,opt,name=EmojiOutside,proto3" json:"EmojiOutside,omitempty"`                                     // 外部表情权限
	CanSellTicket                  int64                                `protobuf:"varint,59,opt,name=CanSellTicket,proto3" json:"CanSellTicket,omitempty"`                                   // 可售票权限
	DouPlusPopularityGem           int64                                `protobuf:"varint,60,opt,name=DouPlusPopularityGem,proto3" json:"DouPlusPopularityGem,omitempty"`                     // Dou+ 人气宝石权限
	MissionCenter                  int64                                `protobuf:"varint,61,opt,name=MissionCenter,proto3" json:"MissionCenter,omitempty"`                                   // 任务中心权限
	ExpandScreen                   int64                                `protobuf:"varint,62,opt,name=ExpandScreen,proto3" json:"ExpandScreen,omitempty"`                                     // 扩展屏幕权限
	FansGroup                      int64                                `protobuf:"varint,63,opt,name=FansGroup,proto3" json:"FansGroup,omitempty"`                                           // 粉丝群权限
	Topic                          int64                                `protobuf:"varint,64,opt,name=Topic,proto3" json:"Topic,omitempty"`                                                   // 话题权限
	AnchorMission                  int64                                `protobuf:"varint,65,opt,name=AnchorMission,proto3" json:"AnchorMission,omitempty"`                                   // 主播任务权限
	Teleprompter                   int64                                `protobuf:"varint,66,opt,name=Teleprompter,proto3" json:"Teleprompter,omitempty"`                                     // 提词器权限
	ChatDynamicSlideSpeed          int64                                `protobuf:"varint,67,opt,name=ChatDynamicSlideSpeed,proto3" json:"ChatDynamicSlideSpeed,omitempty"`                   // 聊天动态滑动速度权限
	SmallWindowDisplay             int64                                `protobuf:"varint,68,opt,name=SmallWindowDisplay,proto3" json:"SmallWindowDisplay,omitempty"`                         // 小窗口显示权限
	MessageDispatch                int64                                `protobuf:"varint,69,opt,name=MessageDispatch,proto3" json:"MessageDispatch,omitempty"`                               // 消息调度权限
	RoomChannel                    int64                                `protobuf:"varint,70,opt,name=RoomChannel,proto3" json:"RoomChannel,omitempty"`                                       // 房间频道权限
	ChatDispatch                   int64                                `protobuf:"varint,71,opt,name=ChatDispatch,proto3" json:"ChatDispatch,omitempty"`                                     // 聊天调度权限
	LinkmicGuestLike               int64                                `protobuf:"varint,72,opt,name=LinkmicGuestLike,proto3" json:"LinkmicGuestLike,omitempty"`                             // 连麦嘉宾喜欢权限
	MediaLinkmic                   int64                                `protobuf:"varint,73,opt,name=MediaLinkmic,proto3" json:"MediaLinkmic,omitempty"`                                     // 媒体连麦权限
	VideoShare                     int64                                `protobuf:"varint,74,opt,name=VideoShare,proto3" json:"VideoShare,omitempty"`                                         // 视频分享权限
	ChatGuideEmoji                 int64                                `protobuf:"varint,75,opt,name=ChatGuideEmoji,proto3" json:"ChatGuideEmoji,omitempty"`                                 // 聊天引导表情权限
	ChatGuideImage                 int64                                `protobuf:"varint,76,opt,name=ChatGuideImage,proto3" json:"ChatGuideImage,omitempty"`                                 // 聊天引导图片权限
	PCPlay                         int64                                `protobuf:"varint,77,opt,name=PCPlay,proto3" json:"PCPlay,omitempty"`                                                 // PC 播放权限
	PadPlay                        int64                                `protobuf:"varint,78,opt,name=PadPlay,proto3" json:"PadPlay,omitempty"`                                               // 平板播放权限
	LongTouch                      int64                                `protobuf:"varint,79,opt,name=LongTouch,proto3" json:"LongTouch,omitempty"`                                           // 长按权限
	FirstFeedHistChat              int64                                `protobuf:"varint,80,opt,name=FirstFeedHistChat,proto3" json:"FirstFeedHistChat,omitempty"`                           // 首次反馈历史聊天权限
	MoreHistChat                   int64                                `protobuf:"varint,81,opt,name=MoreHistChat,proto3" json:"MoreHistChat,omitempty"`                                     // 更多历史聊天权限
	WordAssociation                int64                                `protobuf:"varint,82,opt,name=WordAssociation,proto3" json:"WordAssociation,omitempty"`                               // 词联想权限
	LandscapeScreenCapture         int64                                `protobuf:"varint,83,opt,name=LandscapeScreenCapture,proto3" json:"LandscapeScreenCapture,omitempty"`                 // 横屏截图权限
	LandscapeScreenRecording       int64                                `protobuf:"varint,84,opt,name=LandscapeScreenRecording,proto3" json:"LandscapeScreenRecording,omitempty"`             // 横屏录屏权限
	ScreenProjectionBarrage        int64                                `protobuf:"varint,85,opt,name=ScreenProjectionBarrage,proto3" json:"ScreenProjectionBarrage,omitempty"`               // 屏幕投影弹幕权限
	SmallWindowPlayer              int64                                `protobuf:"varint,86,opt,name=SmallWindowPlayer,proto3" json:"SmallWindowPlayer,omitempty"`                           // 小窗口播放器权限
	ChatOperate                    int64                                `protobuf:"varint,87,opt,name=ChatOperate,proto3" json:"ChatOperate,omitempty"`                                       // 聊天操作权限
	EcomFansClub                   int64                                `protobuf:"varint,88,opt,name=EcomFansClub,proto3" json:"EcomFansClub,omitempty"`                                     // 电商粉丝俱乐部权限
	AudioChatTotext                int64                                `protobuf:"varint,89,opt,name=AudioChatTotext,proto3" json:"AudioChatTotext,omitempty"`                               // 音频聊天转文本权限
	CommonCard                     int64                                `protobuf:"varint,90,opt,name=CommonCard,proto3" json:"CommonCard,omitempty"`                                         // 通用卡片权限
	ShortTouch                     int64                                `protobuf:"varint,91,opt,name=ShortTouch,proto3" json:"ShortTouch,omitempty"`                                         // 短按权限
	HostTeamChannel                int64                                `protobuf:"varint,92,opt,name=HostTeamChannel,proto3" json:"HostTeamChannel,omitempty"`                               // 主队频道权限
	LandscapeChatDynamicSlideSpeed int64                                `protobuf:"varint,93,opt,name=LandscapeChatDynamicSlideSpeed,proto3" json:"LandscapeChatDynamicSlideSpeed,omitempty"` // 横屏聊天动态滑动速度权限
	HostTeam                       int64                                `protobuf:"varint,94,opt,name=HostTeam,proto3" json:"HostTeam,omitempty"`                                             // 主队权限
	AnchorHotMessageAggregated     int64                                `protobuf:"varint,95,opt,name=AnchorHotMessageAggregated,proto3" json:"AnchorHotMessageAggregated,omitempty"`         // 主播热消息聚合权限
	AnchorColdMessageTiled         int64                                `protobuf:"varint,96,opt,name=AnchorColdMessageTiled,proto3" json:"AnchorColdMessageTiled,omitempty"`                 // 主播冷消息平铺权限
	ScreenBottomInfo               int64                                `protobuf:"varint,97,opt,name=ScreenBottomInfo,proto3" json:"ScreenBottomInfo,omitempty"`                             // 屏幕底部信息权限
	PreviewHotCommentSwitch        int64                                `protobuf:"varint,98,opt,name=PreviewHotCommentSwitch,proto3" json:"PreviewHotCommentSwitch,omitempty"`               // 预览热评论开关权限
	RoomWidget                     int64                                `protobuf:"varint,99,opt,name=RoomWidget,proto3" json:"RoomWidget,omitempty"`                                         // 房间小部件权限
	OffReason                      *RoomAuthStatus_RoomAuthOffReasons   `protobuf:"bytes,100,opt,name=OffReason,proto3" json:"OffReason,omitempty"`                                           // 权限关闭原因
	SpecialStyle                   *RoomAuthStatus_RoomAuthSpecialStyle `protobuf:"bytes,101,opt,name=SpecialStyle,proto3" json:"SpecialStyle,omitempty"`                                     // 特殊样式权限
	PanelECService                 int64                                `protobuf:"varint,102,opt,name=PanelECService,proto3" json:"PanelECService,omitempty"`                                // 面板电商服务权限
	FixedChat                      int64                                `protobuf:"varint,103,opt,name=FixedChat,proto3" json:"FixedChat,omitempty"`                                          // 固定聊天权限
	LandscapeGift                  int64                                `protobuf:"varint,104,opt,name=LandscapeGift,proto3" json:"LandscapeGift,omitempty"`                                  // 横屏礼物权限
	HotChatTray                    int64                                `protobuf:"varint,105,opt,name=HotChatTray,proto3" json:"HotChatTray,omitempty"`                                      // 热聊托盘权限
	ItemShare                      int64                                `protobuf:"varint,106,opt,name=ItemShare,proto3" json:"ItemShare,omitempty"`                                          // 项目分享权限
	ShortTouchTempState            int64                                `protobuf:"varint,107,opt,name=ShortTouchTempState,proto3" json:"ShortTouchTempState,omitempty"`                      // 短按临时状态权限
	StickyMessage                  int64                                `protobuf:"varint,108,opt,name=StickyMessage,proto3" json:"StickyMessage,omitempty"`                                  // 粘性消息权限
	ProjectionBtn                  int64                                `protobuf:"varint,109,opt,name=ProjectionBtn,proto3" json:"ProjectionBtn,omitempty"`                                  // 投影按钮权限
	ChatDynamicSlideSpeedAnchor    int64                                `protobuf:"varint,110,opt,name=ChatDynamicSlideSpeedAnchor,proto3" json:"ChatDynamicSlideSpeedAnchor,omitempty"`      // 聊天动态滑动速度（主播）权限
	PosterCache                    int64                                `protobuf:"varint,111,opt,name=PosterCache,proto3" json:"PosterCache,omitempty"`                                      // 海报缓存权限
	MediaHistoryMessage            int64                                `protobuf:"varint,112,opt,name=MediaHistoryMessage,proto3" json:"MediaHistoryMessage,omitempty"`                      // 媒体历史消息权限
	ToolbarBubble                  int64                                `protobuf:"varint,113,opt,name=ToolbarBubble,proto3" json:"ToolbarBubble,omitempty"`                                  // 工具栏气泡权限
	ImHeatValue                    int64                                `protobuf:"varint,114,opt,name=ImHeatValue,proto3" json:"ImHeatValue,omitempty"`                                      // IM 热度值权限
	InteractiveComponent           int64                                `protobuf:"varint,115,opt,name=InteractiveComponent,proto3" json:"InteractiveComponent,omitempty"`                    // 互动组件权限
	ChatReply                      int64                                `protobuf:"varint,116,opt,name=ChatReply,proto3" json:"ChatReply,omitempty"`                                          // 聊天回复权限
	ChatMention                    int64                                `protobuf:"varint,117,opt,name=ChatMention,proto3" json:"ChatMention,omitempty"`                                      // 聊天提及权限
	FrequentlyChat                 int64                                `protobuf:"varint,118,opt,name=FrequentlyChat,proto3" json:"FrequentlyChat,omitempty"`                                // 频繁聊天权限
	StreamAdaptation               int64                                `protobuf:"varint,119,opt,name=StreamAdaptation,proto3" json:"StreamAdaptation,omitempty"`                            // 流适配权限
	VideoAmplificationType         int64                                `protobuf:"varint,120,opt,name=VideoAmplificationType,proto3" json:"VideoAmplificationType,omitempty"`                // 视频放大类型权限
	FeaturedPublicScreen           int64                                `protobuf:"varint,121,opt,name=FeaturedPublicScreen,proto3" json:"FeaturedPublicScreen,omitempty"`                    // 特色公共屏幕权限
	LandscapeScreenShare           int64                                `protobuf:"varint,122,opt,name=LandscapeScreenShare,proto3" json:"LandscapeScreenShare,omitempty"`                    // 横屏分享权限
	VerticalScreenShare            int64                                `protobuf:"varint,123,opt,name=VerticalScreenShare,proto3" json:"VerticalScreenShare,omitempty"`                      // 竖屏分享权限
	AnchorAudioChat                int64                                `protobuf:"varint,124,opt,name=AnchorAudioChat,proto3" json:"AnchorAudioChat,omitempty"`                              // 主播音频聊天权限
	PreviewChatExpose              int64                                `protobuf:"varint,125,opt,name=PreviewChatExpose,proto3" json:"PreviewChatExpose,omitempty"`                          // 预览聊天曝光权限
	FusionEmoji                    int64                                `protobuf:"varint,126,opt,name=FusionEmoji,proto3" json:"FusionEmoji,omitempty"`                                      // 融合表情权限
	MyLiveEntrance                 int64                                `protobuf:"varint,127,opt,name=MyLiveEntrance,proto3" json:"MyLiveEntrance,omitempty"`                                // 我的直播入口权限
	ChatIdentity                   int64                                `protobuf:"varint,128,opt,name=ChatIdentity,proto3" json:"ChatIdentity,omitempty"`                                    // 聊天身份权限
	MarkUser                       int64                                `protobuf:"varint,129,opt,name=MarkUser,proto3" json:"MarkUser,omitempty"`                                            // 标记用户权限
	LongPressOption                int64                                `protobuf:"varint,130,opt,name=LongPressOption,proto3" json:"LongPressOption,omitempty"`                              // 长按选项权限
	ClearEntranceOption            int64                                `protobuf:"varint,131,opt,name=ClearEntranceOption,proto3" json:"ClearEntranceOption,omitempty"`                      // 清除入口选项权限
	PlayerRankList                 int64                                `protobuf:"varint,132,opt,name=PlayerRankList,proto3" json:"PlayerRankList,omitempty"`                                // 播放者排名列表权限
	AIClone                        int64                                `protobuf:"varint,133,opt,name=AIClone,proto3" json:"AIClone,omitempty"`                                              // AI 克隆权限
	GiftVote                       int64                                `protobuf:"varint,134,opt,name=GiftVote,proto3" json:"GiftVote,omitempty"`                                            // 礼物投票权限
	TextGift                       int64                                `protobuf:"varint,135,opt,name=TextGift,proto3" json:"TextGift,omitempty"`                                            // 文本礼物权限
	FansClubLetter                 int64                                `protobuf:"varint,136,opt,name=FansClubLetter,proto3" json:"FansClubLetter,omitempty"`                                // 粉丝俱乐部信件权限
	FansClubBlessing               int64                                `protobuf:"varint,137,opt,name=FansClubBlessing,proto3" json:"FansClubBlessing,omitempty"`                            // 粉丝俱乐部祝福权限
	FansClubNotice                 int64                                `protobuf:"varint,138,opt,name=FansClubNotice,proto3" json:"FansClubNotice,omitempty"`                                // 粉丝俱乐部通知权限
	FansClubDeclaration            int64                                `protobuf:"varint,139,opt,name=FansClubDeclaration,proto3" json:"FansClubDeclaration,omitempty"`                      // 粉丝俱乐部声明权限
	MessageGift                    int64                                `protobuf:"varint,140,opt,name=MessageGift,proto3" json:"MessageGift,omitempty"`                                      // 消息礼物权限
	EnhancedTouch                  int64                                `protobuf:"varint,141,opt,name=EnhancedTouch,proto3" json:"EnhancedTouch,omitempty"`                                  // 增强触摸权限
	ChatMentionV2                  int64                                `protobuf:"varint,142,opt,name=ChatMentionV2,proto3" json:"ChatMentionV2,omitempty"`                                  // 聊天提及 V2 权限
	VsCommentBar                   int64                                `protobuf:"varint,200,opt,name=VsCommentBar,proto3" json:"VsCommentBar,omitempty"`                                    // VS 评论栏权限
	VsWelcomeDanmaku               int64                                `protobuf:"varint,201,opt,name=VsWelcomeDanmaku,proto3" json:"VsWelcomeDanmaku,omitempty"`                            // VS 欢迎弹幕权限
	VsFansClub                     int64                                `protobuf:"varint,202,opt,name=VsFansClub,proto3" json:"VsFansClub,omitempty"`                                        // VS 粉丝俱乐部权限
	VsExtensionEnableFollow        int64                                `protobuf:"varint,203,opt,name=VsExtensionEnableFollow,proto3" json:"VsExtensionEnableFollow,omitempty"`              // VS 扩展启用关注权限
	VsDouPlus                      int64                                `protobuf:"varint,204,opt,name=VsDouPlus,proto3" json:"VsDouPlus,omitempty"`                                          // VS Dou+ 权限
	QuizGamePointsPlaying          int64                                `protobuf:"varint,205,opt,name=QuizGamePointsPlaying,proto3" json:"QuizGamePointsPlaying,omitempty"`                  // 测验游戏点数播放权限
	UgcVSReplayDelete              int64                                `protobuf:"varint,206,opt,name=UgcVSReplayDelete,proto3" json:"UgcVSReplayDelete,omitempty"`                          // UGC VS 回放删除权限
	UgcVsReplayVisibility          int64                                `protobuf:"varint,207,opt,name=UgcVsReplayVisibility,proto3" json:"UgcVsReplayVisibility,omitempty"`                  // UGC VS 回放可见性权限
	InteractionGift                int64                                `protobuf:"varint,208,opt,name=InteractionGift,proto3" json:"InteractionGift,omitempty"`                              // 互动礼物权限
	SubscribeCardPackage           int64                                `protobuf:"varint,209,opt,name=SubscribeCardPackage,proto3" json:"SubscribeCardPackage,omitempty"`                    // 订阅卡包权限
	ShowQualification              int64                                `protobuf:"varint,210,opt,name=ShowQualification,proto3" json:"ShowQualification,omitempty"`                          // 显示资格权限
	UseHostInfo                    int64                                `protobuf:"varint,301,opt,name=UseHostInfo,proto3" json:"UseHostInfo,omitempty"`                                      // 使用主机信息权限
	CountType                      int64                                `protobuf:"varint,5000,opt,name=CountType,proto3" json:"CountType,omitempty"`                                         // 计数类型权限
}

func (x *RoomAuthStatus) Reset() {
	*x = RoomAuthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAuthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAuthStatus) ProtoMessage() {}

func (x *RoomAuthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAuthStatus.ProtoReflect.Descriptor instead.
func (*RoomAuthStatus) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{57}
}

func (x *RoomAuthStatus) GetChat() bool {
	if x != nil {
		return x.Chat
	}
	return false
}

func (x *RoomAuthStatus) GetDanmaku() bool {
	if x != nil {
		return x.Danmaku
	}
	return false
}

func (x *RoomAuthStatus) GetGift() bool {
	if x != nil {
		return x.Gift
	}
	return false
}

func (x *RoomAuthStatus) GetLuckMoney() bool {
	if x != nil {
		return x.LuckMoney
	}
	return false
}

func (x *RoomAuthStatus) GetDigg() bool {
	if x != nil {
		return x.Digg
	}
	return false
}

func (x *RoomAuthStatus) GetRoomContributor() bool {
	if x != nil {
		return x.RoomContributor
	}
	return false
}

func (x *RoomAuthStatus) GetProps() bool {
	if x != nil {
		return x.Props
	}
	return false
}

func (x *RoomAuthStatus) GetUserCard() bool {
	if x != nil {
		return x.UserCard
	}
	return false
}

func (x *RoomAuthStatus) GetPOI() bool {
	if x != nil {
		return x.POI
	}
	return false
}

func (x *RoomAuthStatus) GetMoreAnchor() int64 {
	if x != nil {
		return x.MoreAnchor
	}
	return 0
}

func (x *RoomAuthStatus) GetBanner() int64 {
	if x != nil {
		return x.Banner
	}
	return 0
}

func (x *RoomAuthStatus) GetShare() int64 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *RoomAuthStatus) GetUserCorner() int64 {
	if x != nil {
		return x.UserCorner
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscape() int64 {
	if x != nil {
		return x.Landscape
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeChat() int64 {
	if x != nil {
		return x.LandscapeChat
	}
	return 0
}

func (x *RoomAuthStatus) GetPublicScreen() int64 {
	if x != nil {
		return x.PublicScreen
	}
	return 0
}

func (x *RoomAuthStatus) GetGiftAnchorMt() int64 {
	if x != nil {
		return x.GiftAnchorMt
	}
	return 0
}

func (x *RoomAuthStatus) GetRecordScreen() int64 {
	if x != nil {
		return x.RecordScreen
	}
	return 0
}

func (x *RoomAuthStatus) GetDonationSticker() int64 {
	if x != nil {
		return x.DonationSticker
	}
	return 0
}

func (x *RoomAuthStatus) GetHourRank() int64 {
	if x != nil {
		return x.HourRank
	}
	return 0
}

func (x *RoomAuthStatus) GetCommerceCard() int64 {
	if x != nil {
		return x.CommerceCard
	}
	return 0
}

func (x *RoomAuthStatus) GetAudioChat() int64 {
	if x != nil {
		return x.AudioChat
	}
	return 0
}

func (x *RoomAuthStatus) GetDanmakuDefault() int64 {
	if x != nil {
		return x.DanmakuDefault
	}
	return 0
}

func (x *RoomAuthStatus) GetKtvOrderSong() int64 {
	if x != nil {
		return x.KtvOrderSong
	}
	return 0
}

func (x *RoomAuthStatus) GetSelectionAlbum() int64 {
	if x != nil {
		return x.SelectionAlbum
	}
	return 0
}

func (x *RoomAuthStatus) GetLike() int64 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *RoomAuthStatus) GetMultiplierPlayback() int64 {
	if x != nil {
		return x.MultiplierPlayback
	}
	return 0
}

func (x *RoomAuthStatus) GetDownloadVideo() int64 {
	if x != nil {
		return x.DownloadVideo
	}
	return 0
}

func (x *RoomAuthStatus) GetCollect() int64 {
	if x != nil {
		return x.Collect
	}
	return 0
}

func (x *RoomAuthStatus) GetTimedShutdown() int64 {
	if x != nil {
		return x.TimedShutdown
	}
	return 0
}

func (x *RoomAuthStatus) GetSeek() int64 {
	if x != nil {
		return x.Seek
	}
	return 0
}

func (x *RoomAuthStatus) GetDenounce() int64 {
	if x != nil {
		return x.Denounce
	}
	return 0
}

func (x *RoomAuthStatus) GetDislike() int64 {
	if x != nil {
		return x.Dislike
	}
	return 0
}

func (x *RoomAuthStatus) GetOnlyTa() int64 {
	if x != nil {
		return x.OnlyTa
	}
	return 0
}

func (x *RoomAuthStatus) GetCastScreen() int64 {
	if x != nil {
		return x.CastScreen
	}
	return 0
}

func (x *RoomAuthStatus) GetCommentWall() int64 {
	if x != nil {
		return x.CommentWall
	}
	return 0
}

func (x *RoomAuthStatus) GetBulletStyle() int64 {
	if x != nil {
		return x.BulletStyle
	}
	return 0
}

func (x *RoomAuthStatus) GetShowGamePlugin() int64 {
	if x != nil {
		return x.ShowGamePlugin
	}
	return 0
}

func (x *RoomAuthStatus) GetVSGift() int64 {
	if x != nil {
		return x.VSGift
	}
	return 0
}

func (x *RoomAuthStatus) GetVSTopic() int64 {
	if x != nil {
		return x.VSTopic
	}
	return 0
}

func (x *RoomAuthStatus) GetVSRank() int64 {
	if x != nil {
		return x.VSRank
	}
	return 0
}

func (x *RoomAuthStatus) GetAdminCommentWall() int64 {
	if x != nil {
		return x.AdminCommentWall
	}
	return 0
}

func (x *RoomAuthStatus) GetCommerceComponent() int64 {
	if x != nil {
		return x.CommerceComponent
	}
	return 0
}

func (x *RoomAuthStatus) GetDouPlus() int64 {
	if x != nil {
		return x.DouPlus
	}
	return 0
}

func (x *RoomAuthStatus) GetGamePointsPlaying() int64 {
	if x != nil {
		return x.GamePointsPlaying
	}
	return 0
}

func (x *RoomAuthStatus) GetPoster() int64 {
	if x != nil {
		return x.Poster
	}
	return 0
}

func (x *RoomAuthStatus) GetHighlights() int64 {
	if x != nil {
		return x.Highlights
	}
	return 0
}

func (x *RoomAuthStatus) GetTypingCommentState() int64 {
	if x != nil {
		return x.TypingCommentState
	}
	return 0
}

func (x *RoomAuthStatus) GetStrokeUpDownGuide() int64 {
	if x != nil {
		return x.StrokeUpDownGuide
	}
	return 0
}

func (x *RoomAuthStatus) GetUpRightStatsFloatingLayer() int64 {
	if x != nil {
		return x.UpRightStatsFloatingLayer
	}
	return 0
}

func (x *RoomAuthStatus) GetCastScreenExplicit() int64 {
	if x != nil {
		return x.CastScreenExplicit
	}
	return 0
}

func (x *RoomAuthStatus) GetSelection() int64 {
	if x != nil {
		return x.Selection
	}
	return 0
}

func (x *RoomAuthStatus) GetIndustryService() int64 {
	if x != nil {
		return x.IndustryService
	}
	return 0
}

func (x *RoomAuthStatus) GetVerticalRank() int64 {
	if x != nil {
		return x.VerticalRank
	}
	return 0
}

func (x *RoomAuthStatus) GetEnterEffects() int64 {
	if x != nil {
		return x.EnterEffects
	}
	return 0
}

func (x *RoomAuthStatus) GetFansClub() int64 {
	if x != nil {
		return x.FansClub
	}
	return 0
}

func (x *RoomAuthStatus) GetEmojiOutside() int64 {
	if x != nil {
		return x.EmojiOutside
	}
	return 0
}

func (x *RoomAuthStatus) GetCanSellTicket() int64 {
	if x != nil {
		return x.CanSellTicket
	}
	return 0
}

func (x *RoomAuthStatus) GetDouPlusPopularityGem() int64 {
	if x != nil {
		return x.DouPlusPopularityGem
	}
	return 0
}

func (x *RoomAuthStatus) GetMissionCenter() int64 {
	if x != nil {
		return x.MissionCenter
	}
	return 0
}

func (x *RoomAuthStatus) GetExpandScreen() int64 {
	if x != nil {
		return x.ExpandScreen
	}
	return 0
}

func (x *RoomAuthStatus) GetFansGroup() int64 {
	if x != nil {
		return x.FansGroup
	}
	return 0
}

func (x *RoomAuthStatus) GetTopic() int64 {
	if x != nil {
		return x.Topic
	}
	return 0
}

func (x *RoomAuthStatus) GetAnchorMission() int64 {
	if x != nil {
		return x.AnchorMission
	}
	return 0
}

func (x *RoomAuthStatus) GetTeleprompter() int64 {
	if x != nil {
		return x.Teleprompter
	}
	return 0
}

func (x *RoomAuthStatus) GetChatDynamicSlideSpeed() int64 {
	if x != nil {
		return x.ChatDynamicSlideSpeed
	}
	return 0
}

func (x *RoomAuthStatus) GetSmallWindowDisplay() int64 {
	if x != nil {
		return x.SmallWindowDisplay
	}
	return 0
}

func (x *RoomAuthStatus) GetMessageDispatch() int64 {
	if x != nil {
		return x.MessageDispatch
	}
	return 0
}

func (x *RoomAuthStatus) GetRoomChannel() int64 {
	if x != nil {
		return x.RoomChannel
	}
	return 0
}

func (x *RoomAuthStatus) GetChatDispatch() int64 {
	if x != nil {
		return x.ChatDispatch
	}
	return 0
}

func (x *RoomAuthStatus) GetLinkmicGuestLike() int64 {
	if x != nil {
		return x.LinkmicGuestLike
	}
	return 0
}

func (x *RoomAuthStatus) GetMediaLinkmic() int64 {
	if x != nil {
		return x.MediaLinkmic
	}
	return 0
}

func (x *RoomAuthStatus) GetVideoShare() int64 {
	if x != nil {
		return x.VideoShare
	}
	return 0
}

func (x *RoomAuthStatus) GetChatGuideEmoji() int64 {
	if x != nil {
		return x.ChatGuideEmoji
	}
	return 0
}

func (x *RoomAuthStatus) GetChatGuideImage() int64 {
	if x != nil {
		return x.ChatGuideImage
	}
	return 0
}

func (x *RoomAuthStatus) GetPCPlay() int64 {
	if x != nil {
		return x.PCPlay
	}
	return 0
}

func (x *RoomAuthStatus) GetPadPlay() int64 {
	if x != nil {
		return x.PadPlay
	}
	return 0
}

func (x *RoomAuthStatus) GetLongTouch() int64 {
	if x != nil {
		return x.LongTouch
	}
	return 0
}

func (x *RoomAuthStatus) GetFirstFeedHistChat() int64 {
	if x != nil {
		return x.FirstFeedHistChat
	}
	return 0
}

func (x *RoomAuthStatus) GetMoreHistChat() int64 {
	if x != nil {
		return x.MoreHistChat
	}
	return 0
}

func (x *RoomAuthStatus) GetWordAssociation() int64 {
	if x != nil {
		return x.WordAssociation
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeScreenCapture() int64 {
	if x != nil {
		return x.LandscapeScreenCapture
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeScreenRecording() int64 {
	if x != nil {
		return x.LandscapeScreenRecording
	}
	return 0
}

func (x *RoomAuthStatus) GetScreenProjectionBarrage() int64 {
	if x != nil {
		return x.ScreenProjectionBarrage
	}
	return 0
}

func (x *RoomAuthStatus) GetSmallWindowPlayer() int64 {
	if x != nil {
		return x.SmallWindowPlayer
	}
	return 0
}

func (x *RoomAuthStatus) GetChatOperate() int64 {
	if x != nil {
		return x.ChatOperate
	}
	return 0
}

func (x *RoomAuthStatus) GetEcomFansClub() int64 {
	if x != nil {
		return x.EcomFansClub
	}
	return 0
}

func (x *RoomAuthStatus) GetAudioChatTotext() int64 {
	if x != nil {
		return x.AudioChatTotext
	}
	return 0
}

func (x *RoomAuthStatus) GetCommonCard() int64 {
	if x != nil {
		return x.CommonCard
	}
	return 0
}

func (x *RoomAuthStatus) GetShortTouch() int64 {
	if x != nil {
		return x.ShortTouch
	}
	return 0
}

func (x *RoomAuthStatus) GetHostTeamChannel() int64 {
	if x != nil {
		return x.HostTeamChannel
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeChatDynamicSlideSpeed() int64 {
	if x != nil {
		return x.LandscapeChatDynamicSlideSpeed
	}
	return 0
}

func (x *RoomAuthStatus) GetHostTeam() int64 {
	if x != nil {
		return x.HostTeam
	}
	return 0
}

func (x *RoomAuthStatus) GetAnchorHotMessageAggregated() int64 {
	if x != nil {
		return x.AnchorHotMessageAggregated
	}
	return 0
}

func (x *RoomAuthStatus) GetAnchorColdMessageTiled() int64 {
	if x != nil {
		return x.AnchorColdMessageTiled
	}
	return 0
}

func (x *RoomAuthStatus) GetScreenBottomInfo() int64 {
	if x != nil {
		return x.ScreenBottomInfo
	}
	return 0
}

func (x *RoomAuthStatus) GetPreviewHotCommentSwitch() int64 {
	if x != nil {
		return x.PreviewHotCommentSwitch
	}
	return 0
}

func (x *RoomAuthStatus) GetRoomWidget() int64 {
	if x != nil {
		return x.RoomWidget
	}
	return 0
}

func (x *RoomAuthStatus) GetOffReason() *RoomAuthStatus_RoomAuthOffReasons {
	if x != nil {
		return x.OffReason
	}
	return nil
}

func (x *RoomAuthStatus) GetSpecialStyle() *RoomAuthStatus_RoomAuthSpecialStyle {
	if x != nil {
		return x.SpecialStyle
	}
	return nil
}

func (x *RoomAuthStatus) GetPanelECService() int64 {
	if x != nil {
		return x.PanelECService
	}
	return 0
}

func (x *RoomAuthStatus) GetFixedChat() int64 {
	if x != nil {
		return x.FixedChat
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeGift() int64 {
	if x != nil {
		return x.LandscapeGift
	}
	return 0
}

func (x *RoomAuthStatus) GetHotChatTray() int64 {
	if x != nil {
		return x.HotChatTray
	}
	return 0
}

func (x *RoomAuthStatus) GetItemShare() int64 {
	if x != nil {
		return x.ItemShare
	}
	return 0
}

func (x *RoomAuthStatus) GetShortTouchTempState() int64 {
	if x != nil {
		return x.ShortTouchTempState
	}
	return 0
}

func (x *RoomAuthStatus) GetStickyMessage() int64 {
	if x != nil {
		return x.StickyMessage
	}
	return 0
}

func (x *RoomAuthStatus) GetProjectionBtn() int64 {
	if x != nil {
		return x.ProjectionBtn
	}
	return 0
}

func (x *RoomAuthStatus) GetChatDynamicSlideSpeedAnchor() int64 {
	if x != nil {
		return x.ChatDynamicSlideSpeedAnchor
	}
	return 0
}

func (x *RoomAuthStatus) GetPosterCache() int64 {
	if x != nil {
		return x.PosterCache
	}
	return 0
}

func (x *RoomAuthStatus) GetMediaHistoryMessage() int64 {
	if x != nil {
		return x.MediaHistoryMessage
	}
	return 0
}

func (x *RoomAuthStatus) GetToolbarBubble() int64 {
	if x != nil {
		return x.ToolbarBubble
	}
	return 0
}

func (x *RoomAuthStatus) GetImHeatValue() int64 {
	if x != nil {
		return x.ImHeatValue
	}
	return 0
}

func (x *RoomAuthStatus) GetInteractiveComponent() int64 {
	if x != nil {
		return x.InteractiveComponent
	}
	return 0
}

func (x *RoomAuthStatus) GetChatReply() int64 {
	if x != nil {
		return x.ChatReply
	}
	return 0
}

func (x *RoomAuthStatus) GetChatMention() int64 {
	if x != nil {
		return x.ChatMention
	}
	return 0
}

func (x *RoomAuthStatus) GetFrequentlyChat() int64 {
	if x != nil {
		return x.FrequentlyChat
	}
	return 0
}

func (x *RoomAuthStatus) GetStreamAdaptation() int64 {
	if x != nil {
		return x.StreamAdaptation
	}
	return 0
}

func (x *RoomAuthStatus) GetVideoAmplificationType() int64 {
	if x != nil {
		return x.VideoAmplificationType
	}
	return 0
}

func (x *RoomAuthStatus) GetFeaturedPublicScreen() int64 {
	if x != nil {
		return x.FeaturedPublicScreen
	}
	return 0
}

func (x *RoomAuthStatus) GetLandscapeScreenShare() int64 {
	if x != nil {
		return x.LandscapeScreenShare
	}
	return 0
}

func (x *RoomAuthStatus) GetVerticalScreenShare() int64 {
	if x != nil {
		return x.VerticalScreenShare
	}
	return 0
}

func (x *RoomAuthStatus) GetAnchorAudioChat() int64 {
	if x != nil {
		return x.AnchorAudioChat
	}
	return 0
}

func (x *RoomAuthStatus) GetPreviewChatExpose() int64 {
	if x != nil {
		return x.PreviewChatExpose
	}
	return 0
}

func (x *RoomAuthStatus) GetFusionEmoji() int64 {
	if x != nil {
		return x.FusionEmoji
	}
	return 0
}

func (x *RoomAuthStatus) GetMyLiveEntrance() int64 {
	if x != nil {
		return x.MyLiveEntrance
	}
	return 0
}

func (x *RoomAuthStatus) GetChatIdentity() int64 {
	if x != nil {
		return x.ChatIdentity
	}
	return 0
}

func (x *RoomAuthStatus) GetMarkUser() int64 {
	if x != nil {
		return x.MarkUser
	}
	return 0
}

func (x *RoomAuthStatus) GetLongPressOption() int64 {
	if x != nil {
		return x.LongPressOption
	}
	return 0
}

func (x *RoomAuthStatus) GetClearEntranceOption() int64 {
	if x != nil {
		return x.ClearEntranceOption
	}
	return 0
}

func (x *RoomAuthStatus) GetPlayerRankList() int64 {
	if x != nil {
		return x.PlayerRankList
	}
	return 0
}

func (x *RoomAuthStatus) GetAIClone() int64 {
	if x != nil {
		return x.AIClone
	}
	return 0
}

func (x *RoomAuthStatus) GetGiftVote() int64 {
	if x != nil {
		return x.GiftVote
	}
	return 0
}

func (x *RoomAuthStatus) GetTextGift() int64 {
	if x != nil {
		return x.TextGift
	}
	return 0
}

func (x *RoomAuthStatus) GetFansClubLetter() int64 {
	if x != nil {
		return x.FansClubLetter
	}
	return 0
}

func (x *RoomAuthStatus) GetFansClubBlessing() int64 {
	if x != nil {
		return x.FansClubBlessing
	}
	return 0
}

func (x *RoomAuthStatus) GetFansClubNotice() int64 {
	if x != nil {
		return x.FansClubNotice
	}
	return 0
}

func (x *RoomAuthStatus) GetFansClubDeclaration() int64 {
	if x != nil {
		return x.FansClubDeclaration
	}
	return 0
}

func (x *RoomAuthStatus) GetMessageGift() int64 {
	if x != nil {
		return x.MessageGift
	}
	return 0
}

func (x *RoomAuthStatus) GetEnhancedTouch() int64 {
	if x != nil {
		return x.EnhancedTouch
	}
	return 0
}

func (x *RoomAuthStatus) GetChatMentionV2() int64 {
	if x != nil {
		return x.ChatMentionV2
	}
	return 0
}

func (x *RoomAuthStatus) GetVsCommentBar() int64 {
	if x != nil {
		return x.VsCommentBar
	}
	return 0
}

func (x *RoomAuthStatus) GetVsWelcomeDanmaku() int64 {
	if x != nil {
		return x.VsWelcomeDanmaku
	}
	return 0
}

func (x *RoomAuthStatus) GetVsFansClub() int64 {
	if x != nil {
		return x.VsFansClub
	}
	return 0
}

func (x *RoomAuthStatus) GetVsExtensionEnableFollow() int64 {
	if x != nil {
		return x.VsExtensionEnableFollow
	}
	return 0
}

func (x *RoomAuthStatus) GetVsDouPlus() int64 {
	if x != nil {
		return x.VsDouPlus
	}
	return 0
}

func (x *RoomAuthStatus) GetQuizGamePointsPlaying() int64 {
	if x != nil {
		return x.QuizGamePointsPlaying
	}
	return 0
}

func (x *RoomAuthStatus) GetUgcVSReplayDelete() int64 {
	if x != nil {
		return x.UgcVSReplayDelete
	}
	return 0
}

func (x *RoomAuthStatus) GetUgcVsReplayVisibility() int64 {
	if x != nil {
		return x.UgcVsReplayVisibility
	}
	return 0
}

func (x *RoomAuthStatus) GetInteractionGift() int64 {
	if x != nil {
		return x.InteractionGift
	}
	return 0
}

func (x *RoomAuthStatus) GetSubscribeCardPackage() int64 {
	if x != nil {
		return x.SubscribeCardPackage
	}
	return 0
}

func (x *RoomAuthStatus) GetShowQualification() int64 {
	if x != nil {
		return x.ShowQualification
	}
	return 0
}

func (x *RoomAuthStatus) GetUseHostInfo() int64 {
	if x != nil {
		return x.UseHostInfo
	}
	return 0
}

func (x *RoomAuthStatus) GetCountType() int64 {
	if x != nil {
		return x.CountType
	}
	return 0
}

// RoomTab 消息定义
type RoomTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabType int32  `protobuf:"varint,1,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"` // 标签类型
	TabName string `protobuf:"bytes,2,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`  // 标签名称
	TabUrl  string `protobuf:"bytes,3,opt,name=tab_url,json=tabUrl,proto3" json:"tab_url,omitempty"`     // 标签 URL
}

func (x *RoomTab) Reset() {
	*x = RoomTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTab) ProtoMessage() {}

func (x *RoomTab) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTab.ProtoReflect.Descriptor instead.
func (*RoomTab) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{58}
}

func (x *RoomTab) GetTabType() int32 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *RoomTab) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *RoomTab) GetTabUrl() string {
	if x != nil {
		return x.TabUrl
	}
	return ""
}

// RoomActivityTag 消息定义
type RoomActivityTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityType int32  `protobuf:"varint,1,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"` // 活动类型
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      // 活动名称
	Url          string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                                        // 活动链接
	Extra        string `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`                                    // 额外信息
	Icon         *Image `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                                      // 活动图标
}

func (x *RoomActivityTag) Reset() {
	*x = RoomActivityTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomActivityTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomActivityTag) ProtoMessage() {}

func (x *RoomActivityTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomActivityTag.ProtoReflect.Descriptor instead.
func (*RoomActivityTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{59}
}

func (x *RoomActivityTag) GetActivityType() int32 {
	if x != nil {
		return x.ActivityType
	}
	return 0
}

func (x *RoomActivityTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoomActivityTag) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RoomActivityTag) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *RoomActivityTag) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

// MatchInfo 消息定义
type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skin *MatchSkinInfo `protobuf:"bytes,1,opt,name=skin,proto3" json:"skin,omitempty"` // 比赛皮肤信息
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{60}
}

func (x *MatchInfo) GetSkin() *MatchSkinInfo {
	if x != nil {
		return x.Skin
	}
	return nil
}

// MatchSkinInfo 消息定义
type MatchSkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnfollowSkin              *MatchSkinInfo_FollowBtnSkin `protobuf:"bytes,1,opt,name=unfollow_skin,json=unfollowSkin,proto3" json:"unfollow_skin,omitempty"`                                               // 未关注按钮皮肤
	FollowedSkin              *MatchSkinInfo_FollowBtnSkin `protobuf:"bytes,2,opt,name=followed_skin,json=followedSkin,proto3" json:"followed_skin,omitempty"`                                               // 已关注按钮皮肤
	TabSelectedColor          string                       `protobuf:"bytes,3,opt,name=tab_selected_color,json=tabSelectedColor,proto3" json:"tab_selected_color,omitempty"`                                 // 选中标签颜色
	TabUnselectedColor        string                       `protobuf:"bytes,4,opt,name=tab_unselected_color,json=tabUnselectedColor,proto3" json:"tab_unselected_color,omitempty"`                           // 未选中标签颜色
	CommentPlaceHolderColor   string                       `protobuf:"bytes,5,opt,name=comment_place_holder_color,json=commentPlaceHolderColor,proto3" json:"comment_place_holder_color,omitempty"`          // 评论占位符颜色
	AnchorNameColor           string                       `protobuf:"bytes,6,opt,name=anchor_name_color,json=anchorNameColor,proto3" json:"anchor_name_color,omitempty"`                                    // 主播名称颜色
	AnchorInfoColor           string                       `protobuf:"bytes,7,opt,name=anchor_info_color,json=anchorInfoColor,proto3" json:"anchor_info_color,omitempty"`                                    // 主播信息颜色
	UserBannerImage           *Image                       `protobuf:"bytes,8,opt,name=user_banner_image,json=userBannerImage,proto3" json:"user_banner_image,omitempty"`                                    // 用户横幅图像
	ToolBarImage              *Image                       `protobuf:"bytes,9,opt,name=tool_bar_image,json=toolBarImage,proto3" json:"tool_bar_image,omitempty"`                                             // 工具栏图像
	CommentPlaceHolderBgColor string                       `protobuf:"bytes,10,opt,name=comment_place_holder_bg_color,json=commentPlaceHolderBgColor,proto3" json:"comment_place_holder_bg_color,omitempty"` // 评论占位符背景颜色
	ShareIcon                 *Image                       `protobuf:"bytes,11,opt,name=share_icon,json=shareIcon,proto3" json:"share_icon,omitempty"`                                                       // 分享图标
}

func (x *MatchSkinInfo) Reset() {
	*x = MatchSkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSkinInfo) ProtoMessage() {}

func (x *MatchSkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSkinInfo.ProtoReflect.Descriptor instead.
func (*MatchSkinInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{61}
}

func (x *MatchSkinInfo) GetUnfollowSkin() *MatchSkinInfo_FollowBtnSkin {
	if x != nil {
		return x.UnfollowSkin
	}
	return nil
}

func (x *MatchSkinInfo) GetFollowedSkin() *MatchSkinInfo_FollowBtnSkin {
	if x != nil {
		return x.FollowedSkin
	}
	return nil
}

func (x *MatchSkinInfo) GetTabSelectedColor() string {
	if x != nil {
		return x.TabSelectedColor
	}
	return ""
}

func (x *MatchSkinInfo) GetTabUnselectedColor() string {
	if x != nil {
		return x.TabUnselectedColor
	}
	return ""
}

func (x *MatchSkinInfo) GetCommentPlaceHolderColor() string {
	if x != nil {
		return x.CommentPlaceHolderColor
	}
	return ""
}

func (x *MatchSkinInfo) GetAnchorNameColor() string {
	if x != nil {
		return x.AnchorNameColor
	}
	return ""
}

func (x *MatchSkinInfo) GetAnchorInfoColor() string {
	if x != nil {
		return x.AnchorInfoColor
	}
	return ""
}

func (x *MatchSkinInfo) GetUserBannerImage() *Image {
	if x != nil {
		return x.UserBannerImage
	}
	return nil
}

func (x *MatchSkinInfo) GetToolBarImage() *Image {
	if x != nil {
		return x.ToolBarImage
	}
	return nil
}

func (x *MatchSkinInfo) GetCommentPlaceHolderBgColor() string {
	if x != nil {
		return x.CommentPlaceHolderBgColor
	}
	return ""
}

func (x *MatchSkinInfo) GetShareIcon() *Image {
	if x != nil {
		return x.ShareIcon
	}
	return nil
}

// OfficialRoomInfo 消息定义
type OfficialRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShowMoreAnchor    bool   `protobuf:"varint,1,opt,name=is_show_more_anchor,json=isShowMoreAnchor,proto3" json:"is_show_more_anchor,omitempty"`          // 是否显示更多主播
	IsUseServerSubtitle bool   `protobuf:"varint,2,opt,name=is_use_server_subtitle,json=isUseServerSubtitle,proto3" json:"is_use_server_subtitle,omitempty"` // 是否使用服务器字幕
	ServerSubtitle      string `protobuf:"bytes,3,opt,name=server_subtitle,json=serverSubtitle,proto3" json:"server_subtitle,omitempty"`                     // 服务器字幕内容
}

func (x *OfficialRoomInfo) Reset() {
	*x = OfficialRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialRoomInfo) ProtoMessage() {}

func (x *OfficialRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialRoomInfo.ProtoReflect.Descriptor instead.
func (*OfficialRoomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{62}
}

func (x *OfficialRoomInfo) GetIsShowMoreAnchor() bool {
	if x != nil {
		return x.IsShowMoreAnchor
	}
	return false
}

func (x *OfficialRoomInfo) GetIsUseServerSubtitle() bool {
	if x != nil {
		return x.IsUseServerSubtitle
	}
	return false
}

func (x *OfficialRoomInfo) GetServerSubtitle() string {
	if x != nil {
		return x.ServerSubtitle
	}
	return ""
}

// RoomShortTouchAreaConfig 消息定义
type RoomShortTouchAreaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements                 map[int32]*RoomShortTouchAreaConfig_Element            `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                                            // 短触区域元素映射
	ForbiddenTypesMap        map[int32]*RoomShortTouchAreaConfig_ForbiddenType      `protobuf:"bytes,3,rep,name=forbidden_types_map,json=forbiddenTypesMap,proto3" json:"forbidden_types_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // 禁用类型映射
	TempStateConditionMap    map[int32]*RoomShortTouchAreaConfig_TempStateCondition `protobuf:"bytes,4,rep,name=temp_state_condition_map,json=tempStateConditionMap,proto3" json:"temp_state_condition_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 临时状态条件映射
	TempStateStrategy        map[int32]*RoomShortTouchAreaConfig_TempStateStrategy  `protobuf:"bytes,5,rep,name=temp_state_strategy,json=tempStateStrategy,proto3" json:"temp_state_strategy,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // 临时状态策略映射
	StrategyFeatWhitelist    []string                                               `protobuf:"bytes,6,rep,name=strategy_feat_whitelist,json=strategyFeatWhitelist,proto3" json:"strategy_feat_whitelist,omitempty"`                                                                                            // 策略功能白名单
	TempStateGlobalCondition *RoomShortTouchAreaConfig_TempStateGlobalCondition     `protobuf:"bytes,7,opt,name=temp_state_global_condition,json=tempStateGlobalCondition,proto3" json:"temp_state_global_condition,omitempty"`                                                                                 // 全局临时状态条件
}

func (x *RoomShortTouchAreaConfig) Reset() {
	*x = RoomShortTouchAreaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63}
}

func (x *RoomShortTouchAreaConfig) GetElements() map[int32]*RoomShortTouchAreaConfig_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *RoomShortTouchAreaConfig) GetForbiddenTypesMap() map[int32]*RoomShortTouchAreaConfig_ForbiddenType {
	if x != nil {
		return x.ForbiddenTypesMap
	}
	return nil
}

func (x *RoomShortTouchAreaConfig) GetTempStateConditionMap() map[int32]*RoomShortTouchAreaConfig_TempStateCondition {
	if x != nil {
		return x.TempStateConditionMap
	}
	return nil
}

func (x *RoomShortTouchAreaConfig) GetTempStateStrategy() map[int32]*RoomShortTouchAreaConfig_TempStateStrategy {
	if x != nil {
		return x.TempStateStrategy
	}
	return nil
}

func (x *RoomShortTouchAreaConfig) GetStrategyFeatWhitelist() []string {
	if x != nil {
		return x.StrategyFeatWhitelist
	}
	return nil
}

func (x *RoomShortTouchAreaConfig) GetTempStateGlobalCondition() *RoomShortTouchAreaConfig_TempStateGlobalCondition {
	if x != nil {
		return x.TempStateGlobalCondition
	}
	return nil
}

// GameExtra 消息定义
type GameExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      int32             `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`                                                                                         // 游戏类型
	Status    int32             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                                                                     // 游戏状态
	GameId    int64             `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                       // 游戏 ID
	GiftLimit int32             `protobuf:"varint,4,opt,name=gift_limit,json=giftLimit,proto3" json:"gift_limit,omitempty"`                                                              // 礼物限制
	RoundId   int64             `protobuf:"varint,5,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                                    // 回合 ID
	GameKind  int32             `protobuf:"varint,6,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`                                                                 // 游戏种类
	Chat      int64             `protobuf:"varint,7,opt,name=chat,proto3" json:"chat,omitempty"`                                                                                         // 聊天 ID
	Loader    int64             `protobuf:"varint,8,opt,name=loader,proto3" json:"loader,omitempty"`                                                                                     // 加载器 ID
	Reload    int64             `protobuf:"varint,9,opt,name=reload,proto3" json:"reload,omitempty"`                                                                                     // 重载 ID
	Data      map[string]string `protobuf:"bytes,10,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 附加数据
}

func (x *GameExtra) Reset() {
	*x = GameExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameExtra) ProtoMessage() {}

func (x *GameExtra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameExtra.ProtoReflect.Descriptor instead.
func (*GameExtra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{64}
}

func (x *GameExtra) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *GameExtra) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GameExtra) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameExtra) GetGiftLimit() int32 {
	if x != nil {
		return x.GiftLimit
	}
	return 0
}

func (x *GameExtra) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *GameExtra) GetGameKind() int32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *GameExtra) GetChat() int64 {
	if x != nil {
		return x.Chat
	}
	return 0
}

func (x *GameExtra) GetLoader() int64 {
	if x != nil {
		return x.Loader
	}
	return 0
}

func (x *GameExtra) GetReload() int64 {
	if x != nil {
		return x.Reload
	}
	return 0
}

func (x *GameExtra) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// OfficialChannelInfo 消息定义
type OfficialChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUser        *User           `protobuf:"bytes,1,opt,name=channel_user,json=channelUser,proto3" json:"channel_user,omitempty"`                                                                                                      // 频道用户信息
	ChannelName        string          `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`                                                                                                      // 频道名称
	ChannelIntro       string          `protobuf:"bytes,3,opt,name=channel_intro,json=channelIntro,proto3" json:"channel_intro,omitempty"`                                                                                                   // 频道简介
	EndTimestamp       int64           `protobuf:"varint,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`                                                                                                  // 结束时间戳
	ForbiddenBeforeEnd int64           `protobuf:"varint,5,opt,name=forbidden_before_end,json=forbiddenBeforeEnd,proto3" json:"forbidden_before_end,omitempty"`                                                                              // 禁止进入时间
	CurrentShowId      int32           `protobuf:"varint,6,opt,name=current_show_id,json=currentShowId,proto3" json:"current_show_id,omitempty"`                                                                                             // 当前显示 ID
	MaxEnterTime       int64           `protobuf:"varint,7,opt,name=max_enter_time,json=maxEnterTime,proto3" json:"max_enter_time,omitempty"`                                                                                                // 最大进入时间
	MaxNextTime        int64           `protobuf:"varint,8,opt,name=max_next_time,json=maxNextTime,proto3" json:"max_next_time,omitempty"`                                                                                                   // 最大下一次进入时间
	DelayEnterTime     map[int64]int64 `protobuf:"bytes,9,rep,name=delay_enter_time,json=delayEnterTime,proto3" json:"delay_enter_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 延迟进入时间
	HostPermission     bool            `protobuf:"varint,10,opt,name=host_permission,json=hostPermission,proto3" json:"host_permission,omitempty"`                                                                                           // 主持人权限
	BackupRoomId       int64           `protobuf:"varint,11,opt,name=backup_room_id,json=backupRoomId,proto3" json:"backup_room_id,omitempty"`                                                                                               // 备用房间 ID
	LivingUser         *User           `protobuf:"bytes,12,opt,name=living_user,json=livingUser,proto3" json:"living_user,omitempty"`                                                                                                        // 直播用户信息
	HostCanAcceptGift  bool            `protobuf:"varint,13,opt,name=host_can_accept_gift,json=hostCanAcceptGift,proto3" json:"host_can_accept_gift,omitempty"`                                                                              // 主持人是否能接受礼物
	HostUids           []int64         `protobuf:"varint,14,rep,packed,name=host_uids,json=hostUids,proto3" json:"host_uids,omitempty"`                                                                                                      // 主持人 UID 列表
	BackupRoomIdStr    string          `protobuf:"bytes,15,opt,name=backup_room_id_str,json=backupRoomIdStr,proto3" json:"backup_room_id_str,omitempty"`                                                                                     // 备用房间字符串 ID
	EnableHost         bool            `protobuf:"varint,16,opt,name=enable_host,json=enableHost,proto3" json:"enable_host,omitempty"`                                                                                                       // 是否启用主持人
	HostOpenIds        []string        `protobuf:"bytes,5000,rep,name=host_open_ids,json=hostOpenIds,proto3" json:"host_open_ids,omitempty"`                                                                                                 // 主持人 OpenID 列表
}

func (x *OfficialChannelInfo) Reset() {
	*x = OfficialChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialChannelInfo) ProtoMessage() {}

func (x *OfficialChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialChannelInfo.ProtoReflect.Descriptor instead.
func (*OfficialChannelInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{65}
}

func (x *OfficialChannelInfo) GetChannelUser() *User {
	if x != nil {
		return x.ChannelUser
	}
	return nil
}

func (x *OfficialChannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *OfficialChannelInfo) GetChannelIntro() string {
	if x != nil {
		return x.ChannelIntro
	}
	return ""
}

func (x *OfficialChannelInfo) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *OfficialChannelInfo) GetForbiddenBeforeEnd() int64 {
	if x != nil {
		return x.ForbiddenBeforeEnd
	}
	return 0
}

func (x *OfficialChannelInfo) GetCurrentShowId() int32 {
	if x != nil {
		return x.CurrentShowId
	}
	return 0
}

func (x *OfficialChannelInfo) GetMaxEnterTime() int64 {
	if x != nil {
		return x.MaxEnterTime
	}
	return 0
}

func (x *OfficialChannelInfo) GetMaxNextTime() int64 {
	if x != nil {
		return x.MaxNextTime
	}
	return 0
}

func (x *OfficialChannelInfo) GetDelayEnterTime() map[int64]int64 {
	if x != nil {
		return x.DelayEnterTime
	}
	return nil
}

func (x *OfficialChannelInfo) GetHostPermission() bool {
	if x != nil {
		return x.HostPermission
	}
	return false
}

func (x *OfficialChannelInfo) GetBackupRoomId() int64 {
	if x != nil {
		return x.BackupRoomId
	}
	return 0
}

func (x *OfficialChannelInfo) GetLivingUser() *User {
	if x != nil {
		return x.LivingUser
	}
	return nil
}

func (x *OfficialChannelInfo) GetHostCanAcceptGift() bool {
	if x != nil {
		return x.HostCanAcceptGift
	}
	return false
}

func (x *OfficialChannelInfo) GetHostUids() []int64 {
	if x != nil {
		return x.HostUids
	}
	return nil
}

func (x *OfficialChannelInfo) GetBackupRoomIdStr() string {
	if x != nil {
		return x.BackupRoomIdStr
	}
	return ""
}

func (x *OfficialChannelInfo) GetEnableHost() bool {
	if x != nil {
		return x.EnableHost
	}
	return false
}

func (x *OfficialChannelInfo) GetHostOpenIds() []string {
	if x != nil {
		return x.HostOpenIds
	}
	return nil
}

// RoomCart 消息定义
type RoomCart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainCart       bool                        `protobuf:"varint,1,opt,name=contain_cart,json=containCart,proto3" json:"contain_cart,omitempty"`                    // 是否包含购物车
	Total             int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                                   // 总商品数量
	FlashTotal        int64                       `protobuf:"varint,3,opt,name=flash_total,json=flashTotal,proto3" json:"flash_total,omitempty"`                       // 限时商品总数
	CartIcon          string                      `protobuf:"bytes,4,opt,name=cart_icon,json=cartIcon,proto3" json:"cart_icon,omitempty"`                              // 购物车图标
	ShowCart          int32                       `protobuf:"varint,5,opt,name=show_cart,json=showCart,proto3" json:"show_cart,omitempty"`                             // 是否显示购物车 (0/1)
	Vertical          *RoomCart_CartVertical      `protobuf:"bytes,6,opt,name=vertical,proto3" json:"vertical,omitempty"`                                              // 垂直购物车配置
	Horizontal        *RoomCart_CartHorizontal    `protobuf:"bytes,7,opt,name=horizontal,proto3" json:"horizontal,omitempty"`                                          // 水平购物车配置
	GlobalCustomIcons *RoomCart_GlobalCustomIcons `protobuf:"bytes,8,opt,name=global_custom_icons,json=globalCustomIcons,proto3" json:"global_custom_icons,omitempty"` // 全局自定义图标
}

func (x *RoomCart) Reset() {
	*x = RoomCart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCart) ProtoMessage() {}

func (x *RoomCart) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCart.ProtoReflect.Descriptor instead.
func (*RoomCart) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{66}
}

func (x *RoomCart) GetContainCart() bool {
	if x != nil {
		return x.ContainCart
	}
	return false
}

func (x *RoomCart) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoomCart) GetFlashTotal() int64 {
	if x != nil {
		return x.FlashTotal
	}
	return 0
}

func (x *RoomCart) GetCartIcon() string {
	if x != nil {
		return x.CartIcon
	}
	return ""
}

func (x *RoomCart) GetShowCart() int32 {
	if x != nil {
		return x.ShowCart
	}
	return 0
}

func (x *RoomCart) GetVertical() *RoomCart_CartVertical {
	if x != nil {
		return x.Vertical
	}
	return nil
}

func (x *RoomCart) GetHorizontal() *RoomCart_CartHorizontal {
	if x != nil {
		return x.Horizontal
	}
	return nil
}

func (x *RoomCart) GetGlobalCustomIcons() *RoomCart_GlobalCustomIcons {
	if x != nil {
		return x.GlobalCustomIcons
	}
	return nil
}

// LinkerUsers 消息定义
type LinkerUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                         // 用户总数
	UsersInfo []*User `protobuf:"bytes,2,rep,name=users_info,json=usersInfo,proto3" json:"users_info,omitempty"` // 用户信息列表
}

func (x *LinkerUsers) Reset() {
	*x = LinkerUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerUsers) ProtoMessage() {}

func (x *LinkerUsers) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerUsers.ProtoReflect.Descriptor instead.
func (*LinkerUsers) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{67}
}

func (x *LinkerUsers) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LinkerUsers) GetUsersInfo() []*User {
	if x != nil {
		return x.UsersInfo
	}
	return nil
}

// BorderInfo 消息定义
type BorderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorderType    int64                         `protobuf:"varint,1,opt,name=border_type,json=borderType,proto3" json:"border_type,omitempty"`         // 边框类型
	StaticBorder  *BorderInfo_StaticBorderInfo  `protobuf:"bytes,2,opt,name=static_border,json=staticBorder,proto3" json:"static_border,omitempty"`    // 静态边框信息
	DynamicBorder *BorderInfo_DynamicBorderInfo `protobuf:"bytes,3,opt,name=dynamic_border,json=dynamicBorder,proto3" json:"dynamic_border,omitempty"` // 动态边框信息
	Duration      int64                         `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                               // 持续时间（毫秒）
}

func (x *BorderInfo) Reset() {
	*x = BorderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorderInfo) ProtoMessage() {}

func (x *BorderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorderInfo.ProtoReflect.Descriptor instead.
func (*BorderInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{68}
}

func (x *BorderInfo) GetBorderType() int64 {
	if x != nil {
		return x.BorderType
	}
	return 0
}

func (x *BorderInfo) GetStaticBorder() *BorderInfo_StaticBorderInfo {
	if x != nil {
		return x.StaticBorder
	}
	return nil
}

func (x *BorderInfo) GetDynamicBorder() *BorderInfo_DynamicBorderInfo {
	if x != nil {
		return x.DynamicBorder
	}
	return nil
}

func (x *BorderInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Room 消息定义
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                                                // 房间 ID
	IdStr                       string                       `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`                                                                                                                              // 房间 ID 字符串
	Status                      int64                        `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                                        // 状态
	OwnerUserId                 int64                        `protobuf:"varint,4,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`                                                                                                         // 所有者用户 ID
	Title                       string                       `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                                           // 标题
	UserCount                   int64                        `protobuf:"varint,6,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`                                                                                                                 // 用户数量
	CreateTime                  int64                        `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                                                                              // 创建时间
	LinkmicLayout               int64                        `protobuf:"varint,8,opt,name=linkmic_layout,json=linkmicLayout,proto3" json:"linkmic_layout,omitempty"`                                                                                                     // 连麦布局
	FinishTime                  int64                        `protobuf:"varint,9,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`                                                                                                              // 结束时间
	Extra                       *RoomExtra                   `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                                                          // 额外信息
	DynamicCoverUri             string                       `protobuf:"bytes,11,opt,name=dynamic_cover_uri,json=dynamicCoverUri,proto3" json:"dynamic_cover_uri,omitempty"`                                                                                             // 动态封面 URI
	DynamicCoverDict            map[int64]string             `protobuf:"bytes,12,rep,name=dynamic_cover_dict,json=dynamicCoverDict,proto3" json:"dynamic_cover_dict,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 动态封面字典
	LastPingTime                int64                        `protobuf:"varint,13,opt,name=last_ping_time,json=lastPingTime,proto3" json:"last_ping_time,omitempty"`                                                                                                     // 最后 ping 时间
	LiveId                      int64                        `protobuf:"varint,14,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`                                                                                                                         // 直播 ID
	StreamProvider              int64                        `protobuf:"varint,15,opt,name=stream_provider,json=streamProvider,proto3" json:"stream_provider,omitempty"`                                                                                                 // 流提供者
	OsType                      int64                        `protobuf:"varint,16,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                                                                                                                         // 操作系统类型
	ClientVersion               int64                        `protobuf:"varint,17,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`                                                                                                    // 客户端版本
	WithLinkmic                 bool                         `protobuf:"varint,18,opt,name=with_linkmic,json=withLinkmic,proto3" json:"with_linkmic,omitempty"`                                                                                                          // 是否连麦
	EnableRoomPerspective       bool                         `protobuf:"varint,19,opt,name=enable_room_perspective,json=enableRoomPerspective,proto3" json:"enable_room_perspective,omitempty"`                                                                          // 启用房间视角
	Cover                       *Image                       `protobuf:"bytes,20,opt,name=cover,proto3" json:"cover,omitempty"`                                                                                                                                          // 封面
	DynamicCover                *Image                       `protobuf:"bytes,21,opt,name=dynamic_cover,json=dynamicCover,proto3" json:"dynamic_cover,omitempty"`                                                                                                        // 动态封面
	DynamicCoverLow             *Image                       `protobuf:"bytes,22,opt,name=dynamic_cover_low,json=dynamicCoverLow,proto3" json:"dynamic_cover_low,omitempty"`                                                                                             // 低分辨率动态封面
	ShareUrl                    string                       `protobuf:"bytes,23,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`                                                                                                                    // 分享 URL
	AnchorShareText             string                       `protobuf:"bytes,24,opt,name=anchor_share_text,json=anchorShareText,proto3" json:"anchor_share_text,omitempty"`                                                                                             // 主播分享文本
	UserShareText               string                       `protobuf:"bytes,25,opt,name=user_share_text,json=userShareText,proto3" json:"user_share_text,omitempty"`                                                                                                   // 用户分享文本
	StreamId                    int64                        `protobuf:"varint,26,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                                                   // 流 ID
	StreamIdStr                 string                       `protobuf:"bytes,27,opt,name=stream_id_str,json=streamIdStr,proto3" json:"stream_id_str,omitempty"`                                                                                                         // 流 ID 字符串
	StreamUrl                   *StreamUrl                   `protobuf:"bytes,28,opt,name=stream_url,json=streamUrl,proto3" json:"stream_url,omitempty"`                                                                                                                 // 流 URL
	MosaicStatus                int64                        `protobuf:"varint,29,opt,name=mosaic_status,json=mosaicStatus,proto3" json:"mosaic_status,omitempty"`                                                                                                       // 拼接状态
	MosaicTip                   string                       `protobuf:"bytes,30,opt,name=mosaic_tip,json=mosaicTip,proto3" json:"mosaic_tip,omitempty"`                                                                                                                 // 拼接提示
	CellStyle                   int64                        `protobuf:"varint,31,opt,name=cell_style,json=cellStyle,proto3" json:"cell_style,omitempty"`                                                                                                                // 单元格样式
	LinkMic                     *LinkMic                     `protobuf:"bytes,32,opt,name=link_mic,json=linkMic,proto3" json:"link_mic,omitempty"`                                                                                                                       // 连麦信息
	LuckymoneyNum               int64                        `protobuf:"varint,33,opt,name=luckymoney_num,json=luckymoneyNum,proto3" json:"luckymoney_num,omitempty"`                                                                                                    // 红包数量
	DecoList                    []*Decoration                `protobuf:"bytes,34,rep,name=deco_list,json=decoList,proto3" json:"deco_list,omitempty"`                                                                                                                    // 装饰列表
	TopFans                     []*TopFan                    `protobuf:"bytes,35,rep,name=top_fans,json=topFans,proto3" json:"top_fans,omitempty"`                                                                                                                       // 顶级粉丝
	Stats                       *RoomStats                   `protobuf:"bytes,36,opt,name=stats,proto3" json:"stats,omitempty"`                                                                                                                                          // 房间统计
	SunDailyIconContent         string                       `protobuf:"bytes,37,opt,name=sun_daily_icon_content,json=sunDailyIconContent,proto3" json:"sun_daily_icon_content,omitempty"`                                                                               // 每日图标内容
	Distance                    string                       `protobuf:"bytes,38,opt,name=distance,proto3" json:"distance,omitempty"`                                                                                                                                    // 距离
	DistanceCity                string                       `protobuf:"bytes,39,opt,name=distance_city,json=distanceCity,proto3" json:"distance_city,omitempty"`                                                                                                        // 距离城市
	Location                    string                       `protobuf:"bytes,40,opt,name=location,proto3" json:"location,omitempty"`                                                                                                                                    // 位置
	RealDistance                string                       `protobuf:"bytes,41,opt,name=real_distance,json=realDistance,proto3" json:"real_distance,omitempty"`                                                                                                        // 实际距离
	FeedRoomLabel               *Image                       `protobuf:"bytes,42,opt,name=feed_room_label,json=feedRoomLabel,proto3" json:"feed_room_label,omitempty"`                                                                                                   // 房间标签
	CommonLabelList             string                       `protobuf:"bytes,43,opt,name=common_label_list,json=commonLabelList,proto3" json:"common_label_list,omitempty"`                                                                                             // 通用标签列表
	LivingRoomAttrs             *RoomUserAttr                `protobuf:"bytes,44,opt,name=living_room_attrs,json=livingRoomAttrs,proto3" json:"living_room_attrs,omitempty"`                                                                                             // 房间属性
	AdminUserIds                []int64                      `protobuf:"varint,45,rep,packed,name=admin_user_ids,json=adminUserIds,proto3" json:"admin_user_ids,omitempty"`                                                                                              // 管理员用户 ID 列表
	Owner                       *User                        `protobuf:"bytes,46,opt,name=owner,proto3" json:"owner,omitempty"`                                                                                                                                          // 所有者
	PrivateInfo                 string                       `protobuf:"bytes,47,opt,name=private_info,json=privateInfo,proto3" json:"private_info,omitempty"`                                                                                                           // 私人信息
	HasCommerceGoods            bool                         `protobuf:"varint,48,opt,name=has_commerce_goods,json=hasCommerceGoods,proto3" json:"has_commerce_goods,omitempty"`                                                                                         // 是否有商业商品
	LiveTypeNormal              bool                         `protobuf:"varint,49,opt,name=live_type_normal,json=liveTypeNormal,proto3" json:"live_type_normal,omitempty"`                                                                                               // 普通直播类型
	LiveTypeLinkmic             bool                         `protobuf:"varint,50,opt,name=live_type_linkmic,json=liveTypeLinkmic,proto3" json:"live_type_linkmic,omitempty"`                                                                                            // 连麦直播类型
	LiveTypeAudio               bool                         `protobuf:"varint,51,opt,name=live_type_audio,json=liveTypeAudio,proto3" json:"live_type_audio,omitempty"`                                                                                                  // 音频直播类型
	LiveTypeThirdParty          bool                         `protobuf:"varint,52,opt,name=live_type_third_party,json=liveTypeThirdParty,proto3" json:"live_type_third_party,omitempty"`                                                                                 // 第三方直播类型
	LiveTypeScreenshot          bool                         `protobuf:"varint,53,opt,name=live_type_screenshot,json=liveTypeScreenshot,proto3" json:"live_type_screenshot,omitempty"`                                                                                   // 截图直播类型
	LiveTypeSandbox             bool                         `protobuf:"varint,54,opt,name=live_type_sandbox,json=liveTypeSandbox,proto3" json:"live_type_sandbox,omitempty"`                                                                                            // 沙盒直播类型
	LiveTypeOfficial            bool                         `protobuf:"varint,55,opt,name=live_type_official,json=liveTypeOfficial,proto3" json:"live_type_official,omitempty"`                                                                                         // 官方直播类型
	GroupId                     int64                        `protobuf:"varint,59,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                                                                                                      // 组 ID
	Orientation                 int64                        `protobuf:"varint,60,opt,name=orientation,proto3" json:"orientation,omitempty"`                                                                                                                             // 方向
	Category                    int64                        `protobuf:"varint,61,opt,name=category,proto3" json:"category,omitempty"`                                                                                                                                   // 类别
	Tags                        []int64                      `protobuf:"varint,62,rep,packed,name=tags,proto3" json:"tags,omitempty"`                                                                                                                                    // 标签
	StartTime                   int64                        `protobuf:"varint,63,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                                                // 开始时间
	Popularity                  int64                        `protobuf:"varint,64,opt,name=popularity,proto3" json:"popularity,omitempty"`                                                                                                                               // 人气
	PopularityStr               string                       `protobuf:"bytes,65,opt,name=popularity_str,json=popularityStr,proto3" json:"popularity_str,omitempty"`                                                                                                     // 人气字符串
	FcdnAppid                   int64                        `protobuf:"varint,66,opt,name=fcdn_appid,json=fcdnAppid,proto3" json:"fcdn_appid,omitempty"`                                                                                                                // FCDN 应用 ID
	SellGoods                   bool                         `protobuf:"varint,68,opt,name=sell_goods,json=sellGoods,proto3" json:"sell_goods,omitempty"`                                                                                                                // 是否卖商品
	WebCount                    int64                        `protobuf:"varint,69,opt,name=web_count,json=webCount,proto3" json:"web_count,omitempty"`                                                                                                                   // 网页计数
	VerticalCoverUri            string                       `protobuf:"bytes,70,opt,name=vertical_cover_uri,json=verticalCoverUri,proto3" json:"vertical_cover_uri,omitempty"`                                                                                          // 垂直封面 URI
	BaseCategory                int64                        `protobuf:"varint,71,opt,name=base_category,json=baseCategory,proto3" json:"base_category,omitempty"`                                                                                                       // 基础类别
	RoomAuth                    *RoomAuthStatus              `protobuf:"bytes,72,opt,name=room_auth,json=roomAuth,proto3" json:"room_auth,omitempty"`                                                                                                                    // 房间认证状态
	RoomTabs                    []*RoomTab                   `protobuf:"bytes,73,rep,name=room_tabs,json=roomTabs,proto3" json:"room_tabs,omitempty"`                                                                                                                    // 房间标签
	Introduction                string                       `protobuf:"bytes,74,opt,name=introduction,proto3" json:"introduction,omitempty"`                                                                                                                            // 介绍
	Burst                       *BurstInfo                   `protobuf:"bytes,75,opt,name=burst,proto3" json:"burst,omitempty"`                                                                                                                                          // 爆发信息
	HealthScore                 *RoomHealthScoreInfo         `protobuf:"bytes,76,opt,name=health_score,json=healthScore,proto3" json:"health_score,omitempty"`                                                                                                           // 健康分数信息
	IsReplay                    bool                         `protobuf:"varint,77,opt,name=is_replay,json=isReplay,proto3" json:"is_replay,omitempty"`                                                                                                                   // 是否重播
	Vid                         string                       `protobuf:"bytes,78,opt,name=vid,proto3" json:"vid,omitempty"`                                                                                                                                              // 视频 ID
	GroupSource                 int64                        `protobuf:"varint,79,opt,name=group_source,json=groupSource,proto3" json:"group_source,omitempty"`                                                                                                          // 组来源
	LotteryFinishTime           int64                        `protobuf:"varint,80,opt,name=lottery_finish_time,json=lotteryFinishTime,proto3" json:"lottery_finish_time,omitempty"`                                                                                      // 抽奖结束时间
	ActivityTag                 *RoomActivityTag             `protobuf:"bytes,81,opt,name=activity_tag,json=activityTag,proto3" json:"activity_tag,omitempty"`                                                                                                           // 活动标签
	PortraitCover               *Image                       `protobuf:"bytes,82,opt,name=portrait_cover,json=portraitCover,proto3" json:"portrait_cover,omitempty"`                                                                                                     // 头像封面
	Background                  *Image                       `protobuf:"bytes,83,opt,name=background,proto3" json:"background,omitempty"`                                                                                                                                // 背景
	Layout                      int64                        `protobuf:"varint,84,opt,name=layout,proto3" json:"layout,omitempty"`                                                                                                                                       // 布局
	WaitCopy                    string                       `protobuf:"bytes,85,opt,name=wait_copy,json=waitCopy,proto3" json:"wait_copy,omitempty"`                                                                                                                    // 等待复制
	GuideButton                 *Image                       `protobuf:"bytes,86,opt,name=guide_button,json=guideButton,proto3" json:"guide_button,omitempty"`                                                                                                           // 引导按钮
	PreviewCopy                 string                       `protobuf:"bytes,87,opt,name=preview_copy,json=previewCopy,proto3" json:"preview_copy,omitempty"`                                                                                                           // 预览复制
	IsShowInquiryBall           bool                         `protobuf:"varint,88,opt,name=is_show_inquiry_ball,json=isShowInquiryBall,proto3" json:"is_show_inquiry_ball,omitempty"`                                                                                    // 是否显示询问球
	MatchInfo                   *MatchInfo                   `protobuf:"bytes,89,opt,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty"`                                                                                                                 // 比赛信息
	UseFilter                   bool                         `protobuf:"varint,90,opt,name=use_filter,json=useFilter,proto3" json:"use_filter,omitempty"`                                                                                                                // 使用过滤器
	GiftMsgStyle                int64                        `protobuf:"varint,91,opt,name=gift_msg_style,json=giftMsgStyle,proto3" json:"gift_msg_style,omitempty"`                                                                                                     // 礼物消息样式
	DistanceKm                  string                       `protobuf:"bytes,92,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`                                                                                                              // 距离（公里）
	FinishUrl                   string                       `protobuf:"bytes,93,opt,name=finish_url,json=finishUrl,proto3" json:"finish_url,omitempty"`                                                                                                                 // 完成 URL
	OfficialRoomInfo            *OfficialRoomInfo            `protobuf:"bytes,94,opt,name=official_room_info,json=officialRoomInfo,proto3" json:"official_room_info,omitempty"`                                                                                          // 官方房间信息
	IsShowUserCardSwitch        bool                         `protobuf:"varint,95,opt,name=is_show_user_card_switch,json=isShowUserCardSwitch,proto3" json:"is_show_user_card_switch,omitempty"`                                                                         // 是否显示用户卡开关
	VideoFeedTag                string                       `protobuf:"bytes,96,opt,name=video_feed_tag,json=videoFeedTag,proto3" json:"video_feed_tag,omitempty"`                                                                                                      // 视频标签
	ForumExtraData              string                       `protobuf:"bytes,97,opt,name=forum_extra_data,json=forumExtraData,proto3" json:"forum_extra_data,omitempty"`                                                                                                // 论坛额外数据
	FansclubMsgStyle            int64                        `protobuf:"varint,98,opt,name=fansclub_msg_style,json=fansclubMsgStyle,proto3" json:"fansclub_msg_style,omitempty"`                                                                                         // 粉丝俱乐部消息样式
	FollowMsgStyle              int64                        `protobuf:"varint,99,opt,name=follow_msg_style,json=followMsgStyle,proto3" json:"follow_msg_style,omitempty"`                                                                                               // 关注消息样式
	ShareMsgStyle               int64                        `protobuf:"varint,100,opt,name=share_msg_style,json=shareMsgStyle,proto3" json:"share_msg_style,omitempty"`                                                                                                 // 分享消息样式
	RoomLayout                  int64                        `protobuf:"varint,101,opt,name=room_layout,json=roomLayout,proto3" json:"room_layout,omitempty"`                                                                                                            // 房间布局
	ShortTitle                  string                       `protobuf:"bytes,102,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`                                                                                                             // 短标题
	ShortTouchAreaConfig        *RoomShortTouchAreaConfig    `protobuf:"bytes,103,opt,name=short_touch_area_config,json=shortTouchAreaConfig,proto3" json:"short_touch_area_config,omitempty"`                                                                           // 短触摸区域配置
	BookTime                    int64                        `protobuf:"varint,104,opt,name=book_time,json=bookTime,proto3" json:"book_time,omitempty"`                                                                                                                  // 预定时间
	BookEndTime                 int64                        `protobuf:"varint,105,opt,name=book_end_time,json=bookEndTime,proto3" json:"book_end_time,omitempty"`                                                                                                       // 预定结束时间
	RoomAuditStatus             int64                        `protobuf:"varint,106,opt,name=room_audit_status,json=roomAuditStatus,proto3" json:"room_audit_status,omitempty"`                                                                                           // 房间审核状态
	LiveDistribution            []int64                      `protobuf:"varint,107,rep,packed,name=live_distribution,json=liveDistribution,proto3" json:"live_distribution,omitempty"`                                                                                   // 直播分布
	Tv                          *TVStation                   `protobuf:"bytes,108,opt,name=tv,proto3" json:"tv,omitempty"`                                                                                                                                               // 电视台
	Replay                      bool                         `protobuf:"varint,109,opt,name=replay,proto3" json:"replay,omitempty"`                                                                                                                                      // 重播
	ChallengeInfo               string                       `protobuf:"bytes,110,opt,name=challenge_info,json=challengeInfo,proto3" json:"challenge_info,omitempty"`                                                                                                    // 挑战信息
	LikeCount                   int64                        `protobuf:"varint,111,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`                                                                                                               // 点赞数量
	SearchId                    int64                        `protobuf:"varint,112,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`                                                                                                                  // 搜索 ID
	AnchorScheduledTimeText     string                       `protobuf:"bytes,113,opt,name=anchor_scheduled_time_text,json=anchorScheduledTimeText,proto3" json:"anchor_scheduled_time_text,omitempty"`                                                                  // 主播预定时间文本
	HotSentenceInfo             string                       `protobuf:"bytes,114,opt,name=hot_sentence_info,json=hotSentenceInfo,proto3" json:"hot_sentence_info,omitempty"`                                                                                            // 热门句子信息
	ReplayLocation              int64                        `protobuf:"varint,115,opt,name=replay_location,json=replayLocation,proto3" json:"replay_location,omitempty"`                                                                                                // 重播位置
	StreamCloseTime             int64                        `protobuf:"varint,116,opt,name=stream_close_time,json=streamCloseTime,proto3" json:"stream_close_time,omitempty"`                                                                                           // 流关闭时间
	ContentTag                  string                       `protobuf:"bytes,117,opt,name=content_tag,json=contentTag,proto3" json:"content_tag,omitempty"`                                                                                                             // 内容标签
	ContentLabel                *Image                       `protobuf:"bytes,118,opt,name=content_label,json=contentLabel,proto3" json:"content_label,omitempty"`                                                                                                       // 内容标签
	OperationLabel              *Image                       `protobuf:"bytes,119,opt,name=operation_label,json=operationLabel,proto3" json:"operation_label,omitempty"`                                                                                                 // 操作标签
	AnchorTabType               int32                        `protobuf:"varint,120,opt,name=anchor_tab_type,json=anchorTabType,proto3" json:"anchor_tab_type,omitempty"`                                                                                                 // 主播标签类型
	GameExtra                   *GameExtra                   `protobuf:"bytes,121,opt,name=game_extra,json=gameExtra,proto3" json:"game_extra,omitempty"`                                                                                                                // 游戏额外信息
	OfficialChannel             *OfficialChannelInfo         `protobuf:"bytes,122,opt,name=official_channel,json=officialChannel,proto3" json:"official_channel,omitempty"`                                                                                              // 官方频道信息
	Stamps                      string                       `protobuf:"bytes,123,opt,name=stamps,proto3" json:"stamps,omitempty"`                                                                                                                                       // 邮票
	CommentBox                  *CommentBox                  `protobuf:"bytes,124,opt,name=comment_box,json=commentBox,proto3" json:"comment_box,omitempty"`                                                                                                             // 评论框
	BusinessLive                int32                        `protobuf:"varint,125,opt,name=business_live,json=businessLive,proto3" json:"business_live,omitempty"`                                                                                                      // 商业直播
	WithKtv                     bool                         `protobuf:"varint,126,opt,name=with_ktv,json=withKtv,proto3" json:"with_ktv,omitempty"`                                                                                                                     // 带 KTV
	WithDrawSomething           bool                         `protobuf:"varint,127,opt,name=with_draw_something,json=withDrawSomething,proto3" json:"with_draw_something,omitempty"`                                                                                     // 带画画
	WebcastCommentTcs           int64                        `protobuf:"varint,128,opt,name=webcast_comment_tcs,json=webcastCommentTcs,proto3" json:"webcast_comment_tcs,omitempty"`                                                                                     // 网络评论 TCS
	RoomTag                     int64                        `protobuf:"varint,129,opt,name=room_tag,json=roomTag,proto3" json:"room_tag,omitempty"`                                                                                                                     // 房间标签
	LinkerMap                   map[string]int64             `protobuf:"bytes,130,rep,name=linker_map,json=linkerMap,proto3" json:"linker_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                       // 链接器映射
	FinishReason                int32                        `protobuf:"varint,131,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`                                                                                                      // 完成原因
	RoomCart                    *RoomCart                    `protobuf:"bytes,132,opt,name=room_cart,json=roomCart,proto3" json:"room_cart,omitempty"`                                                                                                                   // 房间购物车
	ScrollConfig                string                       `protobuf:"bytes,133,opt,name=scroll_config,json=scrollConfig,proto3" json:"scroll_config,omitempty"`                                                                                                       // 滚动配置
	RelationTag                 string                       `protobuf:"bytes,134,opt,name=relation_tag,json=relationTag,proto3" json:"relation_tag,omitempty"`                                                                                                          // 关系标签
	OwnerDeviceId               int64                        `protobuf:"varint,135,opt,name=owner_device_id,json=ownerDeviceId,proto3" json:"owner_device_id,omitempty"`                                                                                                 // 所有者设备 ID
	AutoCover                   int64                        `protobuf:"varint,136,opt,name=auto_cover,json=autoCover,proto3" json:"auto_cover,omitempty"`                                                                                                               // 自动封面
	AppId                       int64                        `protobuf:"varint,137,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                                                                                                           // 应用 ID
	WebcastSdkVersion           int64                        `protobuf:"varint,138,opt,name=webcast_sdk_version,json=webcastSdkVersion,proto3" json:"webcast_sdk_version,omitempty"`                                                                                     // SDK 版本
	CommentNameMode             int64                        `protobuf:"varint,139,opt,name=comment_name_mode,json=commentNameMode,proto3" json:"comment_name_mode,omitempty"`                                                                                           // 评论名称模式
	RoomCreateAbParam           string                       `protobuf:"bytes,140,opt,name=room_create_ab_param,json=roomCreateAbParam,proto3" json:"room_create_ab_param,omitempty"`                                                                                    // 房间创建 AB 参数
	PreEnterTime                int64                        `protobuf:"varint,141,opt,name=pre_enter_time,json=preEnterTime,proto3" json:"pre_enter_time,omitempty"`                                                                                                    // 预进入时间
	RanklistAudienceType        int64                        `protobuf:"varint,142,opt,name=ranklist_audience_type,json=ranklistAudienceType,proto3" json:"ranklist_audience_type,omitempty"`                                                                            // 排行榜观众类型
	PreviewFlowTag              int64                        `protobuf:"varint,143,opt,name=preview_flow_tag,json=previewFlowTag,proto3" json:"preview_flow_tag,omitempty"`                                                                                              // 预览流标签
	PreviewTagUrl               *Image                       `protobuf:"bytes,144,opt,name=preview_tag_url,json=previewTagUrl,proto3" json:"preview_tag_url,omitempty"`                                                                                                  // 预览标签 URL
	QuizExtra                   *QuizExtra                   `protobuf:"bytes,145,opt,name=quiz_extra,json=quizExtra,proto3" json:"quiz_extra,omitempty"`                                                                                                                // 测验额外信息
	AnchorABMap                 map[string]string            `protobuf:"bytes,146,rep,name=AnchorABMap,proto3" json:"AnchorABMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                     // 主播 AB 映射
	LinkerUsers                 *LinkerUsers                 `protobuf:"bytes,147,opt,name=linker_users,json=linkerUsers,proto3" json:"linker_users,omitempty"`                                                                                                          // 链接器用户
	LinkmicDisplayType          int64                        `protobuf:"varint,148,opt,name=linkmic_display_type,json=linkmicDisplayType,proto3" json:"linkmic_display_type,omitempty"`                                                                                  // 连麦显示类型
	AudioRoomBGImage            *AudioBGData                 `protobuf:"bytes,149,opt,name=AudioRoomBGImage,proto3" json:"AudioRoomBGImage,omitempty"`                                                                                                                   // 音频房间背景图像
	CityTopLinkerUsers          *LinkerUsers                 `protobuf:"bytes,150,opt,name=city_top_linker_users,json=cityTopLinkerUsers,proto3" json:"city_top_linker_users,omitempty"`                                                                                 // 城市顶级链接器用户
	BorderInfo                  *BorderInfo                  `protobuf:"bytes,151,opt,name=border_info,json=borderInfo,proto3" json:"border_info,omitempty"`                                                                                                             // 边界信息
	CityTopBackground           *Image                       `protobuf:"bytes,152,opt,name=city_top_background,json=cityTopBackground,proto3" json:"city_top_background,omitempty"`                                                                                      // 城市顶级背景
	CityTopDistance             string                       `protobuf:"bytes,153,opt,name=city_top_distance,json=cityTopDistance,proto3" json:"city_top_distance,omitempty"`                                                                                            // 城市顶级距离
	LiveRoomMode                int64                        `protobuf:"varint,154,opt,name=live_room_mode,json=liveRoomMode,proto3" json:"live_room_mode,omitempty"`                                                                                                    // 直播房间模式
	Bonus                       *Bonus                       `protobuf:"bytes,155,opt,name=bonus,proto3" json:"bonus,omitempty"`                                                                                                                                         // 奖金
	Highlight                   bool                         `protobuf:"varint,156,opt,name=highlight,proto3" json:"highlight,omitempty"`                                                                                                                                // 高亮
	IsOfficialChannelRoom       bool                         `protobuf:"varint,157,opt,name=is_official_channel_room,json=isOfficialChannelRoom,proto3" json:"is_official_channel_room,omitempty"`                                                                       // 是否官方频道房间
	ActivityRoomSkinInfo        *ActivityRoomSkinInfo        `protobuf:"bytes,158,opt,name=activity_room_skin_info,json=activityRoomSkinInfo,proto3" json:"activity_room_skin_info,omitempty"`                                                                           // 活动房间皮肤信息
	FansGroupAdminUserIds       []int64                      `protobuf:"varint,159,rep,packed,name=fans_group_admin_user_ids,json=fansGroupAdminUserIds,proto3" json:"fans_group_admin_user_ids,omitempty"`                                                              // 粉丝组管理员用户 ID
	ReplayInfo                  *RoomReplayInfo              `protobuf:"bytes,160,opt,name=replay_info,json=replayInfo,proto3" json:"replay_info,omitempty"`                                                                                                             // 重播信息
	OfficialChannelUid          int64                        `protobuf:"varint,161,opt,name=official_channel_uid,json=officialChannelUid,proto3" json:"official_channel_uid,omitempty"`                                                                                  // 官方频道 UID
	LivePlatformSource          string                       `protobuf:"bytes,162,opt,name=live_platform_source,json=livePlatformSource,proto3" json:"live_platform_source,omitempty"`                                                                                   // 直播平台来源
	AcquaintanceStatus          int64                        `protobuf:"varint,163,opt,name=acquaintance_status,json=acquaintanceStatus,proto3" json:"acquaintance_status,omitempty"`                                                                                    // 熟人状态
	CommentWallInfo             *CommentWallInfo             `protobuf:"bytes,164,opt,name=comment_wall_info,json=commentWallInfo,proto3" json:"comment_wall_info,omitempty"`                                                                                            // 评论墙信息
	CommentWallPosition         *CommentWallPosition         `protobuf:"bytes,165,opt,name=comment_wall_position,json=commentWallPosition,proto3" json:"comment_wall_position,omitempty"`                                                                                // 评论墙位置
	LiveTypeVsLive              bool                         `protobuf:"varint,166,opt,name=live_type_vs_live,json=liveTypeVsLive,proto3" json:"live_type_vs_live,omitempty"`                                                                                            // VS 直播类型
	LiveTypeVsPremiere          bool                         `protobuf:"varint,167,opt,name=live_type_vs_premiere,json=liveTypeVsPremiere,proto3" json:"live_type_vs_premiere,omitempty"`                                                                                // VS 首映类型
	EpisodeExtra                *EpisodeExtraInfo            `protobuf:"bytes,168,opt,name=episode_extra,json=episodeExtra,proto3" json:"episode_extra,omitempty"`                                                                                                       // 剧集额外信息
	VsRoles                     []int32                      `protobuf:"varint,169,rep,packed,name=vs_roles,json=vsRoles,proto3" json:"vs_roles,omitempty"`                                                                                                              // VS 角色
	ItemExplicitInfo            string                       `protobuf:"bytes,170,opt,name=item_explicit_info,json=itemExplicitInfo,proto3" json:"item_explicit_info,omitempty"`                                                                                         // 项目显式信息
	ShortTouchAuth              *ShortTouchAuth              `protobuf:"bytes,171,opt,name=short_touch_auth,json=shortTouchAuth,proto3" json:"short_touch_auth,omitempty"`                                                                                               // 短触摸认证
	SofaLayout                  int64                        `protobuf:"varint,172,opt,name=sofa_layout,json=sofaLayout,proto3" json:"sofa_layout,omitempty"`                                                                                                            // 沙发布局
	AnnouncementInfo            *AnnouncementInfo            `protobuf:"bytes,173,opt,name=announcement_info,json=announcementInfo,proto3" json:"announcement_info,omitempty"`                                                                                           // 公告信息
	IsNeedCheckList             bool                         `protobuf:"varint,174,opt,name=is_need_check_list,json=isNeedCheckList,proto3" json:"is_need_check_list,omitempty"`                                                                                         // 是否需要检查列表
	LiveStatusInfo              *LiveStatusInfo              `protobuf:"bytes,175,opt,name=live_status_info,json=liveStatusInfo,proto3" json:"live_status_info,omitempty"`                                                                                               // 直播状态信息
	ImInfo                      *RoomIMInfo                  `protobuf:"bytes,176,opt,name=im_info,json=imInfo,proto3" json:"im_info,omitempty"`                                                                                                                         // 房间 IM 信息
	AssistLabel                 *LabelInfo                   `protobuf:"bytes,177,opt,name=assist_label,json=assistLabel,proto3" json:"assist_label,omitempty"`                                                                                                          // 辅助标签
	InteractOpenExtra           *InteractOpenExtra           `protobuf:"bytes,178,opt,name=interact_open_extra,json=interactOpenExtra,proto3" json:"interact_open_extra,omitempty"`                                                                                      // 互动开放额外信息
	VerticalTypeInfo            *VerticalTypeInfo            `protobuf:"bytes,179,opt,name=vertical_type_info,json=verticalTypeInfo,proto3" json:"vertical_type_info,omitempty"`                                                                                         // 垂直类型信息
	FilterWords                 []*FilterWord                `protobuf:"bytes,180,rep,name=filter_words,json=filterWords,proto3" json:"filter_words,omitempty"`                                                                                                          // 过滤词
	DynamicLabel                *LabelInfo                   `protobuf:"bytes,181,opt,name=dynamic_label,json=dynamicLabel,proto3" json:"dynamic_label,omitempty"`                                                                                                       // 动态标签
	LinkerDetail                *LinkerDetail                `protobuf:"bytes,182,opt,name=linker_detail,json=linkerDetail,proto3" json:"linker_detail,omitempty"`                                                                                                       // 链接器详细信息
	VisibilityRange             int32                        `protobuf:"varint,183,opt,name=visibility_range,json=visibilityRange,proto3" json:"visibility_range,omitempty"`                                                                                             // 可见范围
	CornerMarkReach             *CornerMarkReach             `protobuf:"bytes,184,opt,name=corner_mark_reach,json=cornerMarkReach,proto3" json:"corner_mark_reach,omitempty"`                                                                                            // 角标到达
	PreviewExpose               *PreviewExposeData           `protobuf:"bytes,185,opt,name=preview_expose,json=previewExpose,proto3" json:"preview_expose,omitempty"`                                                                                                    // 预览曝光数据
	WelfareProjectInfo          *WelfareProjectInfo          `protobuf:"bytes,186,opt,name=welfare_project_info,json=welfareProjectInfo,proto3" json:"welfare_project_info,omitempty"`                                                                                   // 福利项目信息
	GameRoomType                int32                        `protobuf:"varint,187,opt,name=game_room_type,json=gameRoomType,proto3" json:"game_room_type,omitempty"`                                                                                                    // 游戏房间类型
	PaidLiveData                *PaidLiveData                `protobuf:"bytes,188,opt,name=paid_live_data,json=paidLiveData,proto3" json:"paid_live_data,omitempty"`                                                                                                     // 付费直播数据
	EasterEggData               *EasterEggData               `protobuf:"bytes,189,opt,name=easter_egg_data,json=easterEggData,proto3" json:"easter_egg_data,omitempty"`                                                                                                  // 彩蛋数据
	TitleRecommend              bool                         `protobuf:"varint,190,opt,name=title_recommend,json=titleRecommend,proto3" json:"title_recommend,omitempty"`                                                                                                // 标题推荐
	DanmakuDetail               int64                        `protobuf:"varint,191,opt,name=danmaku_detail,json=danmakuDetail,proto3" json:"danmaku_detail,omitempty"`                                                                                                   // 弹幕详细信息
	AvatarLiveInfo              *AvatarLiveInfo              `protobuf:"bytes,192,opt,name=avatar_live_info,json=avatarLiveInfo,proto3" json:"avatar_live_info,omitempty"`                                                                                               // 头像直播信息
	CircleInfo                  *CircleInfo                  `protobuf:"bytes,193,opt,name=circle_info,json=circleInfo,proto3" json:"circle_info,omitempty"`                                                                                                             // 圈子信息
	HasPromotionGames           int64                        `protobuf:"varint,194,opt,name=has_promotion_games,json=hasPromotionGames,proto3" json:"has_promotion_games,omitempty"`                                                                                     // 是否有推广游戏
	ScreenshotSover             *Image                       `protobuf:"bytes,195,opt,name=screenshot_sover,json=screenshotSover,proto3" json:"screenshot_sover,omitempty"`                                                                                              // 截图覆盖
	Appearance                  *Appearance                  `protobuf:"bytes,196,opt,name=appearance,proto3" json:"appearance,omitempty"`                                                                                                                               // 外观
	EcomData                    *EcomData                    `protobuf:"bytes,197,opt,name=ecom_data,json=ecomData,proto3" json:"ecom_data,omitempty"`                                                                                                                   // 电子商务数据
	IndustryServiceInfo         *IndustryServiceInfo         `protobuf:"bytes,198,opt,name=industry_service_info,json=industryServiceInfo,proto3" json:"industry_service_info,omitempty"`                                                                                // 行业服务信息
	RelevantRecommendation      *RelevantRecommendation      `protobuf:"bytes,199,opt,name=relevant_recommendation,json=relevantRecommendation,proto3" json:"relevant_recommendation,omitempty"`                                                                         // 相关推荐
	SceneTypeInfo               *RoomSpecificSceneTypeInfo   `protobuf:"bytes,200,opt,name=scene_type_info,json=sceneTypeInfo,proto3" json:"scene_type_info,omitempty"`                                                                                                  // 场景类型信息
	GameCp                      *GameCPData                  `protobuf:"bytes,201,opt,name=game_cp,json=gameCp,proto3" json:"game_cp,omitempty"`                                                                                                                         // 游戏 CP 数据
	GamePlay                    *GamePlayData                `protobuf:"bytes,202,opt,name=game_play,json=gamePlay,proto3" json:"game_play,omitempty"`                                                                                                                   // 游戏玩法数据
	UnionLiveInfo               *UnionLiveInfo               `protobuf:"bytes,203,opt,name=union_live_info,json=unionLiveInfo,proto3" json:"union_live_info,omitempty"`                                                                                                  // 联合直播信息
	BeautifyInfo                *BeautifyInfo                `protobuf:"bytes,204,opt,name=beautify_info,json=beautifyInfo,proto3" json:"beautify_info,omitempty"`                                                                                                       // 美化信息
	ToolbarData                 *ToolBarData                 `protobuf:"bytes,205,opt,name=toolbar_data,json=toolbarData,proto3" json:"toolbar_data,omitempty"`                                                                                                          // 工具栏数据
	AnchorTabLabel              *AnchorTabLabel              `protobuf:"bytes,206,opt,name=anchor_tab_label,json=anchorTabLabel,proto3" json:"anchor_tab_label,omitempty"`                                                                                               // 主播标签
	LifeGrouponInfo             *LifeGrouponInfo             `protobuf:"bytes,207,opt,name=life_groupon_info,json=lifeGrouponInfo,proto3" json:"life_groupon_info,omitempty"`                                                                                            // 生活团购信息
	VipData                     *VipData                     `protobuf:"bytes,208,opt,name=vip_data,json=vipData,proto3" json:"vip_data,omitempty"`                                                                                                                      // VIP 数据
	ToutiaoCoverRecommendLevel  int64                        `protobuf:"varint,209,opt,name=toutiao_cover_recommend_level,json=toutiaoCoverRecommendLevel,proto3" json:"toutiao_cover_recommend_level,omitempty"`                                                        // 头条封面推荐级别
	ToutiaoTitleRecommendLevel  int64                        `protobuf:"varint,210,opt,name=toutiao_title_recommend_level,json=toutiaoTitleRecommendLevel,proto3" json:"toutiao_title_recommend_level,omitempty"`                                                        // 头条标题推荐级别
	UpperRightWidgetDataList    []*UpperRightWidgetData      `protobuf:"bytes,211,rep,name=upper_right_widget_data_list,json=upperRightWidgetDataList,proto3" json:"upper_right_widget_data_list,omitempty"`                                                             // 右上角小部件数据列表
	LiveFeedbackCard            *FeedbackCard                `protobuf:"bytes,212,opt,name=live_feedback_card,json=liveFeedbackCard,proto3" json:"live_feedback_card,omitempty"`                                                                                         // 直播反馈卡
	AssistLabelList             []*LabelInfo                 `protobuf:"bytes,213,rep,name=assist_label_list,json=assistLabelList,proto3" json:"assist_label_list,omitempty"`                                                                                            // 辅助标签列表
	DesireInfo                  *DesireInfo                  `protobuf:"bytes,214,opt,name=desire_info,json=desireInfo,proto3" json:"desire_info,omitempty"`                                                                                                             // 欲望信息
	HotRoomInfo                 *HotRoomInfo                 `protobuf:"bytes,215,opt,name=hot_room_info,json=hotRoomInfo,proto3" json:"hot_room_info,omitempty"`                                                                                                        // 热门房间信息
	WithAggregateColumn         bool                         `protobuf:"varint,216,opt,name=with_aggregate_column,json=withAggregateColumn,proto3" json:"with_aggregate_column,omitempty"`                                                                               // 是否带有聚合列
	CastScreenData              *CastScreenData              `protobuf:"bytes,217,opt,name=cast_screen_data,json=castScreenData,proto3" json:"cast_screen_data,omitempty"`                                                                                               // 投屏数据
	OfficialChannelExtra        *OfficialChannelExtraInfo    `protobuf:"bytes,218,opt,name=official_channel_extra,json=officialChannelExtra,proto3" json:"official_channel_extra,omitempty"`                                                                             // 官方频道额外信息
	AuthCity                    string                       `protobuf:"bytes,219,opt,name=auth_city,json=authCity,proto3" json:"auth_city,omitempty"`                                                                                                                   // 授权城市
	ActivityLiveRecommendConfig *ActivityLiveRecommendConfig `protobuf:"bytes,220,opt,name=activity_live_recommend_config,json=activityLiveRecommendConfig,proto3" json:"activity_live_recommend_config,omitempty"`                                                      // 活动直播推荐配置
	RoomChannel                 *RoomChannelData             `protobuf:"bytes,221,opt,name=room_channel,json=roomChannel,proto3" json:"room_channel,omitempty"`                                                                                                          // 房间频道数据
	PackMeta                    *PackMetaInfo                `protobuf:"bytes,222,opt,name=pack_meta,json=packMeta,proto3" json:"pack_meta,omitempty"`                                                                                                                   // 包元信息
	ActivityData                *ActivityData                `protobuf:"bytes,223,opt,name=activity_data,json=activityData,proto3" json:"activity_data,omitempty"`                                                                                                       // 活动数据
	LikeDisplayConfig           *LikeDisplayConfig           `protobuf:"bytes,224,opt,name=like_display_config,json=likeDisplayConfig,proto3" json:"like_display_config,omitempty"`                                                                                      // 点赞显示配置
	RoomViewStats               *RoomViewStats               `protobuf:"bytes,225,opt,name=room_view_stats,json=roomViewStats,proto3" json:"room_view_stats,omitempty"`                                                                                                  // 房间视图统计
	Match                       *MatchRoomData               `protobuf:"bytes,226,opt,name=match,proto3" json:"match,omitempty"`                                                                                                                                         // 比赛房间数据
	CommentaryRoomInfo          *CommentaryRoomInfo          `protobuf:"bytes,227,opt,name=commentary_room_info,json=commentaryRoomInfo,proto3" json:"commentary_room_info,omitempty"`                                                                                   // 评论房间信息
	RedpacketAudienceAuth       int64                        `protobuf:"varint,228,opt,name=redpacket_audience_auth,json=redpacketAudienceAuth,proto3" json:"redpacket_audience_auth,omitempty"`                                                                         // 红包观众认证
	MatchChatConfig             *MatchChatConfig             `protobuf:"bytes,229,opt,name=match_chat_config,json=matchChatConfig,proto3" json:"match_chat_config,omitempty"`                                                                                            // 比赛聊天配置
	VsMainReplayId              int64                        `protobuf:"varint,230,opt,name=vs_main_replay_id,json=vsMainReplayId,proto3" json:"vs_main_replay_id,omitempty"`                                                                                            // VS 主重播 ID
	ScreenCaptureSharingTitle   string                       `protobuf:"bytes,231,opt,name=screen_capture_sharing_title,json=screenCaptureSharingTitle,proto3" json:"screen_capture_sharing_title,omitempty"`                                                            // 屏幕捕获共享标题
	ShareResource               *ShareResource               `protobuf:"bytes,232,opt,name=share_resource,json=shareResource,proto3" json:"share_resource,omitempty"`                                                                                                    // 共享资源
	SharingMusicIdList          []string                     `protobuf:"bytes,233,rep,name=sharing_music_id_list,json=sharingMusicIdList,proto3" json:"sharing_music_id_list,omitempty"`                                                                                 // 共享音乐 ID 列表
	PublicScreenBottomInfo      *PublicScreenBottomInfo      `protobuf:"bytes,234,opt,name=public_screen_bottom_info,json=publicScreenBottomInfo,proto3" json:"public_screen_bottom_info,omitempty"`                                                                     // 公共屏幕底部信息
	PushStreamHkt               *StreamUrl                   `protobuf:"bytes,235,opt,name=push_stream_hkt,json=pushStreamHkt,proto3" json:"push_stream_hkt,omitempty"`                                                                                                  // 推流 HKT
	Basis                       *RoomBasisData               `protobuf:"bytes,300,opt,name=basis,proto3" json:"basis,omitempty"`                                                                                                                                         // 房间基础数据
	Interact                    *RoomInteractData            `protobuf:"bytes,301,opt,name=interact,proto3" json:"interact,omitempty"`                                                                                                                                   // 房间互动数据
	Revenue                     *RoomRevenueData             `protobuf:"bytes,302,opt,name=revenue,proto3" json:"revenue,omitempty"`                                                                                                                                     // 房间收入数据
	ReqUser                     *RoomReqUserData             `protobuf:"bytes,303,opt,name=req_user,json=reqUser,proto3" json:"req_user,omitempty"`                                                                                                                      // 请求用户数据
	AnchorData                  *RoomAnchorData              `protobuf:"bytes,304,opt,name=anchor_data,json=anchorData,proto3" json:"anchor_data,omitempty"`                                                                                                             // 主播数据
	Others                      *RoomOthersData              `protobuf:"bytes,305,opt,name=others,proto3" json:"others,omitempty"`                                                                                                                                       // 其他数据
	PicoInfo                    *PicoInfo                    `protobuf:"bytes,306,opt,name=pico_info,json=picoInfo,proto3" json:"pico_info,omitempty"`                                                                                                                   // Pico 信息
	GameData                    *RoomGameData                `protobuf:"bytes,307,opt,name=game_data,json=gameData,proto3" json:"game_data,omitempty"`                                                                                                                   // 房间游戏数据
	FeedData                    *RoomFeedData                `protobuf:"bytes,308,opt,name=feed_data,json=feedData,proto3" json:"feed_data,omitempty"`                                                                                                                   // 房间供稿数据
	OpenContentData             *OpenContentData             `protobuf:"bytes,309,opt,name=open_content_data,json=openContentData,proto3" json:"open_content_data,omitempty"`                                                                                            // 开放内容数据
	ClientComponentData         *ClientComponent             `protobuf:"bytes,310,opt,name=client_component_data,json=clientComponentData,proto3" json:"client_component_data,omitempty"`                                                                                // 客户端组件数据
	PlatformComponentsData      *RoomPlatformComponentsData  `protobuf:"bytes,311,opt,name=platform_components_data,json=platformComponentsData,proto3" json:"platform_components_data,omitempty"`                                                                       // 平台组件数据
	IosClientComponentData      *IOSClientComponent          `protobuf:"bytes,312,opt,name=ios_client_component_data,json=iosClientComponentData,proto3" json:"ios_client_component_data,omitempty"`                                                                     // iOS 客户端组件数据
	OwnerOpenId                 string                       `protobuf:"bytes,5000,opt,name=owner_open_id,json=ownerOpenId,proto3" json:"owner_open_id,omitempty"`                                                                                                       // 所有者开放 ID
	AdminUserOpenIds            []string                     `protobuf:"bytes,5001,rep,name=admin_user_open_ids,json=adminUserOpenIds,proto3" json:"admin_user_open_ids,omitempty"`                                                                                      // 管理员用户开放 ID 列表
	FansGroupAdminUserOpenIds   []string                     `protobuf:"bytes,5002,rep,name=fans_group_admin_user_open_ids,json=fansGroupAdminUserOpenIds,proto3" json:"fans_group_admin_user_open_ids,omitempty"`                                                       // 粉丝组管理员用户开放 ID 列表
	OfficialChannelOpenId       string                       `protobuf:"bytes,5003,opt,name=official_channel_open_id,json=officialChannelOpenId,proto3" json:"official_channel_open_id,omitempty"`                                                                       // 官方频道开放 ID
	CoverGauss                  *Image                       `protobuf:"bytes,5004,opt,name=cover_gauss,json=coverGauss,proto3" json:"cover_gauss,omitempty"`                                                                                                            // 高斯模糊封面
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{69}
}

func (x *Room) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Room) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *Room) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Room) GetOwnerUserId() int64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *Room) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Room) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *Room) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Room) GetLinkmicLayout() int64 {
	if x != nil {
		return x.LinkmicLayout
	}
	return 0
}

func (x *Room) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *Room) GetExtra() *RoomExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Room) GetDynamicCoverUri() string {
	if x != nil {
		return x.DynamicCoverUri
	}
	return ""
}

func (x *Room) GetDynamicCoverDict() map[int64]string {
	if x != nil {
		return x.DynamicCoverDict
	}
	return nil
}

func (x *Room) GetLastPingTime() int64 {
	if x != nil {
		return x.LastPingTime
	}
	return 0
}

func (x *Room) GetLiveId() int64 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *Room) GetStreamProvider() int64 {
	if x != nil {
		return x.StreamProvider
	}
	return 0
}

func (x *Room) GetOsType() int64 {
	if x != nil {
		return x.OsType
	}
	return 0
}

func (x *Room) GetClientVersion() int64 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *Room) GetWithLinkmic() bool {
	if x != nil {
		return x.WithLinkmic
	}
	return false
}

func (x *Room) GetEnableRoomPerspective() bool {
	if x != nil {
		return x.EnableRoomPerspective
	}
	return false
}

func (x *Room) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Room) GetDynamicCover() *Image {
	if x != nil {
		return x.DynamicCover
	}
	return nil
}

func (x *Room) GetDynamicCoverLow() *Image {
	if x != nil {
		return x.DynamicCoverLow
	}
	return nil
}

func (x *Room) GetShareUrl() string {
	if x != nil {
		return x.ShareUrl
	}
	return ""
}

func (x *Room) GetAnchorShareText() string {
	if x != nil {
		return x.AnchorShareText
	}
	return ""
}

func (x *Room) GetUserShareText() string {
	if x != nil {
		return x.UserShareText
	}
	return ""
}

func (x *Room) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Room) GetStreamIdStr() string {
	if x != nil {
		return x.StreamIdStr
	}
	return ""
}

func (x *Room) GetStreamUrl() *StreamUrl {
	if x != nil {
		return x.StreamUrl
	}
	return nil
}

func (x *Room) GetMosaicStatus() int64 {
	if x != nil {
		return x.MosaicStatus
	}
	return 0
}

func (x *Room) GetMosaicTip() string {
	if x != nil {
		return x.MosaicTip
	}
	return ""
}

func (x *Room) GetCellStyle() int64 {
	if x != nil {
		return x.CellStyle
	}
	return 0
}

func (x *Room) GetLinkMic() *LinkMic {
	if x != nil {
		return x.LinkMic
	}
	return nil
}

func (x *Room) GetLuckymoneyNum() int64 {
	if x != nil {
		return x.LuckymoneyNum
	}
	return 0
}

func (x *Room) GetDecoList() []*Decoration {
	if x != nil {
		return x.DecoList
	}
	return nil
}

func (x *Room) GetTopFans() []*TopFan {
	if x != nil {
		return x.TopFans
	}
	return nil
}

func (x *Room) GetStats() *RoomStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Room) GetSunDailyIconContent() string {
	if x != nil {
		return x.SunDailyIconContent
	}
	return ""
}

func (x *Room) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *Room) GetDistanceCity() string {
	if x != nil {
		return x.DistanceCity
	}
	return ""
}

func (x *Room) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Room) GetRealDistance() string {
	if x != nil {
		return x.RealDistance
	}
	return ""
}

func (x *Room) GetFeedRoomLabel() *Image {
	if x != nil {
		return x.FeedRoomLabel
	}
	return nil
}

func (x *Room) GetCommonLabelList() string {
	if x != nil {
		return x.CommonLabelList
	}
	return ""
}

func (x *Room) GetLivingRoomAttrs() *RoomUserAttr {
	if x != nil {
		return x.LivingRoomAttrs
	}
	return nil
}

func (x *Room) GetAdminUserIds() []int64 {
	if x != nil {
		return x.AdminUserIds
	}
	return nil
}

func (x *Room) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Room) GetPrivateInfo() string {
	if x != nil {
		return x.PrivateInfo
	}
	return ""
}

func (x *Room) GetHasCommerceGoods() bool {
	if x != nil {
		return x.HasCommerceGoods
	}
	return false
}

func (x *Room) GetLiveTypeNormal() bool {
	if x != nil {
		return x.LiveTypeNormal
	}
	return false
}

func (x *Room) GetLiveTypeLinkmic() bool {
	if x != nil {
		return x.LiveTypeLinkmic
	}
	return false
}

func (x *Room) GetLiveTypeAudio() bool {
	if x != nil {
		return x.LiveTypeAudio
	}
	return false
}

func (x *Room) GetLiveTypeThirdParty() bool {
	if x != nil {
		return x.LiveTypeThirdParty
	}
	return false
}

func (x *Room) GetLiveTypeScreenshot() bool {
	if x != nil {
		return x.LiveTypeScreenshot
	}
	return false
}

func (x *Room) GetLiveTypeSandbox() bool {
	if x != nil {
		return x.LiveTypeSandbox
	}
	return false
}

func (x *Room) GetLiveTypeOfficial() bool {
	if x != nil {
		return x.LiveTypeOfficial
	}
	return false
}

func (x *Room) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Room) GetOrientation() int64 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *Room) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *Room) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Room) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Room) GetPopularity() int64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *Room) GetPopularityStr() string {
	if x != nil {
		return x.PopularityStr
	}
	return ""
}

func (x *Room) GetFcdnAppid() int64 {
	if x != nil {
		return x.FcdnAppid
	}
	return 0
}

func (x *Room) GetSellGoods() bool {
	if x != nil {
		return x.SellGoods
	}
	return false
}

func (x *Room) GetWebCount() int64 {
	if x != nil {
		return x.WebCount
	}
	return 0
}

func (x *Room) GetVerticalCoverUri() string {
	if x != nil {
		return x.VerticalCoverUri
	}
	return ""
}

func (x *Room) GetBaseCategory() int64 {
	if x != nil {
		return x.BaseCategory
	}
	return 0
}

func (x *Room) GetRoomAuth() *RoomAuthStatus {
	if x != nil {
		return x.RoomAuth
	}
	return nil
}

func (x *Room) GetRoomTabs() []*RoomTab {
	if x != nil {
		return x.RoomTabs
	}
	return nil
}

func (x *Room) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Room) GetBurst() *BurstInfo {
	if x != nil {
		return x.Burst
	}
	return nil
}

func (x *Room) GetHealthScore() *RoomHealthScoreInfo {
	if x != nil {
		return x.HealthScore
	}
	return nil
}

func (x *Room) GetIsReplay() bool {
	if x != nil {
		return x.IsReplay
	}
	return false
}

func (x *Room) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *Room) GetGroupSource() int64 {
	if x != nil {
		return x.GroupSource
	}
	return 0
}

func (x *Room) GetLotteryFinishTime() int64 {
	if x != nil {
		return x.LotteryFinishTime
	}
	return 0
}

func (x *Room) GetActivityTag() *RoomActivityTag {
	if x != nil {
		return x.ActivityTag
	}
	return nil
}

func (x *Room) GetPortraitCover() *Image {
	if x != nil {
		return x.PortraitCover
	}
	return nil
}

func (x *Room) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *Room) GetLayout() int64 {
	if x != nil {
		return x.Layout
	}
	return 0
}

func (x *Room) GetWaitCopy() string {
	if x != nil {
		return x.WaitCopy
	}
	return ""
}

func (x *Room) GetGuideButton() *Image {
	if x != nil {
		return x.GuideButton
	}
	return nil
}

func (x *Room) GetPreviewCopy() string {
	if x != nil {
		return x.PreviewCopy
	}
	return ""
}

func (x *Room) GetIsShowInquiryBall() bool {
	if x != nil {
		return x.IsShowInquiryBall
	}
	return false
}

func (x *Room) GetMatchInfo() *MatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *Room) GetUseFilter() bool {
	if x != nil {
		return x.UseFilter
	}
	return false
}

func (x *Room) GetGiftMsgStyle() int64 {
	if x != nil {
		return x.GiftMsgStyle
	}
	return 0
}

func (x *Room) GetDistanceKm() string {
	if x != nil {
		return x.DistanceKm
	}
	return ""
}

func (x *Room) GetFinishUrl() string {
	if x != nil {
		return x.FinishUrl
	}
	return ""
}

func (x *Room) GetOfficialRoomInfo() *OfficialRoomInfo {
	if x != nil {
		return x.OfficialRoomInfo
	}
	return nil
}

func (x *Room) GetIsShowUserCardSwitch() bool {
	if x != nil {
		return x.IsShowUserCardSwitch
	}
	return false
}

func (x *Room) GetVideoFeedTag() string {
	if x != nil {
		return x.VideoFeedTag
	}
	return ""
}

func (x *Room) GetForumExtraData() string {
	if x != nil {
		return x.ForumExtraData
	}
	return ""
}

func (x *Room) GetFansclubMsgStyle() int64 {
	if x != nil {
		return x.FansclubMsgStyle
	}
	return 0
}

func (x *Room) GetFollowMsgStyle() int64 {
	if x != nil {
		return x.FollowMsgStyle
	}
	return 0
}

func (x *Room) GetShareMsgStyle() int64 {
	if x != nil {
		return x.ShareMsgStyle
	}
	return 0
}

func (x *Room) GetRoomLayout() int64 {
	if x != nil {
		return x.RoomLayout
	}
	return 0
}

func (x *Room) GetShortTitle() string {
	if x != nil {
		return x.ShortTitle
	}
	return ""
}

func (x *Room) GetShortTouchAreaConfig() *RoomShortTouchAreaConfig {
	if x != nil {
		return x.ShortTouchAreaConfig
	}
	return nil
}

func (x *Room) GetBookTime() int64 {
	if x != nil {
		return x.BookTime
	}
	return 0
}

func (x *Room) GetBookEndTime() int64 {
	if x != nil {
		return x.BookEndTime
	}
	return 0
}

func (x *Room) GetRoomAuditStatus() int64 {
	if x != nil {
		return x.RoomAuditStatus
	}
	return 0
}

func (x *Room) GetLiveDistribution() []int64 {
	if x != nil {
		return x.LiveDistribution
	}
	return nil
}

func (x *Room) GetTv() *TVStation {
	if x != nil {
		return x.Tv
	}
	return nil
}

func (x *Room) GetReplay() bool {
	if x != nil {
		return x.Replay
	}
	return false
}

func (x *Room) GetChallengeInfo() string {
	if x != nil {
		return x.ChallengeInfo
	}
	return ""
}

func (x *Room) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Room) GetSearchId() int64 {
	if x != nil {
		return x.SearchId
	}
	return 0
}

func (x *Room) GetAnchorScheduledTimeText() string {
	if x != nil {
		return x.AnchorScheduledTimeText
	}
	return ""
}

func (x *Room) GetHotSentenceInfo() string {
	if x != nil {
		return x.HotSentenceInfo
	}
	return ""
}

func (x *Room) GetReplayLocation() int64 {
	if x != nil {
		return x.ReplayLocation
	}
	return 0
}

func (x *Room) GetStreamCloseTime() int64 {
	if x != nil {
		return x.StreamCloseTime
	}
	return 0
}

func (x *Room) GetContentTag() string {
	if x != nil {
		return x.ContentTag
	}
	return ""
}

func (x *Room) GetContentLabel() *Image {
	if x != nil {
		return x.ContentLabel
	}
	return nil
}

func (x *Room) GetOperationLabel() *Image {
	if x != nil {
		return x.OperationLabel
	}
	return nil
}

func (x *Room) GetAnchorTabType() int32 {
	if x != nil {
		return x.AnchorTabType
	}
	return 0
}

func (x *Room) GetGameExtra() *GameExtra {
	if x != nil {
		return x.GameExtra
	}
	return nil
}

func (x *Room) GetOfficialChannel() *OfficialChannelInfo {
	if x != nil {
		return x.OfficialChannel
	}
	return nil
}

func (x *Room) GetStamps() string {
	if x != nil {
		return x.Stamps
	}
	return ""
}

func (x *Room) GetCommentBox() *CommentBox {
	if x != nil {
		return x.CommentBox
	}
	return nil
}

func (x *Room) GetBusinessLive() int32 {
	if x != nil {
		return x.BusinessLive
	}
	return 0
}

func (x *Room) GetWithKtv() bool {
	if x != nil {
		return x.WithKtv
	}
	return false
}

func (x *Room) GetWithDrawSomething() bool {
	if x != nil {
		return x.WithDrawSomething
	}
	return false
}

func (x *Room) GetWebcastCommentTcs() int64 {
	if x != nil {
		return x.WebcastCommentTcs
	}
	return 0
}

func (x *Room) GetRoomTag() int64 {
	if x != nil {
		return x.RoomTag
	}
	return 0
}

func (x *Room) GetLinkerMap() map[string]int64 {
	if x != nil {
		return x.LinkerMap
	}
	return nil
}

func (x *Room) GetFinishReason() int32 {
	if x != nil {
		return x.FinishReason
	}
	return 0
}

func (x *Room) GetRoomCart() *RoomCart {
	if x != nil {
		return x.RoomCart
	}
	return nil
}

func (x *Room) GetScrollConfig() string {
	if x != nil {
		return x.ScrollConfig
	}
	return ""
}

func (x *Room) GetRelationTag() string {
	if x != nil {
		return x.RelationTag
	}
	return ""
}

func (x *Room) GetOwnerDeviceId() int64 {
	if x != nil {
		return x.OwnerDeviceId
	}
	return 0
}

func (x *Room) GetAutoCover() int64 {
	if x != nil {
		return x.AutoCover
	}
	return 0
}

func (x *Room) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *Room) GetWebcastSdkVersion() int64 {
	if x != nil {
		return x.WebcastSdkVersion
	}
	return 0
}

func (x *Room) GetCommentNameMode() int64 {
	if x != nil {
		return x.CommentNameMode
	}
	return 0
}

func (x *Room) GetRoomCreateAbParam() string {
	if x != nil {
		return x.RoomCreateAbParam
	}
	return ""
}

func (x *Room) GetPreEnterTime() int64 {
	if x != nil {
		return x.PreEnterTime
	}
	return 0
}

func (x *Room) GetRanklistAudienceType() int64 {
	if x != nil {
		return x.RanklistAudienceType
	}
	return 0
}

func (x *Room) GetPreviewFlowTag() int64 {
	if x != nil {
		return x.PreviewFlowTag
	}
	return 0
}

func (x *Room) GetPreviewTagUrl() *Image {
	if x != nil {
		return x.PreviewTagUrl
	}
	return nil
}

func (x *Room) GetQuizExtra() *QuizExtra {
	if x != nil {
		return x.QuizExtra
	}
	return nil
}

func (x *Room) GetAnchorABMap() map[string]string {
	if x != nil {
		return x.AnchorABMap
	}
	return nil
}

func (x *Room) GetLinkerUsers() *LinkerUsers {
	if x != nil {
		return x.LinkerUsers
	}
	return nil
}

func (x *Room) GetLinkmicDisplayType() int64 {
	if x != nil {
		return x.LinkmicDisplayType
	}
	return 0
}

func (x *Room) GetAudioRoomBGImage() *AudioBGData {
	if x != nil {
		return x.AudioRoomBGImage
	}
	return nil
}

func (x *Room) GetCityTopLinkerUsers() *LinkerUsers {
	if x != nil {
		return x.CityTopLinkerUsers
	}
	return nil
}

func (x *Room) GetBorderInfo() *BorderInfo {
	if x != nil {
		return x.BorderInfo
	}
	return nil
}

func (x *Room) GetCityTopBackground() *Image {
	if x != nil {
		return x.CityTopBackground
	}
	return nil
}

func (x *Room) GetCityTopDistance() string {
	if x != nil {
		return x.CityTopDistance
	}
	return ""
}

func (x *Room) GetLiveRoomMode() int64 {
	if x != nil {
		return x.LiveRoomMode
	}
	return 0
}

func (x *Room) GetBonus() *Bonus {
	if x != nil {
		return x.Bonus
	}
	return nil
}

func (x *Room) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *Room) GetIsOfficialChannelRoom() bool {
	if x != nil {
		return x.IsOfficialChannelRoom
	}
	return false
}

func (x *Room) GetActivityRoomSkinInfo() *ActivityRoomSkinInfo {
	if x != nil {
		return x.ActivityRoomSkinInfo
	}
	return nil
}

func (x *Room) GetFansGroupAdminUserIds() []int64 {
	if x != nil {
		return x.FansGroupAdminUserIds
	}
	return nil
}

func (x *Room) GetReplayInfo() *RoomReplayInfo {
	if x != nil {
		return x.ReplayInfo
	}
	return nil
}

func (x *Room) GetOfficialChannelUid() int64 {
	if x != nil {
		return x.OfficialChannelUid
	}
	return 0
}

func (x *Room) GetLivePlatformSource() string {
	if x != nil {
		return x.LivePlatformSource
	}
	return ""
}

func (x *Room) GetAcquaintanceStatus() int64 {
	if x != nil {
		return x.AcquaintanceStatus
	}
	return 0
}

func (x *Room) GetCommentWallInfo() *CommentWallInfo {
	if x != nil {
		return x.CommentWallInfo
	}
	return nil
}

func (x *Room) GetCommentWallPosition() *CommentWallPosition {
	if x != nil {
		return x.CommentWallPosition
	}
	return nil
}

func (x *Room) GetLiveTypeVsLive() bool {
	if x != nil {
		return x.LiveTypeVsLive
	}
	return false
}

func (x *Room) GetLiveTypeVsPremiere() bool {
	if x != nil {
		return x.LiveTypeVsPremiere
	}
	return false
}

func (x *Room) GetEpisodeExtra() *EpisodeExtraInfo {
	if x != nil {
		return x.EpisodeExtra
	}
	return nil
}

func (x *Room) GetVsRoles() []int32 {
	if x != nil {
		return x.VsRoles
	}
	return nil
}

func (x *Room) GetItemExplicitInfo() string {
	if x != nil {
		return x.ItemExplicitInfo
	}
	return ""
}

func (x *Room) GetShortTouchAuth() *ShortTouchAuth {
	if x != nil {
		return x.ShortTouchAuth
	}
	return nil
}

func (x *Room) GetSofaLayout() int64 {
	if x != nil {
		return x.SofaLayout
	}
	return 0
}

func (x *Room) GetAnnouncementInfo() *AnnouncementInfo {
	if x != nil {
		return x.AnnouncementInfo
	}
	return nil
}

func (x *Room) GetIsNeedCheckList() bool {
	if x != nil {
		return x.IsNeedCheckList
	}
	return false
}

func (x *Room) GetLiveStatusInfo() *LiveStatusInfo {
	if x != nil {
		return x.LiveStatusInfo
	}
	return nil
}

func (x *Room) GetImInfo() *RoomIMInfo {
	if x != nil {
		return x.ImInfo
	}
	return nil
}

func (x *Room) GetAssistLabel() *LabelInfo {
	if x != nil {
		return x.AssistLabel
	}
	return nil
}

func (x *Room) GetInteractOpenExtra() *InteractOpenExtra {
	if x != nil {
		return x.InteractOpenExtra
	}
	return nil
}

func (x *Room) GetVerticalTypeInfo() *VerticalTypeInfo {
	if x != nil {
		return x.VerticalTypeInfo
	}
	return nil
}

func (x *Room) GetFilterWords() []*FilterWord {
	if x != nil {
		return x.FilterWords
	}
	return nil
}

func (x *Room) GetDynamicLabel() *LabelInfo {
	if x != nil {
		return x.DynamicLabel
	}
	return nil
}

func (x *Room) GetLinkerDetail() *LinkerDetail {
	if x != nil {
		return x.LinkerDetail
	}
	return nil
}

func (x *Room) GetVisibilityRange() int32 {
	if x != nil {
		return x.VisibilityRange
	}
	return 0
}

func (x *Room) GetCornerMarkReach() *CornerMarkReach {
	if x != nil {
		return x.CornerMarkReach
	}
	return nil
}

func (x *Room) GetPreviewExpose() *PreviewExposeData {
	if x != nil {
		return x.PreviewExpose
	}
	return nil
}

func (x *Room) GetWelfareProjectInfo() *WelfareProjectInfo {
	if x != nil {
		return x.WelfareProjectInfo
	}
	return nil
}

func (x *Room) GetGameRoomType() int32 {
	if x != nil {
		return x.GameRoomType
	}
	return 0
}

func (x *Room) GetPaidLiveData() *PaidLiveData {
	if x != nil {
		return x.PaidLiveData
	}
	return nil
}

func (x *Room) GetEasterEggData() *EasterEggData {
	if x != nil {
		return x.EasterEggData
	}
	return nil
}

func (x *Room) GetTitleRecommend() bool {
	if x != nil {
		return x.TitleRecommend
	}
	return false
}

func (x *Room) GetDanmakuDetail() int64 {
	if x != nil {
		return x.DanmakuDetail
	}
	return 0
}

func (x *Room) GetAvatarLiveInfo() *AvatarLiveInfo {
	if x != nil {
		return x.AvatarLiveInfo
	}
	return nil
}

func (x *Room) GetCircleInfo() *CircleInfo {
	if x != nil {
		return x.CircleInfo
	}
	return nil
}

func (x *Room) GetHasPromotionGames() int64 {
	if x != nil {
		return x.HasPromotionGames
	}
	return 0
}

func (x *Room) GetScreenshotSover() *Image {
	if x != nil {
		return x.ScreenshotSover
	}
	return nil
}

func (x *Room) GetAppearance() *Appearance {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *Room) GetEcomData() *EcomData {
	if x != nil {
		return x.EcomData
	}
	return nil
}

func (x *Room) GetIndustryServiceInfo() *IndustryServiceInfo {
	if x != nil {
		return x.IndustryServiceInfo
	}
	return nil
}

func (x *Room) GetRelevantRecommendation() *RelevantRecommendation {
	if x != nil {
		return x.RelevantRecommendation
	}
	return nil
}

func (x *Room) GetSceneTypeInfo() *RoomSpecificSceneTypeInfo {
	if x != nil {
		return x.SceneTypeInfo
	}
	return nil
}

func (x *Room) GetGameCp() *GameCPData {
	if x != nil {
		return x.GameCp
	}
	return nil
}

func (x *Room) GetGamePlay() *GamePlayData {
	if x != nil {
		return x.GamePlay
	}
	return nil
}

func (x *Room) GetUnionLiveInfo() *UnionLiveInfo {
	if x != nil {
		return x.UnionLiveInfo
	}
	return nil
}

func (x *Room) GetBeautifyInfo() *BeautifyInfo {
	if x != nil {
		return x.BeautifyInfo
	}
	return nil
}

func (x *Room) GetToolbarData() *ToolBarData {
	if x != nil {
		return x.ToolbarData
	}
	return nil
}

func (x *Room) GetAnchorTabLabel() *AnchorTabLabel {
	if x != nil {
		return x.AnchorTabLabel
	}
	return nil
}

func (x *Room) GetLifeGrouponInfo() *LifeGrouponInfo {
	if x != nil {
		return x.LifeGrouponInfo
	}
	return nil
}

func (x *Room) GetVipData() *VipData {
	if x != nil {
		return x.VipData
	}
	return nil
}

func (x *Room) GetToutiaoCoverRecommendLevel() int64 {
	if x != nil {
		return x.ToutiaoCoverRecommendLevel
	}
	return 0
}

func (x *Room) GetToutiaoTitleRecommendLevel() int64 {
	if x != nil {
		return x.ToutiaoTitleRecommendLevel
	}
	return 0
}

func (x *Room) GetUpperRightWidgetDataList() []*UpperRightWidgetData {
	if x != nil {
		return x.UpperRightWidgetDataList
	}
	return nil
}

func (x *Room) GetLiveFeedbackCard() *FeedbackCard {
	if x != nil {
		return x.LiveFeedbackCard
	}
	return nil
}

func (x *Room) GetAssistLabelList() []*LabelInfo {
	if x != nil {
		return x.AssistLabelList
	}
	return nil
}

func (x *Room) GetDesireInfo() *DesireInfo {
	if x != nil {
		return x.DesireInfo
	}
	return nil
}

func (x *Room) GetHotRoomInfo() *HotRoomInfo {
	if x != nil {
		return x.HotRoomInfo
	}
	return nil
}

func (x *Room) GetWithAggregateColumn() bool {
	if x != nil {
		return x.WithAggregateColumn
	}
	return false
}

func (x *Room) GetCastScreenData() *CastScreenData {
	if x != nil {
		return x.CastScreenData
	}
	return nil
}

func (x *Room) GetOfficialChannelExtra() *OfficialChannelExtraInfo {
	if x != nil {
		return x.OfficialChannelExtra
	}
	return nil
}

func (x *Room) GetAuthCity() string {
	if x != nil {
		return x.AuthCity
	}
	return ""
}

func (x *Room) GetActivityLiveRecommendConfig() *ActivityLiveRecommendConfig {
	if x != nil {
		return x.ActivityLiveRecommendConfig
	}
	return nil
}

func (x *Room) GetRoomChannel() *RoomChannelData {
	if x != nil {
		return x.RoomChannel
	}
	return nil
}

func (x *Room) GetPackMeta() *PackMetaInfo {
	if x != nil {
		return x.PackMeta
	}
	return nil
}

func (x *Room) GetActivityData() *ActivityData {
	if x != nil {
		return x.ActivityData
	}
	return nil
}

func (x *Room) GetLikeDisplayConfig() *LikeDisplayConfig {
	if x != nil {
		return x.LikeDisplayConfig
	}
	return nil
}

func (x *Room) GetRoomViewStats() *RoomViewStats {
	if x != nil {
		return x.RoomViewStats
	}
	return nil
}

func (x *Room) GetMatch() *MatchRoomData {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Room) GetCommentaryRoomInfo() *CommentaryRoomInfo {
	if x != nil {
		return x.CommentaryRoomInfo
	}
	return nil
}

func (x *Room) GetRedpacketAudienceAuth() int64 {
	if x != nil {
		return x.RedpacketAudienceAuth
	}
	return 0
}

func (x *Room) GetMatchChatConfig() *MatchChatConfig {
	if x != nil {
		return x.MatchChatConfig
	}
	return nil
}

func (x *Room) GetVsMainReplayId() int64 {
	if x != nil {
		return x.VsMainReplayId
	}
	return 0
}

func (x *Room) GetScreenCaptureSharingTitle() string {
	if x != nil {
		return x.ScreenCaptureSharingTitle
	}
	return ""
}

func (x *Room) GetShareResource() *ShareResource {
	if x != nil {
		return x.ShareResource
	}
	return nil
}

func (x *Room) GetSharingMusicIdList() []string {
	if x != nil {
		return x.SharingMusicIdList
	}
	return nil
}

func (x *Room) GetPublicScreenBottomInfo() *PublicScreenBottomInfo {
	if x != nil {
		return x.PublicScreenBottomInfo
	}
	return nil
}

func (x *Room) GetPushStreamHkt() *StreamUrl {
	if x != nil {
		return x.PushStreamHkt
	}
	return nil
}

func (x *Room) GetBasis() *RoomBasisData {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *Room) GetInteract() *RoomInteractData {
	if x != nil {
		return x.Interact
	}
	return nil
}

func (x *Room) GetRevenue() *RoomRevenueData {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *Room) GetReqUser() *RoomReqUserData {
	if x != nil {
		return x.ReqUser
	}
	return nil
}

func (x *Room) GetAnchorData() *RoomAnchorData {
	if x != nil {
		return x.AnchorData
	}
	return nil
}

func (x *Room) GetOthers() *RoomOthersData {
	if x != nil {
		return x.Others
	}
	return nil
}

func (x *Room) GetPicoInfo() *PicoInfo {
	if x != nil {
		return x.PicoInfo
	}
	return nil
}

func (x *Room) GetGameData() *RoomGameData {
	if x != nil {
		return x.GameData
	}
	return nil
}

func (x *Room) GetFeedData() *RoomFeedData {
	if x != nil {
		return x.FeedData
	}
	return nil
}

func (x *Room) GetOpenContentData() *OpenContentData {
	if x != nil {
		return x.OpenContentData
	}
	return nil
}

func (x *Room) GetClientComponentData() *ClientComponent {
	if x != nil {
		return x.ClientComponentData
	}
	return nil
}

func (x *Room) GetPlatformComponentsData() *RoomPlatformComponentsData {
	if x != nil {
		return x.PlatformComponentsData
	}
	return nil
}

func (x *Room) GetIosClientComponentData() *IOSClientComponent {
	if x != nil {
		return x.IosClientComponentData
	}
	return nil
}

func (x *Room) GetOwnerOpenId() string {
	if x != nil {
		return x.OwnerOpenId
	}
	return ""
}

func (x *Room) GetAdminUserOpenIds() []string {
	if x != nil {
		return x.AdminUserOpenIds
	}
	return nil
}

func (x *Room) GetFansGroupAdminUserOpenIds() []string {
	if x != nil {
		return x.FansGroupAdminUserOpenIds
	}
	return nil
}

func (x *Room) GetOfficialChannelOpenId() string {
	if x != nil {
		return x.OfficialChannelOpenId
	}
	return ""
}

func (x *Room) GetCoverGauss() *Image {
	if x != nil {
		return x.CoverGauss
	}
	return nil
}

// EasterEggData 主消息
type EasterEggData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasEasterEgg bool                 `protobuf:"varint,1,opt,name=has_easter_egg,json=hasEasterEgg,proto3" json:"has_easter_egg,omitempty"` // 是否有彩蛋
	Stage        int64                `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`                                     // 当前阶段
	TotalStage   int64                `protobuf:"varint,3,opt,name=total_stage,json=totalStage,proto3" json:"total_stage,omitempty"`         // 总阶段数
	EffectsNum   int64                `protobuf:"varint,4,opt,name=effects_num,json=effectsNum,proto3" json:"effects_num,omitempty"`         // 特效数量
	StartCount   int64                `protobuf:"varint,5,opt,name=start_count,json=startCount,proto3" json:"start_count,omitempty"`         // 开始计数
	EndCount     int64                `protobuf:"varint,6,opt,name=end_count,json=endCount,proto3" json:"end_count,omitempty"`               // 结束计数
	Count        int64                `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                                     // 当前计数
	PanelUrl     string               `protobuf:"bytes,8,opt,name=panel_url,json=panelUrl,proto3" json:"panel_url,omitempty"`                // 彩蛋面板的 URL
	EntranceIcon *EasterEggData_Image `protobuf:"bytes,9,opt,name=entrance_icon,json=entranceIcon,proto3" json:"entrance_icon,omitempty"`    // 彩蛋入口图标
}

func (x *EasterEggData) Reset() {
	*x = EasterEggData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEggData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEggData) ProtoMessage() {}

func (x *EasterEggData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEggData.ProtoReflect.Descriptor instead.
func (*EasterEggData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{70}
}

func (x *EasterEggData) GetHasEasterEgg() bool {
	if x != nil {
		return x.HasEasterEgg
	}
	return false
}

func (x *EasterEggData) GetStage() int64 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *EasterEggData) GetTotalStage() int64 {
	if x != nil {
		return x.TotalStage
	}
	return 0
}

func (x *EasterEggData) GetEffectsNum() int64 {
	if x != nil {
		return x.EffectsNum
	}
	return 0
}

func (x *EasterEggData) GetStartCount() int64 {
	if x != nil {
		return x.StartCount
	}
	return 0
}

func (x *EasterEggData) GetEndCount() int64 {
	if x != nil {
		return x.EndCount
	}
	return 0
}

func (x *EasterEggData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EasterEggData) GetPanelUrl() string {
	if x != nil {
		return x.PanelUrl
	}
	return ""
}

func (x *EasterEggData) GetEntranceIcon() *EasterEggData_Image {
	if x != nil {
		return x.EntranceIcon
	}
	return nil
}

// LinkerDetail 主消息
type LinkerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkerPlayModes             []int64           `protobuf:"varint,1,rep,packed,name=linker_play_modes,json=linkerPlayModes,proto3" json:"linker_play_modes,omitempty"`                                                                             // 联麦播放模式列表
	BigPartyLayoutConfigVersion int32             `protobuf:"varint,2,opt,name=big_party_layout_config_version,json=bigPartyLayoutConfigVersion,proto3" json:"big_party_layout_config_version,omitempty"`                                            // 大型派对布局配置版本
	AcceptAudiencePreApply      bool              `protobuf:"varint,3,opt,name=accept_audience_pre_apply,json=acceptAudiencePreApply,proto3" json:"accept_audience_pre_apply,omitempty"`                                                             // 是否接受观众预申请
	LinkerUiLayout              int64             `protobuf:"varint,4,opt,name=linker_ui_layout,json=linkerUiLayout,proto3" json:"linker_ui_layout,omitempty"`                                                                                       // 联麦 UI 布局
	EnableAudienceLinkmic       int32             `protobuf:"varint,5,opt,name=enable_audience_linkmic,json=enableAudienceLinkmic,proto3" json:"enable_audience_linkmic,omitempty"`                                                                  // 启用观众连麦的状态
	FunctionType                string            `protobuf:"bytes,6,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty"`                                                                                                // 功能类型
	LinkerMapStr                map[string]string `protobuf:"bytes,7,rep,name=linker_map_str,json=linkerMapStr,proto3" json:"linker_map_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`      // 联麦映射字符串
	KtvLyricMode                string            `protobuf:"bytes,8,opt,name=ktv_lyric_mode,json=ktvLyricMode,proto3" json:"ktv_lyric_mode,omitempty"`                                                                                              // KTV 歌词模式
	InitSource                  string            `protobuf:"bytes,9,opt,name=init_source,json=initSource,proto3" json:"init_source,omitempty"`                                                                                                      // 初始化来源
	ForbidApplyFromOther        bool              `protobuf:"varint,10,opt,name=forbid_apply_from_other,json=forbidApplyFromOther,proto3" json:"forbid_apply_from_other,omitempty"`                                                                  // 是否禁止他人申请
	KtvExhibitMode              int32             `protobuf:"varint,11,opt,name=ktv_exhibit_mode,json=ktvExhibitMode,proto3" json:"ktv_exhibit_mode,omitempty"`                                                                                      // KTV 展示模式
	EnlargeGuestTurnOnSource    int64             `protobuf:"varint,12,opt,name=enlarge_guest_turn_on_source,json=enlargeGuestTurnOnSource,proto3" json:"enlarge_guest_turn_on_source,omitempty"`                                                    // 扩展来宾启动源
	PlaymodeDetail              map[string]string `protobuf:"bytes,13,rep,name=playmode_detail,json=playmodeDetail,proto3" json:"playmode_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 播放模式详细信息
	ClientUiInfo                string            `protobuf:"bytes,14,opt,name=client_ui_info,json=clientUiInfo,proto3" json:"client_ui_info,omitempty"`                                                                                             // 客户端 UI 信息
	ManualOpenUi                int64             `protobuf:"varint,15,opt,name=manual_open_ui,json=manualOpenUi,proto3" json:"manual_open_ui,omitempty"`                                                                                            // 手动打开的 UI 标识
	FeatureList                 []int64           `protobuf:"varint,16,rep,packed,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`                                                                                          // 功能列表
}

func (x *LinkerDetail) Reset() {
	*x = LinkerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerDetail) ProtoMessage() {}

func (x *LinkerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerDetail.ProtoReflect.Descriptor instead.
func (*LinkerDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{71}
}

func (x *LinkerDetail) GetLinkerPlayModes() []int64 {
	if x != nil {
		return x.LinkerPlayModes
	}
	return nil
}

func (x *LinkerDetail) GetBigPartyLayoutConfigVersion() int32 {
	if x != nil {
		return x.BigPartyLayoutConfigVersion
	}
	return 0
}

func (x *LinkerDetail) GetAcceptAudiencePreApply() bool {
	if x != nil {
		return x.AcceptAudiencePreApply
	}
	return false
}

func (x *LinkerDetail) GetLinkerUiLayout() int64 {
	if x != nil {
		return x.LinkerUiLayout
	}
	return 0
}

func (x *LinkerDetail) GetEnableAudienceLinkmic() int32 {
	if x != nil {
		return x.EnableAudienceLinkmic
	}
	return 0
}

func (x *LinkerDetail) GetFunctionType() string {
	if x != nil {
		return x.FunctionType
	}
	return ""
}

func (x *LinkerDetail) GetLinkerMapStr() map[string]string {
	if x != nil {
		return x.LinkerMapStr
	}
	return nil
}

func (x *LinkerDetail) GetKtvLyricMode() string {
	if x != nil {
		return x.KtvLyricMode
	}
	return ""
}

func (x *LinkerDetail) GetInitSource() string {
	if x != nil {
		return x.InitSource
	}
	return ""
}

func (x *LinkerDetail) GetForbidApplyFromOther() bool {
	if x != nil {
		return x.ForbidApplyFromOther
	}
	return false
}

func (x *LinkerDetail) GetKtvExhibitMode() int32 {
	if x != nil {
		return x.KtvExhibitMode
	}
	return 0
}

func (x *LinkerDetail) GetEnlargeGuestTurnOnSource() int64 {
	if x != nil {
		return x.EnlargeGuestTurnOnSource
	}
	return 0
}

func (x *LinkerDetail) GetPlaymodeDetail() map[string]string {
	if x != nil {
		return x.PlaymodeDetail
	}
	return nil
}

func (x *LinkerDetail) GetClientUiInfo() string {
	if x != nil {
		return x.ClientUiInfo
	}
	return ""
}

func (x *LinkerDetail) GetManualOpenUi() int64 {
	if x != nil {
		return x.ManualOpenUi
	}
	return 0
}

func (x *LinkerDetail) GetFeatureList() []int64 {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

// FilterWord 主消息
type FilterWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // 过滤词的唯一标识符
	IsSelected bool   `protobuf:"varint,2,opt,name=is_selected,json=isSelected,proto3" json:"is_selected,omitempty"` // 是否被选中
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                // 过滤词的名称
}

func (x *FilterWord) Reset() {
	*x = FilterWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterWord) ProtoMessage() {}

func (x *FilterWord) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterWord.ProtoReflect.Descriptor instead.
func (*FilterWord) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{72}
}

func (x *FilterWord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilterWord) GetIsSelected() bool {
	if x != nil {
		return x.IsSelected
	}
	return false
}

func (x *FilterWord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// VerticalTypeInfo 主消息
type VerticalTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // 类型名称
	TabType    int64                   `protobuf:"varint,2,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"`         // 标签类型
	TagId      int64                   `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`               // 标签 ID
	IsSubTag   bool                    `protobuf:"varint,4,opt,name=is_sub_tag,json=isSubTag,proto3" json:"is_sub_tag,omitempty"`    // 是否为子标签
	Icon       *VerticalTypeInfo_Image `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                               // 图标
	ValidTime  int64                   `protobuf:"varint,6,opt,name=valid_time,json=validTime,proto3" json:"valid_time,omitempty"`   // 有效时间
	Priority   int64                   `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`                      // 优先级
	Extra      string                  `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`                             // 额外信息
	EventExtra string                  `protobuf:"bytes,9,opt,name=event_extra,json=eventExtra,proto3" json:"event_extra,omitempty"` // 事件额外信息
}

func (x *VerticalTypeInfo) Reset() {
	*x = VerticalTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalTypeInfo) ProtoMessage() {}

func (x *VerticalTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalTypeInfo.ProtoReflect.Descriptor instead.
func (*VerticalTypeInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{73}
}

func (x *VerticalTypeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VerticalTypeInfo) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *VerticalTypeInfo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *VerticalTypeInfo) GetIsSubTag() bool {
	if x != nil {
		return x.IsSubTag
	}
	return false
}

func (x *VerticalTypeInfo) GetIcon() *VerticalTypeInfo_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *VerticalTypeInfo) GetValidTime() int64 {
	if x != nil {
		return x.ValidTime
	}
	return 0
}

func (x *VerticalTypeInfo) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *VerticalTypeInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *VerticalTypeInfo) GetEventExtra() string {
	if x != nil {
		return x.EventExtra
	}
	return ""
}

// RoomIMInfo 主消息
type RoomIMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WelcomeMessages []string `protobuf:"bytes,1,rep,name=welcome_messages,json=welcomeMessages,proto3" json:"welcome_messages,omitempty"`   // 欢迎消息列表
	RoomTag         string   `protobuf:"bytes,2,opt,name=room_tag,json=roomTag,proto3" json:"room_tag,omitempty"`                           // 房间标签
	HideGiftMessage string   `protobuf:"bytes,3,opt,name=hide_gift_message,json=hideGiftMessage,proto3" json:"hide_gift_message,omitempty"` // 隐藏礼物消息标记
}

func (x *RoomIMInfo) Reset() {
	*x = RoomIMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomIMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomIMInfo) ProtoMessage() {}

func (x *RoomIMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomIMInfo.ProtoReflect.Descriptor instead.
func (*RoomIMInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{74}
}

func (x *RoomIMInfo) GetWelcomeMessages() []string {
	if x != nil {
		return x.WelcomeMessages
	}
	return nil
}

func (x *RoomIMInfo) GetRoomTag() string {
	if x != nil {
		return x.RoomTag
	}
	return ""
}

func (x *RoomIMInfo) GetHideGiftMessage() string {
	if x != nil {
		return x.HideGiftMessage
	}
	return ""
}

// AnnouncementInfo 主消息
type AnnouncementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledTimeText string  `protobuf:"bytes,1,opt,name=scheduled_time_text,json=scheduledTimeText,proto3" json:"scheduled_time_text,omitempty"`       // 计划时间文本
	Content           string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                                      // 公告内容
	Subscribed        bool    `protobuf:"varint,3,opt,name=subscribed,proto3" json:"subscribed,omitempty"`                                               // 是否已订阅
	AppointmentId     int64   `protobuf:"varint,4,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`                    // 预约 ID
	ScheduledTime     int32   `protobuf:"varint,5,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`                    // 计划时间（可能是一天中的时间，以秒为单位）
	ScheduledDate     int32   `protobuf:"varint,6,opt,name=scheduled_date,json=scheduledDate,proto3" json:"scheduled_date,omitempty"`                    // 计划日期（可能是某种日期格式，如 YYYYMMDD）
	ScheduledWeekdays []int32 `protobuf:"varint,7,rep,packed,name=scheduled_weekdays,json=scheduledWeekdays,proto3" json:"scheduled_weekdays,omitempty"` // 计划的星期几（0-6，表示周日到周六）
}

func (x *AnnouncementInfo) Reset() {
	*x = AnnouncementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncementInfo) ProtoMessage() {}

func (x *AnnouncementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncementInfo.ProtoReflect.Descriptor instead.
func (*AnnouncementInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{75}
}

func (x *AnnouncementInfo) GetScheduledTimeText() string {
	if x != nil {
		return x.ScheduledTimeText
	}
	return ""
}

func (x *AnnouncementInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnnouncementInfo) GetSubscribed() bool {
	if x != nil {
		return x.Subscribed
	}
	return false
}

func (x *AnnouncementInfo) GetAppointmentId() int64 {
	if x != nil {
		return x.AppointmentId
	}
	return 0
}

func (x *AnnouncementInfo) GetScheduledTime() int32 {
	if x != nil {
		return x.ScheduledTime
	}
	return 0
}

func (x *AnnouncementInfo) GetScheduledDate() int32 {
	if x != nil {
		return x.ScheduledDate
	}
	return 0
}

func (x *AnnouncementInfo) GetScheduledWeekdays() []int32 {
	if x != nil {
		return x.ScheduledWeekdays
	}
	return nil
}

// ShortTouchAuth 主消息
type ShortTouchAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommerceLottery int32 `protobuf:"varint,1,opt,name=commerce_lottery,json=commerceLottery,proto3" json:"commerce_lottery,omitempty"` // 商业抽奖授权状态
}

func (x *ShortTouchAuth) Reset() {
	*x = ShortTouchAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortTouchAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortTouchAuth) ProtoMessage() {}

func (x *ShortTouchAuth) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortTouchAuth.ProtoReflect.Descriptor instead.
func (*ShortTouchAuth) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{76}
}

func (x *ShortTouchAuth) GetCommerceLottery() int32 {
	if x != nil {
		return x.CommerceLottery
	}
	return 0
}

// EpisodeMod 主消息
type EpisodeMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeStage      int32 `protobuf:"varint,1,opt,name=episode_stage,json=episodeStage,proto3" json:"episode_stage,omitempty"`                  // 剧集阶段
	EpisodeType       int32 `protobuf:"varint,2,opt,name=episode_type,json=episodeType,proto3" json:"episode_type,omitempty"`                     // 剧集类型
	EpisodeSubType    int32 `protobuf:"varint,3,opt,name=episode_sub_type,json=episodeSubType,proto3" json:"episode_sub_type,omitempty"`          // 剧集子类型
	EpisodeRecordType int32 `protobuf:"varint,4,opt,name=episode_record_type,json=episodeRecordType,proto3" json:"episode_record_type,omitempty"` // 剧集记录类型
}

func (x *EpisodeMod) Reset() {
	*x = EpisodeMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeMod) ProtoMessage() {}

func (x *EpisodeMod) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeMod.ProtoReflect.Descriptor instead.
func (*EpisodeMod) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{77}
}

func (x *EpisodeMod) GetEpisodeStage() int32 {
	if x != nil {
		return x.EpisodeStage
	}
	return 0
}

func (x *EpisodeMod) GetEpisodeType() int32 {
	if x != nil {
		return x.EpisodeType
	}
	return 0
}

func (x *EpisodeMod) GetEpisodeSubType() int32 {
	if x != nil {
		return x.EpisodeSubType
	}
	return 0
}

func (x *EpisodeMod) GetEpisodeRecordType() int32 {
	if x != nil {
		return x.EpisodeRecordType
	}
	return 0
}

// WatchInfo 主消息
type WatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc                 string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`                                                                  // 描述信息
	Count                string `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`                                                                // 观看人数（字符串格式）
	CountWithBackup      string `protobuf:"bytes,3,opt,name=count_with_backup,json=countWithBackup,proto3" json:"count_with_backup,omitempty"`                   // 带备份的观看人数（字符串格式）
	RealCount            int32  `protobuf:"varint,4,opt,name=real_count,json=realCount,proto3" json:"real_count,omitempty"`                                      // 实际观看人数
	RealCountInt64       int64  `protobuf:"varint,5,opt,name=real_count_int64,json=realCountInt64,proto3" json:"real_count_int64,omitempty"`                     // 实际观看人数（64位整数）
	LiveCountDisplayType int32  `protobuf:"varint,6,opt,name=live_count_display_type,json=liveCountDisplayType,proto3" json:"live_count_display_type,omitempty"` // 观看人数显示类型
	DisplayTypeStartTime int64  `protobuf:"varint,7,opt,name=display_type_start_time,json=displayTypeStartTime,proto3" json:"display_type_start_time,omitempty"` // 显示类型的开始时间
	FormatCount          string `protobuf:"bytes,8,opt,name=format_count,json=formatCount,proto3" json:"format_count,omitempty"`                                 // 格式化后的观看人数
}

func (x *WatchInfo) Reset() {
	*x = WatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInfo) ProtoMessage() {}

func (x *WatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInfo.ProtoReflect.Descriptor instead.
func (*WatchInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{78}
}

func (x *WatchInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WatchInfo) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *WatchInfo) GetCountWithBackup() string {
	if x != nil {
		return x.CountWithBackup
	}
	return ""
}

func (x *WatchInfo) GetRealCount() int32 {
	if x != nil {
		return x.RealCount
	}
	return 0
}

func (x *WatchInfo) GetRealCountInt64() int64 {
	if x != nil {
		return x.RealCountInt64
	}
	return 0
}

func (x *WatchInfo) GetLiveCountDisplayType() int32 {
	if x != nil {
		return x.LiveCountDisplayType
	}
	return 0
}

func (x *WatchInfo) GetDisplayTypeStartTime() int64 {
	if x != nil {
		return x.DisplayTypeStartTime
	}
	return 0
}

func (x *WatchInfo) GetFormatCount() string {
	if x != nil {
		return x.FormatCount
	}
	return ""
}

// ToolbarItemConfig 主消息
type ToolbarItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolbarType       int32                      `protobuf:"varint,1,opt,name=toolbar_type,json=toolbarType,proto3" json:"toolbar_type,omitempty"`                    // 工具栏类型
	Icon              *ToolbarItemConfig_Image   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                                      // 图标
	JumpSchema        string                     `protobuf:"bytes,3,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`                        // 跳转协议
	DisplayType       int32                      `protobuf:"varint,4,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`                    // 显示类型
	DynamicIcon       *ToolbarItemConfig_Image   `protobuf:"bytes,5,opt,name=dynamic_icon,json=dynamicIcon,proto3" json:"dynamic_icon,omitempty"`                     // 动态图标
	IconVertical      *ToolbarItemConfig_Image   `protobuf:"bytes,6,opt,name=icon_vertical,json=iconVertical,proto3" json:"icon_vertical,omitempty"`                  // 垂直图标
	DynamicBottomIcon *ToolbarItemConfig_Image   `protobuf:"bytes,7,opt,name=dynamic_bottom_icon,json=dynamicBottomIcon,proto3" json:"dynamic_bottom_icon,omitempty"` // 动态底部图标
	BottomIcon        *ToolbarItemConfig_Image   `protobuf:"bytes,8,opt,name=bottom_icon,json=bottomIcon,proto3" json:"bottom_icon,omitempty"`                        // 底部图标
	ToastList         []*ToolbarItemConfig_Toast `protobuf:"bytes,9,rep,name=toast_list,json=toastList,proto3" json:"toast_list,omitempty"`                           // 提示信息列表
	Extra             string                     `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                                                   // 额外信息
}

func (x *ToolbarItemConfig) Reset() {
	*x = ToolbarItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarItemConfig) ProtoMessage() {}

func (x *ToolbarItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarItemConfig.ProtoReflect.Descriptor instead.
func (*ToolbarItemConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{79}
}

func (x *ToolbarItemConfig) GetToolbarType() int32 {
	if x != nil {
		return x.ToolbarType
	}
	return 0
}

func (x *ToolbarItemConfig) GetIcon() *ToolbarItemConfig_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *ToolbarItemConfig) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *ToolbarItemConfig) GetDisplayType() int32 {
	if x != nil {
		return x.DisplayType
	}
	return 0
}

func (x *ToolbarItemConfig) GetDynamicIcon() *ToolbarItemConfig_Image {
	if x != nil {
		return x.DynamicIcon
	}
	return nil
}

func (x *ToolbarItemConfig) GetIconVertical() *ToolbarItemConfig_Image {
	if x != nil {
		return x.IconVertical
	}
	return nil
}

func (x *ToolbarItemConfig) GetDynamicBottomIcon() *ToolbarItemConfig_Image {
	if x != nil {
		return x.DynamicBottomIcon
	}
	return nil
}

func (x *ToolbarItemConfig) GetBottomIcon() *ToolbarItemConfig_Image {
	if x != nil {
		return x.BottomIcon
	}
	return nil
}

func (x *ToolbarItemConfig) GetToastList() []*ToolbarItemConfig_Toast {
	if x != nil {
		return x.ToastList
	}
	return nil
}

func (x *ToolbarItemConfig) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// EpisodePremierePlay 主消息
type EpisodePremierePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlights   []*EpisodePremierePlay_VsEpisodeHighLight `protobuf:"bytes,1,rep,name=highlights,proto3" json:"highlights,omitempty"`                          // 精彩片段列表
	PlayType     int32                                     `protobuf:"varint,2,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`             // 播放类型
	StartTime    int64                                     `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`          // 开始时间
	PlayText     string                                    `protobuf:"bytes,4,opt,name=play_text,json=playText,proto3" json:"play_text,omitempty"`              // 播放文本
	TextDuration int64                                     `protobuf:"varint,5,opt,name=text_duration,json=textDuration,proto3" json:"text_duration,omitempty"` // 文本持续时间
}

func (x *EpisodePremierePlay) Reset() {
	*x = EpisodePremierePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePremierePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePremierePlay) ProtoMessage() {}

func (x *EpisodePremierePlay) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePremierePlay.ProtoReflect.Descriptor instead.
func (*EpisodePremierePlay) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{80}
}

func (x *EpisodePremierePlay) GetHighlights() []*EpisodePremierePlay_VsEpisodeHighLight {
	if x != nil {
		return x.Highlights
	}
	return nil
}

func (x *EpisodePremierePlay) GetPlayType() int32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *EpisodePremierePlay) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EpisodePremierePlay) GetPlayText() string {
	if x != nil {
		return x.PlayText
	}
	return ""
}

func (x *EpisodePremierePlay) GetTextDuration() int64 {
	if x != nil {
		return x.TextDuration
	}
	return 0
}

// EpisodePreviewImage 主消息
type EpisodePreviewImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviewUriUp    *EpisodePreviewImage_Image `protobuf:"bytes,1,opt,name=preview_uri_up,json=previewUriUp,proto3" json:"preview_uri_up,omitempty"`          // 上半部分预览图片
	PreviewUriDown  *EpisodePreviewImage_Image `protobuf:"bytes,2,opt,name=preview_uri_down,json=previewUriDown,proto3" json:"preview_uri_down,omitempty"`    // 下半部分预览图片
	PreviewType     int32                      `protobuf:"varint,3,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`              // 预览类型
	PreviewWordUp   string                     `protobuf:"bytes,4,opt,name=preview_word_up,json=previewWordUp,proto3" json:"preview_word_up,omitempty"`       // 上部文字描述
	PreviewWordDown string                     `protobuf:"bytes,5,opt,name=preview_word_down,json=previewWordDown,proto3" json:"preview_word_down,omitempty"` // 下部文字描述
}

func (x *EpisodePreviewImage) Reset() {
	*x = EpisodePreviewImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePreviewImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePreviewImage) ProtoMessage() {}

func (x *EpisodePreviewImage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePreviewImage.ProtoReflect.Descriptor instead.
func (*EpisodePreviewImage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{81}
}

func (x *EpisodePreviewImage) GetPreviewUriUp() *EpisodePreviewImage_Image {
	if x != nil {
		return x.PreviewUriUp
	}
	return nil
}

func (x *EpisodePreviewImage) GetPreviewUriDown() *EpisodePreviewImage_Image {
	if x != nil {
		return x.PreviewUriDown
	}
	return nil
}

func (x *EpisodePreviewImage) GetPreviewType() int32 {
	if x != nil {
		return x.PreviewType
	}
	return 0
}

func (x *EpisodePreviewImage) GetPreviewWordUp() string {
	if x != nil {
		return x.PreviewWordUp
	}
	return ""
}

func (x *EpisodePreviewImage) GetPreviewWordDown() string {
	if x != nil {
		return x.PreviewWordDown
	}
	return ""
}

// VSGiftPannel 主消息
type VSGiftPannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundColors []string            `protobuf:"bytes,1,rep,name=background_colors,json=backgroundColors,proto3" json:"background_colors,omitempty"` // 背景颜色列表
	Background       *VSGiftPannel_Image `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`                                     // 背景图片
	Selected         *VSGiftPannel_Image `protobuf:"bytes,3,opt,name=selected,proto3" json:"selected,omitempty"`                                         // 选中状态图片
	TopTitle         *VSGiftPannel_Image `protobuf:"bytes,4,opt,name=top_title,json=topTitle,proto3" json:"top_title,omitempty"`                         // 顶部标题图片
	BackgroundBottom *VSGiftPannel_Image `protobuf:"bytes,5,opt,name=background_bottom,json=backgroundBottom,proto3" json:"background_bottom,omitempty"` // 底部背景图片
	BackgroundTop    *VSGiftPannel_Image `protobuf:"bytes,6,opt,name=background_top,json=backgroundTop,proto3" json:"background_top,omitempty"`          // 顶部背景图片
}

func (x *VSGiftPannel) Reset() {
	*x = VSGiftPannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSGiftPannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSGiftPannel) ProtoMessage() {}

func (x *VSGiftPannel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSGiftPannel.ProtoReflect.Descriptor instead.
func (*VSGiftPannel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{82}
}

func (x *VSGiftPannel) GetBackgroundColors() []string {
	if x != nil {
		return x.BackgroundColors
	}
	return nil
}

func (x *VSGiftPannel) GetBackground() *VSGiftPannel_Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *VSGiftPannel) GetSelected() *VSGiftPannel_Image {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *VSGiftPannel) GetTopTitle() *VSGiftPannel_Image {
	if x != nil {
		return x.TopTitle
	}
	return nil
}

func (x *VSGiftPannel) GetBackgroundBottom() *VSGiftPannel_Image {
	if x != nil {
		return x.BackgroundBottom
	}
	return nil
}

func (x *VSGiftPannel) GetBackgroundTop() *VSGiftPannel_Image {
	if x != nil {
		return x.BackgroundTop
	}
	return nil
}

// VSPannelIcon 主消息
type VSPannelIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpLandscapeIcon             *VSPannelIcon_Image `protobuf:"bytes,1,opt,name=sp_landscape_icon,json=spLandscapeIcon,proto3" json:"sp_landscape_icon,omitempty"`                                        // 横屏专用图标
	SpVerticalIcon              *VSPannelIcon_Image `protobuf:"bytes,2,opt,name=sp_vertical_icon,json=spVerticalIcon,proto3" json:"sp_vertical_icon,omitempty"`                                           // 竖屏专用图标
	LandscapeVerticalSwitchIcon *VSPannelIcon_Image `protobuf:"bytes,3,opt,name=landscape_vertical_switch_icon,json=landscapeVerticalSwitchIcon,proto3" json:"landscape_vertical_switch_icon,omitempty"`  // 横竖屏切换图标
	LockScreenIcon              *VSPannelIcon_Image `protobuf:"bytes,4,opt,name=lock_screen_icon,json=lockScreenIcon,proto3" json:"lock_screen_icon,omitempty"`                                           // 锁屏图标
	LandscapeMoreIcon           *VSPannelIcon_Image `protobuf:"bytes,9,opt,name=landscape_more_icon,json=landscapeMoreIcon,proto3" json:"landscape_more_icon,omitempty"`                                  // 横屏更多操作图标
	VerticalMoreIcon            *VSPannelIcon_Image `protobuf:"bytes,10,opt,name=vertical_more_icon,json=verticalMoreIcon,proto3" json:"vertical_more_icon,omitempty"`                                    // 竖屏更多操作图标
	LandscapeCommentIcon        *VSPannelIcon_Image `protobuf:"bytes,11,opt,name=landscape_comment_icon,json=landscapeCommentIcon,proto3" json:"landscape_comment_icon,omitempty"`                        // 横屏评论图标
	VerticalCommentIcon         *VSPannelIcon_Image `protobuf:"bytes,12,opt,name=vertical_comment_icon,json=verticalCommentIcon,proto3" json:"vertical_comment_icon,omitempty"`                           // 竖屏评论图标
	VerticalLandscapeSwitchIcon *VSPannelIcon_Image `protobuf:"bytes,13,opt,name=vertical_landscape_switch_icon,json=verticalLandscapeSwitchIcon,proto3" json:"vertical_landscape_switch_icon,omitempty"` // 竖屏切横屏图标
	VerticalLockScreenIcon      *VSPannelIcon_Image `protobuf:"bytes,14,opt,name=vertical_lock_screen_icon,json=verticalLockScreenIcon,proto3" json:"vertical_lock_screen_icon,omitempty"`                // 竖屏锁屏图标
}

func (x *VSPannelIcon) Reset() {
	*x = VSPannelIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSPannelIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSPannelIcon) ProtoMessage() {}

func (x *VSPannelIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSPannelIcon.ProtoReflect.Descriptor instead.
func (*VSPannelIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{83}
}

func (x *VSPannelIcon) GetSpLandscapeIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.SpLandscapeIcon
	}
	return nil
}

func (x *VSPannelIcon) GetSpVerticalIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.SpVerticalIcon
	}
	return nil
}

func (x *VSPannelIcon) GetLandscapeVerticalSwitchIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.LandscapeVerticalSwitchIcon
	}
	return nil
}

func (x *VSPannelIcon) GetLockScreenIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.LockScreenIcon
	}
	return nil
}

func (x *VSPannelIcon) GetLandscapeMoreIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.LandscapeMoreIcon
	}
	return nil
}

func (x *VSPannelIcon) GetVerticalMoreIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.VerticalMoreIcon
	}
	return nil
}

func (x *VSPannelIcon) GetLandscapeCommentIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.LandscapeCommentIcon
	}
	return nil
}

func (x *VSPannelIcon) GetVerticalCommentIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.VerticalCommentIcon
	}
	return nil
}

func (x *VSPannelIcon) GetVerticalLandscapeSwitchIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.VerticalLandscapeSwitchIcon
	}
	return nil
}

func (x *VSPannelIcon) GetVerticalLockScreenIcon() *VSPannelIcon_Image {
	if x != nil {
		return x.VerticalLockScreenIcon
	}
	return nil
}

// EpisodePreviewBottom 主消息
type EpisodePreviewBottom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchPeriodStr  string `protobuf:"bytes,1,opt,name=watch_period_str,json=watchPeriodStr,proto3" json:"watch_period_str,omitempty"`    // 观看周期字符串
	LatestPeriodStr string `protobuf:"bytes,2,opt,name=latest_period_str,json=latestPeriodStr,proto3" json:"latest_period_str,omitempty"` // 最新周期字符串
}

func (x *EpisodePreviewBottom) Reset() {
	*x = EpisodePreviewBottom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePreviewBottom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePreviewBottom) ProtoMessage() {}

func (x *EpisodePreviewBottom) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePreviewBottom.ProtoReflect.Descriptor instead.
func (*EpisodePreviewBottom) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{84}
}

func (x *EpisodePreviewBottom) GetWatchPeriodStr() string {
	if x != nil {
		return x.WatchPeriodStr
	}
	return ""
}

func (x *EpisodePreviewBottom) GetLatestPeriodStr() string {
	if x != nil {
		return x.LatestPeriodStr
	}
	return ""
}

// VSCameraInfo 主消息
type VSCameraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId        int64                         `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`                        // 摄像头 ID
	CameraIdStr     string                        `protobuf:"bytes,2,opt,name=camera_id_str,json=cameraIdStr,proto3" json:"camera_id_str,omitempty"`              // 摄像头 ID（字符串形式）
	Title           string                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                               // 摄像头标题
	Cover           *VSCameraInfo_Image           `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`                                               // 横版封面图片
	CoverVertical   *VSCameraInfo_Image           `protobuf:"bytes,5,opt,name=cover_vertical,json=coverVertical,proto3" json:"cover_vertical,omitempty"`          // 竖版封面图片
	StreamInfo      *VSCameraInfo_StreamUrl       `protobuf:"bytes,6,opt,name=stream_info,json=streamInfo,proto3" json:"stream_info,omitempty"`                   // 流信息
	StartTime       int64                         `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                     // 开始时间
	EndTime         int64                         `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                           // 结束时间
	Style           int32                         `protobuf:"varint,9,opt,name=style,proto3" json:"style,omitempty"`                                              // 样式类型
	CameraRoomAuth  *VSCameraInfo_RoomAuthStatus  `protobuf:"bytes,10,opt,name=camera_room_auth,json=cameraRoomAuth,proto3" json:"camera_room_auth,omitempty"`    // 房间权限认证状态
	VrType          int32                         `protobuf:"varint,11,opt,name=vr_type,json=vrType,proto3" json:"vr_type,omitempty"`                             // VR 类型
	CameraPaidInfo  *VSCameraInfo_CameraPaidInfo  `protobuf:"bytes,12,opt,name=camera_paid_info,json=cameraPaidInfo,proto3" json:"camera_paid_info,omitempty"`    // 付费信息
	CameraMatchInfo *VSCameraInfo_CameraMatchInfo `protobuf:"bytes,13,opt,name=camera_match_info,json=cameraMatchInfo,proto3" json:"camera_match_info,omitempty"` // 比赛相关信息
	GroupId         int64                         `protobuf:"varint,14,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                          // 摄像头组 ID
	CameraType      int32                         `protobuf:"varint,15,opt,name=camera_type,json=cameraType,proto3" json:"camera_type,omitempty"`                 // 摄像头类型
	Label           *VSCameraInfo_Image           `protobuf:"bytes,16,opt,name=label,proto3" json:"label,omitempty"`                                              // 标签图片
	Pcu             int64                         `protobuf:"varint,17,opt,name=pcu,proto3" json:"pcu,omitempty"`                                                 // 最大并发用户数
	IsSubscribed    bool                          `protobuf:"varint,18,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`           // 是否已订阅
	GroupIdStr      string                        `protobuf:"bytes,19,opt,name=group_id_str,json=groupIdStr,proto3" json:"group_id_str,omitempty"`                // 摄像头组 ID（字符串形式）
}

func (x *VSCameraInfo) Reset() {
	*x = VSCameraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo) ProtoMessage() {}

func (x *VSCameraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo.ProtoReflect.Descriptor instead.
func (*VSCameraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85}
}

func (x *VSCameraInfo) GetCameraId() int64 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *VSCameraInfo) GetCameraIdStr() string {
	if x != nil {
		return x.CameraIdStr
	}
	return ""
}

func (x *VSCameraInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VSCameraInfo) GetCover() *VSCameraInfo_Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *VSCameraInfo) GetCoverVertical() *VSCameraInfo_Image {
	if x != nil {
		return x.CoverVertical
	}
	return nil
}

func (x *VSCameraInfo) GetStreamInfo() *VSCameraInfo_StreamUrl {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *VSCameraInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VSCameraInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VSCameraInfo) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *VSCameraInfo) GetCameraRoomAuth() *VSCameraInfo_RoomAuthStatus {
	if x != nil {
		return x.CameraRoomAuth
	}
	return nil
}

func (x *VSCameraInfo) GetVrType() int32 {
	if x != nil {
		return x.VrType
	}
	return 0
}

func (x *VSCameraInfo) GetCameraPaidInfo() *VSCameraInfo_CameraPaidInfo {
	if x != nil {
		return x.CameraPaidInfo
	}
	return nil
}

func (x *VSCameraInfo) GetCameraMatchInfo() *VSCameraInfo_CameraMatchInfo {
	if x != nil {
		return x.CameraMatchInfo
	}
	return nil
}

func (x *VSCameraInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VSCameraInfo) GetCameraType() int32 {
	if x != nil {
		return x.CameraType
	}
	return 0
}

func (x *VSCameraInfo) GetLabel() *VSCameraInfo_Image {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *VSCameraInfo) GetPcu() int64 {
	if x != nil {
		return x.Pcu
	}
	return 0
}

func (x *VSCameraInfo) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *VSCameraInfo) GetGroupIdStr() string {
	if x != nil {
		return x.GroupIdStr
	}
	return ""
}

// VSWatermark 主消息
type VSWatermark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      int64                          `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`                               // 水印位置标识
	LandscapeDis  int64                          `protobuf:"varint,2,opt,name=landscape_dis,json=landscapeDis,proto3" json:"landscape_dis,omitempty"`   // 横屏距离（如距离边界的偏移量）
	VerticalDis   int64                          `protobuf:"varint,3,opt,name=vertical_dis,json=verticalDis,proto3" json:"vertical_dis,omitempty"`      // 竖屏距离
	WatermarkIcon []*VSWatermark_VSWatermarkIcon `protobuf:"bytes,4,rep,name=watermark_icon,json=watermarkIcon,proto3" json:"watermark_icon,omitempty"` // 水印图标列表
}

func (x *VSWatermark) Reset() {
	*x = VSWatermark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSWatermark) ProtoMessage() {}

func (x *VSWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSWatermark.ProtoReflect.Descriptor instead.
func (*VSWatermark) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{86}
}

func (x *VSWatermark) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *VSWatermark) GetLandscapeDis() int64 {
	if x != nil {
		return x.LandscapeDis
	}
	return 0
}

func (x *VSWatermark) GetVerticalDis() int64 {
	if x != nil {
		return x.VerticalDis
	}
	return 0
}

func (x *VSWatermark) GetWatermarkIcon() []*VSWatermark_VSWatermarkIcon {
	if x != nil {
		return x.WatermarkIcon
	}
	return nil
}

// VSItemComment 主消息
type VSItemComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCommentIconDark  *VSItemComment_Image `protobuf:"bytes,1,opt,name=item_comment_icon_dark,json=itemCommentIconDark,proto3" json:"item_comment_icon_dark,omitempty"`    // 暗色模式下的评论图标
	ItemCommentIconLight *VSItemComment_Image `protobuf:"bytes,2,opt,name=item_comment_icon_light,json=itemCommentIconLight,proto3" json:"item_comment_icon_light,omitempty"` // 浅色模式下的评论图标
}

func (x *VSItemComment) Reset() {
	*x = VSItemComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSItemComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSItemComment) ProtoMessage() {}

func (x *VSItemComment) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSItemComment.ProtoReflect.Descriptor instead.
func (*VSItemComment) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{87}
}

func (x *VSItemComment) GetItemCommentIconDark() *VSItemComment_Image {
	if x != nil {
		return x.ItemCommentIconDark
	}
	return nil
}

func (x *VSItemComment) GetItemCommentIconLight() *VSItemComment_Image {
	if x != nil {
		return x.ItemCommentIconLight
	}
	return nil
}

// VSBar 主消息
type VSBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemComment *VSBar_VSItemBar `protobuf:"bytes,1,opt,name=item_comment,json=itemComment,proto3" json:"item_comment,omitempty"` // 评论项
	ItemBar     *VSBar_VSItemBar `protobuf:"bytes,2,opt,name=item_bar,json=itemBar,proto3" json:"item_bar,omitempty"`             // 功能栏项
}

func (x *VSBar) Reset() {
	*x = VSBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSBar) ProtoMessage() {}

func (x *VSBar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSBar.ProtoReflect.Descriptor instead.
func (*VSBar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{88}
}

func (x *VSBar) GetItemComment() *VSBar_VSItemBar {
	if x != nil {
		return x.ItemComment
	}
	return nil
}

func (x *VSBar) GetItemBar() *VSBar_VSItemBar {
	if x != nil {
		return x.ItemBar
	}
	return nil
}

// VSLinkInfo 主消息
type VSLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                       // 链接信息的标题
	TabTitle string                   `protobuf:"bytes,2,opt,name=tab_title,json=tabTitle,proto3" json:"tab_title,omitempty"` // 标签页标题
	Rooms    []*VSLinkInfo_VSLinkNode `protobuf:"bytes,3,rep,name=rooms,proto3" json:"rooms,omitempty"`                       // 房间列表
	Pattern  int32                    `protobuf:"varint,4,opt,name=pattern,proto3" json:"pattern,omitempty"`                  // 模式标识
}

func (x *VSLinkInfo) Reset() {
	*x = VSLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSLinkInfo) ProtoMessage() {}

func (x *VSLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSLinkInfo.ProtoReflect.Descriptor instead.
func (*VSLinkInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{89}
}

func (x *VSLinkInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VSLinkInfo) GetTabTitle() string {
	if x != nil {
		return x.TabTitle
	}
	return ""
}

func (x *VSLinkInfo) GetRooms() []*VSLinkInfo_VSLinkNode {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *VSLinkInfo) GetPattern() int32 {
	if x != nil {
		return x.Pattern
	}
	return 0
}

// CommentConfig 主消息
type CommentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentColors []*CommentConfig_CommentColor `protobuf:"bytes,1,rep,name=comment_colors,json=commentColors,proto3" json:"comment_colors,omitempty"`   // 评论颜色配置列表
	CommentRoles  []*CommentConfig_CommentRole  `protobuf:"bytes,2,rep,name=comment_roles,json=commentRoles,proto3" json:"comment_roles,omitempty"`      // 评论角色配置列表
	RoleSuffix    string                        `protobuf:"bytes,3,opt,name=role_suffix,json=roleSuffix,proto3" json:"role_suffix,omitempty"`            // 角色后缀
	RoleTitle     string                        `protobuf:"bytes,4,opt,name=role_title,json=roleTitle,proto3" json:"role_title,omitempty"`               // 角色标题
	UnlockRoleTip string                        `protobuf:"bytes,5,opt,name=unlock_role_tip,json=unlockRoleTip,proto3" json:"unlock_role_tip,omitempty"` // 解锁角色提示
	CommentMedals []*CommentConfig_CommentMedal `protobuf:"bytes,6,rep,name=comment_medals,json=commentMedals,proto3" json:"comment_medals,omitempty"`   // 评论勋章配置列表
	MedalTitle    string                        `protobuf:"bytes,7,opt,name=medal_title,json=medalTitle,proto3" json:"medal_title,omitempty"`            // 勋章标题
}

func (x *CommentConfig) Reset() {
	*x = CommentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig) ProtoMessage() {}

func (x *CommentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig.ProtoReflect.Descriptor instead.
func (*CommentConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{90}
}

func (x *CommentConfig) GetCommentColors() []*CommentConfig_CommentColor {
	if x != nil {
		return x.CommentColors
	}
	return nil
}

func (x *CommentConfig) GetCommentRoles() []*CommentConfig_CommentRole {
	if x != nil {
		return x.CommentRoles
	}
	return nil
}

func (x *CommentConfig) GetRoleSuffix() string {
	if x != nil {
		return x.RoleSuffix
	}
	return ""
}

func (x *CommentConfig) GetRoleTitle() string {
	if x != nil {
		return x.RoleTitle
	}
	return ""
}

func (x *CommentConfig) GetUnlockRoleTip() string {
	if x != nil {
		return x.UnlockRoleTip
	}
	return ""
}

func (x *CommentConfig) GetCommentMedals() []*CommentConfig_CommentMedal {
	if x != nil {
		return x.CommentMedals
	}
	return nil
}

func (x *CommentConfig) GetMedalTitle() string {
	if x != nil {
		return x.MedalTitle
	}
	return ""
}

// MatchRoomInfo 主消息
type MatchRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchTabFrame            *MatchRoomInfo_MatchTabFrame        `protobuf:"bytes,1,opt,name=match_tab_frame,json=matchTabFrame,proto3" json:"match_tab_frame,omitempty"`                                                                                                    // 比赛标签框架
	MatchTitle               *MatchRoomInfo_MatchTitle           `protobuf:"bytes,2,opt,name=match_title,json=matchTitle,proto3" json:"match_title,omitempty"`                                                                                                               // 比赛标题
	MatchData                *MatchRoomInfo_ToutiaoMatchData     `protobuf:"bytes,3,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`                                                                                                                  // 比赛数据
	MatchHostChannel         map[int64]int64                     `protobuf:"bytes,4,rep,name=match_host_channel,json=matchHostChannel,proto3" json:"match_host_channel,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 比赛主持频道映射
	MatchHashTag             string                              `protobuf:"bytes,5,opt,name=match_hash_tag,json=matchHashTag,proto3" json:"match_hash_tag,omitempty"`                                                                                                       // 比赛话题标签
	BackgroundImageUrlList   []*MatchRoomInfo_Image              `protobuf:"bytes,6,rep,name=background_image_url_list,json=backgroundImageUrlList,proto3" json:"background_image_url_list,omitempty"`                                                                       // 背景图片 URL 列表
	ShareIcon                *MatchRoomInfo_Image                `protobuf:"bytes,7,opt,name=share_icon,json=shareIcon,proto3" json:"share_icon,omitempty"`                                                                                                                  // 分享图标
	ImInfo                   *MatchRoomInfo_MatchRoomImInfo      `protobuf:"bytes,8,opt,name=im_info,json=imInfo,proto3" json:"im_info,omitempty"`                                                                                                                           // 即时通讯信息
	MatchShareBackground     *MatchRoomInfo_MatchShareBackground `protobuf:"bytes,9,opt,name=match_share_background,json=matchShareBackground,proto3" json:"match_share_background,omitempty"`                                                                               // 比赛分享背景
	ThemeId                  string                              `protobuf:"bytes,10,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`                                                                                                                       // 主题 ID
	MatchLiveShareBackground *MatchRoomInfo_MatchShareBackground `protobuf:"bytes,11,opt,name=match_live_share_background,json=matchLiveShareBackground,proto3" json:"match_live_share_background,omitempty"`                                                                // 比赛直播分享背景
	MatchId                  int64                               `protobuf:"varint,12,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                                                                                                      // 比赛 ID
}

func (x *MatchRoomInfo) Reset() {
	*x = MatchRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo) ProtoMessage() {}

func (x *MatchRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91}
}

func (x *MatchRoomInfo) GetMatchTabFrame() *MatchRoomInfo_MatchTabFrame {
	if x != nil {
		return x.MatchTabFrame
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchTitle() *MatchRoomInfo_MatchTitle {
	if x != nil {
		return x.MatchTitle
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchData() *MatchRoomInfo_ToutiaoMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchHostChannel() map[int64]int64 {
	if x != nil {
		return x.MatchHostChannel
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchHashTag() string {
	if x != nil {
		return x.MatchHashTag
	}
	return ""
}

func (x *MatchRoomInfo) GetBackgroundImageUrlList() []*MatchRoomInfo_Image {
	if x != nil {
		return x.BackgroundImageUrlList
	}
	return nil
}

func (x *MatchRoomInfo) GetShareIcon() *MatchRoomInfo_Image {
	if x != nil {
		return x.ShareIcon
	}
	return nil
}

func (x *MatchRoomInfo) GetImInfo() *MatchRoomInfo_MatchRoomImInfo {
	if x != nil {
		return x.ImInfo
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchShareBackground() *MatchRoomInfo_MatchShareBackground {
	if x != nil {
		return x.MatchShareBackground
	}
	return nil
}

func (x *MatchRoomInfo) GetThemeId() string {
	if x != nil {
		return x.ThemeId
	}
	return ""
}

func (x *MatchRoomInfo) GetMatchLiveShareBackground() *MatchRoomInfo_MatchShareBackground {
	if x != nil {
		return x.MatchLiveShareBackground
	}
	return nil
}

func (x *MatchRoomInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

// MultiCameraBasicInfo 主消息
type MultiCameraBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon                   *MultiCameraBasicInfo_Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                                                      // 图标
	IconBackgroundColor    string                      `protobuf:"bytes,2,opt,name=icon_background_color,json=iconBackgroundColor,proto3" json:"icon_background_color,omitempty"`           // 图标背景颜色
	PanelBackgroundColor   string                      `protobuf:"bytes,3,opt,name=panel_background_color,json=panelBackgroundColor,proto3" json:"panel_background_color,omitempty"`        // 面板背景颜色
	IconPad                *MultiCameraBasicInfo_Image `protobuf:"bytes,4,opt,name=icon_pad,json=iconPad,proto3" json:"icon_pad,omitempty"`                                                 // 图标填充
	BanXgs                 bool                        `protobuf:"varint,5,opt,name=ban_xgs,json=banXgs,proto3" json:"ban_xgs,omitempty"`                                                   // 是否禁止 XGS
	SupportVsCore          bool                        `protobuf:"varint,6,opt,name=support_vs_core,json=supportVsCore,proto3" json:"support_vs_core,omitempty"`                            // 是否支持 VS 核心
	Name                   string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                      // 名称
	DefaultDisplayDuration int32                       `protobuf:"varint,8,opt,name=default_display_duration,json=defaultDisplayDuration,proto3" json:"default_display_duration,omitempty"` // 默认显示时长
}

func (x *MultiCameraBasicInfo) Reset() {
	*x = MultiCameraBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCameraBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCameraBasicInfo) ProtoMessage() {}

func (x *MultiCameraBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCameraBasicInfo.ProtoReflect.Descriptor instead.
func (*MultiCameraBasicInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{92}
}

func (x *MultiCameraBasicInfo) GetIcon() *MultiCameraBasicInfo_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *MultiCameraBasicInfo) GetIconBackgroundColor() string {
	if x != nil {
		return x.IconBackgroundColor
	}
	return ""
}

func (x *MultiCameraBasicInfo) GetPanelBackgroundColor() string {
	if x != nil {
		return x.PanelBackgroundColor
	}
	return ""
}

func (x *MultiCameraBasicInfo) GetIconPad() *MultiCameraBasicInfo_Image {
	if x != nil {
		return x.IconPad
	}
	return nil
}

func (x *MultiCameraBasicInfo) GetBanXgs() bool {
	if x != nil {
		return x.BanXgs
	}
	return false
}

func (x *MultiCameraBasicInfo) GetSupportVsCore() bool {
	if x != nil {
		return x.SupportVsCore
	}
	return false
}

func (x *MultiCameraBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiCameraBasicInfo) GetDefaultDisplayDuration() int32 {
	if x != nil {
		return x.DefaultDisplayDuration
	}
	return 0
}

// SharePosterInfo 主消息
type SharePosterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *SharePosterInfo_PosterData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // 海报数据
}

func (x *SharePosterInfo) Reset() {
	*x = SharePosterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePosterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePosterInfo) ProtoMessage() {}

func (x *SharePosterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePosterInfo.ProtoReflect.Descriptor instead.
func (*SharePosterInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{93}
}

func (x *SharePosterInfo) GetData() *SharePosterInfo_PosterData {
	if x != nil {
		return x.Data
	}
	return nil
}

// EpisodeExtraInfo 主消息
type EpisodeExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeMod             *EpisodeMod              `protobuf:"bytes,1,opt,name=episode_mod,json=episodeMod,proto3" json:"episode_mod,omitempty"`                                                                                                    // 剧集模块信息
	CurrentPeriod          string                   `protobuf:"bytes,2,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`                                                                                           // 当前期数
	Title                  string                   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                                // 剧集标题
	EpisodeListH5          string                   `protobuf:"bytes,4,opt,name=episode_list_h5,json=episodeListH5,proto3" json:"episode_list_h5,omitempty"`                                                                                         // 剧集列表 H5 链接
	WatchInfo              *WatchInfo               `protobuf:"bytes,5,opt,name=watch_info,json=watchInfo,proto3" json:"watch_info,omitempty"`                                                                                                       // 观看信息
	EpisodeId              int64                    `protobuf:"varint,6,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`                                                                                                      // 剧集 ID
	EpisodeIdStr           string                   `protobuf:"bytes,7,opt,name=episode_id_str,json=episodeIdStr,proto3" json:"episode_id_str,omitempty"`                                                                                            // 剧集 ID 字符串
	ItemId                 string                   `protobuf:"bytes,8,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                                                                                                                // 项目 ID
	SelectionUrl           string                   `protobuf:"bytes,9,opt,name=selection_url,json=selectionUrl,proto3" json:"selection_url,omitempty"`                                                                                              // 选择 URL
	RelationPlaceText      string                   `protobuf:"bytes,10,opt,name=relation_place_text,json=relationPlaceText,proto3" json:"relation_place_text,omitempty"`                                                                            // 关联位置文本
	OperationPlaceTextList []string                 `protobuf:"bytes,11,rep,name=operation_place_text_list,json=operationPlaceTextList,proto3" json:"operation_place_text_list,omitempty"`                                                           // 操作位置文本列表
	ToolbarList            []*ToolbarItemConfig     `protobuf:"bytes,12,rep,name=toolbar_list,json=toolbarList,proto3" json:"toolbar_list,omitempty"`                                                                                                // 工具栏列表
	Collected              bool                     `protobuf:"varint,13,opt,name=collected,proto3" json:"collected,omitempty"`                                                                                                                      // 是否收藏
	SeasonId               int64                    `protobuf:"varint,14,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`                                                                                                        // 季 ID
	FinishUrl              string                   `protobuf:"bytes,15,opt,name=finish_url,json=finishUrl,proto3" json:"finish_url,omitempty"`                                                                                                      // 完成 URL
	ReleaseTime            string                   `protobuf:"bytes,16,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`                                                                                                // 发布时间
	WatchPeriod            int64                    `protobuf:"varint,17,opt,name=watch_period,json=watchPeriod,proto3" json:"watch_period,omitempty"`                                                                                               // 观看期数
	LatestPeriod           int64                    `protobuf:"varint,18,opt,name=latest_period,json=latestPeriod,proto3" json:"latest_period,omitempty"`                                                                                            // 最新期数
	ShowName               string                   `protobuf:"bytes,19,opt,name=show_name,json=showName,proto3" json:"show_name,omitempty"`                                                                                                         // 显示名称
	CurrentPeriodRaw       int32                    `protobuf:"varint,20,opt,name=current_period_raw,json=currentPeriodRaw,proto3" json:"current_period_raw,omitempty"`                                                                              // 当前期数原始值
	VideoCode              int32                    `protobuf:"varint,21,opt,name=video_code,json=videoCode,proto3" json:"video_code,omitempty"`                                                                                                     // 视频代码
	SeasonIdStr            string                   `protobuf:"bytes,22,opt,name=season_id_str,json=seasonIdStr,proto3" json:"season_id_str,omitempty"`                                                                                              // 季 ID 字符串
	WatchPvRaw             string                   `protobuf:"bytes,23,opt,name=watch_pv_raw,json=watchPvRaw,proto3" json:"watch_pv_raw,omitempty"`                                                                                                 // 观看 PV 原始值
	NextSpecialEpisodeId   int64                    `protobuf:"varint,24,opt,name=next_special_episode_id,json=nextSpecialEpisodeId,proto3" json:"next_special_episode_id,omitempty"`                                                                // 下一特别剧集 ID
	Cover                  *Image                   `protobuf:"bytes,25,opt,name=cover,proto3" json:"cover,omitempty"`                                                                                                                               // 封面
	CoverVertical          *Image                   `protobuf:"bytes,26,opt,name=cover_vertical,json=coverVertical,proto3" json:"cover_vertical,omitempty"`                                                                                          // 竖版封面
	Style                  int32                    `protobuf:"varint,27,opt,name=style,proto3" json:"style,omitempty"`                                                                                                                              // 风格
	PlayControl            *EpisodePremierePlay     `protobuf:"bytes,28,opt,name=play_control,json=playControl,proto3" json:"play_control,omitempty"`                                                                                                // 播放控制
	PreviewImage           *EpisodePreviewImage     `protobuf:"bytes,29,opt,name=preview_image,json=previewImage,proto3" json:"preview_image,omitempty"`                                                                                             // 预览图像
	GiftPannel             *VSGiftPannel            `protobuf:"bytes,30,opt,name=gift_pannel,json=giftPannel,proto3" json:"gift_pannel,omitempty"`                                                                                                   // 礼物面板
	PannelIcon             *VSPannelIcon            `protobuf:"bytes,31,opt,name=pannel_icon,json=pannelIcon,proto3" json:"pannel_icon,omitempty"`                                                                                                   // 面板图标
	PannelToolbar          []*ToolbarItemConfig     `protobuf:"bytes,32,rep,name=pannel_toolbar,json=pannelToolbar,proto3" json:"pannel_toolbar,omitempty"`                                                                                          // 面板工具栏
	PreviewBottom          *EpisodePreviewBottom    `protobuf:"bytes,33,opt,name=preview_bottom,json=previewBottom,proto3" json:"preview_bottom,omitempty"`                                                                                          // 预览底部
	DrawSubTitle           string                   `protobuf:"bytes,34,opt,name=draw_sub_title,json=drawSubTitle,proto3" json:"draw_sub_title,omitempty"`                                                                                           // 绘制副标题
	SeasonCoverVertical    *Image                   `protobuf:"bytes,35,opt,name=season_cover_vertical,json=seasonCoverVertical,proto3" json:"season_cover_vertical,omitempty"`                                                                      // 季竖版封面
	CameraInfos            []*VSCameraInfo          `protobuf:"bytes,36,rep,name=camera_infos,json=cameraInfos,proto3" json:"camera_infos,omitempty"`                                                                                                // 摄像机信息
	DefaultCameraId        int64                    `protobuf:"varint,37,opt,name=default_camera_id,json=defaultCameraId,proto3" json:"default_camera_id,omitempty"`                                                                                 // 默认摄像机 ID
	DefaultCameraIdStr     int64                    `protobuf:"varint,38,opt,name=default_camera_id_str,json=defaultCameraIdStr,proto3" json:"default_camera_id_str,omitempty"`                                                                      // 默认摄像机 ID 字符串
	DefaultCameraIdStrV2   string                   `protobuf:"bytes,39,opt,name=default_camera_id_str_v2,json=defaultCameraIdStrV2,proto3" json:"default_camera_id_str_v2,omitempty"`                                                               // 默认摄像机 ID 字符串 V2
	PriorityCamera         *VSCameraInfo            `protobuf:"bytes,40,opt,name=priority_camera,json=priorityCamera,proto3" json:"priority_camera,omitempty"`                                                                                       // 优先摄像机
	MultiSeasonTag         string                   `protobuf:"bytes,41,opt,name=multi_season_tag,json=multiSeasonTag,proto3" json:"multi_season_tag,omitempty"`                                                                                     // 多季标签
	PreviewBackground      *Image                   `protobuf:"bytes,42,opt,name=preview_background,json=previewBackground,proto3" json:"preview_background,omitempty"`                                                                              // 预览背景
	Background             *Image                   `protobuf:"bytes,43,opt,name=background,proto3" json:"background,omitempty"`                                                                                                                     // 背景
	Mod                    *EpisodeMod              `protobuf:"bytes,44,opt,name=mod,proto3" json:"mod,omitempty"`                                                                                                                                   // 模块
	ItemCommentIcon        *Image                   `protobuf:"bytes,45,opt,name=item_comment_icon,json=itemCommentIcon,proto3" json:"item_comment_icon,omitempty"`                                                                                  // 评论图标
	VsWatermark            *VSWatermark             `protobuf:"bytes,46,opt,name=vs_watermark,json=vsWatermark,proto3" json:"vs_watermark,omitempty"`                                                                                                // 水印
	ItemComment            *VSItemComment           `protobuf:"bytes,47,opt,name=item_comment,json=itemComment,proto3" json:"item_comment,omitempty"`                                                                                                // 评论项
	SeasonTypeName         string                   `protobuf:"bytes,48,opt,name=season_type_name,json=seasonTypeName,proto3" json:"season_type_name,omitempty"`                                                                                     // 季类型名称
	VsBar                  *VSBar                   `protobuf:"bytes,49,opt,name=vs_bar,json=vsBar,proto3" json:"vs_bar,omitempty"`                                                                                                                  // VS 条
	SeasonWatchInfo        *WatchInfo               `protobuf:"bytes,50,opt,name=season_watch_info,json=seasonWatchInfo,proto3" json:"season_watch_info,omitempty"`                                                                                  // 季观看信息
	LinkRoomInfo           *VSLinkInfo              `protobuf:"bytes,51,opt,name=link_room_info,json=linkRoomInfo,proto3" json:"link_room_info,omitempty"`                                                                                           // 链接房间信息
	CommentConfig          *CommentConfig           `protobuf:"bytes,52,opt,name=comment_config,json=commentConfig,proto3" json:"comment_config,omitempty"`                                                                                          // 评论配置
	CameraInfosTableTitle  string                   `protobuf:"bytes,53,opt,name=camera_infos_table_title,json=cameraInfosTableTitle,proto3" json:"camera_infos_table_title,omitempty"`                                                              // 摄像机信息表标题
	EpisodeStatus          int32                    `protobuf:"varint,54,opt,name=episode_status,json=episodeStatus,proto3" json:"episode_status,omitempty"`                                                                                         // 剧集状态
	MatchRoomInfo          *MatchRoomInfo           `protobuf:"bytes,55,opt,name=match_room_info,json=matchRoomInfo,proto3" json:"match_room_info,omitempty"`                                                                                        // 比赛房间信息
	MultiCameraBasicInfo   *MultiCameraBasicInfo    `protobuf:"bytes,56,opt,name=multi_camera_basic_info,json=multiCameraBasicInfo,proto3" json:"multi_camera_basic_info,omitempty"`                                                                 // 多摄像机基本信息
	SharePosterInfo        *SharePosterInfo         `protobuf:"bytes,57,opt,name=share_poster_info,json=sharePosterInfo,proto3" json:"share_poster_info,omitempty"`                                                                                  // 分享海报信息
	PremiereToast          *VSPremiereToast         `protobuf:"bytes,58,opt,name=premiere_toast,json=premiereToast,proto3" json:"premiere_toast,omitempty"`                                                                                          // 首映提示
	PreviewBottomText      string                   `protobuf:"bytes,59,opt,name=preview_bottom_text,json=previewBottomText,proto3" json:"preview_bottom_text,omitempty"`                                                                            // 预览底部文本
	BusinessConfigure      []*BusinessConfigure     `protobuf:"bytes,60,rep,name=business_configure,json=businessConfigure,proto3" json:"business_configure,omitempty"`                                                                              // 业务配置
	PublicScreenColor      string                   `protobuf:"bytes,61,opt,name=public_screen_color,json=publicScreenColor,proto3" json:"public_screen_color,omitempty"`                                                                            // 公共屏幕颜色
	ChatTrayColor          string                   `protobuf:"bytes,62,opt,name=chat_tray_color,json=chatTrayColor,proto3" json:"chat_tray_color,omitempty"`                                                                                        // 聊天托盘颜色
	MultiTab               *MultiTab                `protobuf:"bytes,63,opt,name=multi_tab,json=multiTab,proto3" json:"multi_tab,omitempty"`                                                                                                         // 多标签
	MainCameraCover        *Image                   `protobuf:"bytes,64,opt,name=main_camera_cover,json=mainCameraCover,proto3" json:"main_camera_cover,omitempty"`                                                                                  // 主摄像机封面
	MainCameraTitle        string                   `protobuf:"bytes,65,opt,name=main_camera_title,json=mainCameraTitle,proto3" json:"main_camera_title,omitempty"`                                                                                  // 主摄像机标题
	PrivilegeInfo          map[int32]*PrivilegeInfo `protobuf:"bytes,66,rep,name=privilege_info,json=privilegeInfo,proto3" json:"privilege_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 特权信息
	IsInteractConfigExist  bool                     `protobuf:"varint,67,opt,name=is_interact_config_exist,json=isInteractConfigExist,proto3" json:"is_interact_config_exist,omitempty"`                                                             // 是否存在交互配置
	MainCameraMatchInfo    *MainCameraMatchInfo     `protobuf:"bytes,68,opt,name=main_camera_match_info,json=mainCameraMatchInfo,proto3" json:"main_camera_match_info,omitempty"`                                                                    // 主摄像机匹配信息
	GroupId                int64                    `protobuf:"varint,69,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                                                                                           // 组 ID
	VsConfigDrawer         *VSConfigDrawer          `protobuf:"bytes,70,opt,name=vs_config_drawer,json=vsConfigDrawer,proto3" json:"vs_config_drawer,omitempty"`                                                                                     // 配置抽屉
	TitleIcon              *TitleIcon               `protobuf:"bytes,71,opt,name=title_icon,json=titleIcon,proto3" json:"title_icon,omitempty"`                                                                                                      // 标题图标
	GroupIdStr             string                   `protobuf:"bytes,72,opt,name=group_id_str,json=groupIdStr,proto3" json:"group_id_str,omitempty"`                                                                                                 // 组 ID 字符串
}

func (x *EpisodeExtraInfo) Reset() {
	*x = EpisodeExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeExtraInfo) ProtoMessage() {}

func (x *EpisodeExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeExtraInfo.ProtoReflect.Descriptor instead.
func (*EpisodeExtraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{94}
}

func (x *EpisodeExtraInfo) GetEpisodeMod() *EpisodeMod {
	if x != nil {
		return x.EpisodeMod
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCurrentPeriod() string {
	if x != nil {
		return x.CurrentPeriod
	}
	return ""
}

func (x *EpisodeExtraInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EpisodeExtraInfo) GetEpisodeListH5() string {
	if x != nil {
		return x.EpisodeListH5
	}
	return ""
}

func (x *EpisodeExtraInfo) GetWatchInfo() *WatchInfo {
	if x != nil {
		return x.WatchInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetEpisodeId() int64 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *EpisodeExtraInfo) GetEpisodeIdStr() string {
	if x != nil {
		return x.EpisodeIdStr
	}
	return ""
}

func (x *EpisodeExtraInfo) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *EpisodeExtraInfo) GetSelectionUrl() string {
	if x != nil {
		return x.SelectionUrl
	}
	return ""
}

func (x *EpisodeExtraInfo) GetRelationPlaceText() string {
	if x != nil {
		return x.RelationPlaceText
	}
	return ""
}

func (x *EpisodeExtraInfo) GetOperationPlaceTextList() []string {
	if x != nil {
		return x.OperationPlaceTextList
	}
	return nil
}

func (x *EpisodeExtraInfo) GetToolbarList() []*ToolbarItemConfig {
	if x != nil {
		return x.ToolbarList
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCollected() bool {
	if x != nil {
		return x.Collected
	}
	return false
}

func (x *EpisodeExtraInfo) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *EpisodeExtraInfo) GetFinishUrl() string {
	if x != nil {
		return x.FinishUrl
	}
	return ""
}

func (x *EpisodeExtraInfo) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *EpisodeExtraInfo) GetWatchPeriod() int64 {
	if x != nil {
		return x.WatchPeriod
	}
	return 0
}

func (x *EpisodeExtraInfo) GetLatestPeriod() int64 {
	if x != nil {
		return x.LatestPeriod
	}
	return 0
}

func (x *EpisodeExtraInfo) GetShowName() string {
	if x != nil {
		return x.ShowName
	}
	return ""
}

func (x *EpisodeExtraInfo) GetCurrentPeriodRaw() int32 {
	if x != nil {
		return x.CurrentPeriodRaw
	}
	return 0
}

func (x *EpisodeExtraInfo) GetVideoCode() int32 {
	if x != nil {
		return x.VideoCode
	}
	return 0
}

func (x *EpisodeExtraInfo) GetSeasonIdStr() string {
	if x != nil {
		return x.SeasonIdStr
	}
	return ""
}

func (x *EpisodeExtraInfo) GetWatchPvRaw() string {
	if x != nil {
		return x.WatchPvRaw
	}
	return ""
}

func (x *EpisodeExtraInfo) GetNextSpecialEpisodeId() int64 {
	if x != nil {
		return x.NextSpecialEpisodeId
	}
	return 0
}

func (x *EpisodeExtraInfo) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCoverVertical() *Image {
	if x != nil {
		return x.CoverVertical
	}
	return nil
}

func (x *EpisodeExtraInfo) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *EpisodeExtraInfo) GetPlayControl() *EpisodePremierePlay {
	if x != nil {
		return x.PlayControl
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPreviewImage() *EpisodePreviewImage {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

func (x *EpisodeExtraInfo) GetGiftPannel() *VSGiftPannel {
	if x != nil {
		return x.GiftPannel
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPannelIcon() *VSPannelIcon {
	if x != nil {
		return x.PannelIcon
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPannelToolbar() []*ToolbarItemConfig {
	if x != nil {
		return x.PannelToolbar
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPreviewBottom() *EpisodePreviewBottom {
	if x != nil {
		return x.PreviewBottom
	}
	return nil
}

func (x *EpisodeExtraInfo) GetDrawSubTitle() string {
	if x != nil {
		return x.DrawSubTitle
	}
	return ""
}

func (x *EpisodeExtraInfo) GetSeasonCoverVertical() *Image {
	if x != nil {
		return x.SeasonCoverVertical
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCameraInfos() []*VSCameraInfo {
	if x != nil {
		return x.CameraInfos
	}
	return nil
}

func (x *EpisodeExtraInfo) GetDefaultCameraId() int64 {
	if x != nil {
		return x.DefaultCameraId
	}
	return 0
}

func (x *EpisodeExtraInfo) GetDefaultCameraIdStr() int64 {
	if x != nil {
		return x.DefaultCameraIdStr
	}
	return 0
}

func (x *EpisodeExtraInfo) GetDefaultCameraIdStrV2() string {
	if x != nil {
		return x.DefaultCameraIdStrV2
	}
	return ""
}

func (x *EpisodeExtraInfo) GetPriorityCamera() *VSCameraInfo {
	if x != nil {
		return x.PriorityCamera
	}
	return nil
}

func (x *EpisodeExtraInfo) GetMultiSeasonTag() string {
	if x != nil {
		return x.MultiSeasonTag
	}
	return ""
}

func (x *EpisodeExtraInfo) GetPreviewBackground() *Image {
	if x != nil {
		return x.PreviewBackground
	}
	return nil
}

func (x *EpisodeExtraInfo) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *EpisodeExtraInfo) GetMod() *EpisodeMod {
	if x != nil {
		return x.Mod
	}
	return nil
}

func (x *EpisodeExtraInfo) GetItemCommentIcon() *Image {
	if x != nil {
		return x.ItemCommentIcon
	}
	return nil
}

func (x *EpisodeExtraInfo) GetVsWatermark() *VSWatermark {
	if x != nil {
		return x.VsWatermark
	}
	return nil
}

func (x *EpisodeExtraInfo) GetItemComment() *VSItemComment {
	if x != nil {
		return x.ItemComment
	}
	return nil
}

func (x *EpisodeExtraInfo) GetSeasonTypeName() string {
	if x != nil {
		return x.SeasonTypeName
	}
	return ""
}

func (x *EpisodeExtraInfo) GetVsBar() *VSBar {
	if x != nil {
		return x.VsBar
	}
	return nil
}

func (x *EpisodeExtraInfo) GetSeasonWatchInfo() *WatchInfo {
	if x != nil {
		return x.SeasonWatchInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetLinkRoomInfo() *VSLinkInfo {
	if x != nil {
		return x.LinkRoomInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCommentConfig() *CommentConfig {
	if x != nil {
		return x.CommentConfig
	}
	return nil
}

func (x *EpisodeExtraInfo) GetCameraInfosTableTitle() string {
	if x != nil {
		return x.CameraInfosTableTitle
	}
	return ""
}

func (x *EpisodeExtraInfo) GetEpisodeStatus() int32 {
	if x != nil {
		return x.EpisodeStatus
	}
	return 0
}

func (x *EpisodeExtraInfo) GetMatchRoomInfo() *MatchRoomInfo {
	if x != nil {
		return x.MatchRoomInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetMultiCameraBasicInfo() *MultiCameraBasicInfo {
	if x != nil {
		return x.MultiCameraBasicInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetSharePosterInfo() *SharePosterInfo {
	if x != nil {
		return x.SharePosterInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPremiereToast() *VSPremiereToast {
	if x != nil {
		return x.PremiereToast
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPreviewBottomText() string {
	if x != nil {
		return x.PreviewBottomText
	}
	return ""
}

func (x *EpisodeExtraInfo) GetBusinessConfigure() []*BusinessConfigure {
	if x != nil {
		return x.BusinessConfigure
	}
	return nil
}

func (x *EpisodeExtraInfo) GetPublicScreenColor() string {
	if x != nil {
		return x.PublicScreenColor
	}
	return ""
}

func (x *EpisodeExtraInfo) GetChatTrayColor() string {
	if x != nil {
		return x.ChatTrayColor
	}
	return ""
}

func (x *EpisodeExtraInfo) GetMultiTab() *MultiTab {
	if x != nil {
		return x.MultiTab
	}
	return nil
}

func (x *EpisodeExtraInfo) GetMainCameraCover() *Image {
	if x != nil {
		return x.MainCameraCover
	}
	return nil
}

func (x *EpisodeExtraInfo) GetMainCameraTitle() string {
	if x != nil {
		return x.MainCameraTitle
	}
	return ""
}

func (x *EpisodeExtraInfo) GetPrivilegeInfo() map[int32]*PrivilegeInfo {
	if x != nil {
		return x.PrivilegeInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetIsInteractConfigExist() bool {
	if x != nil {
		return x.IsInteractConfigExist
	}
	return false
}

func (x *EpisodeExtraInfo) GetMainCameraMatchInfo() *MainCameraMatchInfo {
	if x != nil {
		return x.MainCameraMatchInfo
	}
	return nil
}

func (x *EpisodeExtraInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *EpisodeExtraInfo) GetVsConfigDrawer() *VSConfigDrawer {
	if x != nil {
		return x.VsConfigDrawer
	}
	return nil
}

func (x *EpisodeExtraInfo) GetTitleIcon() *TitleIcon {
	if x != nil {
		return x.TitleIcon
	}
	return nil
}

func (x *EpisodeExtraInfo) GetGroupIdStr() string {
	if x != nil {
		return x.GroupIdStr
	}
	return ""
}

// TitleIcon 主消息
type TitleIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                            // 图标的 URL 地址
	SizeType int32  `protobuf:"varint,2,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"` // 图标的尺寸类型
}

func (x *TitleIcon) Reset() {
	*x = TitleIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleIcon) ProtoMessage() {}

func (x *TitleIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleIcon.ProtoReflect.Descriptor instead.
func (*TitleIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{95}
}

func (x *TitleIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TitleIcon) GetSizeType() int32 {
	if x != nil {
		return x.SizeType
	}
	return 0
}

// VSConfigDrawer 主消息
type VSConfigDrawer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawer           *MatchDrawer `protobuf:"bytes,1,opt,name=drawer,proto3" json:"drawer,omitempty"`                                             // 比赛抽屉配置
	DrawerLabel      *Image       `protobuf:"bytes,2,opt,name=drawer_label,json=drawerLabel,proto3" json:"drawer_label,omitempty"`                // 抽屉标签图像
	DrawerBackground *Image       `protobuf:"bytes,3,opt,name=drawer_background,json=drawerBackground,proto3" json:"drawer_background,omitempty"` // 抽屉背景图像
}

func (x *VSConfigDrawer) Reset() {
	*x = VSConfigDrawer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSConfigDrawer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSConfigDrawer) ProtoMessage() {}

func (x *VSConfigDrawer) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSConfigDrawer.ProtoReflect.Descriptor instead.
func (*VSConfigDrawer) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{96}
}

func (x *VSConfigDrawer) GetDrawer() *MatchDrawer {
	if x != nil {
		return x.Drawer
	}
	return nil
}

func (x *VSConfigDrawer) GetDrawerLabel() *Image {
	if x != nil {
		return x.DrawerLabel
	}
	return nil
}

func (x *VSConfigDrawer) GetDrawerBackground() *Image {
	if x != nil {
		return x.DrawerBackground
	}
	return nil
}

// MainCameraMatchInfo 主消息
type MainCameraMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchData          *MainCameraMatchInfo_ToutiaoMatchData `protobuf:"bytes,1,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`                                 // 比赛数据
	MatchId            int64                                 `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                      // 比赛 ID
	EventIds           []int64                               `protobuf:"varint,3,rep,packed,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`                            // 事件 ID 列表
	ContentId          int64                                 `protobuf:"varint,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`                                // 内容 ID
	LeagueInfo         *MainCameraMatchInfo_LeagueInfo       `protobuf:"bytes,5,opt,name=league_info,json=leagueInfo,proto3" json:"league_info,omitempty"`                              // 联赛信息
	IsDisplayScoreType bool                                  `protobuf:"varint,6,opt,name=is_display_score_type,json=isDisplayScoreType,proto3" json:"is_display_score_type,omitempty"` // 是否显示比分类型
	HideTabIds         []int64                               `protobuf:"varint,7,rep,packed,name=hide_tab_ids,json=hideTabIds,proto3" json:"hide_tab_ids,omitempty"`                    // 隐藏的标签 ID 列表
	MatchIdStr         string                                `protobuf:"bytes,8,opt,name=match_id_str,json=matchIdStr,proto3" json:"match_id_str,omitempty"`                            // 比赛 ID 字符串
	ContentIdStr       string                                `protobuf:"bytes,9,opt,name=content_id_str,json=contentIdStr,proto3" json:"content_id_str,omitempty"`                      // 内容 ID 字符串
}

func (x *MainCameraMatchInfo) Reset() {
	*x = MainCameraMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo) ProtoMessage() {}

func (x *MainCameraMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97}
}

func (x *MainCameraMatchInfo) GetMatchData() *MainCameraMatchInfo_ToutiaoMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *MainCameraMatchInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MainCameraMatchInfo) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *MainCameraMatchInfo) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *MainCameraMatchInfo) GetLeagueInfo() *MainCameraMatchInfo_LeagueInfo {
	if x != nil {
		return x.LeagueInfo
	}
	return nil
}

func (x *MainCameraMatchInfo) GetIsDisplayScoreType() bool {
	if x != nil {
		return x.IsDisplayScoreType
	}
	return false
}

func (x *MainCameraMatchInfo) GetHideTabIds() []int64 {
	if x != nil {
		return x.HideTabIds
	}
	return nil
}

func (x *MainCameraMatchInfo) GetMatchIdStr() string {
	if x != nil {
		return x.MatchIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo) GetContentIdStr() string {
	if x != nil {
		return x.ContentIdStr
	}
	return ""
}

// MultiTab 主消息
type MultiTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabTitleColor     string              `protobuf:"bytes,1,opt,name=tab_title_color,json=tabTitleColor,proto3" json:"tab_title_color,omitempty"`            // 标签标题颜色
	Tabs              []*MultiTab_TabItem `protobuf:"bytes,2,rep,name=tabs,proto3" json:"tabs,omitempty"`                                                     // 标签列表
	SwitchOn          int32               `protobuf:"varint,3,opt,name=switch_on,json=switchOn,proto3" json:"switch_on,omitempty"`                            // 是否开启开关
	DisableBackground int32               `protobuf:"varint,4,opt,name=disable_background,json=disableBackground,proto3" json:"disable_background,omitempty"` // 是否禁用背景
	DisableProject    int32               `protobuf:"varint,5,opt,name=disable_project,json=disableProject,proto3" json:"disable_project,omitempty"`          // 是否禁用项目
}

func (x *MultiTab) Reset() {
	*x = MultiTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTab) ProtoMessage() {}

func (x *MultiTab) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTab.ProtoReflect.Descriptor instead.
func (*MultiTab) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{98}
}

func (x *MultiTab) GetTabTitleColor() string {
	if x != nil {
		return x.TabTitleColor
	}
	return ""
}

func (x *MultiTab) GetTabs() []*MultiTab_TabItem {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *MultiTab) GetSwitchOn() int32 {
	if x != nil {
		return x.SwitchOn
	}
	return 0
}

func (x *MultiTab) GetDisableBackground() int32 {
	if x != nil {
		return x.DisableBackground
	}
	return 0
}

func (x *MultiTab) GetDisableProject() int32 {
	if x != nil {
		return x.DisableProject
	}
	return 0
}

// BusinessConfigure 主消息
type BusinessConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID    int64                                `protobuf:"varint,1,opt,name=BusinessID,proto3" json:"BusinessID,omitempty"`       // 业务 ID
	BusType       int64                                `protobuf:"varint,2,opt,name=BusType,proto3" json:"BusType,omitempty"`             // 业务类型
	DelaySecond   int32                                `protobuf:"varint,3,opt,name=DelaySecond,proto3" json:"DelaySecond,omitempty"`     // 延迟秒数
	PreciseTime   int64                                `protobuf:"varint,4,opt,name=PreciseTime,proto3" json:"PreciseTime,omitempty"`     // 精确时间 (Unix 时间戳)
	DisplaySecond int32                                `protobuf:"varint,5,opt,name=DisplaySecond,proto3" json:"DisplaySecond,omitempty"` // 显示持续时间 (秒)
	ResConfig     *BusinessConfigure_ResourceConfigure `protobuf:"bytes,6,opt,name=ResConfig,proto3" json:"ResConfig,omitempty"`          // 资源配置
	DelType       int64                                `protobuf:"varint,7,opt,name=DelType,proto3" json:"DelType,omitempty"`             // 删除类型
}

func (x *BusinessConfigure) Reset() {
	*x = BusinessConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessConfigure) ProtoMessage() {}

func (x *BusinessConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessConfigure.ProtoReflect.Descriptor instead.
func (*BusinessConfigure) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{99}
}

func (x *BusinessConfigure) GetBusinessID() int64 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *BusinessConfigure) GetBusType() int64 {
	if x != nil {
		return x.BusType
	}
	return 0
}

func (x *BusinessConfigure) GetDelaySecond() int32 {
	if x != nil {
		return x.DelaySecond
	}
	return 0
}

func (x *BusinessConfigure) GetPreciseTime() int64 {
	if x != nil {
		return x.PreciseTime
	}
	return 0
}

func (x *BusinessConfigure) GetDisplaySecond() int32 {
	if x != nil {
		return x.DisplaySecond
	}
	return 0
}

func (x *BusinessConfigure) GetResConfig() *BusinessConfigure_ResourceConfigure {
	if x != nil {
		return x.ResConfig
	}
	return nil
}

func (x *BusinessConfigure) GetDelType() int64 {
	if x != nil {
		return x.DelType
	}
	return 0
}

// VSPremiereToast 主消息
type VSPremiereToast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTopToast   string                 `protobuf:"bytes,1,opt,name=left_top_toast,json=leftTopToast,proto3" json:"left_top_toast,omitempty"`       // 左上角提示信息
	PlayerToast    string                 `protobuf:"bytes,2,opt,name=player_toast,json=playerToast,proto3" json:"player_toast,omitempty"`            // 播放器提示信息
	PlayerTopToast string                 `protobuf:"bytes,3,opt,name=player_top_toast,json=playerTopToast,proto3" json:"player_top_toast,omitempty"` // 播放器顶部提示信息
	Icon           *VSPremiereToast_Image `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                                             // 提示信息的图标
}

func (x *VSPremiereToast) Reset() {
	*x = VSPremiereToast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSPremiereToast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSPremiereToast) ProtoMessage() {}

func (x *VSPremiereToast) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSPremiereToast.ProtoReflect.Descriptor instead.
func (*VSPremiereToast) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{100}
}

func (x *VSPremiereToast) GetLeftTopToast() string {
	if x != nil {
		return x.LeftTopToast
	}
	return ""
}

func (x *VSPremiereToast) GetPlayerToast() string {
	if x != nil {
		return x.PlayerToast
	}
	return ""
}

func (x *VSPremiereToast) GetPlayerTopToast() string {
	if x != nil {
		return x.PlayerTopToast
	}
	return ""
}

func (x *VSPremiereToast) GetIcon() *VSPremiereToast_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

// PaidLiveData 主消息
type PaidLiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaidType           int32                       `protobuf:"varint,1,opt,name=paid_type,json=paidType,proto3" json:"paid_type,omitempty"`                                                                                                                   // 付费类型
	ViewRight          int32                       `protobuf:"varint,2,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                                                                                                                // 查看权限
	Duration           int64                       `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                                   // 直播时长
	TicketSession      *PaidLiveData_TicketData    `protobuf:"bytes,4,opt,name=ticket_session,json=ticketSession,proto3" json:"ticket_session,omitempty"`                                                                                                     // 门票会话数据
	OrderData          *PaidLiveData_OrderData     `protobuf:"bytes,5,opt,name=order_data,json=orderData,proto3" json:"order_data,omitempty"`                                                                                                                 // 订单数据
	Delivery           int32                       `protobuf:"varint,6,opt,name=delivery,proto3" json:"delivery,omitempty"`                                                                                                                                   // 交付方式
	NeedDeliveryNotice bool                        `protobuf:"varint,7,opt,name=need_delivery_notice,json=needDeliveryNotice,proto3" json:"need_delivery_notice,omitempty"`                                                                                   // 是否需要交付通知
	AnchorRight        int32                       `protobuf:"varint,8,opt,name=anchor_right,json=anchorRight,proto3" json:"anchor_right,omitempty"`                                                                                                          // 主播权限
	PayAbType          int32                       `protobuf:"varint,9,opt,name=pay_ab_type,json=payAbType,proto3" json:"pay_ab_type,omitempty"`                                                                                                              // 支付 AB 测试类型
	PrivilegeInfo      map[string]*PrivilegeInfo   `protobuf:"bytes,10,rep,name=privilege_info,json=privilegeInfo,proto3" json:"privilege_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`            // 特权信息
	PrivilegeInfoMap   map[string]*PrivilegeInfo   `protobuf:"bytes,11,rep,name=privilege_info_map,json=privilegeInfoMap,proto3" json:"privilege_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 特权信息映射
	AsyncAuthData      *PaidLiveData_AsyncAuthData `protobuf:"bytes,12,opt,name=async_auth_data,json=asyncAuthData,proto3" json:"async_auth_data,omitempty"`                                                                                                  // 异步认证数据
	ProductsData       *PaidLiveData_ProductsData  `protobuf:"bytes,13,opt,name=products_data,json=productsData,proto3" json:"products_data,omitempty"`                                                                                                       // 产品数据
	MaxPreviewDuration int64                       `protobuf:"varint,14,opt,name=max_preview_duration,json=maxPreviewDuration,proto3" json:"max_preview_duration,omitempty"`                                                                                  // 最大预览时长
}

func (x *PaidLiveData) Reset() {
	*x = PaidLiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData) ProtoMessage() {}

func (x *PaidLiveData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData.ProtoReflect.Descriptor instead.
func (*PaidLiveData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101}
}

func (x *PaidLiveData) GetPaidType() int32 {
	if x != nil {
		return x.PaidType
	}
	return 0
}

func (x *PaidLiveData) GetViewRight() int32 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *PaidLiveData) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PaidLiveData) GetTicketSession() *PaidLiveData_TicketData {
	if x != nil {
		return x.TicketSession
	}
	return nil
}

func (x *PaidLiveData) GetOrderData() *PaidLiveData_OrderData {
	if x != nil {
		return x.OrderData
	}
	return nil
}

func (x *PaidLiveData) GetDelivery() int32 {
	if x != nil {
		return x.Delivery
	}
	return 0
}

func (x *PaidLiveData) GetNeedDeliveryNotice() bool {
	if x != nil {
		return x.NeedDeliveryNotice
	}
	return false
}

func (x *PaidLiveData) GetAnchorRight() int32 {
	if x != nil {
		return x.AnchorRight
	}
	return 0
}

func (x *PaidLiveData) GetPayAbType() int32 {
	if x != nil {
		return x.PayAbType
	}
	return 0
}

func (x *PaidLiveData) GetPrivilegeInfo() map[string]*PrivilegeInfo {
	if x != nil {
		return x.PrivilegeInfo
	}
	return nil
}

func (x *PaidLiveData) GetPrivilegeInfoMap() map[string]*PrivilegeInfo {
	if x != nil {
		return x.PrivilegeInfoMap
	}
	return nil
}

func (x *PaidLiveData) GetAsyncAuthData() *PaidLiveData_AsyncAuthData {
	if x != nil {
		return x.AsyncAuthData
	}
	return nil
}

func (x *PaidLiveData) GetProductsData() *PaidLiveData_ProductsData {
	if x != nil {
		return x.ProductsData
	}
	return nil
}

func (x *PaidLiveData) GetMaxPreviewDuration() int64 {
	if x != nil {
		return x.MaxPreviewDuration
	}
	return 0
}

// Product 主消息
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo       *Product_ProductBasicInfo     `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`                    // 产品基础信息
	PriceInfo       *Product_ProductPriceStruct   `protobuf:"bytes,2,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`                    // 产品价格信息
	LiveInfo        *Product_LiveInfo             `protobuf:"bytes,3,opt,name=live_info,json=liveInfo,proto3" json:"live_info,omitempty"`                       // 直播信息
	ItemInfo        *Product_ItemInfo             `protobuf:"bytes,4,opt,name=item_info,json=itemInfo,proto3" json:"item_info,omitempty"`                       // 商品信息
	ContentInfo     *Product_ContentInfo          `protobuf:"bytes,5,opt,name=content_info,json=contentInfo,proto3" json:"content_info,omitempty"`              // 内容信息
	PaymentArrea    *Product_PaymentArea          `protobuf:"bytes,6,opt,name=payment_arrea,json=paymentArrea,proto3" json:"payment_arrea,omitempty"`           // 支付区域
	PriceRichInfo   *Product_ProductPriceRichText `protobuf:"bytes,7,opt,name=price_rich_info,json=priceRichInfo,proto3" json:"price_rich_info,omitempty"`      // 价格富文本信息
	ProductComments *Product_ProductComments      `protobuf:"bytes,8,opt,name=product_comments,json=productComments,proto3" json:"product_comments,omitempty"`  // 产品评论
	ShareTicket     *Product_ShareTicket          `protobuf:"bytes,29,opt,name=share_ticket,json=shareTicket,proto3" json:"share_ticket,omitempty"`             // 分享票据
	Privilege       *Product_PrivilegeTicket      `protobuf:"bytes,30,opt,name=privilege,proto3" json:"privilege,omitempty"`                                    // 特权票据
	Combined        *Product_Combined             `protobuf:"bytes,31,opt,name=combined,proto3" json:"combined,omitempty"`                                      // 组合信息
	Comments        *Product_Comments             `protobuf:"bytes,32,opt,name=comments,proto3" json:"comments,omitempty"`                                      // 评论信息
	Rating          *Product_Rating               `protobuf:"bytes,33,opt,name=rating,proto3" json:"rating,omitempty"`                                          // 评分信息
	User            *Product_User                 `protobuf:"bytes,35,opt,name=user,proto3" json:"user,omitempty"`                                              // 用户信息
	Authors         []*Product_Author             `protobuf:"bytes,36,rep,name=authors,proto3" json:"authors,omitempty"`                                        // 作者列表
	Banner          *Product_ProductBanner        `protobuf:"bytes,37,opt,name=banner,proto3" json:"banner,omitempty"`                                          // 产品横幅
	SkuList         []*Product_SKU                `protobuf:"bytes,17,rep,name=sku_list,json=skuList,proto3" json:"sku_list,omitempty"`                         // SKU 列表
	SubscribeMember *Product_SubscribeMember      `protobuf:"bytes,18,opt,name=subscribe_member,json=subscribeMember,proto3" json:"subscribe_member,omitempty"` // 订阅会员信息
	FilterNode      *Product_FilterReason         `protobuf:"bytes,999,opt,name=filter_node,json=filterNode,proto3" json:"filter_node,omitempty"`               // 过滤原因
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102}
}

func (x *Product) GetBasicInfo() *Product_ProductBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *Product) GetPriceInfo() *Product_ProductPriceStruct {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *Product) GetLiveInfo() *Product_LiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *Product) GetItemInfo() *Product_ItemInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *Product) GetContentInfo() *Product_ContentInfo {
	if x != nil {
		return x.ContentInfo
	}
	return nil
}

func (x *Product) GetPaymentArrea() *Product_PaymentArea {
	if x != nil {
		return x.PaymentArrea
	}
	return nil
}

func (x *Product) GetPriceRichInfo() *Product_ProductPriceRichText {
	if x != nil {
		return x.PriceRichInfo
	}
	return nil
}

func (x *Product) GetProductComments() *Product_ProductComments {
	if x != nil {
		return x.ProductComments
	}
	return nil
}

func (x *Product) GetShareTicket() *Product_ShareTicket {
	if x != nil {
		return x.ShareTicket
	}
	return nil
}

func (x *Product) GetPrivilege() *Product_PrivilegeTicket {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *Product) GetCombined() *Product_Combined {
	if x != nil {
		return x.Combined
	}
	return nil
}

func (x *Product) GetComments() *Product_Comments {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Product) GetRating() *Product_Rating {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *Product) GetUser() *Product_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Product) GetAuthors() []*Product_Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Product) GetBanner() *Product_ProductBanner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *Product) GetSkuList() []*Product_SKU {
	if x != nil {
		return x.SkuList
	}
	return nil
}

func (x *Product) GetSubscribeMember() *Product_SubscribeMember {
	if x != nil {
		return x.SubscribeMember
	}
	return nil
}

func (x *Product) GetFilterNode() *Product_FilterReason {
	if x != nil {
		return x.FilterNode
	}
	return nil
}

// PrivilegeInfo 主消息
type PrivilegeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId     int64                               `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`               // 实体 ID
	ItemList     []*PrivilegeInfo_PaidLiveItemInfo   `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`                // 项目列表
	PaidLiveType int32                               `protobuf:"varint,3,opt,name=paid_live_type,json=paidLiveType,proto3" json:"paid_live_type,omitempty"` // 付费直播类型
	PaidLiveInfo *PrivilegeInfo_PrivilegeBaseInfo    `protobuf:"bytes,4,opt,name=paid_live_info,json=paidLiveInfo,proto3" json:"paid_live_info,omitempty"`  // 付费直播信息
	Extra        string                              `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                      // 额外信息
	PrivilegeUrl *PrivilegeInfo_PrivilegeUrl         `protobuf:"bytes,6,opt,name=privilege_url,json=privilegeUrl,proto3" json:"privilege_url,omitempty"`    // 特权 URL
	UiConfig     *PrivilegeInfo_PaidLiveUIBaseConfig `protobuf:"bytes,7,opt,name=ui_config,json=uiConfig,proto3" json:"ui_config,omitempty"`                // UI 配置
	EntityConfig *PrivilegeInfo_PaidLiveConfig       `protobuf:"bytes,8,opt,name=entity_config,json=entityConfig,proto3" json:"entity_config,omitempty"`    // 实体配置
}

func (x *PrivilegeInfo) Reset() {
	*x = PrivilegeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo) ProtoMessage() {}

func (x *PrivilegeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103}
}

func (x *PrivilegeInfo) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *PrivilegeInfo) GetItemList() []*PrivilegeInfo_PaidLiveItemInfo {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *PrivilegeInfo) GetPaidLiveType() int32 {
	if x != nil {
		return x.PaidLiveType
	}
	return 0
}

func (x *PrivilegeInfo) GetPaidLiveInfo() *PrivilegeInfo_PrivilegeBaseInfo {
	if x != nil {
		return x.PaidLiveInfo
	}
	return nil
}

func (x *PrivilegeInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PrivilegeInfo) GetPrivilegeUrl() *PrivilegeInfo_PrivilegeUrl {
	if x != nil {
		return x.PrivilegeUrl
	}
	return nil
}

func (x *PrivilegeInfo) GetUiConfig() *PrivilegeInfo_PaidLiveUIBaseConfig {
	if x != nil {
		return x.UiConfig
	}
	return nil
}

func (x *PrivilegeInfo) GetEntityConfig() *PrivilegeInfo_PaidLiveConfig {
	if x != nil {
		return x.EntityConfig
	}
	return nil
}

// CircleInfo 主消息
type CircleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                            // 圈子的唯一标识符
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // 圈子的名称
	CoverImg    *Image `protobuf:"bytes,3,opt,name=cover_img,json=coverImg,proto3" json:"cover_img,omitempty"` // 圈子的封面图片
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`           // 圈子的描述
}

func (x *CircleInfo) Reset() {
	*x = CircleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircleInfo) ProtoMessage() {}

func (x *CircleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircleInfo.ProtoReflect.Descriptor instead.
func (*CircleInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{104}
}

func (x *CircleInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CircleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CircleInfo) GetCoverImg() *Image {
	if x != nil {
		return x.CoverImg
	}
	return nil
}

func (x *CircleInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// DesireInfo 主消息
type DesireInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesireId    int64  `protobuf:"varint,1,opt,name=desire_id,json=desireId,proto3" json:"desire_id,omitempty"`           // 欲望或需求的唯一标识符（整型）
	DesireIdStr string `protobuf:"bytes,2,opt,name=desire_id_str,json=desireIdStr,proto3" json:"desire_id_str,omitempty"` // 欲望或需求的唯一标识符（字符串形式）
}

func (x *DesireInfo) Reset() {
	*x = DesireInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesireInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesireInfo) ProtoMessage() {}

func (x *DesireInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesireInfo.ProtoReflect.Descriptor instead.
func (*DesireInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{105}
}

func (x *DesireInfo) GetDesireId() int64 {
	if x != nil {
		return x.DesireId
	}
	return 0
}

func (x *DesireInfo) GetDesireIdStr() string {
	if x != nil {
		return x.DesireIdStr
	}
	return ""
}

// FeedbackCard 主消息
type FeedbackCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title              string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                         // 反馈卡标题
	FeedbackId         int64                    `protobuf:"varint,2,opt,name=feedback_id,json=feedbackId,proto3" json:"feedback_id,omitempty"`                            // 反馈 ID
	Question           []*FeedbackCard_Question `protobuf:"bytes,3,rep,name=question,proto3" json:"question,omitempty"`                                                   // 反馈问题列表
	Condition          *FeedbackCard_Condition  `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`                                                 // 条件配置
	RoomId             int64                    `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                        // 房间 ID
	RoomData           *Room                    `protobuf:"bytes,6,opt,name=room_data,json=roomData,proto3" json:"room_data,omitempty"`                                   // 房间数据
	NegativeText       string                   `protobuf:"bytes,7,opt,name=negative_text,json=negativeText,proto3" json:"negative_text,omitempty"`                       // 否定操作文本
	Bgm                *Image                   `protobuf:"bytes,8,opt,name=bgm,proto3" json:"bgm,omitempty"`                                                             // 背景音乐或图片
	FeedbackType       int32                    `protobuf:"varint,9,opt,name=feedback_type,json=feedbackType,proto3" json:"feedback_type,omitempty"`                      // 反馈类型
	InflowFeedbackType int32                    `protobuf:"varint,10,opt,name=inflow_feedback_type,json=inflowFeedbackType,proto3" json:"inflow_feedback_type,omitempty"` // 流入反馈类型
	AnchorFeedbackType int32                    `protobuf:"varint,11,opt,name=anchor_feedback_type,json=anchorFeedbackType,proto3" json:"anchor_feedback_type,omitempty"` // 主播反馈类型
}

func (x *FeedbackCard) Reset() {
	*x = FeedbackCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard) ProtoMessage() {}

func (x *FeedbackCard) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard.ProtoReflect.Descriptor instead.
func (*FeedbackCard) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106}
}

func (x *FeedbackCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeedbackCard) GetFeedbackId() int64 {
	if x != nil {
		return x.FeedbackId
	}
	return 0
}

func (x *FeedbackCard) GetQuestion() []*FeedbackCard_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *FeedbackCard) GetCondition() *FeedbackCard_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *FeedbackCard) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *FeedbackCard) GetRoomData() *Room {
	if x != nil {
		return x.RoomData
	}
	return nil
}

func (x *FeedbackCard) GetNegativeText() string {
	if x != nil {
		return x.NegativeText
	}
	return ""
}

func (x *FeedbackCard) GetBgm() *Image {
	if x != nil {
		return x.Bgm
	}
	return nil
}

func (x *FeedbackCard) GetFeedbackType() int32 {
	if x != nil {
		return x.FeedbackType
	}
	return 0
}

func (x *FeedbackCard) GetInflowFeedbackType() int32 {
	if x != nil {
		return x.InflowFeedbackType
	}
	return 0
}

func (x *FeedbackCard) GetAnchorFeedbackType() int32 {
	if x != nil {
		return x.AnchorFeedbackType
	}
	return 0
}

// VipData 主消息
type VipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VipRoom int32 `protobuf:"varint,1,opt,name=vip_room,json=vipRoom,proto3" json:"vip_room,omitempty"` // VIP 房间标志
}

func (x *VipData) Reset() {
	*x = VipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipData) ProtoMessage() {}

func (x *VipData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipData.ProtoReflect.Descriptor instead.
func (*VipData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{107}
}

func (x *VipData) GetVipRoom() int32 {
	if x != nil {
		return x.VipRoom
	}
	return 0
}

// ToolBarData 主消息
type ToolBarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceList            []*ToolBarComponentData  `protobuf:"bytes,1,rep,name=entrance_list,json=entranceList,proto3" json:"entrance_list,omitempty"`                                                                                          // 工具栏入口列表
	MorePanel               []*ToolBarComponentData  `protobuf:"bytes,2,rep,name=more_panel,json=morePanel,proto3" json:"more_panel,omitempty"`                                                                                                   // 更多面板组件列表
	MaxEntranceCnt          int32                    `protobuf:"varint,3,opt,name=max_entrance_cnt,json=maxEntranceCnt,proto3" json:"max_entrance_cnt,omitempty"`                                                                                 // 最大入口数量
	LandscapeUpRight        []*ToolBarComponentData  `protobuf:"bytes,4,rep,name=landscape_up_right,json=landscapeUpRight,proto3" json:"landscape_up_right,omitempty"`                                                                            // 横屏右上角组件列表
	SkinResource            map[int32]*ComponentSkin `protobuf:"bytes,5,rep,name=skin_resource,json=skinResource,proto3" json:"skin_resource,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 皮肤资源映射
	MaxEntranceCntLandscape int32                    `protobuf:"varint,6,opt,name=max_entrance_cnt_landscape,json=maxEntranceCntLandscape,proto3" json:"max_entrance_cnt_landscape,omitempty"`                                                    // 横屏最大入口数量
	Permutation             *ToolbarPermutation      `protobuf:"bytes,7,opt,name=permutation,proto3" json:"permutation,omitempty"`                                                                                                                // 工具栏排列信息
}

func (x *ToolBarData) Reset() {
	*x = ToolBarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolBarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolBarData) ProtoMessage() {}

func (x *ToolBarData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolBarData.ProtoReflect.Descriptor instead.
func (*ToolBarData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{108}
}

func (x *ToolBarData) GetEntranceList() []*ToolBarComponentData {
	if x != nil {
		return x.EntranceList
	}
	return nil
}

func (x *ToolBarData) GetMorePanel() []*ToolBarComponentData {
	if x != nil {
		return x.MorePanel
	}
	return nil
}

func (x *ToolBarData) GetMaxEntranceCnt() int32 {
	if x != nil {
		return x.MaxEntranceCnt
	}
	return 0
}

func (x *ToolBarData) GetLandscapeUpRight() []*ToolBarComponentData {
	if x != nil {
		return x.LandscapeUpRight
	}
	return nil
}

func (x *ToolBarData) GetSkinResource() map[int32]*ComponentSkin {
	if x != nil {
		return x.SkinResource
	}
	return nil
}

func (x *ToolBarData) GetMaxEntranceCntLandscape() int32 {
	if x != nil {
		return x.MaxEntranceCntLandscape
	}
	return 0
}

func (x *ToolBarData) GetPermutation() *ToolbarPermutation {
	if x != nil {
		return x.Permutation
	}
	return nil
}

// ToolBarComponentData 子消息
type ToolBarComponentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentId   string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`       // 组件唯一标识
	ComponentName string `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"` // 组件名称
	ComponentIcon string `protobuf:"bytes,3,opt,name=component_icon,json=componentIcon,proto3" json:"component_icon,omitempty"` // 组件图标 URL
	ActionUrl     string `protobuf:"bytes,4,opt,name=action_url,json=actionUrl,proto3" json:"action_url,omitempty"`             // 组件点击动作 URL
}

func (x *ToolBarComponentData) Reset() {
	*x = ToolBarComponentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolBarComponentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolBarComponentData) ProtoMessage() {}

func (x *ToolBarComponentData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolBarComponentData.ProtoReflect.Descriptor instead.
func (*ToolBarComponentData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{109}
}

func (x *ToolBarComponentData) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ToolBarComponentData) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ToolBarComponentData) GetComponentIcon() string {
	if x != nil {
		return x.ComponentIcon
	}
	return ""
}

func (x *ToolBarComponentData) GetActionUrl() string {
	if x != nil {
		return x.ActionUrl
	}
	return ""
}

// ToolbarPermutation 子消息
type ToolbarPermutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order []string `protobuf:"bytes,1,rep,name=order,proto3" json:"order,omitempty"` // 工具栏组件排列顺序
}

func (x *ToolbarPermutation) Reset() {
	*x = ToolbarPermutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarPermutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarPermutation) ProtoMessage() {}

func (x *ToolbarPermutation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarPermutation.ProtoReflect.Descriptor instead.
func (*ToolbarPermutation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{110}
}

func (x *ToolbarPermutation) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

// ComponentSkin 子消息
type ComponentSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId  string `protobuf:"bytes,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`    // 皮肤 ID
	SkinUrl string `protobuf:"bytes,2,opt,name=skin_url,json=skinUrl,proto3" json:"skin_url,omitempty"` // 皮肤资源 URL
}

func (x *ComponentSkin) Reset() {
	*x = ComponentSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentSkin) ProtoMessage() {}

func (x *ComponentSkin) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentSkin.ProtoReflect.Descriptor instead.
func (*ComponentSkin) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{111}
}

func (x *ComponentSkin) GetSkinId() string {
	if x != nil {
		return x.SkinId
	}
	return ""
}

func (x *ComponentSkin) GetSkinUrl() string {
	if x != nil {
		return x.SkinUrl
	}
	return ""
}

// BeautifyInfo 主消息
type BeautifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseFilter         bool `protobuf:"varint,1,opt,name=use_filter,json=useFilter,proto3" json:"use_filter,omitempty"`                           // 是否使用美颜滤镜
	CommerceUseFilter bool `protobuf:"varint,2,opt,name=commerce_use_filter,json=commerceUseFilter,proto3" json:"commerce_use_filter,omitempty"` // 是否在商业场景中使用美颜滤镜
}

func (x *BeautifyInfo) Reset() {
	*x = BeautifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeautifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeautifyInfo) ProtoMessage() {}

func (x *BeautifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeautifyInfo.ProtoReflect.Descriptor instead.
func (*BeautifyInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{112}
}

func (x *BeautifyInfo) GetUseFilter() bool {
	if x != nil {
		return x.UseFilter
	}
	return false
}

func (x *BeautifyInfo) GetCommerceUseFilter() bool {
	if x != nil {
		return x.CommerceUseFilter
	}
	return false
}

// UnionLiveInfo 主消息
type UnionLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuestAnchors      []*UnionLiveInfo_GuestAnchor `protobuf:"bytes,1,rep,name=guest_anchors,json=guestAnchors,proto3" json:"guest_anchors,omitempty"`                // 嘉宾主播列表
	AvatarDescription string                       `protobuf:"bytes,2,opt,name=avatar_description,json=avatarDescription,proto3" json:"avatar_description,omitempty"` // 头像描述
	FixedSort         bool                         `protobuf:"varint,3,opt,name=fixed_sort,json=fixedSort,proto3" json:"fixed_sort,omitempty"`                        // 是否固定排序
	Tag               string                       `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`                                                      // 标签
	Type              int32                        `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                                   // 联合直播类型
}

func (x *UnionLiveInfo) Reset() {
	*x = UnionLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionLiveInfo) ProtoMessage() {}

func (x *UnionLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionLiveInfo.ProtoReflect.Descriptor instead.
func (*UnionLiveInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{113}
}

func (x *UnionLiveInfo) GetGuestAnchors() []*UnionLiveInfo_GuestAnchor {
	if x != nil {
		return x.GuestAnchors
	}
	return nil
}

func (x *UnionLiveInfo) GetAvatarDescription() string {
	if x != nil {
		return x.AvatarDescription
	}
	return ""
}

func (x *UnionLiveInfo) GetFixedSort() bool {
	if x != nil {
		return x.FixedSort
	}
	return false
}

func (x *UnionLiveInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UnionLiveInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// GameCPData 主消息
type GameCPData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLiveAPromotedA  int32  `protobuf:"varint,1,opt,name=is_live_a_promoted_a,json=isLiveAPromotedA,proto3" json:"is_live_a_promoted_a,omitempty"` // 是否为推广中的直播
	GameId            string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                      // 游戏 ID
	GameName          string `protobuf:"bytes,3,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                // 游戏名称
	PromoteInstanceId int64  `protobuf:"varint,4,opt,name=promote_instance_id,json=promoteInstanceId,proto3" json:"promote_instance_id,omitempty"`  // 推广实例 ID
}

func (x *GameCPData) Reset() {
	*x = GameCPData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCPData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCPData) ProtoMessage() {}

func (x *GameCPData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCPData.ProtoReflect.Descriptor instead.
func (*GameCPData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{114}
}

func (x *GameCPData) GetIsLiveAPromotedA() int32 {
	if x != nil {
		return x.IsLiveAPromotedA
	}
	return 0
}

func (x *GameCPData) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameCPData) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameCPData) GetPromoteInstanceId() int64 {
	if x != nil {
		return x.PromoteInstanceId
	}
	return 0
}

// GamePlayData 主消息
type GamePlayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayType int32 `protobuf:"varint,1,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"` // 游戏玩法类型
	PlayId   int64 `protobuf:"varint,2,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`       // 游戏玩法 ID
	GameId   int64 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`       // 游戏 ID
}

func (x *GamePlayData) Reset() {
	*x = GamePlayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayData) ProtoMessage() {}

func (x *GamePlayData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayData.ProtoReflect.Descriptor instead.
func (*GamePlayData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{115}
}

func (x *GamePlayData) GetPlayType() int32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *GamePlayData) GetPlayId() int64 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *GamePlayData) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

// AvatarLiveInfo 主消息
type AvatarLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                          // 类型信息
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                          // 文本信息
	TextSize int32  `protobuf:"varint,3,opt,name=text_size,json=textSize,proto3" json:"text_size,omitempty"` // 文本大小
	Image    *Image `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`                        // 图片信息
}

func (x *AvatarLiveInfo) Reset() {
	*x = AvatarLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarLiveInfo) ProtoMessage() {}

func (x *AvatarLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarLiveInfo.ProtoReflect.Descriptor instead.
func (*AvatarLiveInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{116}
}

func (x *AvatarLiveInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvatarLiveInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AvatarLiveInfo) GetTextSize() int32 {
	if x != nil {
		return x.TextSize
	}
	return 0
}

func (x *AvatarLiveInfo) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

// CommentWallInfo 主消息
type CommentWallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content           string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                              // 评论内容
	Id                int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                                       // 评论墙信息 ID
	CommentMsgId      int64  `protobuf:"varint,3,opt,name=comment_msg_id,json=commentMsgId,proto3" json:"comment_msg_id,omitempty"`             // 评论消息 ID
	CommenterId       int64  `protobuf:"varint,4,opt,name=commenter_id,json=commenterId,proto3" json:"commenter_id,omitempty"`                  // 评论者 ID
	CommenterNickname string `protobuf:"bytes,5,opt,name=commenter_nickname,json=commenterNickname,proto3" json:"commenter_nickname,omitempty"` // 评论者昵称
	EventTime         int64  `protobuf:"varint,6,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`                        // 事件时间戳
	MsgTime           int64  `protobuf:"varint,7,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`                              // 消息时间戳
	EndTime           int64  `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                              // 结束时间戳
	CountdownStyle    int32  `protobuf:"varint,9,opt,name=countdown_style,json=countdownStyle,proto3" json:"countdown_style,omitempty"`         // 倒计时样式
	OperatorId        int64  `protobuf:"varint,10,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                    // 操作者 ID
	OperatorNickname  string `protobuf:"bytes,11,opt,name=operator_nickname,json=operatorNickname,proto3" json:"operator_nickname,omitempty"`   // 操作者昵称
	OperatorOpenid    string `protobuf:"bytes,5000,opt,name=operator_openid,json=operatorOpenid,proto3" json:"operator_openid,omitempty"`       // 操作者 OpenID
	CommenterOpenId   string `protobuf:"bytes,5001,opt,name=commenter_open_id,json=commenterOpenId,proto3" json:"commenter_open_id,omitempty"`  // 评论者 OpenID
}

func (x *CommentWallInfo) Reset() {
	*x = CommentWallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentWallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentWallInfo) ProtoMessage() {}

func (x *CommentWallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentWallInfo.ProtoReflect.Descriptor instead.
func (*CommentWallInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{117}
}

func (x *CommentWallInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentWallInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentWallInfo) GetCommentMsgId() int64 {
	if x != nil {
		return x.CommentMsgId
	}
	return 0
}

func (x *CommentWallInfo) GetCommenterId() int64 {
	if x != nil {
		return x.CommenterId
	}
	return 0
}

func (x *CommentWallInfo) GetCommenterNickname() string {
	if x != nil {
		return x.CommenterNickname
	}
	return ""
}

func (x *CommentWallInfo) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *CommentWallInfo) GetMsgTime() int64 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

func (x *CommentWallInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CommentWallInfo) GetCountdownStyle() int32 {
	if x != nil {
		return x.CountdownStyle
	}
	return 0
}

func (x *CommentWallInfo) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CommentWallInfo) GetOperatorNickname() string {
	if x != nil {
		return x.OperatorNickname
	}
	return ""
}

func (x *CommentWallInfo) GetOperatorOpenid() string {
	if x != nil {
		return x.OperatorOpenid
	}
	return ""
}

func (x *CommentWallInfo) GetCommenterOpenId() string {
	if x != nil {
		return x.CommenterOpenId
	}
	return ""
}

// CommentWallPosition 主消息
type CommentWallPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X         float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`                                 // 评论墙位置 X 坐标
	Y         float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`                                 // 评论墙位置 Y 坐标
	EventTime int64   `protobuf:"varint,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"` // 事件时间戳
}

func (x *CommentWallPosition) Reset() {
	*x = CommentWallPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentWallPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentWallPosition) ProtoMessage() {}

func (x *CommentWallPosition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentWallPosition.ProtoReflect.Descriptor instead.
func (*CommentWallPosition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{118}
}

func (x *CommentWallPosition) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CommentWallPosition) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CommentWallPosition) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

// RoomSpecificSceneTypeInfo 主消息
type RoomSpecificSceneTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnionLiveRoom              bool  `protobuf:"varint,1,opt,name=is_union_live_room,json=isUnionLiveRoom,proto3" json:"is_union_live_room,omitempty"`                                          // 是否为联合直播房间
	IsLife                       bool  `protobuf:"varint,2,opt,name=is_life,json=isLife,proto3" json:"is_life,omitempty"`                                                                         // 是否为生活类房间
	IsProtectedRoom              int32 `protobuf:"varint,3,opt,name=is_protected_room,json=isProtectedRoom,proto3" json:"is_protected_room,omitempty"`                                            // 是否为受保护的房间
	IsLastedGoodsRoom            int32 `protobuf:"varint,4,opt,name=is_lasted_goods_room,json=isLastedGoodsRoom,proto3" json:"is_lasted_goods_room,omitempty"`                                    // 是否为最新商品房间
	IsDesireRoom                 int32 `protobuf:"varint,5,opt,name=is_desire_room,json=isDesireRoom,proto3" json:"is_desire_room,omitempty"`                                                     // 是否为需求房间
	CommentaryType               bool  `protobuf:"varint,6,opt,name=commentary_type,json=commentaryType,proto3" json:"commentary_type,omitempty"`                                                 // 是否为解说类型
	IsSubOrientationVerticalRoom int32 `protobuf:"varint,7,opt,name=is_sub_orientation_vertical_room,json=isSubOrientationVerticalRoom,proto3" json:"is_sub_orientation_vertical_room,omitempty"` // 是否为纵向房间
}

func (x *RoomSpecificSceneTypeInfo) Reset() {
	*x = RoomSpecificSceneTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSpecificSceneTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSpecificSceneTypeInfo) ProtoMessage() {}

func (x *RoomSpecificSceneTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSpecificSceneTypeInfo.ProtoReflect.Descriptor instead.
func (*RoomSpecificSceneTypeInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{119}
}

func (x *RoomSpecificSceneTypeInfo) GetIsUnionLiveRoom() bool {
	if x != nil {
		return x.IsUnionLiveRoom
	}
	return false
}

func (x *RoomSpecificSceneTypeInfo) GetIsLife() bool {
	if x != nil {
		return x.IsLife
	}
	return false
}

func (x *RoomSpecificSceneTypeInfo) GetIsProtectedRoom() int32 {
	if x != nil {
		return x.IsProtectedRoom
	}
	return 0
}

func (x *RoomSpecificSceneTypeInfo) GetIsLastedGoodsRoom() int32 {
	if x != nil {
		return x.IsLastedGoodsRoom
	}
	return 0
}

func (x *RoomSpecificSceneTypeInfo) GetIsDesireRoom() int32 {
	if x != nil {
		return x.IsDesireRoom
	}
	return 0
}

func (x *RoomSpecificSceneTypeInfo) GetCommentaryType() bool {
	if x != nil {
		return x.CommentaryType
	}
	return false
}

func (x *RoomSpecificSceneTypeInfo) GetIsSubOrientationVerticalRoom() int32 {
	if x != nil {
		return x.IsSubOrientationVerticalRoom
	}
	return 0
}

// RelevantRecommendation 主消息
type RelevantRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelevantType      int32                                     `protobuf:"varint,1,opt,name=relevant_type,json=relevantType,proto3" json:"relevant_type,omitempty"`                  // 推荐类型
	BottomBarCategory int32                                     `protobuf:"varint,2,opt,name=bottom_bar_category,json=bottomBarCategory,proto3" json:"bottom_bar_category,omitempty"` // 底部栏分类
	Icon              *Image                                    `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                                       // 图标信息
	BarTextPrefix     string                                    `protobuf:"bytes,4,opt,name=bar_text_prefix,json=barTextPrefix,proto3" json:"bar_text_prefix,omitempty"`              // 底部栏前缀文本
	BarTextPostfix    string                                    `protobuf:"bytes,5,opt,name=bar_text_postfix,json=barTextPostfix,proto3" json:"bar_text_postfix,omitempty"`           // 底部栏后缀文本
	HighLightInfo     *RelevantRecommendation_HighLightInfo     `protobuf:"bytes,6,opt,name=high_light_info,json=highLightInfo,proto3" json:"high_light_info,omitempty"`              // 高亮信息
	EcomInfo          *RelevantRecommendation_EcomInfo          `protobuf:"bytes,7,opt,name=ecom_info,json=ecomInfo,proto3" json:"ecom_info,omitempty"`                               // 电商信息
	VsInfo            *RelevantRecommendation_VsInfo            `protobuf:"bytes,8,opt,name=vs_info,json=vsInfo,proto3" json:"vs_info,omitempty"`                                     // 比赛信息
	WhiteCategoryInfo *RelevantRecommendation_WhiteCategoryInfo `protobuf:"bytes,9,opt,name=white_category_info,json=whiteCategoryInfo,proto3" json:"white_category_info,omitempty"`  // 分类信息
}

func (x *RelevantRecommendation) Reset() {
	*x = RelevantRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation) ProtoMessage() {}

func (x *RelevantRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120}
}

func (x *RelevantRecommendation) GetRelevantType() int32 {
	if x != nil {
		return x.RelevantType
	}
	return 0
}

func (x *RelevantRecommendation) GetBottomBarCategory() int32 {
	if x != nil {
		return x.BottomBarCategory
	}
	return 0
}

func (x *RelevantRecommendation) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *RelevantRecommendation) GetBarTextPrefix() string {
	if x != nil {
		return x.BarTextPrefix
	}
	return ""
}

func (x *RelevantRecommendation) GetBarTextPostfix() string {
	if x != nil {
		return x.BarTextPostfix
	}
	return ""
}

func (x *RelevantRecommendation) GetHighLightInfo() *RelevantRecommendation_HighLightInfo {
	if x != nil {
		return x.HighLightInfo
	}
	return nil
}

func (x *RelevantRecommendation) GetEcomInfo() *RelevantRecommendation_EcomInfo {
	if x != nil {
		return x.EcomInfo
	}
	return nil
}

func (x *RelevantRecommendation) GetVsInfo() *RelevantRecommendation_VsInfo {
	if x != nil {
		return x.VsInfo
	}
	return nil
}

func (x *RelevantRecommendation) GetWhiteCategoryInfo() *RelevantRecommendation_WhiteCategoryInfo {
	if x != nil {
		return x.WhiteCategoryInfo
	}
	return nil
}

// IndustryServiceInfo 主消息
type IndustryServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceOpen bool                             `protobuf:"varint,1,opt,name=entrance_open,json=entranceOpen,proto3" json:"entrance_open,omitempty"` // 是否开启入口
	IconImage    *Image                           `protobuf:"bytes,2,opt,name=icon_image,json=iconImage,proto3" json:"icon_image,omitempty"`           // 图标图片
	ConsultInfo  *IndustryServiceInfo_ConsultInfo `protobuf:"bytes,3,opt,name=consult_info,json=consultInfo,proto3" json:"consult_info,omitempty"`     // 咨询信息
}

func (x *IndustryServiceInfo) Reset() {
	*x = IndustryServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndustryServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustryServiceInfo) ProtoMessage() {}

func (x *IndustryServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustryServiceInfo.ProtoReflect.Descriptor instead.
func (*IndustryServiceInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{121}
}

func (x *IndustryServiceInfo) GetEntranceOpen() bool {
	if x != nil {
		return x.EntranceOpen
	}
	return false
}

func (x *IndustryServiceInfo) GetIconImage() *Image {
	if x != nil {
		return x.IconImage
	}
	return nil
}

func (x *IndustryServiceInfo) GetConsultInfo() *IndustryServiceInfo_ConsultInfo {
	if x != nil {
		return x.ConsultInfo
	}
	return nil
}

// EcomData 主消息
type EcomData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveCard      *EcomLiveCard   `protobuf:"bytes,1,opt,name=live_card,json=liveCard,proto3" json:"live_card,omitempty"`                  // 直播卡片
	Pop           *EcomPop        `protobuf:"bytes,2,opt,name=pop,proto3" json:"pop,omitempty"`                                            // 弹窗信息
	GoodsCard     *EcomGoodsCard  `protobuf:"bytes,3,opt,name=goods_card,json=goodsCard,proto3" json:"goods_card,omitempty"`               // 商品卡片
	RedsShowInfos []*RedsShowInfo `protobuf:"bytes,4,rep,name=reds_show_infos,json=redsShowInfos,proto3" json:"reds_show_infos,omitempty"` // 红包展示信息数组
	RoomCartV2    *RoomCartV2     `protobuf:"bytes,5,opt,name=room_cart_v2,json=roomCartV2,proto3" json:"room_cart_v2,omitempty"`          // 房间购物车信息
}

func (x *EcomData) Reset() {
	*x = EcomData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomData) ProtoMessage() {}

func (x *EcomData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomData.ProtoReflect.Descriptor instead.
func (*EcomData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{122}
}

func (x *EcomData) GetLiveCard() *EcomLiveCard {
	if x != nil {
		return x.LiveCard
	}
	return nil
}

func (x *EcomData) GetPop() *EcomPop {
	if x != nil {
		return x.Pop
	}
	return nil
}

func (x *EcomData) GetGoodsCard() *EcomGoodsCard {
	if x != nil {
		return x.GoodsCard
	}
	return nil
}

func (x *EcomData) GetRedsShowInfos() []*RedsShowInfo {
	if x != nil {
		return x.RedsShowInfos
	}
	return nil
}

func (x *EcomData) GetRoomCartV2() *RoomCartV2 {
	if x != nil {
		return x.RoomCartV2
	}
	return nil
}

// EcomLiveCard 消息定义
type EcomLiveCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product  *EcomProduct  `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`   // 产品信息
	Icon     *EcomIcon     `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`         // 图标信息
	Campaign *EcomCampaign `protobuf:"bytes,3,opt,name=campaign,proto3" json:"campaign,omitempty"` // 活动信息
}

func (x *EcomLiveCard) Reset() {
	*x = EcomLiveCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomLiveCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomLiveCard) ProtoMessage() {}

func (x *EcomLiveCard) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomLiveCard.ProtoReflect.Descriptor instead.
func (*EcomLiveCard) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{123}
}

func (x *EcomLiveCard) GetProduct() *EcomProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *EcomLiveCard) GetIcon() *EcomIcon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *EcomLiveCard) GetCampaign() *EcomCampaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

// EcomProduct 消息定义
type EcomProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromotionId  int64      `protobuf:"varint,1,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`    // 促销 ID
	ProductId    int64      `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`          // 产品 ID
	Title        string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                    // 产品标题
	CoverImage   string     `protobuf:"bytes,4,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`        // 产品封面图片 URL
	Price        *EcomPrice `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`                                    // 当前价格
	RegularPrice int64      `protobuf:"varint,6,opt,name=regular_price,json=regularPrice,proto3" json:"regular_price,omitempty"` // 原价
	DepositPrice int64      `protobuf:"varint,7,opt,name=deposit_price,json=depositPrice,proto3" json:"deposit_price,omitempty"` // 定金价格
}

func (x *EcomProduct) Reset() {
	*x = EcomProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomProduct) ProtoMessage() {}

func (x *EcomProduct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomProduct.ProtoReflect.Descriptor instead.
func (*EcomProduct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{124}
}

func (x *EcomProduct) GetPromotionId() int64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *EcomProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *EcomProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EcomProduct) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *EcomProduct) GetPrice() *EcomPrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *EcomProduct) GetRegularPrice() int64 {
	if x != nil {
		return x.RegularPrice
	}
	return 0
}

func (x *EcomProduct) GetDepositPrice() int64 {
	if x != nil {
		return x.DepositPrice
	}
	return 0
}

// EcomPrice 消息定义
type EcomPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix      string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`                              // 价格前缀
	Suffix      string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`                              // 价格后缀
	ByCent      int64  `protobuf:"varint,3,opt,name=by_cent,json=byCent,proto3" json:"by_cent,omitempty"`               // 价格（以分为单位）
	FormatPrice string `protobuf:"bytes,4,opt,name=format_price,json=formatPrice,proto3" json:"format_price,omitempty"` // 格式化价格字符串
}

func (x *EcomPrice) Reset() {
	*x = EcomPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomPrice) ProtoMessage() {}

func (x *EcomPrice) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomPrice.ProtoReflect.Descriptor instead.
func (*EcomPrice) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{125}
}

func (x *EcomPrice) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *EcomPrice) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *EcomPrice) GetByCent() int64 {
	if x != nil {
		return x.ByCent
	}
	return 0
}

func (x *EcomPrice) GetFormatPrice() string {
	if x != nil {
		return x.FormatPrice
	}
	return ""
}

// EcomIcon 消息定义
type EcomIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // 图标 URL
}

func (x *EcomIcon) Reset() {
	*x = EcomIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomIcon) ProtoMessage() {}

func (x *EcomIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomIcon.ProtoReflect.Descriptor instead.
func (*EcomIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{126}
}

func (x *EcomIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// EcomCampaign 消息定义
type EcomCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainingSeconds int64        `protobuf:"varint,1,opt,name=remaining_seconds,json=remainingSeconds,proto3" json:"remaining_seconds,omitempty"` // 剩余时间（秒）
	Auction          *EcomAuction `protobuf:"bytes,2,opt,name=auction,proto3" json:"auction,omitempty"`                                            // 拍卖信息
	Type             int64        `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                 // 活动类型
}

func (x *EcomCampaign) Reset() {
	*x = EcomCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomCampaign) ProtoMessage() {}

func (x *EcomCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomCampaign.ProtoReflect.Descriptor instead.
func (*EcomCampaign) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{127}
}

func (x *EcomCampaign) GetRemainingSeconds() int64 {
	if x != nil {
		return x.RemainingSeconds
	}
	return 0
}

func (x *EcomCampaign) GetAuction() *EcomAuction {
	if x != nil {
		return x.Auction
	}
	return nil
}

func (x *EcomCampaign) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

// EcomAuction 消息定义
type EcomAuction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price       int64       `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`                               // 当前拍卖价格
	PriceLabel  string      `protobuf:"bytes,2,opt,name=price_label,json=priceLabel,proto3" json:"price_label,omitempty"`    // 价格标签
	ButtonLabel string      `protobuf:"bytes,3,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"` // 按钮标签
	User        *EcomBidder `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`                                  // 当前竞标者信息
	Status      int64       `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                             // 拍卖状态
}

func (x *EcomAuction) Reset() {
	*x = EcomAuction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomAuction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomAuction) ProtoMessage() {}

func (x *EcomAuction) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomAuction.ProtoReflect.Descriptor instead.
func (*EcomAuction) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{128}
}

func (x *EcomAuction) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *EcomAuction) GetPriceLabel() string {
	if x != nil {
		return x.PriceLabel
	}
	return ""
}

func (x *EcomAuction) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *EcomAuction) GetUser() *EcomBidder {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EcomAuction) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// EcomBidder 消息定义
type EcomBidder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // 竞标者名称
	Avatar *EcomAvatar `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"` // 竞标者头像
}

func (x *EcomBidder) Reset() {
	*x = EcomBidder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomBidder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomBidder) ProtoMessage() {}

func (x *EcomBidder) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomBidder.ProtoReflect.Descriptor instead.
func (*EcomBidder) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{129}
}

func (x *EcomBidder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcomBidder) GetAvatar() *EcomAvatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

// EcomAvatar 消息定义
type EcomAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 头像 URL
	Width  int64  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 头像宽度
	Height int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 头像高度
}

func (x *EcomAvatar) Reset() {
	*x = EcomAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomAvatar) ProtoMessage() {}

func (x *EcomAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomAvatar.ProtoReflect.Descriptor instead.
func (*EcomAvatar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{130}
}

func (x *EcomAvatar) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EcomAvatar) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *EcomAvatar) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// EcomPop 消息定义
type EcomPop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId    int64      `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`         // 产品 ID
	PromotionId  int64      `protobuf:"varint,2,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`   // 促销 ID
	Title        string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                   // 弹窗标题
	Cover        string     `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`                                   // 弹窗封面图片 URL
	MinPrice     *EcomPrice `protobuf:"bytes,5,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`             // 最低价格
	SellingPoint string     `protobuf:"bytes,6,opt,name=selling_point,json=sellingPoint,proto3" json:"selling_point,omitempty"` // 卖点
	JumanjiJson  string     `protobuf:"bytes,7,opt,name=jumanji_json,json=jumanjiJson,proto3" json:"jumanji_json,omitempty"`    // 扩展信息（JSON 格式）
}

func (x *EcomPop) Reset() {
	*x = EcomPop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomPop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomPop) ProtoMessage() {}

func (x *EcomPop) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomPop.ProtoReflect.Descriptor instead.
func (*EcomPop) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{131}
}

func (x *EcomPop) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *EcomPop) GetPromotionId() int64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *EcomPop) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EcomPop) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *EcomPop) GetMinPrice() *EcomPrice {
	if x != nil {
		return x.MinPrice
	}
	return nil
}

func (x *EcomPop) GetSellingPoint() string {
	if x != nil {
		return x.SellingPoint
	}
	return ""
}

func (x *EcomPop) GetJumanjiJson() string {
	if x != nil {
		return x.JumanjiJson
	}
	return ""
}

// EcomGoodsCard 消息定义
type EcomGoodsCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  string  `protobuf:"bytes,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`    // 商品 ID
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // 商品名称
	ImageUrl string  `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // 商品图片 URL
	Price    float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                     // 商品价格
}

func (x *EcomGoodsCard) Reset() {
	*x = EcomGoodsCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcomGoodsCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcomGoodsCard) ProtoMessage() {}

func (x *EcomGoodsCard) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcomGoodsCard.ProtoReflect.Descriptor instead.
func (*EcomGoodsCard) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{132}
}

func (x *EcomGoodsCard) GetGoodsId() string {
	if x != nil {
		return x.GoodsId
	}
	return ""
}

func (x *EcomGoodsCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcomGoodsCard) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *EcomGoodsCard) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// RedsShowInfo 消息定义
type RedsShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // 红包 ID
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 红包描述
}

func (x *RedsShowInfo) Reset() {
	*x = RedsShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedsShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedsShowInfo) ProtoMessage() {}

func (x *RedsShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedsShowInfo.ProtoReflect.Descriptor instead.
func (*RedsShowInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{133}
}

func (x *RedsShowInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RedsShowInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// RoomCartV2 消息定义
type RoomCartV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CartId      string `protobuf:"bytes,1,opt,name=cart_id,json=cartId,proto3" json:"cart_id,omitempty"` // 购物车 ID
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`     // 购物车描述
}

func (x *RoomCartV2) Reset() {
	*x = RoomCartV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCartV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCartV2) ProtoMessage() {}

func (x *RoomCartV2) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCartV2.ProtoReflect.Descriptor instead.
func (*RoomCartV2) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{134}
}

func (x *RoomCartV2) GetCartId() string {
	if x != nil {
		return x.CartId
	}
	return ""
}

func (x *RoomCartV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// LifeGrouponInfo 消息定义
type LifeGrouponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionStatus            int64  `protobuf:"varint,1,opt,name=permission_status,json=permissionStatus,proto3" json:"permission_status,omitempty"`                                       // 权限状态
	AggCardId                   int64  `protobuf:"varint,2,opt,name=agg_card_id,json=aggCardId,proto3" json:"agg_card_id,omitempty"`                                                          // 聚合卡片 ID
	IconUrl                     string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`                                                                   // 图标 URL
	DynamicUrl                  string `protobuf:"bytes,4,opt,name=dynamic_url,json=dynamicUrl,proto3" json:"dynamic_url,omitempty"`                                                          // 动态 URL
	LifeLivePackComponentConfig string `protobuf:"bytes,5,opt,name=life_live_pack_component_config,json=lifeLivePackComponentConfig,proto3" json:"life_live_pack_component_config,omitempty"` // 生活直播包组件配置
}

func (x *LifeGrouponInfo) Reset() {
	*x = LifeGrouponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeGrouponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeGrouponInfo) ProtoMessage() {}

func (x *LifeGrouponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeGrouponInfo.ProtoReflect.Descriptor instead.
func (*LifeGrouponInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{135}
}

func (x *LifeGrouponInfo) GetPermissionStatus() int64 {
	if x != nil {
		return x.PermissionStatus
	}
	return 0
}

func (x *LifeGrouponInfo) GetAggCardId() int64 {
	if x != nil {
		return x.AggCardId
	}
	return 0
}

func (x *LifeGrouponInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *LifeGrouponInfo) GetDynamicUrl() string {
	if x != nil {
		return x.DynamicUrl
	}
	return ""
}

func (x *LifeGrouponInfo) GetLifeLivePackComponentConfig() string {
	if x != nil {
		return x.LifeLivePackComponentConfig
	}
	return ""
}

// UpperRightWidgetData 消息定义
type UpperRightWidgetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 小部件名称
	WidgetType int32  `protobuf:"varint,2,opt,name=widget_type,json=widgetType,proto3" json:"widget_type,omitempty"` // 小部件类型
	Extra      string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`                              // 额外信息（可选）
	Priority   int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`                       // 显示优先级
}

func (x *UpperRightWidgetData) Reset() {
	*x = UpperRightWidgetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpperRightWidgetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpperRightWidgetData) ProtoMessage() {}

func (x *UpperRightWidgetData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpperRightWidgetData.ProtoReflect.Descriptor instead.
func (*UpperRightWidgetData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{136}
}

func (x *UpperRightWidgetData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpperRightWidgetData) GetWidgetType() int32 {
	if x != nil {
		return x.WidgetType
	}
	return 0
}

func (x *UpperRightWidgetData) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *UpperRightWidgetData) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// LikeDisplayConfig 消息定义
type LikeDisplayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowText    int32  `protobuf:"varint,1,opt,name=show_text,json=showText,proto3" json:"show_text,omitempty"`         // 是否显示文本
	DisplayText string `protobuf:"bytes,2,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"` // 显示的文本内容
}

func (x *LikeDisplayConfig) Reset() {
	*x = LikeDisplayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeDisplayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDisplayConfig) ProtoMessage() {}

func (x *LikeDisplayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDisplayConfig.ProtoReflect.Descriptor instead.
func (*LikeDisplayConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{137}
}

func (x *LikeDisplayConfig) GetShowText() int32 {
	if x != nil {
		return x.ShowText
	}
	return 0
}

func (x *LikeDisplayConfig) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

// WelfareProjectInfo 消息定义
type WelfareProjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId            int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                                     // 项目 ID
	ShowFrequency        int64  `protobuf:"varint,2,opt,name=show_frequency,json=showFrequency,proto3" json:"show_frequency,omitempty"`                         // 展示频率
	ContainerCardUrl     string `protobuf:"bytes,3,opt,name=container_card_url,json=containerCardUrl,proto3" json:"container_card_url,omitempty"`               // 容器卡片 URL
	WelfareDetailPageUrl string `protobuf:"bytes,4,opt,name=welfare_detail_page_url,json=welfareDetailPageUrl,proto3" json:"welfare_detail_page_url,omitempty"` // 福利详情页面 URL
	ProjectIdStr         string `protobuf:"bytes,5,opt,name=project_id_str,json=projectIdStr,proto3" json:"project_id_str,omitempty"`                           // 项目 ID 字符串
}

func (x *WelfareProjectInfo) Reset() {
	*x = WelfareProjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WelfareProjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WelfareProjectInfo) ProtoMessage() {}

func (x *WelfareProjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WelfareProjectInfo.ProtoReflect.Descriptor instead.
func (*WelfareProjectInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{138}
}

func (x *WelfareProjectInfo) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WelfareProjectInfo) GetShowFrequency() int64 {
	if x != nil {
		return x.ShowFrequency
	}
	return 0
}

func (x *WelfareProjectInfo) GetContainerCardUrl() string {
	if x != nil {
		return x.ContainerCardUrl
	}
	return ""
}

func (x *WelfareProjectInfo) GetWelfareDetailPageUrl() string {
	if x != nil {
		return x.WelfareDetailPageUrl
	}
	return ""
}

func (x *WelfareProjectInfo) GetProjectIdStr() string {
	if x != nil {
		return x.ProjectIdStr
	}
	return ""
}

// ActivityData 消息定义
type ActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XgPlay bool           `protobuf:"varint,1,opt,name=xg_play,json=xgPlay,proto3" json:"xg_play,omitempty"` // 是否开启 XG 播放
	Match  *MatchRoomData `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`                  // 匹配房间数据
}

func (x *ActivityData) Reset() {
	*x = ActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityData) ProtoMessage() {}

func (x *ActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityData.ProtoReflect.Descriptor instead.
func (*ActivityData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{139}
}

func (x *ActivityData) GetXgPlay() bool {
	if x != nil {
		return x.XgPlay
	}
	return false
}

func (x *ActivityData) GetMatch() *MatchRoomData {
	if x != nil {
		return x.Match
	}
	return nil
}

// MatchDrawer 消息定义
type MatchDrawer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryName        string `protobuf:"bytes,1,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`                      // 入口名称
	EntryIcon        *Image `protobuf:"bytes,2,opt,name=entry_icon,json=entryIcon,proto3" json:"entry_icon,omitempty"`                      // 入口图标
	DrawerTitle      string `protobuf:"bytes,3,opt,name=drawer_title,json=drawerTitle,proto3" json:"drawer_title,omitempty"`                // 抽屉标题
	DrawerBackground *Image `protobuf:"bytes,4,opt,name=drawer_background,json=drawerBackground,proto3" json:"drawer_background,omitempty"` // 抽屉背景
	ReturnBtnText    string `protobuf:"bytes,5,opt,name=return_btn_text,json=returnBtnText,proto3" json:"return_btn_text,omitempty"`        // 返回按钮文本
	DisplayMode      int32  `protobuf:"varint,6,opt,name=display_mode,json=displayMode,proto3" json:"display_mode,omitempty"`               // 显示模式
}

func (x *MatchDrawer) Reset() {
	*x = MatchDrawer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDrawer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDrawer) ProtoMessage() {}

func (x *MatchDrawer) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDrawer.ProtoReflect.Descriptor instead.
func (*MatchDrawer) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{140}
}

func (x *MatchDrawer) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (x *MatchDrawer) GetEntryIcon() *Image {
	if x != nil {
		return x.EntryIcon
	}
	return nil
}

func (x *MatchDrawer) GetDrawerTitle() string {
	if x != nil {
		return x.DrawerTitle
	}
	return ""
}

func (x *MatchDrawer) GetDrawerBackground() *Image {
	if x != nil {
		return x.DrawerBackground
	}
	return nil
}

func (x *MatchDrawer) GetReturnBtnText() string {
	if x != nil {
		return x.ReturnBtnText
	}
	return ""
}

func (x *MatchDrawer) GetDisplayMode() int32 {
	if x != nil {
		return x.DisplayMode
	}
	return 0
}

// MatchRoomData 消息定义
type MatchRoomData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawer              *MatchDrawer      `protobuf:"bytes,1,opt,name=drawer,proto3" json:"drawer,omitempty"`                                                        // 抽屉信息
	Match               *ToutiaoMatchData `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`                                                          // 头条匹配数据
	DrawerLabel         *Image            `protobuf:"bytes,3,opt,name=drawer_label,json=drawerLabel,proto3" json:"drawer_label,omitempty"`                           // 抽屉标签
	PcuStr              string            `protobuf:"bytes,4,opt,name=pcu_str,json=pcuStr,proto3" json:"pcu_str,omitempty"`                                          // PCU 字符串
	DrawerOfficialLabel *Image            `protobuf:"bytes,5,opt,name=drawer_official_label,json=drawerOfficialLabel,proto3" json:"drawer_official_label,omitempty"` // 抽屉官方标签
	MatchBackground     *Image            `protobuf:"bytes,6,opt,name=match_background,json=matchBackground,proto3" json:"match_background,omitempty"`               // 匹配背景
	MatchUserInfo       *MatchUserInfo    `protobuf:"bytes,7,opt,name=match_user_info,json=matchUserInfo,proto3" json:"match_user_info,omitempty"`                   // 匹配用户信息
}

func (x *MatchRoomData) Reset() {
	*x = MatchRoomData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomData) ProtoMessage() {}

func (x *MatchRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomData.ProtoReflect.Descriptor instead.
func (*MatchRoomData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{141}
}

func (x *MatchRoomData) GetDrawer() *MatchDrawer {
	if x != nil {
		return x.Drawer
	}
	return nil
}

func (x *MatchRoomData) GetMatch() *ToutiaoMatchData {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *MatchRoomData) GetDrawerLabel() *Image {
	if x != nil {
		return x.DrawerLabel
	}
	return nil
}

func (x *MatchRoomData) GetPcuStr() string {
	if x != nil {
		return x.PcuStr
	}
	return ""
}

func (x *MatchRoomData) GetDrawerOfficialLabel() *Image {
	if x != nil {
		return x.DrawerOfficialLabel
	}
	return nil
}

func (x *MatchRoomData) GetMatchBackground() *Image {
	if x != nil {
		return x.MatchBackground
	}
	return nil
}

func (x *MatchRoomData) GetMatchUserInfo() *MatchUserInfo {
	if x != nil {
		return x.MatchUserInfo
	}
	return nil
}

// TeamInfo 消息定义
type TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         int64  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                        // 团队 ID
	TeamName       string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`                   // 团队名称
	SchemaUrl      string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`                // 团队 Schema URL
	TeamIcon       *Image `protobuf:"bytes,4,opt,name=team_icon,json=teamIcon,proto3" json:"team_icon,omitempty"`                   // 团队图标
	TeamBadge      *Image `protobuf:"bytes,5,opt,name=team_badge,json=teamBadge,proto3" json:"team_badge,omitempty"`                // 团队徽章
	TeamBackground *Image `protobuf:"bytes,6,opt,name=team_background,json=teamBackground,proto3" json:"team_background,omitempty"` // 团队背景
	SystemMsg      string `protobuf:"bytes,7,opt,name=system_msg,json=systemMsg,proto3" json:"system_msg,omitempty"`                // 系统消息
	TeamIdStr      string `protobuf:"bytes,8,opt,name=team_id_str,json=teamIdStr,proto3" json:"team_id_str,omitempty"`              // 团队 ID 字符串
	TeamAvatarBox  *Image `protobuf:"bytes,9,opt,name=team_avatar_box,json=teamAvatarBox,proto3" json:"team_avatar_box,omitempty"`  // 团队头像框
}

func (x *TeamInfo) Reset() {
	*x = TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfo) ProtoMessage() {}

func (x *TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfo.ProtoReflect.Descriptor instead.
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{142}
}

func (x *TeamInfo) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamInfo) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamInfo) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *TeamInfo) GetTeamIcon() *Image {
	if x != nil {
		return x.TeamIcon
	}
	return nil
}

func (x *TeamInfo) GetTeamBadge() *Image {
	if x != nil {
		return x.TeamBadge
	}
	return nil
}

func (x *TeamInfo) GetTeamBackground() *Image {
	if x != nil {
		return x.TeamBackground
	}
	return nil
}

func (x *TeamInfo) GetSystemMsg() string {
	if x != nil {
		return x.SystemMsg
	}
	return ""
}

func (x *TeamInfo) GetTeamIdStr() string {
	if x != nil {
		return x.TeamIdStr
	}
	return ""
}

func (x *TeamInfo) GetTeamAvatarBox() *Image {
	if x != nil {
		return x.TeamAvatarBox
	}
	return nil
}

// MatchUserInfo 消息定义
type MatchUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTeamInfo      *TeamInfo       `protobuf:"bytes,1,opt,name=user_team_info,json=userTeamInfo,proto3" json:"user_team_info,omitempty"`                                                                                           // 用户团队信息
	UserQuizInfo      map[int64]int64 `protobuf:"bytes,2,rep,name=user_quiz_info,json=userQuizInfo,proto3" json:"user_quiz_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 用户竞猜信息
	IsActivityAccount bool            `protobuf:"varint,3,opt,name=is_activity_account,json=isActivityAccount,proto3" json:"is_activity_account,omitempty"`                                                                           // 是否为活动账户
	NeedRetry         bool            `protobuf:"varint,4,opt,name=need_retry,json=needRetry,proto3" json:"need_retry,omitempty"`                                                                                                     // 是否需要重试
}

func (x *MatchUserInfo) Reset() {
	*x = MatchUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchUserInfo) ProtoMessage() {}

func (x *MatchUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchUserInfo.ProtoReflect.Descriptor instead.
func (*MatchUserInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{143}
}

func (x *MatchUserInfo) GetUserTeamInfo() *TeamInfo {
	if x != nil {
		return x.UserTeamInfo
	}
	return nil
}

func (x *MatchUserInfo) GetUserQuizInfo() map[int64]int64 {
	if x != nil {
		return x.UserQuizInfo
	}
	return nil
}

func (x *MatchUserInfo) GetIsActivityAccount() bool {
	if x != nil {
		return x.IsActivityAccount
	}
	return false
}

func (x *MatchUserInfo) GetNeedRetry() bool {
	if x != nil {
		return x.NeedRetry
	}
	return false
}

// TeamStats 消息定义
type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId            int64   `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                                      // 团队 ID
	Possession        float64 `protobuf:"fixed64,2,opt,name=possession,proto3" json:"possession,omitempty"`                                           // 控球率
	ShotOn            float64 `protobuf:"fixed64,3,opt,name=shot_on,json=shotOn,proto3" json:"shot_on,omitempty"`                                     // 射正次数
	ShotOff           float64 `protobuf:"fixed64,4,opt,name=shot_off,json=shotOff,proto3" json:"shot_off,omitempty"`                                  // 射偏次数
	FreeKick          float64 `protobuf:"fixed64,5,opt,name=free_kick,json=freeKick,proto3" json:"free_kick,omitempty"`                               // 任意球次数
	Corner            float64 `protobuf:"fixed64,6,opt,name=corner,proto3" json:"corner,omitempty"`                                                   // 角球次数
	Counter           float64 `protobuf:"fixed64,7,opt,name=counter,proto3" json:"counter,omitempty"`                                                 // 反击次数
	Saves             float64 `protobuf:"fixed64,8,opt,name=saves,proto3" json:"saves,omitempty"`                                                     // 扑救次数
	Offside           float64 `protobuf:"fixed64,9,opt,name=offside,proto3" json:"offside,omitempty"`                                                 // 越位次数
	FoulCommit        float64 `protobuf:"fixed64,10,opt,name=foul_commit,json=foulCommit,proto3" json:"foul_commit,omitempty"`                        // 犯规次数
	YellowCards       float64 `protobuf:"fixed64,11,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`                     // 黄牌数
	RedCards          float64 `protobuf:"fixed64,12,opt,name=redCards,proto3" json:"redCards,omitempty"`                                              // 红牌数
	Pass              float64 `protobuf:"fixed64,13,opt,name=pass,proto3" json:"pass,omitempty"`                                                      // 传球次数
	KeyPass           float64 `protobuf:"fixed64,14,opt,name=key_pass,json=keyPass,proto3" json:"key_pass,omitempty"`                                 // 关键传球次数
	PassesCompleted   float64 `protobuf:"fixed64,15,opt,name=passes_completed,json=passesCompleted,proto3" json:"passes_completed,omitempty"`         // 完成传球次数
	Steal             float64 `protobuf:"fixed64,16,opt,name=steal,proto3" json:"steal,omitempty"`                                                    // 抢断次数
	Intercept         float64 `protobuf:"fixed64,17,opt,name=intercept,proto3" json:"intercept,omitempty"`                                            // 拦截次数
	Shots             float64 `protobuf:"fixed64,18,opt,name=shots,proto3" json:"shots,omitempty"`                                                    // 射门次数
	PossessionFiveMin float64 `protobuf:"fixed64,19,opt,name=possession_five_min,json=possessionFiveMin,proto3" json:"possession_five_min,omitempty"` // 五分钟控球率
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{144}
}

func (x *TeamStats) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamStats) GetPossession() float64 {
	if x != nil {
		return x.Possession
	}
	return 0
}

func (x *TeamStats) GetShotOn() float64 {
	if x != nil {
		return x.ShotOn
	}
	return 0
}

func (x *TeamStats) GetShotOff() float64 {
	if x != nil {
		return x.ShotOff
	}
	return 0
}

func (x *TeamStats) GetFreeKick() float64 {
	if x != nil {
		return x.FreeKick
	}
	return 0
}

func (x *TeamStats) GetCorner() float64 {
	if x != nil {
		return x.Corner
	}
	return 0
}

func (x *TeamStats) GetCounter() float64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *TeamStats) GetSaves() float64 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *TeamStats) GetOffside() float64 {
	if x != nil {
		return x.Offside
	}
	return 0
}

func (x *TeamStats) GetFoulCommit() float64 {
	if x != nil {
		return x.FoulCommit
	}
	return 0
}

func (x *TeamStats) GetYellowCards() float64 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *TeamStats) GetRedCards() float64 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *TeamStats) GetPass() float64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *TeamStats) GetKeyPass() float64 {
	if x != nil {
		return x.KeyPass
	}
	return 0
}

func (x *TeamStats) GetPassesCompleted() float64 {
	if x != nil {
		return x.PassesCompleted
	}
	return 0
}

func (x *TeamStats) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *TeamStats) GetIntercept() float64 {
	if x != nil {
		return x.Intercept
	}
	return 0
}

func (x *TeamStats) GetShots() float64 {
	if x != nil {
		return x.Shots
	}
	return 0
}

func (x *TeamStats) GetPossessionFiveMin() float64 {
	if x != nil {
		return x.PossessionFiveMin
	}
	return 0
}

// PlayerStats 消息定义
type PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        int64   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                        // 球员 ID
	TeamId          int64   `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                              // 团队 ID
	MinutesPlayed   float64 `protobuf:"fixed64,3,opt,name=minutes_played,json=minutesPlayed,proto3" json:"minutes_played,omitempty"`        // 上场时间（分钟）
	Goals           float64 `protobuf:"fixed64,4,opt,name=goals,proto3" json:"goals,omitempty"`                                             // 进球数
	Assists         float64 `protobuf:"fixed64,5,opt,name=assists,proto3" json:"assists,omitempty"`                                         // 助攻数
	Shots           float64 `protobuf:"fixed64,6,opt,name=shots,proto3" json:"shots,omitempty"`                                             // 射门次数
	ShotsOn         float64 `protobuf:"fixed64,7,opt,name=shots_on,json=shotsOn,proto3" json:"shots_on,omitempty"`                          // 射正次数
	YCards          float64 `protobuf:"fixed64,8,opt,name=y_cards,json=yCards,proto3" json:"y_cards,omitempty"`                             // 黄牌数
	RCards          float64 `protobuf:"fixed64,9,opt,name=r_cards,json=rCards,proto3" json:"r_cards,omitempty"`                             // 红牌数
	Offsides        float64 `protobuf:"fixed64,10,opt,name=offsides,proto3" json:"offsides,omitempty"`                                      // 越位次数
	FoulsCommitted  float64 `protobuf:"fixed64,11,opt,name=fouls_committed,json=foulsCommitted,proto3" json:"fouls_committed,omitempty"`    // 犯规次数
	OwnGoals        float64 `protobuf:"fixed64,12,opt,name=own_goals,json=ownGoals,proto3" json:"own_goals,omitempty"`                      // 乌龙球数
	Saves           float64 `protobuf:"fixed64,13,opt,name=saves,proto3" json:"saves,omitempty"`                                            // 扑救次数
	CaughtBall      float64 `protobuf:"fixed64,14,opt,name=caught_ball,json=caughtBall,proto3" json:"caught_ball,omitempty"`                // 接住球次数
	CleanSheets     float64 `protobuf:"fixed64,15,opt,name=clean_sheets,json=cleanSheets,proto3" json:"clean_sheets,omitempty"`             // 零封场次
	Pass            float64 `protobuf:"fixed64,16,opt,name=pass,proto3" json:"pass,omitempty"`                                              // 传球次数
	KeyPass         float64 `protobuf:"fixed64,17,opt,name=key_pass,json=keyPass,proto3" json:"key_pass,omitempty"`                         // 关键传球次数
	PassesCompleted float64 `protobuf:"fixed64,18,opt,name=passes_completed,json=passesCompleted,proto3" json:"passes_completed,omitempty"` // 完成传球次数
	Steal           float64 `protobuf:"fixed64,19,opt,name=steal,proto3" json:"steal,omitempty"`                                            // 抢断次数
	Intercept       float64 `protobuf:"fixed64,20,opt,name=intercept,proto3" json:"intercept,omitempty"`                                    // 拦截次数
	Clearances      float64 `protobuf:"fixed64,21,opt,name=clearances,proto3" json:"clearances,omitempty"`                                  // 解围次数
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{145}
}

func (x *PlayerStats) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerStats) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *PlayerStats) GetMinutesPlayed() float64 {
	if x != nil {
		return x.MinutesPlayed
	}
	return 0
}

func (x *PlayerStats) GetGoals() float64 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *PlayerStats) GetAssists() float64 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *PlayerStats) GetShots() float64 {
	if x != nil {
		return x.Shots
	}
	return 0
}

func (x *PlayerStats) GetShotsOn() float64 {
	if x != nil {
		return x.ShotsOn
	}
	return 0
}

func (x *PlayerStats) GetYCards() float64 {
	if x != nil {
		return x.YCards
	}
	return 0
}

func (x *PlayerStats) GetRCards() float64 {
	if x != nil {
		return x.RCards
	}
	return 0
}

func (x *PlayerStats) GetOffsides() float64 {
	if x != nil {
		return x.Offsides
	}
	return 0
}

func (x *PlayerStats) GetFoulsCommitted() float64 {
	if x != nil {
		return x.FoulsCommitted
	}
	return 0
}

func (x *PlayerStats) GetOwnGoals() float64 {
	if x != nil {
		return x.OwnGoals
	}
	return 0
}

func (x *PlayerStats) GetSaves() float64 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *PlayerStats) GetCaughtBall() float64 {
	if x != nil {
		return x.CaughtBall
	}
	return 0
}

func (x *PlayerStats) GetCleanSheets() float64 {
	if x != nil {
		return x.CleanSheets
	}
	return 0
}

func (x *PlayerStats) GetPass() float64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *PlayerStats) GetKeyPass() float64 {
	if x != nil {
		return x.KeyPass
	}
	return 0
}

func (x *PlayerStats) GetPassesCompleted() float64 {
	if x != nil {
		return x.PassesCompleted
	}
	return 0
}

func (x *PlayerStats) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *PlayerStats) GetIntercept() float64 {
	if x != nil {
		return x.Intercept
	}
	return 0
}

func (x *PlayerStats) GetClearances() float64 {
	if x != nil {
		return x.Clearances
	}
	return 0
}

// ToutiaoMatchData 消息定义
type ToutiaoMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            int64          `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                     // 比赛 ID
	MatchTitle         string         `protobuf:"bytes,2,opt,name=match_title,json=matchTitle,proto3" json:"match_title,omitempty"`                             // 比赛标题
	Against            *Against       `protobuf:"bytes,3,opt,name=against,proto3" json:"against,omitempty"`                                                     // 对阵信息
	StartedTime        string         `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`                          // 开始时间（字符串格式）
	City               string         `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                           // 城市
	VenueName          string         `protobuf:"bytes,6,opt,name=venue_name,json=venueName,proto3" json:"venue_name,omitempty"`                                // 场馆名称
	Referee            string         `protobuf:"bytes,7,opt,name=referee,proto3" json:"referee,omitempty"`                                                     // 裁判
	TeamStats          *TeamStats     `protobuf:"bytes,8,opt,name=team_stats,json=teamStats,proto3" json:"team_stats,omitempty"`                                // 团队统计
	PlayerStats        []*PlayerStats `protobuf:"bytes,9,rep,name=player_stats,json=playerStats,proto3" json:"player_stats,omitempty"`                          // 球员统计列表
	MatchGroup         string         `protobuf:"bytes,10,opt,name=match_group,json=matchGroup,proto3" json:"match_group,omitempty"`                            // 比赛组
	MatchRound         string         `protobuf:"bytes,11,opt,name=match_round,json=matchRound,proto3" json:"match_round,omitempty"`                            // 比赛轮次
	MatchPhaseName     string         `protobuf:"bytes,12,opt,name=match_phase_name,json=matchPhaseName,proto3" json:"match_phase_name,omitempty"`              // 比赛阶段名称
	CanSubscribe       bool           `protobuf:"varint,13,opt,name=can_subscribe,json=canSubscribe,proto3" json:"can_subscribe,omitempty"`                     // 是否可订阅
	DisplayStatus      int32          `protobuf:"varint,14,opt,name=display_status,json=displayStatus,proto3" json:"display_status,omitempty"`                  // 显示状态
	BjtFormat          string         `protobuf:"bytes,15,opt,name=bjt_format,json=bjtFormat,proto3" json:"bjt_format,omitempty"`                               // 北京时间格式
	LocalTimeFormat    string         `protobuf:"bytes,16,opt,name=local_time_format,json=localTimeFormat,proto3" json:"local_time_format,omitempty"`           // 本地时间格式
	LiveStatus         int32          `protobuf:"varint,17,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                           // 直播状态
	MatchStatus        int32          `protobuf:"varint,18,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`                        // 比赛状态
	MatchIdStr         string         `protobuf:"bytes,19,opt,name=match_id_str,json=matchIdStr,proto3" json:"match_id_str,omitempty"`                          // 比赛 ID 字符串
	StartedTimeUnix    int64          `protobuf:"varint,20,opt,name=started_time_unix,json=startedTimeUnix,proto3" json:"started_time_unix,omitempty"`          // 开始时间（Unix 时间戳）
	LeftScoreAddition  int32          `protobuf:"varint,21,opt,name=left_score_addition,json=leftScoreAddition,proto3" json:"left_score_addition,omitempty"`    // 左侧得分附加
	RightScoreAddition int32          `protobuf:"varint,22,opt,name=right_score_addition,json=rightScoreAddition,proto3" json:"right_score_addition,omitempty"` // 右侧得分附加
	Duration           string         `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                  // 持续时间
	EventIds           []int64        `protobuf:"varint,24,rep,packed,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`                          // 事件 ID 列表
	WinnerId           int64          `protobuf:"varint,25,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`                                 // 胜者 ID
	WinnerIdStr        string         `protobuf:"bytes,26,opt,name=winner_id_str,json=winnerIdStr,proto3" json:"winner_id_str,omitempty"`                       // 胜者 ID 字符串
	WinnerIcon         *Image         `protobuf:"bytes,27,opt,name=winner_icon,json=winnerIcon,proto3" json:"winner_icon,omitempty"`                            // 胜者图标
	EventName          string         `protobuf:"bytes,28,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`                               // 事件名称
	BoNum              string         `protobuf:"bytes,29,opt,name=bo_num,json=boNum,proto3" json:"bo_num,omitempty"`                                           // BO 数量
}

func (x *ToutiaoMatchData) Reset() {
	*x = ToutiaoMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToutiaoMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToutiaoMatchData) ProtoMessage() {}

func (x *ToutiaoMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToutiaoMatchData.ProtoReflect.Descriptor instead.
func (*ToutiaoMatchData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{146}
}

func (x *ToutiaoMatchData) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *ToutiaoMatchData) GetMatchTitle() string {
	if x != nil {
		return x.MatchTitle
	}
	return ""
}

func (x *ToutiaoMatchData) GetAgainst() *Against {
	if x != nil {
		return x.Against
	}
	return nil
}

func (x *ToutiaoMatchData) GetStartedTime() string {
	if x != nil {
		return x.StartedTime
	}
	return ""
}

func (x *ToutiaoMatchData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ToutiaoMatchData) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *ToutiaoMatchData) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *ToutiaoMatchData) GetTeamStats() *TeamStats {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

func (x *ToutiaoMatchData) GetPlayerStats() []*PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *ToutiaoMatchData) GetMatchGroup() string {
	if x != nil {
		return x.MatchGroup
	}
	return ""
}

func (x *ToutiaoMatchData) GetMatchRound() string {
	if x != nil {
		return x.MatchRound
	}
	return ""
}

func (x *ToutiaoMatchData) GetMatchPhaseName() string {
	if x != nil {
		return x.MatchPhaseName
	}
	return ""
}

func (x *ToutiaoMatchData) GetCanSubscribe() bool {
	if x != nil {
		return x.CanSubscribe
	}
	return false
}

func (x *ToutiaoMatchData) GetDisplayStatus() int32 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *ToutiaoMatchData) GetBjtFormat() string {
	if x != nil {
		return x.BjtFormat
	}
	return ""
}

func (x *ToutiaoMatchData) GetLocalTimeFormat() string {
	if x != nil {
		return x.LocalTimeFormat
	}
	return ""
}

func (x *ToutiaoMatchData) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *ToutiaoMatchData) GetMatchStatus() int32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *ToutiaoMatchData) GetMatchIdStr() string {
	if x != nil {
		return x.MatchIdStr
	}
	return ""
}

func (x *ToutiaoMatchData) GetStartedTimeUnix() int64 {
	if x != nil {
		return x.StartedTimeUnix
	}
	return 0
}

func (x *ToutiaoMatchData) GetLeftScoreAddition() int32 {
	if x != nil {
		return x.LeftScoreAddition
	}
	return 0
}

func (x *ToutiaoMatchData) GetRightScoreAddition() int32 {
	if x != nil {
		return x.RightScoreAddition
	}
	return 0
}

func (x *ToutiaoMatchData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *ToutiaoMatchData) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *ToutiaoMatchData) GetWinnerId() int64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *ToutiaoMatchData) GetWinnerIdStr() string {
	if x != nil {
		return x.WinnerIdStr
	}
	return ""
}

func (x *ToutiaoMatchData) GetWinnerIcon() *Image {
	if x != nil {
		return x.WinnerIcon
	}
	return nil
}

func (x *ToutiaoMatchData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ToutiaoMatchData) GetBoNum() string {
	if x != nil {
		return x.BoNum
	}
	return ""
}

// OfficialChannelExtraInfo 消息定义
type OfficialChannelExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowStartTs    int64  `protobuf:"varint,1,opt,name=show_start_ts,json=showStartTs,proto3" json:"show_start_ts,omitempty"`       // 节目开始时间戳
	ShowlistSchema string `protobuf:"bytes,2,opt,name=showlist_schema,json=showlistSchema,proto3" json:"showlist_schema,omitempty"` // 节目单 Schema
	ShowlistId     int64  `protobuf:"varint,3,opt,name=showlist_id,json=showlistId,proto3" json:"showlist_id,omitempty"`            // 节目单 ID
	ShowlistName   string `protobuf:"bytes,4,opt,name=showlist_name,json=showlistName,proto3" json:"showlist_name,omitempty"`       // 节目单名称
}

func (x *OfficialChannelExtraInfo) Reset() {
	*x = OfficialChannelExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialChannelExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialChannelExtraInfo) ProtoMessage() {}

func (x *OfficialChannelExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialChannelExtraInfo.ProtoReflect.Descriptor instead.
func (*OfficialChannelExtraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{147}
}

func (x *OfficialChannelExtraInfo) GetShowStartTs() int64 {
	if x != nil {
		return x.ShowStartTs
	}
	return 0
}

func (x *OfficialChannelExtraInfo) GetShowlistSchema() string {
	if x != nil {
		return x.ShowlistSchema
	}
	return ""
}

func (x *OfficialChannelExtraInfo) GetShowlistId() int64 {
	if x != nil {
		return x.ShowlistId
	}
	return 0
}

func (x *OfficialChannelExtraInfo) GetShowlistName() string {
	if x != nil {
		return x.ShowlistName
	}
	return ""
}

// PackMetaInfo 消息定义
type PackMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene   string            `protobuf:"bytes,1,opt,name=scene,proto3" json:"scene,omitempty"`                                                                                           // 场景
	Env     string            `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                                                                                               // 环境
	Dc      string            `protobuf:"bytes,3,opt,name=dc,proto3" json:"dc,omitempty"`                                                                                                 // 数据中心
	TraceId string            `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                                                                        // 跟踪 ID
	Cluster string            `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`                                                                                       // 集群信息
	Extras  map[string]string `protobuf:"bytes,6,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息映射
}

func (x *PackMetaInfo) Reset() {
	*x = PackMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackMetaInfo) ProtoMessage() {}

func (x *PackMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackMetaInfo.ProtoReflect.Descriptor instead.
func (*PackMetaInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{148}
}

func (x *PackMetaInfo) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *PackMetaInfo) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *PackMetaInfo) GetDc() string {
	if x != nil {
		return x.Dc
	}
	return ""
}

func (x *PackMetaInfo) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *PackMetaInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PackMetaInfo) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

// InteractOpenExtra 消息定义
type InteractOpenExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugInfo map[string]string `protobuf:"bytes,1,rep,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 调试信息映射
}

func (x *InteractOpenExtra) Reset() {
	*x = InteractOpenExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractOpenExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractOpenExtra) ProtoMessage() {}

func (x *InteractOpenExtra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractOpenExtra.ProtoReflect.Descriptor instead.
func (*InteractOpenExtra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{149}
}

func (x *InteractOpenExtra) GetDebugInfo() map[string]string {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

// PreviewExposeData 消息定义
type PreviewExposeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style                    int32                                       `protobuf:"varint,1,opt,name=style,proto3" json:"style,omitempty"`                                                                           // 样式
	PreviewGuide             *PreviewExposeData_PreviewGuide             `protobuf:"bytes,2,opt,name=preview_guide,json=previewGuide,proto3" json:"preview_guide,omitempty"`                                          // 预览指南
	Metas                    []*PreviewExposeData_Meta                   `protobuf:"bytes,3,rep,name=metas,proto3" json:"metas,omitempty"`                                                                            // 元数据列表
	ChatMsgs                 []*PreviewExposeData_ChatMessage            `protobuf:"bytes,4,rep,name=chat_msgs,json=chatMsgs,proto3" json:"chat_msgs,omitempty"`                                                      // 聊天消息列表
	ForceInsertion           []*PreviewExposeData_Meta                   `protobuf:"bytes,5,rep,name=force_insertion,json=forceInsertion,proto3" json:"force_insertion,omitempty"`                                    // 强制插入的元数据
	ScrollAfterMs            int32                                       `protobuf:"varint,6,opt,name=scroll_after_ms,json=scrollAfterMs,proto3" json:"scroll_after_ms,omitempty"`                                    // 滚动延迟（毫秒）
	NeedRealtime             bool                                        `protobuf:"varint,7,opt,name=need_realtime,json=needRealtime,proto3" json:"need_realtime,omitempty"`                                         // 是否需要实时
	MessageScrollAfterMs     int32                                       `protobuf:"varint,8,opt,name=message_scroll_after_ms,json=messageScrollAfterMs,proto3" json:"message_scroll_after_ms,omitempty"`             // 消息滚动延迟（毫秒）
	MessageScrollIntervalMs  int32                                       `protobuf:"varint,9,opt,name=message_scroll_interval_ms,json=messageScrollIntervalMs,proto3" json:"message_scroll_interval_ms,omitempty"`    // 消息滚动间隔（毫秒）
	PreviewIntro             string                                      `protobuf:"bytes,10,opt,name=preview_intro,json=previewIntro,proto3" json:"preview_intro,omitempty"`                                         // 预览介绍
	PreviewExtendArea        *PreviewExposeData_PreviewExtendArea        `protobuf:"bytes,11,opt,name=preview_extend_area,json=previewExtendArea,proto3" json:"preview_extend_area,omitempty"`                        // 预览扩展区域
	ShowUvPv                 int32                                       `protobuf:"varint,12,opt,name=show_uv_pv,json=showUvPv,proto3" json:"show_uv_pv,omitempty"`                                                  // 显示 UV/PV
	ShowNameAbbreviation     int32                                       `protobuf:"varint,13,opt,name=show_name_abbreviation,json=showNameAbbreviation,proto3" json:"show_name_abbreviation,omitempty"`              // 显示名称缩写
	Switch                   *PreviewExposeData_PreviewSwitch            `protobuf:"bytes,14,opt,name=switch,proto3" json:"switch,omitempty"`                                                                         // 预览开关
	IsPreviewUseWebsocket    int32                                       `protobuf:"varint,15,opt,name=is_preview_use_websocket,json=isPreviewUseWebsocket,proto3" json:"is_preview_use_websocket,omitempty"`         // 是否使用 WebSocket 进行预览
	IsAwemeVideoFeed         bool                                        `protobuf:"varint,16,opt,name=is_aweme_video_feed,json=isAwemeVideoFeed,proto3" json:"is_aweme_video_feed,omitempty"`                        // 是否是 Aweme 视频流
	ShowPreviewCards         bool                                        `protobuf:"varint,17,opt,name=show_preview_cards,json=showPreviewCards,proto3" json:"show_preview_cards,omitempty"`                          // 是否显示预览卡片
	PreviewPromotion         *PreviewExposeData_PreviewPromotion         `protobuf:"bytes,18,opt,name=preview_promotion,json=previewPromotion,proto3" json:"preview_promotion,omitempty"`                             // 预览推广
	PreviewImExtend          *PreviewExposeData_PreviewIMExtend          `protobuf:"bytes,19,opt,name=preview_im_extend,json=previewImExtend,proto3" json:"preview_im_extend,omitempty"`                              // 预览 IM 扩展
	EtData                   []*PreviewExposeData_EtData                 `protobuf:"bytes,20,rep,name=et_data,json=etData,proto3" json:"et_data,omitempty"`                                                           // ET 数据
	AliveChecker             int32                                       `protobuf:"varint,21,opt,name=alive_checker,json=aliveChecker,proto3" json:"alive_checker,omitempty"`                                        // 活跃检查器
	EnterPublicAreaAnimation *PreviewExposeData_EnterPublicAreaAnimation `protobuf:"bytes,22,opt,name=enter_public_area_animation,json=enterPublicAreaAnimation,proto3" json:"enter_public_area_animation,omitempty"` // 进入公共区域动画
	PreviewPromotionSyncData *PreviewExposeData_PreviewPromotionSyncData `protobuf:"bytes,23,opt,name=preview_promotion_sync_data,json=previewPromotionSyncData,proto3" json:"preview_promotion_sync_data,omitempty"` // 预览推广同步数据
	GrowthTask               *PreviewExposeData_GrowthTask               `protobuf:"bytes,24,opt,name=growth_task,json=growthTask,proto3" json:"growth_task,omitempty"`                                               // 成长任务
	PreviewExitGuide         *PreviewExposeData_PreviewExitGuide         `protobuf:"bytes,25,opt,name=preview_exit_guide,json=previewExitGuide,proto3" json:"preview_exit_guide,omitempty"`                           // 预览退出指南
	PreviewExitGuideList     []*PreviewExposeData_PreviewExitGuide       `protobuf:"bytes,26,rep,name=preview_exit_guide_list,json=previewExitGuideList,proto3" json:"preview_exit_guide_list,omitempty"`             // 预览退出指南列表
	ClientComponent          *PreviewExposeData_ClientComponent          `protobuf:"bytes,27,opt,name=client_component,json=clientComponent,proto3" json:"client_component,omitempty"`                                // 客户端组件
	IosClientComponent       *PreviewExposeData_IOSClientComponent       `protobuf:"bytes,28,opt,name=ios_client_component,json=iosClientComponent,proto3" json:"ios_client_component,omitempty"`                     // iOS 客户端组件
}

func (x *PreviewExposeData) Reset() {
	*x = PreviewExposeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData) ProtoMessage() {}

func (x *PreviewExposeData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData.ProtoReflect.Descriptor instead.
func (*PreviewExposeData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150}
}

func (x *PreviewExposeData) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *PreviewExposeData) GetPreviewGuide() *PreviewExposeData_PreviewGuide {
	if x != nil {
		return x.PreviewGuide
	}
	return nil
}

func (x *PreviewExposeData) GetMetas() []*PreviewExposeData_Meta {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *PreviewExposeData) GetChatMsgs() []*PreviewExposeData_ChatMessage {
	if x != nil {
		return x.ChatMsgs
	}
	return nil
}

func (x *PreviewExposeData) GetForceInsertion() []*PreviewExposeData_Meta {
	if x != nil {
		return x.ForceInsertion
	}
	return nil
}

func (x *PreviewExposeData) GetScrollAfterMs() int32 {
	if x != nil {
		return x.ScrollAfterMs
	}
	return 0
}

func (x *PreviewExposeData) GetNeedRealtime() bool {
	if x != nil {
		return x.NeedRealtime
	}
	return false
}

func (x *PreviewExposeData) GetMessageScrollAfterMs() int32 {
	if x != nil {
		return x.MessageScrollAfterMs
	}
	return 0
}

func (x *PreviewExposeData) GetMessageScrollIntervalMs() int32 {
	if x != nil {
		return x.MessageScrollIntervalMs
	}
	return 0
}

func (x *PreviewExposeData) GetPreviewIntro() string {
	if x != nil {
		return x.PreviewIntro
	}
	return ""
}

func (x *PreviewExposeData) GetPreviewExtendArea() *PreviewExposeData_PreviewExtendArea {
	if x != nil {
		return x.PreviewExtendArea
	}
	return nil
}

func (x *PreviewExposeData) GetShowUvPv() int32 {
	if x != nil {
		return x.ShowUvPv
	}
	return 0
}

func (x *PreviewExposeData) GetShowNameAbbreviation() int32 {
	if x != nil {
		return x.ShowNameAbbreviation
	}
	return 0
}

func (x *PreviewExposeData) GetSwitch() *PreviewExposeData_PreviewSwitch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *PreviewExposeData) GetIsPreviewUseWebsocket() int32 {
	if x != nil {
		return x.IsPreviewUseWebsocket
	}
	return 0
}

func (x *PreviewExposeData) GetIsAwemeVideoFeed() bool {
	if x != nil {
		return x.IsAwemeVideoFeed
	}
	return false
}

func (x *PreviewExposeData) GetShowPreviewCards() bool {
	if x != nil {
		return x.ShowPreviewCards
	}
	return false
}

func (x *PreviewExposeData) GetPreviewPromotion() *PreviewExposeData_PreviewPromotion {
	if x != nil {
		return x.PreviewPromotion
	}
	return nil
}

func (x *PreviewExposeData) GetPreviewImExtend() *PreviewExposeData_PreviewIMExtend {
	if x != nil {
		return x.PreviewImExtend
	}
	return nil
}

func (x *PreviewExposeData) GetEtData() []*PreviewExposeData_EtData {
	if x != nil {
		return x.EtData
	}
	return nil
}

func (x *PreviewExposeData) GetAliveChecker() int32 {
	if x != nil {
		return x.AliveChecker
	}
	return 0
}

func (x *PreviewExposeData) GetEnterPublicAreaAnimation() *PreviewExposeData_EnterPublicAreaAnimation {
	if x != nil {
		return x.EnterPublicAreaAnimation
	}
	return nil
}

func (x *PreviewExposeData) GetPreviewPromotionSyncData() *PreviewExposeData_PreviewPromotionSyncData {
	if x != nil {
		return x.PreviewPromotionSyncData
	}
	return nil
}

func (x *PreviewExposeData) GetGrowthTask() *PreviewExposeData_GrowthTask {
	if x != nil {
		return x.GrowthTask
	}
	return nil
}

func (x *PreviewExposeData) GetPreviewExitGuide() *PreviewExposeData_PreviewExitGuide {
	if x != nil {
		return x.PreviewExitGuide
	}
	return nil
}

func (x *PreviewExposeData) GetPreviewExitGuideList() []*PreviewExposeData_PreviewExitGuide {
	if x != nil {
		return x.PreviewExitGuideList
	}
	return nil
}

func (x *PreviewExposeData) GetClientComponent() *PreviewExposeData_ClientComponent {
	if x != nil {
		return x.ClientComponent
	}
	return nil
}

func (x *PreviewExposeData) GetIosClientComponent() *PreviewExposeData_IOSClientComponent {
	if x != nil {
		return x.IosClientComponent
	}
	return nil
}

// Appearance 消息定义
type Appearance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadBubble              *Appearance_Bubble              `protobuf:"bytes,1,opt,name=head_bubble,json=headBubble,proto3" json:"head_bubble,omitempty"`                                               // 头像气泡
	UpRightStatsDisplayType int64                           `protobuf:"varint,2,opt,name=up_right_stats_display_type,json=upRightStatsDisplayType,proto3" json:"up_right_stats_display_type,omitempty"` // 右上角状态显示类型
	Entrance                *Appearance_MoreEntrance        `protobuf:"bytes,3,opt,name=entrance,proto3" json:"entrance,omitempty"`                                                                     // 更多入口
	ToolbarList             []*Appearance_ToolbarItemConfig `protobuf:"bytes,4,rep,name=toolbar_list,json=toolbarList,proto3" json:"toolbar_list,omitempty"`                                            // 工具栏列表
	PreviewStyle            int64                           `protobuf:"varint,5,opt,name=preview_style,json=previewStyle,proto3" json:"preview_style,omitempty"`                                        // 预览样式
	CoverGauss              *Image                          `protobuf:"bytes,6,opt,name=cover_gauss,json=coverGauss,proto3" json:"cover_gauss,omitempty"`                                               // 封面高斯模糊
	ContentTags             []*Appearance_ContentTag        `protobuf:"bytes,7,rep,name=content_tags,json=contentTags,proto3" json:"content_tags,omitempty"`                                            // 内容标签
	PreviewLabel            *Appearance_PreviewLabel        `protobuf:"bytes,8,opt,name=preview_label,json=previewLabel,proto3" json:"preview_label,omitempty"`                                         // 预览标签
	CoverDynamicMask        *Image                          `protobuf:"bytes,9,opt,name=cover_dynamic_mask,json=coverDynamicMask,proto3" json:"cover_dynamic_mask,omitempty"`                           // 封面动态遮罩
	HorizontalBackground    *Image                          `protobuf:"bytes,10,opt,name=horizontal_background,json=horizontalBackground,proto3" json:"horizontal_background,omitempty"`                // 横向背景
	WideCoverList           []*Appearance_WideCover         `protobuf:"bytes,11,rep,name=wide_cover_list,json=wideCoverList,proto3" json:"wide_cover_list,omitempty"`                                   // 宽封面列表
	BlurPlaceholderImg      *Image                          `protobuf:"bytes,12,opt,name=blur_placeholder_img,json=blurPlaceholderImg,proto3" json:"blur_placeholder_img,omitempty"`                    // 模糊占位图
}

func (x *Appearance) Reset() {
	*x = Appearance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance) ProtoMessage() {}

func (x *Appearance) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance.ProtoReflect.Descriptor instead.
func (*Appearance) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151}
}

func (x *Appearance) GetHeadBubble() *Appearance_Bubble {
	if x != nil {
		return x.HeadBubble
	}
	return nil
}

func (x *Appearance) GetUpRightStatsDisplayType() int64 {
	if x != nil {
		return x.UpRightStatsDisplayType
	}
	return 0
}

func (x *Appearance) GetEntrance() *Appearance_MoreEntrance {
	if x != nil {
		return x.Entrance
	}
	return nil
}

func (x *Appearance) GetToolbarList() []*Appearance_ToolbarItemConfig {
	if x != nil {
		return x.ToolbarList
	}
	return nil
}

func (x *Appearance) GetPreviewStyle() int64 {
	if x != nil {
		return x.PreviewStyle
	}
	return 0
}

func (x *Appearance) GetCoverGauss() *Image {
	if x != nil {
		return x.CoverGauss
	}
	return nil
}

func (x *Appearance) GetContentTags() []*Appearance_ContentTag {
	if x != nil {
		return x.ContentTags
	}
	return nil
}

func (x *Appearance) GetPreviewLabel() *Appearance_PreviewLabel {
	if x != nil {
		return x.PreviewLabel
	}
	return nil
}

func (x *Appearance) GetCoverDynamicMask() *Image {
	if x != nil {
		return x.CoverDynamicMask
	}
	return nil
}

func (x *Appearance) GetHorizontalBackground() *Image {
	if x != nil {
		return x.HorizontalBackground
	}
	return nil
}

func (x *Appearance) GetWideCoverList() []*Appearance_WideCover {
	if x != nil {
		return x.WideCoverList
	}
	return nil
}

func (x *Appearance) GetBlurPlaceholderImg() *Image {
	if x != nil {
		return x.BlurPlaceholderImg
	}
	return nil
}

// CommentaryRoomInfo 消息定义
type CommentaryRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   // 用户 ID
	Avatar   *Image `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`                  // 用户头像
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`              // 用户昵称
	Title    string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                    // 房间标题
	RoomId   int64  `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`   // 房间 ID
	OpenId   string `protobuf:"bytes,5000,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"` // 用户 OpenID
}

func (x *CommentaryRoomInfo) Reset() {
	*x = CommentaryRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentaryRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentaryRoomInfo) ProtoMessage() {}

func (x *CommentaryRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentaryRoomInfo.ProtoReflect.Descriptor instead.
func (*CommentaryRoomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{152}
}

func (x *CommentaryRoomInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentaryRoomInfo) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *CommentaryRoomInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CommentaryRoomInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CommentaryRoomInfo) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CommentaryRoomInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// MatchChatConfig 消息定义
type MatchChatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainGroupIconUrl        string   `protobuf:"bytes,1,opt,name=main_group_icon_url,json=mainGroupIconUrl,proto3" json:"main_group_icon_url,omitempty"`                      // 主组图标 URL
	MainGroupBackgroundUrl  string   `protobuf:"bytes,2,opt,name=main_group_background_url,json=mainGroupBackgroundUrl,proto3" json:"main_group_background_url,omitempty"`    // 主组背景 URL
	GuestGroupIconUrl       string   `protobuf:"bytes,3,opt,name=guest_group_icon_url,json=guestGroupIconUrl,proto3" json:"guest_group_icon_url,omitempty"`                   // 客组图标 URL
	GuestGroupBackgroundUrl string   `protobuf:"bytes,4,opt,name=guest_group_background_url,json=guestGroupBackgroundUrl,proto3" json:"guest_group_background_url,omitempty"` // 客组背景 URL
	AggregateIconUrl        []string `protobuf:"bytes,5,rep,name=aggregate_icon_url,json=aggregateIconUrl,proto3" json:"aggregate_icon_url,omitempty"`                        // 聚合图标 URL 列表
}

func (x *MatchChatConfig) Reset() {
	*x = MatchChatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchChatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchChatConfig) ProtoMessage() {}

func (x *MatchChatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchChatConfig.ProtoReflect.Descriptor instead.
func (*MatchChatConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{153}
}

func (x *MatchChatConfig) GetMainGroupIconUrl() string {
	if x != nil {
		return x.MainGroupIconUrl
	}
	return ""
}

func (x *MatchChatConfig) GetMainGroupBackgroundUrl() string {
	if x != nil {
		return x.MainGroupBackgroundUrl
	}
	return ""
}

func (x *MatchChatConfig) GetGuestGroupIconUrl() string {
	if x != nil {
		return x.GuestGroupIconUrl
	}
	return ""
}

func (x *MatchChatConfig) GetGuestGroupBackgroundUrl() string {
	if x != nil {
		return x.GuestGroupBackgroundUrl
	}
	return ""
}

func (x *MatchChatConfig) GetAggregateIconUrl() []string {
	if x != nil {
		return x.AggregateIconUrl
	}
	return nil
}

// ShareResource 消息定义
type ShareResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToastBackground *Image            `protobuf:"bytes,1,opt,name=toast_background,json=toastBackground,proto3" json:"toast_background,omitempty"`                                                // Toast 背景图片
	Qrcode          map[string]string `protobuf:"bytes,2,rep,name=qrcode,proto3" json:"qrcode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 二维码信息
	UgShareInfo     string            `protobuf:"bytes,3,opt,name=ug_share_info,json=ugShareInfo,proto3" json:"ug_share_info,omitempty"`                                                          // 用户生成内容分享信息
}

func (x *ShareResource) Reset() {
	*x = ShareResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResource) ProtoMessage() {}

func (x *ShareResource) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResource.ProtoReflect.Descriptor instead.
func (*ShareResource) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{154}
}

func (x *ShareResource) GetToastBackground() *Image {
	if x != nil {
		return x.ToastBackground
	}
	return nil
}

func (x *ShareResource) GetQrcode() map[string]string {
	if x != nil {
		return x.Qrcode
	}
	return nil
}

func (x *ShareResource) GetUgShareInfo() string {
	if x != nil {
		return x.UgShareInfo
	}
	return ""
}

// ClientComponent 消息定义
type ClientComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitComponentMap       map[string]*ClientComponent_ClientComponentInfo `protobuf:"bytes,1,rep,name=portrait_component_map,json=portraitComponentMap,proto3" json:"portrait_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                     // 竖屏组件映射
	LandscapeComponentMap      map[string]*ClientComponent_ClientComponentInfo `protobuf:"bytes,2,rep,name=landscape_component_map,json=landscapeComponentMap,proto3" json:"landscape_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                  // 横屏组件映射
	IsOpen                     bool                                            `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                                                                                                                                                        // 是否启用
	TemplateId                 int64                                           `protobuf:"varint,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`                                                                                                                                            // 模板 ID
	PreviewDefaultComponentMap map[string]*ClientComponent_ClientComponentInfo `protobuf:"bytes,5,rep,name=preview_default_component_map,json=previewDefaultComponentMap,proto3" json:"preview_default_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 预览默认组件映射
}

func (x *ClientComponent) Reset() {
	*x = ClientComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientComponent) ProtoMessage() {}

func (x *ClientComponent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientComponent.ProtoReflect.Descriptor instead.
func (*ClientComponent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{155}
}

func (x *ClientComponent) GetPortraitComponentMap() map[string]*ClientComponent_ClientComponentInfo {
	if x != nil {
		return x.PortraitComponentMap
	}
	return nil
}

func (x *ClientComponent) GetLandscapeComponentMap() map[string]*ClientComponent_ClientComponentInfo {
	if x != nil {
		return x.LandscapeComponentMap
	}
	return nil
}

func (x *ClientComponent) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ClientComponent) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *ClientComponent) GetPreviewDefaultComponentMap() map[string]*ClientComponent_ClientComponentInfo {
	if x != nil {
		return x.PreviewDefaultComponentMap
	}
	return nil
}

// RoomChannelData 消息定义
type RoomChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 int32                              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                                                   // 状态
	ChannelList            []*RoomChannelData_RoomChannelInfo `protobuf:"bytes,2,rep,name=channel_list,json=channelList,proto3" json:"channel_list,omitempty"`                                       // 频道列表
	SupportRoomChannelMode int32                              `protobuf:"varint,3,opt,name=support_room_channel_mode,json=supportRoomChannelMode,proto3" json:"support_room_channel_mode,omitempty"` // 支持的房间频道模式
	LimitOfNum             int32                              `protobuf:"varint,4,opt,name=limit_of_num,json=limitOfNum,proto3" json:"limit_of_num,omitempty"`                                       // 数量限制
	CanCreate              bool                               `protobuf:"varint,5,opt,name=can_create,json=canCreate,proto3" json:"can_create,omitempty"`                                            // 是否可以创建
	Background             *RoomChannelData_Image             `protobuf:"bytes,6,opt,name=background,proto3" json:"background,omitempty"`                                                            // 背景图片
	TabLanding             bool                               `protobuf:"varint,7,opt,name=tab_landing,json=tabLanding,proto3" json:"tab_landing,omitempty"`                                         // 是否支持标签着陆
	CanLinkMic             bool                               `protobuf:"varint,8,opt,name=can_link_mic,json=canLinkMic,proto3" json:"can_link_mic,omitempty"`                                       // 是否可以连麦
	HideLandscape          bool                               `protobuf:"varint,101,opt,name=hide_landscape,json=hideLandscape,proto3" json:"hide_landscape,omitempty"`                              // 是否隐藏横屏
}

func (x *RoomChannelData) Reset() {
	*x = RoomChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomChannelData) ProtoMessage() {}

func (x *RoomChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomChannelData.ProtoReflect.Descriptor instead.
func (*RoomChannelData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{156}
}

func (x *RoomChannelData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoomChannelData) GetChannelList() []*RoomChannelData_RoomChannelInfo {
	if x != nil {
		return x.ChannelList
	}
	return nil
}

func (x *RoomChannelData) GetSupportRoomChannelMode() int32 {
	if x != nil {
		return x.SupportRoomChannelMode
	}
	return 0
}

func (x *RoomChannelData) GetLimitOfNum() int32 {
	if x != nil {
		return x.LimitOfNum
	}
	return 0
}

func (x *RoomChannelData) GetCanCreate() bool {
	if x != nil {
		return x.CanCreate
	}
	return false
}

func (x *RoomChannelData) GetBackground() *RoomChannelData_Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *RoomChannelData) GetTabLanding() bool {
	if x != nil {
		return x.TabLanding
	}
	return false
}

func (x *RoomChannelData) GetCanLinkMic() bool {
	if x != nil {
		return x.CanLinkMic
	}
	return false
}

func (x *RoomChannelData) GetHideLandscape() bool {
	if x != nil {
		return x.HideLandscape
	}
	return false
}

// OpenContentData 消息定义
type OpenContentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenActivityData *OpenContentData_OpenActivityData `protobuf:"bytes,1,opt,name=open_activity_data,json=openActivityData,proto3" json:"open_activity_data,omitempty"` // 开放活动数据
}

func (x *OpenContentData) Reset() {
	*x = OpenContentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenContentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContentData) ProtoMessage() {}

func (x *OpenContentData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContentData.ProtoReflect.Descriptor instead.
func (*OpenContentData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{157}
}

func (x *OpenContentData) GetOpenActivityData() *OpenContentData_OpenActivityData {
	if x != nil {
		return x.OpenActivityData
	}
	return nil
}

// LabelInfo 消息定义
type LabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelType             int64                            `protobuf:"varint,1,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`                                                                                  // 标签类型
	DisplayType           int64                            `protobuf:"varint,2,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`                                                                            // 显示类型
	SpliceLabel           *LabelInfo_SpliceLabel           `protobuf:"bytes,3,opt,name=splice_label,json=spliceLabel,proto3" json:"splice_label,omitempty"`                                                                             // 拼接标签信息
	WholeLabel            *Image                           `protobuf:"bytes,4,opt,name=whole_label,json=wholeLabel,proto3" json:"whole_label,omitempty"`                                                                                // 整体标签图像
	Extra                 string                           `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                            // 额外信息
	ProfilePicSpliceLabel *LabelInfo_ProfilePicSpliceLabel `protobuf:"bytes,6,opt,name=profile_pic_splice_label,json=profilePicSpliceLabel,proto3" json:"profile_pic_splice_label,omitempty"`                                           // 头像拼接标签
	EtExtra               map[string]string                `protobuf:"bytes,7,rep,name=et_extra,json=etExtra,proto3" json:"et_extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外的键值对信息
}

func (x *LabelInfo) Reset() {
	*x = LabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInfo) ProtoMessage() {}

func (x *LabelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInfo.ProtoReflect.Descriptor instead.
func (*LabelInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{158}
}

func (x *LabelInfo) GetLabelType() int64 {
	if x != nil {
		return x.LabelType
	}
	return 0
}

func (x *LabelInfo) GetDisplayType() int64 {
	if x != nil {
		return x.DisplayType
	}
	return 0
}

func (x *LabelInfo) GetSpliceLabel() *LabelInfo_SpliceLabel {
	if x != nil {
		return x.SpliceLabel
	}
	return nil
}

func (x *LabelInfo) GetWholeLabel() *Image {
	if x != nil {
		return x.WholeLabel
	}
	return nil
}

func (x *LabelInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *LabelInfo) GetProfilePicSpliceLabel() *LabelInfo_ProfilePicSpliceLabel {
	if x != nil {
		return x.ProfilePicSpliceLabel
	}
	return nil
}

func (x *LabelInfo) GetEtExtra() map[string]string {
	if x != nil {
		return x.EtExtra
	}
	return nil
}

// RoomFeedData 消息定义
type RoomFeedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationLabel       *LabelInfo                        `protobuf:"bytes,1,opt,name=relation_label,json=relationLabel,proto3" json:"relation_label,omitempty"`                     // 关系标签信息
	FollowTopAppearance *RoomFeedData_FollowTopAppearance `protobuf:"bytes,2,opt,name=follow_top_appearance,json=followTopAppearance,proto3" json:"follow_top_appearance,omitempty"` // 顶部关注展示
	CutPosition         *RoomFeedData_StreamCutPosition   `protobuf:"bytes,3,opt,name=cut_position,json=cutPosition,proto3" json:"cut_position,omitempty"`                           // 流切割位置信息
	DrawerConfig        *RoomFeedData_DrawerConfig        `protobuf:"bytes,4,opt,name=drawer_config,json=drawerConfig,proto3" json:"drawer_config,omitempty"`                        // 抽屉配置
}

func (x *RoomFeedData) Reset() {
	*x = RoomFeedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData) ProtoMessage() {}

func (x *RoomFeedData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData.ProtoReflect.Descriptor instead.
func (*RoomFeedData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159}
}

func (x *RoomFeedData) GetRelationLabel() *LabelInfo {
	if x != nil {
		return x.RelationLabel
	}
	return nil
}

func (x *RoomFeedData) GetFollowTopAppearance() *RoomFeedData_FollowTopAppearance {
	if x != nil {
		return x.FollowTopAppearance
	}
	return nil
}

func (x *RoomFeedData) GetCutPosition() *RoomFeedData_StreamCutPosition {
	if x != nil {
		return x.CutPosition
	}
	return nil
}

func (x *RoomFeedData) GetDrawerConfig() *RoomFeedData_DrawerConfig {
	if x != nil {
		return x.DrawerConfig
	}
	return nil
}

// RoomGameData 消息定义
type RoomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomGameDataChannelConfig *RoomGameData_RoomGameDataChannelConfig `protobuf:"bytes,1,opt,name=room_game_data_channel_config,json=roomGameDataChannelConfig,proto3" json:"room_game_data_channel_config,omitempty"` // 房间游戏数据通道配置
	GameTagInfo               *RoomGameData_GameTagInfo               `protobuf:"bytes,2,opt,name=game_tag_info,json=gameTagInfo,proto3" json:"game_tag_info,omitempty"`                                               // 游戏标签信息
	SandwichBorderInfo        *RoomGameData_SandwichBorderInfo        `protobuf:"bytes,3,opt,name=sandwich_border_info,json=sandwichBorderInfo,proto3" json:"sandwich_border_info,omitempty"`                          // 三明治边框信息
}

func (x *RoomGameData) Reset() {
	*x = RoomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomGameData) ProtoMessage() {}

func (x *RoomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomGameData.ProtoReflect.Descriptor instead.
func (*RoomGameData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{160}
}

func (x *RoomGameData) GetRoomGameDataChannelConfig() *RoomGameData_RoomGameDataChannelConfig {
	if x != nil {
		return x.RoomGameDataChannelConfig
	}
	return nil
}

func (x *RoomGameData) GetGameTagInfo() *RoomGameData_GameTagInfo {
	if x != nil {
		return x.GameTagInfo
	}
	return nil
}

func (x *RoomGameData) GetSandwichBorderInfo() *RoomGameData_SandwichBorderInfo {
	if x != nil {
		return x.SandwichBorderInfo
	}
	return nil
}

// PicoInfo 消息定义
type PicoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicoLiveType                 int64                         `protobuf:"varint,1,opt,name=pico_live_type,json=picoLiveType,proto3" json:"pico_live_type,omitempty"`                                                                                          // Pico 直播类型
	PicoVirtualLiveBgImageUri    string                        `protobuf:"bytes,2,opt,name=pico_virtual_live_bg_image_uri,json=picoVirtualLiveBgImageUri,proto3" json:"pico_virtual_live_bg_image_uri,omitempty"`                                              // 虚拟直播背景图片 URI
	PicoCreateScene              string                        `protobuf:"bytes,3,opt,name=pico_create_scene,json=picoCreateScene,proto3" json:"pico_create_scene,omitempty"`                                                                                  // 创建场景
	CustomInfo                   string                        `protobuf:"bytes,4,opt,name=custom_info,json=customInfo,proto3" json:"custom_info,omitempty"`                                                                                                   // 自定义信息
	PicoVirtualLiveBgImageDigest string                        `protobuf:"bytes,5,opt,name=pico_virtual_live_bg_image_digest,json=picoVirtualLiveBgImageDigest,proto3" json:"pico_virtual_live_bg_image_digest,omitempty"`                                     // 虚拟直播背景图片摘要
	VirtualLiveBgImages          *PicoInfo_VirtualLiveBgImages `protobuf:"bytes,6,opt,name=virtual_live_bg_images,json=virtualLiveBgImages,proto3" json:"virtual_live_bg_images,omitempty"`                                                                    // 虚拟直播背景图片信息
	Pitch                        float32                       `protobuf:"fixed32,7,opt,name=pitch,proto3" json:"pitch,omitempty"`                                                                                                                             // 音调
	ClientLiveType               int64                         `protobuf:"varint,8,opt,name=client_live_type,json=clientLiveType,proto3" json:"client_live_type,omitempty"`                                                                                    // 客户端直播类型
	PicoVrTransfer               int32                         `protobuf:"varint,9,opt,name=pico_vr_transfer,json=picoVrTransfer,proto3" json:"pico_vr_transfer,omitempty"`                                                                                    // Pico VR 转换
	PicoLiveMode                 int64                         `protobuf:"varint,11,opt,name=pico_live_mode,json=picoLiveMode,proto3" json:"pico_live_mode,omitempty"`                                                                                         // Pico 直播模式
	StreamMapping                map[string]string             `protobuf:"bytes,13,rep,name=stream_mapping,json=streamMapping,proto3" json:"stream_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 流映射
}

func (x *PicoInfo) Reset() {
	*x = PicoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicoInfo) ProtoMessage() {}

func (x *PicoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicoInfo.ProtoReflect.Descriptor instead.
func (*PicoInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{161}
}

func (x *PicoInfo) GetPicoLiveType() int64 {
	if x != nil {
		return x.PicoLiveType
	}
	return 0
}

func (x *PicoInfo) GetPicoVirtualLiveBgImageUri() string {
	if x != nil {
		return x.PicoVirtualLiveBgImageUri
	}
	return ""
}

func (x *PicoInfo) GetPicoCreateScene() string {
	if x != nil {
		return x.PicoCreateScene
	}
	return ""
}

func (x *PicoInfo) GetCustomInfo() string {
	if x != nil {
		return x.CustomInfo
	}
	return ""
}

func (x *PicoInfo) GetPicoVirtualLiveBgImageDigest() string {
	if x != nil {
		return x.PicoVirtualLiveBgImageDigest
	}
	return ""
}

func (x *PicoInfo) GetVirtualLiveBgImages() *PicoInfo_VirtualLiveBgImages {
	if x != nil {
		return x.VirtualLiveBgImages
	}
	return nil
}

func (x *PicoInfo) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *PicoInfo) GetClientLiveType() int64 {
	if x != nil {
		return x.ClientLiveType
	}
	return 0
}

func (x *PicoInfo) GetPicoVrTransfer() int32 {
	if x != nil {
		return x.PicoVrTransfer
	}
	return 0
}

func (x *PicoInfo) GetPicoLiveMode() int64 {
	if x != nil {
		return x.PicoLiveMode
	}
	return 0
}

func (x *PicoInfo) GetStreamMapping() map[string]string {
	if x != nil {
		return x.StreamMapping
	}
	return nil
}

// RoomOthersData 消息定义
type RoomOthersData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecoDetail               *RoomOthersData_DecotationDetail            `protobuf:"bytes,1,opt,name=deco_detail,json=decoDetail,proto3" json:"deco_detail,omitempty"`                                                  // 装饰细节信息
	MorePanelInfo            *RoomOthersData_MorePanelData               `protobuf:"bytes,2,opt,name=more_panel_info,json=morePanelInfo,proto3" json:"more_panel_info,omitempty"`                                       // 更多面板信息
	AppointmentInfo          *RoomOthersData_AppointmentData             `protobuf:"bytes,3,opt,name=appointment_info,json=appointmentInfo,proto3" json:"appointment_info,omitempty"`                                   // 预约信息
	WebSkin                  *RoomOthersData_WebSkinData                 `protobuf:"bytes,4,opt,name=web_skin,json=webSkin,proto3" json:"web_skin,omitempty"`                                                           // 网页皮肤信息
	Programme                *RoomOthersData_WebProgramme                `protobuf:"bytes,5,opt,name=programme,proto3" json:"programme,omitempty"`                                                                      // 节目信息
	LiveMatrixInfo           *RoomOthersData_LiveMatrixInfo              `protobuf:"bytes,6,opt,name=live_matrix_info,json=liveMatrixInfo,proto3" json:"live_matrix_info,omitempty"`                                    // 直播矩阵信息
	WebLivePortOptimization  *RoomOthersData_WebLivePortOptimization     `protobuf:"bytes,7,opt,name=web_live_port_optimization,json=webLivePortOptimization,proto3" json:"web_live_port_optimization,omitempty"`       // 网页直播端口优化信息
	GiftPanelTopperTray      *RoomOthersData_GiftPanelTopperTray         `protobuf:"bytes,8,opt,name=gift_panel_topper_tray,json=giftPanelTopperTray,proto3" json:"gift_panel_topper_tray,omitempty"`                   // 礼物面板顶部托盘
	EnterGiftAnimation       *RoomOthersData_EnterGiftAnimation          `protobuf:"bytes,9,opt,name=enter_gift_animation,json=enterGiftAnimation,proto3" json:"enter_gift_animation,omitempty"`                        // 进入礼物动画
	PaidLiveSubscribe        *RoomOthersData_PaidLiveSubscribe           `protobuf:"bytes,10,opt,name=paid_live_subscribe,json=paidLiveSubscribe,proto3" json:"paid_live_subscribe,omitempty"`                          // 付费直播订阅信息
	GroupLiveData            *RoomOthersData_GroupLiveData               `protobuf:"bytes,11,opt,name=group_live_data,json=groupLiveData,proto3" json:"group_live_data,omitempty"`                                      // 群组直播数据
	LvideoItemId             int64                                       `protobuf:"varint,12,opt,name=lvideo_item_id,json=lvideoItemId,proto3" json:"lvideo_item_id,omitempty"`                                        // 视频项目 ID
	WebEnterBenefitPointData *RoomOthersData_WebEnterBenefitPointData    `protobuf:"bytes,13,opt,name=web_enter_benefit_point_data,json=webEnterBenefitPointData,proto3" json:"web_enter_benefit_point_data,omitempty"` // 网页进入福利点数据
	RecognitionContainers    *RoomOthersData_StreamRecognitionContainers `protobuf:"bytes,14,opt,name=recognition_containers,json=recognitionContainers,proto3" json:"recognition_containers,omitempty"`                // 流识别容器
	AnchorBottomToolBar      *RoomOthersData_AnchorBottomToolBar         `protobuf:"bytes,15,opt,name=anchor_bottom_tool_bar,json=anchorBottomToolBar,proto3" json:"anchor_bottom_tool_bar,omitempty"`                  // 主播底部工具栏
	AnchorTogetherLive       *RoomOthersData_AnchorTogetherLive          `protobuf:"bytes,16,opt,name=anchor_together_live,json=anchorTogetherLive,proto3" json:"anchor_together_live,omitempty"`                       // 主播联合直播信息
	MosaicVersion            int64                                       `protobuf:"varint,17,opt,name=mosaic_version,json=mosaicVersion,proto3" json:"mosaic_version,omitempty"`                                       // 拼接版本
}

func (x *RoomOthersData) Reset() {
	*x = RoomOthersData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData) ProtoMessage() {}

func (x *RoomOthersData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData.ProtoReflect.Descriptor instead.
func (*RoomOthersData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162}
}

func (x *RoomOthersData) GetDecoDetail() *RoomOthersData_DecotationDetail {
	if x != nil {
		return x.DecoDetail
	}
	return nil
}

func (x *RoomOthersData) GetMorePanelInfo() *RoomOthersData_MorePanelData {
	if x != nil {
		return x.MorePanelInfo
	}
	return nil
}

func (x *RoomOthersData) GetAppointmentInfo() *RoomOthersData_AppointmentData {
	if x != nil {
		return x.AppointmentInfo
	}
	return nil
}

func (x *RoomOthersData) GetWebSkin() *RoomOthersData_WebSkinData {
	if x != nil {
		return x.WebSkin
	}
	return nil
}

func (x *RoomOthersData) GetProgramme() *RoomOthersData_WebProgramme {
	if x != nil {
		return x.Programme
	}
	return nil
}

func (x *RoomOthersData) GetLiveMatrixInfo() *RoomOthersData_LiveMatrixInfo {
	if x != nil {
		return x.LiveMatrixInfo
	}
	return nil
}

func (x *RoomOthersData) GetWebLivePortOptimization() *RoomOthersData_WebLivePortOptimization {
	if x != nil {
		return x.WebLivePortOptimization
	}
	return nil
}

func (x *RoomOthersData) GetGiftPanelTopperTray() *RoomOthersData_GiftPanelTopperTray {
	if x != nil {
		return x.GiftPanelTopperTray
	}
	return nil
}

func (x *RoomOthersData) GetEnterGiftAnimation() *RoomOthersData_EnterGiftAnimation {
	if x != nil {
		return x.EnterGiftAnimation
	}
	return nil
}

func (x *RoomOthersData) GetPaidLiveSubscribe() *RoomOthersData_PaidLiveSubscribe {
	if x != nil {
		return x.PaidLiveSubscribe
	}
	return nil
}

func (x *RoomOthersData) GetGroupLiveData() *RoomOthersData_GroupLiveData {
	if x != nil {
		return x.GroupLiveData
	}
	return nil
}

func (x *RoomOthersData) GetLvideoItemId() int64 {
	if x != nil {
		return x.LvideoItemId
	}
	return 0
}

func (x *RoomOthersData) GetWebEnterBenefitPointData() *RoomOthersData_WebEnterBenefitPointData {
	if x != nil {
		return x.WebEnterBenefitPointData
	}
	return nil
}

func (x *RoomOthersData) GetRecognitionContainers() *RoomOthersData_StreamRecognitionContainers {
	if x != nil {
		return x.RecognitionContainers
	}
	return nil
}

func (x *RoomOthersData) GetAnchorBottomToolBar() *RoomOthersData_AnchorBottomToolBar {
	if x != nil {
		return x.AnchorBottomToolBar
	}
	return nil
}

func (x *RoomOthersData) GetAnchorTogetherLive() *RoomOthersData_AnchorTogetherLive {
	if x != nil {
		return x.AnchorTogetherLive
	}
	return nil
}

func (x *RoomOthersData) GetMosaicVersion() int64 {
	if x != nil {
		return x.MosaicVersion
	}
	return 0
}

// RoomRevenueData 消息定义
type RoomRevenueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenGame      *RoomRevenueData_OpenGame      `protobuf:"bytes,1,opt,name=open_game,json=openGame,proto3" json:"open_game,omitempty"`                // 开放游戏信息
	AnchorLinkmic *RoomRevenueData_AnchorLinkmic `protobuf:"bytes,2,opt,name=anchor_linkmic,json=anchorLinkmic,proto3" json:"anchor_linkmic,omitempty"` // 主播连麦信息
}

func (x *RoomRevenueData) Reset() {
	*x = RoomRevenueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRevenueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRevenueData) ProtoMessage() {}

func (x *RoomRevenueData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRevenueData.ProtoReflect.Descriptor instead.
func (*RoomRevenueData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{163}
}

func (x *RoomRevenueData) GetOpenGame() *RoomRevenueData_OpenGame {
	if x != nil {
		return x.OpenGame
	}
	return nil
}

func (x *RoomRevenueData) GetAnchorLinkmic() *RoomRevenueData_AnchorLinkmic {
	if x != nil {
		return x.AnchorLinkmic
	}
	return nil
}

// RoomReqUserData 消息定义
type RoomReqUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserShareRoomScore  float32 `protobuf:"fixed32,1,opt,name=user_share_room_score,json=userShareRoomScore,proto3" json:"user_share_room_score,omitempty"`   // 用户分享房间得分
	EnterUserDeviceType int32   `protobuf:"varint,2,opt,name=enter_user_device_type,json=enterUserDeviceType,proto3" json:"enter_user_device_type,omitempty"` // 用户进入设备类型
}

func (x *RoomReqUserData) Reset() {
	*x = RoomReqUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReqUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReqUserData) ProtoMessage() {}

func (x *RoomReqUserData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReqUserData.ProtoReflect.Descriptor instead.
func (*RoomReqUserData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{164}
}

func (x *RoomReqUserData) GetUserShareRoomScore() float32 {
	if x != nil {
		return x.UserShareRoomScore
	}
	return 0
}

func (x *RoomReqUserData) GetEnterUserDeviceType() int32 {
	if x != nil {
		return x.EnterUserDeviceType
	}
	return 0
}

// RoomAnchorData 消息定义
type RoomAnchorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishSchema   string                         `protobuf:"bytes,1,opt,name=finish_schema,json=finishSchema,proto3" json:"finish_schema,omitempty"`         // 完成的模式或协议
	GameAnchorInfo *RoomAnchorData_GameAnchorInfo `protobuf:"bytes,2,opt,name=game_anchor_info,json=gameAnchorInfo,proto3" json:"game_anchor_info,omitempty"` // 游戏主播信息
	FrameScale     string                         `protobuf:"bytes,3,opt,name=frame_scale,json=frameScale,proto3" json:"frame_scale,omitempty"`               // 帧比例
}

func (x *RoomAnchorData) Reset() {
	*x = RoomAnchorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAnchorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAnchorData) ProtoMessage() {}

func (x *RoomAnchorData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAnchorData.ProtoReflect.Descriptor instead.
func (*RoomAnchorData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{165}
}

func (x *RoomAnchorData) GetFinishSchema() string {
	if x != nil {
		return x.FinishSchema
	}
	return ""
}

func (x *RoomAnchorData) GetGameAnchorInfo() *RoomAnchorData_GameAnchorInfo {
	if x != nil {
		return x.GameAnchorInfo
	}
	return nil
}

func (x *RoomAnchorData) GetFrameScale() string {
	if x != nil {
		return x.FrameScale
	}
	return ""
}

// RoomInteractData 消息定义
type RoomInteractData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LandscapeCommentStyle    int64                                      `protobuf:"varint,1,opt,name=landscape_comment_style,json=landscapeCommentStyle,proto3" json:"landscape_comment_style,omitempty"`           // 横屏评论样式
	VsComponentExtra         *RoomInteractData_EpisodeExtraInfo         `protobuf:"bytes,2,opt,name=vs_component_extra,json=vsComponentExtra,proto3" json:"vs_component_extra,omitempty"`                           // 额外组件信息
	FeaturedPublicScreenData *RoomInteractData_FeaturedPublicScreenConf `protobuf:"bytes,3,opt,name=featured_public_screen_data,json=featuredPublicScreenData,proto3" json:"featured_public_screen_data,omitempty"` // 特定公共屏幕配置信息
	PublicScreenSpeedConf    *RoomInteractData_PublicScreenSpeedConf    `protobuf:"bytes,4,opt,name=public_screen_speed_conf,json=publicScreenSpeedConf,proto3" json:"public_screen_speed_conf,omitempty"`          // 公共屏幕速度配置信息
	PublicRoomIntroLabel     *RoomInteractData_RoomIntroLabel           `protobuf:"bytes,5,opt,name=public_room_intro_label,json=publicRoomIntroLabel,proto3" json:"public_room_intro_label,omitempty"`             // 房间简介标签
}

func (x *RoomInteractData) Reset() {
	*x = RoomInteractData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInteractData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInteractData) ProtoMessage() {}

func (x *RoomInteractData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInteractData.ProtoReflect.Descriptor instead.
func (*RoomInteractData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{166}
}

func (x *RoomInteractData) GetLandscapeCommentStyle() int64 {
	if x != nil {
		return x.LandscapeCommentStyle
	}
	return 0
}

func (x *RoomInteractData) GetVsComponentExtra() *RoomInteractData_EpisodeExtraInfo {
	if x != nil {
		return x.VsComponentExtra
	}
	return nil
}

func (x *RoomInteractData) GetFeaturedPublicScreenData() *RoomInteractData_FeaturedPublicScreenConf {
	if x != nil {
		return x.FeaturedPublicScreenData
	}
	return nil
}

func (x *RoomInteractData) GetPublicScreenSpeedConf() *RoomInteractData_PublicScreenSpeedConf {
	if x != nil {
		return x.PublicScreenSpeedConf
	}
	return nil
}

func (x *RoomInteractData) GetPublicRoomIntroLabel() *RoomInteractData_RoomIntroLabel {
	if x != nil {
		return x.PublicRoomIntroLabel
	}
	return nil
}

// RoomBasisData 消息定义
type RoomBasisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPing             int64 `protobuf:"varint,1,opt,name=next_ping,json=nextPing,proto3" json:"next_ping,omitempty"`                                         // 下次心跳的时间间隔（毫秒）
	IsCustomizeAudioRoom bool  `protobuf:"varint,2,opt,name=is_customize_audio_room,json=isCustomizeAudioRoom,proto3" json:"is_customize_audio_room,omitempty"` // 是否是自定义音频房间
}

func (x *RoomBasisData) Reset() {
	*x = RoomBasisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBasisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBasisData) ProtoMessage() {}

func (x *RoomBasisData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBasisData.ProtoReflect.Descriptor instead.
func (*RoomBasisData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{167}
}

func (x *RoomBasisData) GetNextPing() int64 {
	if x != nil {
		return x.NextPing
	}
	return 0
}

func (x *RoomBasisData) GetIsCustomizeAudioRoom() bool {
	if x != nil {
		return x.IsCustomizeAudioRoom
	}
	return false
}

// RoomReplayInfo 消息定义
type RoomReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayDuration int64  `protobuf:"varint,1,opt,name=replay_duration,json=replayDuration,proto3" json:"replay_duration,omitempty"` // 回放时长（以秒为单位）
	ReplayUrl      string `protobuf:"bytes,2,opt,name=replay_url,json=replayUrl,proto3" json:"replay_url,omitempty"`                 // 回放视频的 URL
	ContentUniqId  string `protobuf:"bytes,3,opt,name=content_uniq_id,json=contentUniqId,proto3" json:"content_uniq_id,omitempty"`   // 内容的唯一标识符
}

func (x *RoomReplayInfo) Reset() {
	*x = RoomReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReplayInfo) ProtoMessage() {}

func (x *RoomReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReplayInfo.ProtoReflect.Descriptor instead.
func (*RoomReplayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{168}
}

func (x *RoomReplayInfo) GetReplayDuration() int64 {
	if x != nil {
		return x.ReplayDuration
	}
	return 0
}

func (x *RoomReplayInfo) GetReplayUrl() string {
	if x != nil {
		return x.ReplayUrl
	}
	return ""
}

func (x *RoomReplayInfo) GetContentUniqId() string {
	if x != nil {
		return x.ContentUniqId
	}
	return ""
}

// Bonus 消息定义
type Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusType       int64                `protobuf:"varint,1,opt,name=bonus_type,json=bonusType,proto3" json:"bonus_type,omitempty"`                    // 奖励类型
	Author          *Bonus_BonusAuthor   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`                                            // 奖励的作者信息
	Title           string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                              // 奖励标题
	SubTitle        string               `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                        // 奖励副标题
	Text            string               `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                                // 奖励文本内容
	Style           string               `protobuf:"bytes,6,opt,name=style,proto3" json:"style,omitempty"`                                              // 奖励样式
	CommerceInfo    *Bonus_BonusCommerce `protobuf:"bytes,7,opt,name=commerce_info,json=commerceInfo,proto3" json:"commerce_info,omitempty"`            // 奖励的商业信息
	OpenUrl         string               `protobuf:"bytes,8,opt,name=open_url,json=openUrl,proto3" json:"open_url,omitempty"`                           // 打开奖励的 URL
	Token           string               `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`                                              // 奖励的标识符令牌
	Source          int64                `protobuf:"varint,10,opt,name=source,proto3" json:"source,omitempty"`                                          // 奖励来源
	Label           *Image               `protobuf:"bytes,11,opt,name=label,proto3" json:"label,omitempty"`                                             // 奖励的标签图标
	SceneId         int64                `protobuf:"varint,12,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`                         // 场景 ID
	MaybeCarp       bool                 `protobuf:"varint,13,opt,name=maybe_carp,json=maybeCarp,proto3" json:"maybe_carp,omitempty"`                   // 是否可能是特殊奖励
	CountdownSecond int64                `protobuf:"varint,14,opt,name=countdown_second,json=countdownSecond,proto3" json:"countdown_second,omitempty"` // 倒计时秒数
}

func (x *Bonus) Reset() {
	*x = Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus) ProtoMessage() {}

func (x *Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus.ProtoReflect.Descriptor instead.
func (*Bonus) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{169}
}

func (x *Bonus) GetBonusType() int64 {
	if x != nil {
		return x.BonusType
	}
	return 0
}

func (x *Bonus) GetAuthor() *Bonus_BonusAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Bonus) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bonus) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Bonus) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Bonus) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Bonus) GetCommerceInfo() *Bonus_BonusCommerce {
	if x != nil {
		return x.CommerceInfo
	}
	return nil
}

func (x *Bonus) GetOpenUrl() string {
	if x != nil {
		return x.OpenUrl
	}
	return ""
}

func (x *Bonus) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Bonus) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Bonus) GetLabel() *Image {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Bonus) GetSceneId() int64 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *Bonus) GetMaybeCarp() bool {
	if x != nil {
		return x.MaybeCarp
	}
	return false
}

func (x *Bonus) GetCountdownSecond() int64 {
	if x != nil {
		return x.CountdownSecond
	}
	return 0
}

// CornerMarkReach 消息定义
type CornerMarkReach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedReach bool  `protobuf:"varint,1,opt,name=need_reach,json=needReach,proto3" json:"need_reach,omitempty"` // 是否需要到达标记
	Duration  int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                    // 持续时间（毫秒）
	ElemType  int64 `protobuf:"varint,3,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`    // 元素类型
}

func (x *CornerMarkReach) Reset() {
	*x = CornerMarkReach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CornerMarkReach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CornerMarkReach) ProtoMessage() {}

func (x *CornerMarkReach) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CornerMarkReach.ProtoReflect.Descriptor instead.
func (*CornerMarkReach) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{170}
}

func (x *CornerMarkReach) GetNeedReach() bool {
	if x != nil {
		return x.NeedReach
	}
	return false
}

func (x *CornerMarkReach) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CornerMarkReach) GetElemType() int64 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

// PublicScreenBottomInfo 消息定义
type PublicScreenBottomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BottomCards []*PublicScreenBottomInfo_BottomCard `protobuf:"bytes,1,rep,name=bottom_cards,json=bottomCards,proto3" json:"bottom_cards,omitempty"` // 底部卡片列表
}

func (x *PublicScreenBottomInfo) Reset() {
	*x = PublicScreenBottomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicScreenBottomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicScreenBottomInfo) ProtoMessage() {}

func (x *PublicScreenBottomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicScreenBottomInfo.ProtoReflect.Descriptor instead.
func (*PublicScreenBottomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{171}
}

func (x *PublicScreenBottomInfo) GetBottomCards() []*PublicScreenBottomInfo_BottomCard {
	if x != nil {
		return x.BottomCards
	}
	return nil
}

// LiveStatusInfo 消息定义
type LiveStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveStatus      int32            `protobuf:"varint,1,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                                                                                                          // 直播状态 (如直播中/未开始/已结束)
	LiveUser        *User            `protobuf:"bytes,2,opt,name=live_user,json=liveUser,proto3" json:"live_user,omitempty"`                                                                                                                 // 直播用户信息
	LiveNotifyLight map[int32]*Image `protobuf:"bytes,3,rep,name=live_notify_light,json=liveNotifyLight,proto3" json:"live_notify_light,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 直播通知灯光配置
	PreviewText     string           `protobuf:"bytes,4,opt,name=preview_text,json=previewText,proto3" json:"preview_text,omitempty"`                                                                                                        // 直播预览文本
}

func (x *LiveStatusInfo) Reset() {
	*x = LiveStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStatusInfo) ProtoMessage() {}

func (x *LiveStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStatusInfo.ProtoReflect.Descriptor instead.
func (*LiveStatusInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{172}
}

func (x *LiveStatusInfo) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *LiveStatusInfo) GetLiveUser() *User {
	if x != nil {
		return x.LiveUser
	}
	return nil
}

func (x *LiveStatusInfo) GetLiveNotifyLight() map[int32]*Image {
	if x != nil {
		return x.LiveNotifyLight
	}
	return nil
}

func (x *LiveStatusInfo) GetPreviewText() string {
	if x != nil {
		return x.PreviewText
	}
	return ""
}

// CastScreenData 消息定义
type CastScreenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowText      string                            `protobuf:"bytes,1,opt,name=show_text,json=showText,proto3" json:"show_text,omitempty"`                   // 显示的文本
	AllowList     []int64                           `protobuf:"varint,2,rep,packed,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`        // 允许投屏的列表
	SdkVersion    int32                             `protobuf:"varint,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`            // SDK 版本
	Permission    *CastScreenData_CastOttPermission `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`                               // 投屏权限
	ForceCastOnly int32                             `protobuf:"varint,5,opt,name=force_cast_only,json=forceCastOnly,proto3" json:"force_cast_only,omitempty"` // 是否仅强制投屏
}

func (x *CastScreenData) Reset() {
	*x = CastScreenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CastScreenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastScreenData) ProtoMessage() {}

func (x *CastScreenData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastScreenData.ProtoReflect.Descriptor instead.
func (*CastScreenData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{173}
}

func (x *CastScreenData) GetShowText() string {
	if x != nil {
		return x.ShowText
	}
	return ""
}

func (x *CastScreenData) GetAllowList() []int64 {
	if x != nil {
		return x.AllowList
	}
	return nil
}

func (x *CastScreenData) GetSdkVersion() int32 {
	if x != nil {
		return x.SdkVersion
	}
	return 0
}

func (x *CastScreenData) GetPermission() *CastScreenData_CastOttPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *CastScreenData) GetForceCastOnly() int32 {
	if x != nil {
		return x.ForceCastOnly
	}
	return 0
}

// AudioBGData 消息定义
type AudioBGData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                           // 音频背景 ID
	ImageUri               string                  `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`                                                // 图片 URI
	ImgType                int32                   `protobuf:"varint,3,opt,name=img_type,json=imgType,proto3" json:"img_type,omitempty"`                                                  // 图片类型
	Image                  *Image                  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`                                                                      // 图片
	ImageThumbnail         *Image                  `protobuf:"bytes,5,opt,name=imageThumbnail,proto3" json:"imageThumbnail,omitempty"`                                                    // 缩略图
	ImageAnimatedBG        *Image                  `protobuf:"bytes,6,opt,name=imageAnimatedBG,proto3" json:"imageAnimatedBG,omitempty"`                                                  // 动态背景图片
	ImageNormalAvatar      *Image                  `protobuf:"bytes,7,opt,name=imageNormalAvatar,proto3" json:"imageNormalAvatar,omitempty"`                                              // 普通头像图片
	ImageStartupAvatar     *Image                  `protobuf:"bytes,8,opt,name=imageStartupAvatar,proto3" json:"imageStartupAvatar,omitempty"`                                            // 启动头像图片
	ImageChatJoinIcon      *Image                  `protobuf:"bytes,9,opt,name=imageChatJoinIcon,proto3" json:"imageChatJoinIcon,omitempty"`                                              // 聊天加入图标
	ImageStaticBG          *Image                  `protobuf:"bytes,10,opt,name=imageStaticBG,proto3" json:"imageStaticBG,omitempty"`                                                     // 静态背景图片
	SpeakingImageList      *AudioSpeakingImageList `protobuf:"bytes,11,opt,name=speakingImageList,proto3" json:"speakingImageList,omitempty"`                                             // 讲话图片列表
	StatusColorValue       string                  `protobuf:"bytes,12,opt,name=status_color_value,json=statusColorValue,proto3" json:"status_color_value,omitempty"`                     // 状态颜色值
	PublicScreenColorValue string                  `protobuf:"bytes,13,opt,name=public_screen_color_value,json=publicScreenColorValue,proto3" json:"public_screen_color_value,omitempty"` // 公共屏幕颜色值
	TimeLimit              int32                   `protobuf:"varint,14,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`                                           // 时间限制
	BgType                 int32                   `protobuf:"varint,15,opt,name=bg_type,json=bgType,proto3" json:"bg_type,omitempty"`                                                    // 背景类型
	EmptyStartColor        string                  `protobuf:"bytes,16,opt,name=empty_start_color,json=emptyStartColor,proto3" json:"empty_start_color,omitempty"`                        // 空状态起始颜色
	EmptyEndColor          string                  `protobuf:"bytes,17,opt,name=empty_end_color,json=emptyEndColor,proto3" json:"empty_end_color,omitempty"`                              // 空状态结束颜色
	ImageColdBG            *Image                  `protobuf:"bytes,18,opt,name=imageColdBG,proto3" json:"imageColdBG,omitempty"`                                                         // 冷背景图片
	MicBGColorValue        string                  `protobuf:"bytes,19,opt,name=micBGColorValue,proto3" json:"micBGColorValue,omitempty"`                                                 // 麦克风背景颜色值
	IconMicNormals         []*Image                `protobuf:"bytes,20,rep,name=iconMicNormals,proto3" json:"iconMicNormals,omitempty"`                                                   // 麦克风普通图标
	IconMicLock            *Image                  `protobuf:"bytes,21,opt,name=iconMicLock,proto3" json:"iconMicLock,omitempty"`                                                         // 麦克风锁定图标
	ColorMicText           string                  `protobuf:"bytes,22,opt,name=colorMicText,proto3" json:"colorMicText,omitempty"`                                                       // 麦克风文本颜色
	ColorMicLine           string                  `protobuf:"bytes,23,opt,name=colorMicLine,proto3" json:"colorMicLine,omitempty"`                                                       // 麦克风线条颜色
	ColorMicBG             string                  `protobuf:"bytes,24,opt,name=colorMicBG,proto3" json:"colorMicBG,omitempty"`                                                           // 麦克风背景颜色
	ThemeLabel             string                  `protobuf:"bytes,25,opt,name=themeLabel,proto3" json:"themeLabel,omitempty"`                                                           // 主题标签
	BgStatus               int32                   `protobuf:"varint,26,opt,name=bgStatus,proto3" json:"bgStatus,omitempty"`                                                              // 背景状态
	AnimateInfo            *AnimatedBgInfo         `protobuf:"bytes,27,opt,name=animateInfo,proto3" json:"animateInfo,omitempty"`                                                         // 动画信息
	IdStr                  string                  `protobuf:"bytes,28,opt,name=idStr,proto3" json:"idStr,omitempty"`                                                                     // ID 字符串
	PlayMode               int32                   `protobuf:"varint,29,opt,name=play_mode,json=playMode,proto3" json:"play_mode,omitempty"`                                              // 播放模式
	ThemeTag               string                  `protobuf:"bytes,30,opt,name=theme_tag,json=themeTag,proto3" json:"theme_tag,omitempty"`                                               // 主题标签
	StartTime              int64                   `protobuf:"varint,31,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                           // 开始时间
	EndTime                int64                   `protobuf:"varint,32,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                 // 结束时间
	FormatType             int32                   `protobuf:"varint,33,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty"`                                        // 格式类型
	SpeakingImageV2        *AudioSpeakingImageList `protobuf:"bytes,34,opt,name=speaking_image_v2,json=speakingImageV2,proto3" json:"speaking_image_v2,omitempty"`                        // 讲话图片列表 V2
}

func (x *AudioBGData) Reset() {
	*x = AudioBGData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioBGData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioBGData) ProtoMessage() {}

func (x *AudioBGData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioBGData.ProtoReflect.Descriptor instead.
func (*AudioBGData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{174}
}

func (x *AudioBGData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioBGData) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *AudioBGData) GetImgType() int32 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *AudioBGData) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AudioBGData) GetImageThumbnail() *Image {
	if x != nil {
		return x.ImageThumbnail
	}
	return nil
}

func (x *AudioBGData) GetImageAnimatedBG() *Image {
	if x != nil {
		return x.ImageAnimatedBG
	}
	return nil
}

func (x *AudioBGData) GetImageNormalAvatar() *Image {
	if x != nil {
		return x.ImageNormalAvatar
	}
	return nil
}

func (x *AudioBGData) GetImageStartupAvatar() *Image {
	if x != nil {
		return x.ImageStartupAvatar
	}
	return nil
}

func (x *AudioBGData) GetImageChatJoinIcon() *Image {
	if x != nil {
		return x.ImageChatJoinIcon
	}
	return nil
}

func (x *AudioBGData) GetImageStaticBG() *Image {
	if x != nil {
		return x.ImageStaticBG
	}
	return nil
}

func (x *AudioBGData) GetSpeakingImageList() *AudioSpeakingImageList {
	if x != nil {
		return x.SpeakingImageList
	}
	return nil
}

func (x *AudioBGData) GetStatusColorValue() string {
	if x != nil {
		return x.StatusColorValue
	}
	return ""
}

func (x *AudioBGData) GetPublicScreenColorValue() string {
	if x != nil {
		return x.PublicScreenColorValue
	}
	return ""
}

func (x *AudioBGData) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *AudioBGData) GetBgType() int32 {
	if x != nil {
		return x.BgType
	}
	return 0
}

func (x *AudioBGData) GetEmptyStartColor() string {
	if x != nil {
		return x.EmptyStartColor
	}
	return ""
}

func (x *AudioBGData) GetEmptyEndColor() string {
	if x != nil {
		return x.EmptyEndColor
	}
	return ""
}

func (x *AudioBGData) GetImageColdBG() *Image {
	if x != nil {
		return x.ImageColdBG
	}
	return nil
}

func (x *AudioBGData) GetMicBGColorValue() string {
	if x != nil {
		return x.MicBGColorValue
	}
	return ""
}

func (x *AudioBGData) GetIconMicNormals() []*Image {
	if x != nil {
		return x.IconMicNormals
	}
	return nil
}

func (x *AudioBGData) GetIconMicLock() *Image {
	if x != nil {
		return x.IconMicLock
	}
	return nil
}

func (x *AudioBGData) GetColorMicText() string {
	if x != nil {
		return x.ColorMicText
	}
	return ""
}

func (x *AudioBGData) GetColorMicLine() string {
	if x != nil {
		return x.ColorMicLine
	}
	return ""
}

func (x *AudioBGData) GetColorMicBG() string {
	if x != nil {
		return x.ColorMicBG
	}
	return ""
}

func (x *AudioBGData) GetThemeLabel() string {
	if x != nil {
		return x.ThemeLabel
	}
	return ""
}

func (x *AudioBGData) GetBgStatus() int32 {
	if x != nil {
		return x.BgStatus
	}
	return 0
}

func (x *AudioBGData) GetAnimateInfo() *AnimatedBgInfo {
	if x != nil {
		return x.AnimateInfo
	}
	return nil
}

func (x *AudioBGData) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *AudioBGData) GetPlayMode() int32 {
	if x != nil {
		return x.PlayMode
	}
	return 0
}

func (x *AudioBGData) GetThemeTag() string {
	if x != nil {
		return x.ThemeTag
	}
	return ""
}

func (x *AudioBGData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AudioBGData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AudioBGData) GetFormatType() int32 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

func (x *AudioBGData) GetSpeakingImageV2() *AudioSpeakingImageList {
	if x != nil {
		return x.SpeakingImageV2
	}
	return nil
}

// ActivityRoomSkinInfo 消息定义
type ActivityRoomSkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerticalScreen   map[int32]*Image `protobuf:"bytes,1,rep,name=vertical_screen,json=verticalScreen,proto3" json:"vertical_screen,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // 竖屏皮肤
	HorizontalScreen map[int32]*Image `protobuf:"bytes,2,rep,name=horizontal_screen,json=horizontalScreen,proto3" json:"horizontal_screen,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 横屏皮肤
}

func (x *ActivityRoomSkinInfo) Reset() {
	*x = ActivityRoomSkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRoomSkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRoomSkinInfo) ProtoMessage() {}

func (x *ActivityRoomSkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRoomSkinInfo.ProtoReflect.Descriptor instead.
func (*ActivityRoomSkinInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{175}
}

func (x *ActivityRoomSkinInfo) GetVerticalScreen() map[int32]*Image {
	if x != nil {
		return x.VerticalScreen
	}
	return nil
}

func (x *ActivityRoomSkinInfo) GetHorizontalScreen() map[int32]*Image {
	if x != nil {
		return x.HorizontalScreen
	}
	return nil
}

// Image 消息定义
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                        // 图片 URL
	AltText string `protobuf:"bytes,2,opt,name=alt_text,json=altText,proto3" json:"alt_text,omitempty"` // 图片描述文本
	Width   int64  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`                   // 图片宽度
	Height  int64  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`                 // 图片高度
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{176}
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetAltText() string {
	if x != nil {
		return x.AltText
	}
	return ""
}

func (x *Image) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// AudioSpeakingImageList 消息定义
type AudioSpeakingImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"` // 图片列表
}

func (x *AudioSpeakingImageList) Reset() {
	*x = AudioSpeakingImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSpeakingImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSpeakingImageList) ProtoMessage() {}

func (x *AudioSpeakingImageList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSpeakingImageList.ProtoReflect.Descriptor instead.
func (*AudioSpeakingImageList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{177}
}

func (x *AudioSpeakingImageList) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

// AnimatedBgInfo 消息定义
type AnimatedBgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationUrl string `protobuf:"bytes,1,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"` // 动画 URL
	Duration     int32  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                            // 动画持续时间
}

func (x *AnimatedBgInfo) Reset() {
	*x = AnimatedBgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimatedBgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimatedBgInfo) ProtoMessage() {}

func (x *AnimatedBgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimatedBgInfo.ProtoReflect.Descriptor instead.
func (*AnimatedBgInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{178}
}

func (x *AnimatedBgInfo) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

func (x *AnimatedBgInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// ActivityLiveRecommendConfig 消息定义
type ActivityLiveRecommendConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                        // 活动名称
	Level        string                                   `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`                                      // 活动级别
	StartTime    int64                                    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`            // 活动开始时间
	EndTime      int64                                    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                  // 活动结束时间
	LiveType     int32                                    `protobuf:"varint,5,opt,name=live_type,json=liveType,proto3" json:"live_type,omitempty"`               // 直播类型
	ActorUids    []int64                                  `protobuf:"varint,6,rep,packed,name=actor_uids,json=actorUids,proto3" json:"actor_uids,omitempty"`     // 演员的 UID 列表
	EpisodeInfo  *ActivityLiveRecommendConfig_EpisodeInfo `protobuf:"bytes,7,opt,name=episode_info,json=episodeInfo,proto3" json:"episode_info,omitempty"`       // 剧集信息
	ActorOpenids []string                                 `protobuf:"bytes,5000,rep,name=actor_openids,json=actorOpenids,proto3" json:"actor_openids,omitempty"` // 演员的 OpenID 列表
}

func (x *ActivityLiveRecommendConfig) Reset() {
	*x = ActivityLiveRecommendConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLiveRecommendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLiveRecommendConfig) ProtoMessage() {}

func (x *ActivityLiveRecommendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLiveRecommendConfig.ProtoReflect.Descriptor instead.
func (*ActivityLiveRecommendConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{179}
}

func (x *ActivityLiveRecommendConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityLiveRecommendConfig) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ActivityLiveRecommendConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActivityLiveRecommendConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityLiveRecommendConfig) GetLiveType() int32 {
	if x != nil {
		return x.LiveType
	}
	return 0
}

func (x *ActivityLiveRecommendConfig) GetActorUids() []int64 {
	if x != nil {
		return x.ActorUids
	}
	return nil
}

func (x *ActivityLiveRecommendConfig) GetEpisodeInfo() *ActivityLiveRecommendConfig_EpisodeInfo {
	if x != nil {
		return x.EpisodeInfo
	}
	return nil
}

func (x *ActivityLiveRecommendConfig) GetActorOpenids() []string {
	if x != nil {
		return x.ActorOpenids
	}
	return nil
}

// IOSFragment 消息定义
type IOSFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                    // 碎片的名称
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"` // 是否开启该碎片
}

func (x *IOSFragment) Reset() {
	*x = IOSFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSFragment) ProtoMessage() {}

func (x *IOSFragment) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSFragment.ProtoReflect.Descriptor instead.
func (*IOSFragment) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{180}
}

func (x *IOSFragment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IOSFragment) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

// IOSContainerLayoutRule 消息定义
type IOSContainerLayoutRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items       []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`                                 // 布局规则中的项
	RuleReplace bool     `protobuf:"varint,2,opt,name=rule_replace,json=ruleReplace,proto3" json:"rule_replace,omitempty"` // 是否替换现有规则
	Target      string   `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`                               // 布局目标
	RuleType    string   `protobuf:"bytes,4,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`           // 规则类型
}

func (x *IOSContainerLayoutRule) Reset() {
	*x = IOSContainerLayoutRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSContainerLayoutRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSContainerLayoutRule) ProtoMessage() {}

func (x *IOSContainerLayoutRule) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSContainerLayoutRule.ProtoReflect.Descriptor instead.
func (*IOSContainerLayoutRule) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{181}
}

func (x *IOSContainerLayoutRule) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *IOSContainerLayoutRule) GetRuleReplace() bool {
	if x != nil {
		return x.RuleReplace
	}
	return false
}

func (x *IOSContainerLayoutRule) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *IOSContainerLayoutRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

// IOSContainerLayout 消息定义
type IOSContainerLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // 布局的名称
	LayoutRule *IOSContainerLayoutRule `protobuf:"bytes,2,opt,name=layout_rule,json=layoutRule,proto3" json:"layout_rule,omitempty"` // 布局规则
	Dsl        int32                   `protobuf:"varint,3,opt,name=dsl,proto3" json:"dsl,omitempty"`                                // 布局 DSL 描述
}

func (x *IOSContainerLayout) Reset() {
	*x = IOSContainerLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSContainerLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSContainerLayout) ProtoMessage() {}

func (x *IOSContainerLayout) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSContainerLayout.ProtoReflect.Descriptor instead.
func (*IOSContainerLayout) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{182}
}

func (x *IOSContainerLayout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IOSContainerLayout) GetLayoutRule() *IOSContainerLayoutRule {
	if x != nil {
		return x.LayoutRule
	}
	return nil
}

func (x *IOSContainerLayout) GetDsl() int32 {
	if x != nil {
		return x.Dsl
	}
	return 0
}

// IOSClientComponent 消息定义
type IOSClientComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fragments       []*IOSFragment        `protobuf:"bytes,1,rep,name=fragments,proto3" json:"fragments,omitempty"`                                    // 碎片信息
	LandscapeLayout []*IOSContainerLayout `protobuf:"bytes,2,rep,name=landscape_layout,json=landscapeLayout,proto3" json:"landscape_layout,omitempty"` // 横屏布局
	PortraitLayout  []*IOSContainerLayout `protobuf:"bytes,3,rep,name=portrait_layout,json=portraitLayout,proto3" json:"portrait_layout,omitempty"`    // 竖屏布局
	IsOpen          bool                  `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                           // 是否开启组件
	TemplateId      int64                 `protobuf:"varint,5,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`               // 模板 ID
	Elements        []*IOSFragment        `protobuf:"bytes,6,rep,name=elements,proto3" json:"elements,omitempty"`                                      // 元素信息
}

func (x *IOSClientComponent) Reset() {
	*x = IOSClientComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSClientComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSClientComponent) ProtoMessage() {}

func (x *IOSClientComponent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSClientComponent.ProtoReflect.Descriptor instead.
func (*IOSClientComponent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{183}
}

func (x *IOSClientComponent) GetFragments() []*IOSFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *IOSClientComponent) GetLandscapeLayout() []*IOSContainerLayout {
	if x != nil {
		return x.LandscapeLayout
	}
	return nil
}

func (x *IOSClientComponent) GetPortraitLayout() []*IOSContainerLayout {
	if x != nil {
		return x.PortraitLayout
	}
	return nil
}

func (x *IOSClientComponent) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *IOSClientComponent) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *IOSClientComponent) GetElements() []*IOSFragment {
	if x != nil {
		return x.Elements
	}
	return nil
}

// RoomPlatformComponentsData 消息定义
type RoomPlatformComponentsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomTitle        *RoomTitle            `protobuf:"bytes,1,opt,name=room_title,json=roomTitle,proto3" json:"room_title,omitempty"`                        // 房间标题信息
	RoomCount        *RoomViewStats        `protobuf:"bytes,2,opt,name=room_count,json=roomCount,proto3" json:"room_count,omitempty"`                        // 房间观看统计
	RoomAvator       *RoomAvator           `protobuf:"bytes,3,opt,name=room_avator,json=roomAvator,proto3" json:"room_avator,omitempty"`                     // 房间头像信息
	PublicScreenInfo *RoomPublicScreenInfo `protobuf:"bytes,4,opt,name=public_screen_info,json=publicScreenInfo,proto3" json:"public_screen_info,omitempty"` // 公共屏幕信息
	FullVideoBtn     *RoomFullVideoBTN     `protobuf:"bytes,5,opt,name=full_video_btn,json=fullVideoBtn,proto3" json:"full_video_btn,omitempty"`             // 全屏按钮信息
	Banner           *RoomBanner           `protobuf:"bytes,6,opt,name=banner,proto3" json:"banner,omitempty"`                                               // 横幅信息
	Core             *RoomCore             `protobuf:"bytes,7,opt,name=core,proto3" json:"core,omitempty"`                                                   // 核心信息
}

func (x *RoomPlatformComponentsData) Reset() {
	*x = RoomPlatformComponentsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomPlatformComponentsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomPlatformComponentsData) ProtoMessage() {}

func (x *RoomPlatformComponentsData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomPlatformComponentsData.ProtoReflect.Descriptor instead.
func (*RoomPlatformComponentsData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{184}
}

func (x *RoomPlatformComponentsData) GetRoomTitle() *RoomTitle {
	if x != nil {
		return x.RoomTitle
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetRoomCount() *RoomViewStats {
	if x != nil {
		return x.RoomCount
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetRoomAvator() *RoomAvator {
	if x != nil {
		return x.RoomAvator
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetPublicScreenInfo() *RoomPublicScreenInfo {
	if x != nil {
		return x.PublicScreenInfo
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetFullVideoBtn() *RoomFullVideoBTN {
	if x != nil {
		return x.FullVideoBtn
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetBanner() *RoomBanner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *RoomPlatformComponentsData) GetCore() *RoomCore {
	if x != nil {
		return x.Core
	}
	return nil
}

// RoomPublicScreenInfo 消息定义
type RoomPublicScreenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachments     *RoomPublicScreenAttachments `protobuf:"bytes,1,opt,name=attachments,proto3" json:"attachments,omitempty"`                                // 附件信息
	BackgroundColor string                       `protobuf:"bytes,2,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"` // 背景颜色
	LongPressColor  string                       `protobuf:"bytes,3,opt,name=long_press_color,json=longPressColor,proto3" json:"long_press_color,omitempty"`  // 长按颜色
}

func (x *RoomPublicScreenInfo) Reset() {
	*x = RoomPublicScreenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomPublicScreenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomPublicScreenInfo) ProtoMessage() {}

func (x *RoomPublicScreenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomPublicScreenInfo.ProtoReflect.Descriptor instead.
func (*RoomPublicScreenInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{185}
}

func (x *RoomPublicScreenInfo) GetAttachments() *RoomPublicScreenAttachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *RoomPublicScreenInfo) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *RoomPublicScreenInfo) GetLongPressColor() string {
	if x != nil {
		return x.LongPressColor
	}
	return ""
}

// RoomPublicScreenAttachments 消息定义
type RoomPublicScreenAttachments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotMessageTray           int64 `protobuf:"varint,1,opt,name=hot_message_tray,json=hotMessageTray,proto3" json:"hot_message_tray,omitempty"`                                   // 热门消息托盘
	HeightSetting            int64 `protobuf:"varint,2,opt,name=height_setting,json=heightSetting,proto3" json:"height_setting,omitempty"`                                        // 高度设置
	FirstMessageShowOpt      int64 `protobuf:"varint,3,opt,name=first_message_show_opt,json=firstMessageShowOpt,proto3" json:"first_message_show_opt,omitempty"`                  // 首条消息显示选项
	AnchorColdMessageShowOpt int64 `protobuf:"varint,4,opt,name=anchor_cold_message_show_opt,json=anchorColdMessageShowOpt,proto3" json:"anchor_cold_message_show_opt,omitempty"` // 主播冷消息显示选项
}

func (x *RoomPublicScreenAttachments) Reset() {
	*x = RoomPublicScreenAttachments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomPublicScreenAttachments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomPublicScreenAttachments) ProtoMessage() {}

func (x *RoomPublicScreenAttachments) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomPublicScreenAttachments.ProtoReflect.Descriptor instead.
func (*RoomPublicScreenAttachments) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{186}
}

func (x *RoomPublicScreenAttachments) GetHotMessageTray() int64 {
	if x != nil {
		return x.HotMessageTray
	}
	return 0
}

func (x *RoomPublicScreenAttachments) GetHeightSetting() int64 {
	if x != nil {
		return x.HeightSetting
	}
	return 0
}

func (x *RoomPublicScreenAttachments) GetFirstMessageShowOpt() int64 {
	if x != nil {
		return x.FirstMessageShowOpt
	}
	return 0
}

func (x *RoomPublicScreenAttachments) GetAnchorColdMessageShowOpt() int64 {
	if x != nil {
		return x.AnchorColdMessageShowOpt
	}
	return 0
}

// RoomFullVideoBTN 消息定义
type RoomFullVideoBTN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show        int64  `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`                                 // 是否显示
	Icon        *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                  // 图标
	DisableIcon *Image `protobuf:"bytes,3,opt,name=disable_icon,json=disableIcon,proto3" json:"disable_icon,omitempty"` // 禁用状态的图标
	ShowType    int64  `protobuf:"varint,4,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`         // 显示类型
}

func (x *RoomFullVideoBTN) Reset() {
	*x = RoomFullVideoBTN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFullVideoBTN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFullVideoBTN) ProtoMessage() {}

func (x *RoomFullVideoBTN) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFullVideoBTN.ProtoReflect.Descriptor instead.
func (*RoomFullVideoBTN) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{187}
}

func (x *RoomFullVideoBTN) GetShow() int64 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *RoomFullVideoBTN) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *RoomFullVideoBTN) GetDisableIcon() *Image {
	if x != nil {
		return x.DisableIcon
	}
	return nil
}

func (x *RoomFullVideoBTN) GetShowType() int64 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

// RoomBanner 消息定义
type RoomBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMsg int64 `protobuf:"varint,1,opt,name=AuthMsg,proto3" json:"AuthMsg,omitempty"` // 授权信息
}

func (x *RoomBanner) Reset() {
	*x = RoomBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBanner) ProtoMessage() {}

func (x *RoomBanner) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBanner.ProtoReflect.Descriptor instead.
func (*RoomBanner) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{188}
}

func (x *RoomBanner) GetAuthMsg() int64 {
	if x != nil {
		return x.AuthMsg
	}
	return 0
}

// AvatorBorder 消息定义
type AvatorBorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon      *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                            // 边框图标
	Level     int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                         // 边框等级
	ThumbIcon *Image `protobuf:"bytes,3,opt,name=thumb_icon,json=thumbIcon,proto3" json:"thumb_icon,omitempty"` // 缩略图标
	DressId   string `protobuf:"bytes,4,opt,name=dress_id,json=dressId,proto3" json:"dress_id,omitempty"`       // 装扮 ID
}

func (x *AvatorBorder) Reset() {
	*x = AvatorBorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatorBorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatorBorder) ProtoMessage() {}

func (x *AvatorBorder) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatorBorder.ProtoReflect.Descriptor instead.
func (*AvatorBorder) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{189}
}

func (x *AvatorBorder) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *AvatorBorder) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatorBorder) GetThumbIcon() *Image {
	if x != nil {
		return x.ThumbIcon
	}
	return nil
}

func (x *AvatorBorder) GetDressId() string {
	if x != nil {
		return x.DressId
	}
	return ""
}

// RoomCore 消息定义
type RoomCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       int64  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                       // 房间 ID
	AnchorId     int64  `protobuf:"varint,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`                 // 主播 ID
	AnchorOpenId string `protobuf:"bytes,5000,opt,name=anchor_open_id,json=anchorOpenId,proto3" json:"anchor_open_id,omitempty"` // 主播 Open ID
}

func (x *RoomCore) Reset() {
	*x = RoomCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCore) ProtoMessage() {}

func (x *RoomCore) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCore.ProtoReflect.Descriptor instead.
func (*RoomCore) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{190}
}

func (x *RoomCore) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomCore) GetAnchorId() int64 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

func (x *RoomCore) GetAnchorOpenId() string {
	if x != nil {
		return x.AnchorOpenId
	}
	return ""
}

// RoomViewStats 消息定义
type RoomViewStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHidden            bool   `protobuf:"varint,1,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`                                    // 是否隐藏统计信息
	DisplayShort        string `protobuf:"bytes,2,opt,name=display_short,json=displayShort,proto3" json:"display_short,omitempty"`                         // 简短显示信息
	DisplayMiddle       string `protobuf:"bytes,3,opt,name=display_middle,json=displayMiddle,proto3" json:"display_middle,omitempty"`                      // 中等长度显示信息
	DisplayLong         string `protobuf:"bytes,4,opt,name=display_long,json=displayLong,proto3" json:"display_long,omitempty"`                            // 全部显示信息
	DisplayValue        int64  `protobuf:"varint,5,opt,name=display_value,json=displayValue,proto3" json:"display_value,omitempty"`                        // 统计值
	DisplayVersion      int64  `protobuf:"varint,6,opt,name=display_version,json=displayVersion,proto3" json:"display_version,omitempty"`                  // 显示版本
	Incremental         bool   `protobuf:"varint,7,opt,name=incremental,proto3" json:"incremental,omitempty"`                                              // 是否增量更新
	DisplayType         int32  `protobuf:"varint,8,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`                           // 显示类型
	DisplayShortAnchor  string `protobuf:"bytes,9,opt,name=display_short_anchor,json=displayShortAnchor,proto3" json:"display_short_anchor,omitempty"`     // 主播端简短显示信息
	DisplayMiddleAnchor string `protobuf:"bytes,10,opt,name=display_middle_anchor,json=displayMiddleAnchor,proto3" json:"display_middle_anchor,omitempty"` // 主播端中等长度显示信息
	DisplayLongAnchor   string `protobuf:"bytes,11,opt,name=display_long_anchor,json=displayLongAnchor,proto3" json:"display_long_anchor,omitempty"`       // 主播端完整显示信息
}

func (x *RoomViewStats) Reset() {
	*x = RoomViewStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomViewStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomViewStats) ProtoMessage() {}

func (x *RoomViewStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomViewStats.ProtoReflect.Descriptor instead.
func (*RoomViewStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{191}
}

func (x *RoomViewStats) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *RoomViewStats) GetDisplayShort() string {
	if x != nil {
		return x.DisplayShort
	}
	return ""
}

func (x *RoomViewStats) GetDisplayMiddle() string {
	if x != nil {
		return x.DisplayMiddle
	}
	return ""
}

func (x *RoomViewStats) GetDisplayLong() string {
	if x != nil {
		return x.DisplayLong
	}
	return ""
}

func (x *RoomViewStats) GetDisplayValue() int64 {
	if x != nil {
		return x.DisplayValue
	}
	return 0
}

func (x *RoomViewStats) GetDisplayVersion() int64 {
	if x != nil {
		return x.DisplayVersion
	}
	return 0
}

func (x *RoomViewStats) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *RoomViewStats) GetDisplayType() int32 {
	if x != nil {
		return x.DisplayType
	}
	return 0
}

func (x *RoomViewStats) GetDisplayShortAnchor() string {
	if x != nil {
		return x.DisplayShortAnchor
	}
	return ""
}

func (x *RoomViewStats) GetDisplayMiddleAnchor() string {
	if x != nil {
		return x.DisplayMiddleAnchor
	}
	return ""
}

func (x *RoomViewStats) GetDisplayLongAnchor() string {
	if x != nil {
		return x.DisplayLongAnchor
	}
	return ""
}

// PaidLiveSubscribe 消息定义
type PaidLiveSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaidLiveType       int64 `protobuf:"varint,1,opt,name=paid_live_type,json=paidLiveType,proto3" json:"paid_live_type,omitempty"`                   // 付费直播类型
	SubscribeEventTime int64 `protobuf:"varint,2,opt,name=subscribe_event_time,json=subscribeEventTime,proto3" json:"subscribe_event_time,omitempty"` // 订阅事件时间
}

func (x *PaidLiveSubscribe) Reset() {
	*x = PaidLiveSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveSubscribe) ProtoMessage() {}

func (x *PaidLiveSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveSubscribe.ProtoReflect.Descriptor instead.
func (*PaidLiveSubscribe) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{192}
}

func (x *PaidLiveSubscribe) GetPaidLiveType() int64 {
	if x != nil {
		return x.PaidLiveType
	}
	return 0
}

func (x *PaidLiveSubscribe) GetSubscribeEventTime() int64 {
	if x != nil {
		return x.SubscribeEventTime
	}
	return 0
}

// RoomTitle 消息定义
type RoomTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Introduction string               `protobuf:"bytes,2,opt,name=introduction,proto3" json:"introduction,omitempty"`               // 简介
	LeftTag      int64                `protobuf:"varint,3,opt,name=left_tag,json=leftTag,proto3" json:"left_tag,omitempty"`         // 左侧标签
	LeftPeriod   string               `protobuf:"bytes,4,opt,name=left_period,json=leftPeriod,proto3" json:"left_period,omitempty"` // 左侧周期
	LeftToast    string               `protobuf:"bytes,5,opt,name=left_toast,json=leftToast,proto3" json:"left_toast,omitempty"`    // 左侧提示
	LeftIcon     *RoomTitle_TitleIcon `protobuf:"bytes,6,opt,name=left_icon,json=leftIcon,proto3" json:"left_icon,omitempty"`       // 左侧图标
}

func (x *RoomTitle) Reset() {
	*x = RoomTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTitle) ProtoMessage() {}

func (x *RoomTitle) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTitle.ProtoReflect.Descriptor instead.
func (*RoomTitle) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{193}
}

func (x *RoomTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RoomTitle) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *RoomTitle) GetLeftTag() int64 {
	if x != nil {
		return x.LeftTag
	}
	return 0
}

func (x *RoomTitle) GetLeftPeriod() string {
	if x != nil {
		return x.LeftPeriod
	}
	return ""
}

func (x *RoomTitle) GetLeftToast() string {
	if x != nil {
		return x.LeftToast
	}
	return ""
}

func (x *RoomTitle) GetLeftIcon() *RoomTitle_TitleIcon {
	if x != nil {
		return x.LeftIcon
	}
	return nil
}

// RoomAvator 消息定义
type RoomAvator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar              *Image          `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                         // 头像
	AuthenticationInfo  *Image          `protobuf:"bytes,2,opt,name=authentication_info,json=authenticationInfo,proto3" json:"authentication_info,omitempty"`       // 认证信息
	NickName            string          `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                     // 昵称
	HasFansClub         bool            `protobuf:"varint,4,opt,name=has_fans_club,json=hasFansClub,proto3" json:"has_fans_club,omitempty"`                         // 是否有粉丝俱乐部
	FollowStatus        int64           `protobuf:"varint,5,opt,name=follow_status,json=followStatus,proto3" json:"follow_status,omitempty"`                        // 关注状态
	InvalidFollowStatus bool            `protobuf:"varint,6,opt,name=invalid_follow_status,json=invalidFollowStatus,proto3" json:"invalid_follow_status,omitempty"` // 无效关注状态
	FollowReportScene   int64           `protobuf:"varint,7,opt,name=follow_report_scene,json=followReportScene,proto3" json:"follow_report_scene,omitempty"`       // 关注报告场景
	Border              *AvatorBorder   `protobuf:"bytes,8,opt,name=border,proto3" json:"border,omitempty"`                                                         // 头像边框
	FirstLabel          []int64         `protobuf:"varint,9,rep,packed,name=first_label,json=firstLabel,proto3" json:"first_label,omitempty"`                       // 第一个标签
	SecondLabel         []int64         `protobuf:"varint,10,rep,packed,name=second_label,json=secondLabel,proto3" json:"second_label,omitempty"`                   // 第二个标签
	FansClubType        int64           `protobuf:"varint,11,opt,name=fans_club_type,json=fansClubType,proto3" json:"fans_club_type,omitempty"`                     // 粉丝俱乐部类型
	AnimationType       int64           `protobuf:"varint,12,opt,name=animation_type,json=animationType,proto3" json:"animation_type,omitempty"`                    // 动画类型
	Uid                 int64           `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`                                                             // 用户 ID
	SecUid              string          `protobuf:"bytes,14,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`                                          // 安全用户 ID
	FanTicket           int64           `protobuf:"varint,15,opt,name=fan_ticket,json=fanTicket,proto3" json:"fan_ticket,omitempty"`                                // 粉丝票
	LikeCount           int64           `protobuf:"varint,16,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`                                // 点赞数
	TotalUserStr        string          `protobuf:"bytes,17,opt,name=total_user_str,json=totalUserStr,proto3" json:"total_user_str,omitempty"`                      // 总用户字符串
	Secret              int32           `protobuf:"varint,18,opt,name=secret,proto3" json:"secret,omitempty"`                                                       // 秘密
	FirstTabLabel       *AnchorTabLabel `protobuf:"bytes,19,opt,name=first_tab_label,json=firstTabLabel,proto3" json:"first_tab_label,omitempty"`                   // 第一个标签
	SecondTabLabel      *AnchorTabLabel `protobuf:"bytes,20,opt,name=second_tab_label,json=secondTabLabel,proto3" json:"second_tab_label,omitempty"`                // 第二个标签
	OpenId              string          `protobuf:"bytes,5000,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`                                        // Open ID
}

func (x *RoomAvator) Reset() {
	*x = RoomAvator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAvator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAvator) ProtoMessage() {}

func (x *RoomAvator) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAvator.ProtoReflect.Descriptor instead.
func (*RoomAvator) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{194}
}

func (x *RoomAvator) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *RoomAvator) GetAuthenticationInfo() *Image {
	if x != nil {
		return x.AuthenticationInfo
	}
	return nil
}

func (x *RoomAvator) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RoomAvator) GetHasFansClub() bool {
	if x != nil {
		return x.HasFansClub
	}
	return false
}

func (x *RoomAvator) GetFollowStatus() int64 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *RoomAvator) GetInvalidFollowStatus() bool {
	if x != nil {
		return x.InvalidFollowStatus
	}
	return false
}

func (x *RoomAvator) GetFollowReportScene() int64 {
	if x != nil {
		return x.FollowReportScene
	}
	return 0
}

func (x *RoomAvator) GetBorder() *AvatorBorder {
	if x != nil {
		return x.Border
	}
	return nil
}

func (x *RoomAvator) GetFirstLabel() []int64 {
	if x != nil {
		return x.FirstLabel
	}
	return nil
}

func (x *RoomAvator) GetSecondLabel() []int64 {
	if x != nil {
		return x.SecondLabel
	}
	return nil
}

func (x *RoomAvator) GetFansClubType() int64 {
	if x != nil {
		return x.FansClubType
	}
	return 0
}

func (x *RoomAvator) GetAnimationType() int64 {
	if x != nil {
		return x.AnimationType
	}
	return 0
}

func (x *RoomAvator) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RoomAvator) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

func (x *RoomAvator) GetFanTicket() int64 {
	if x != nil {
		return x.FanTicket
	}
	return 0
}

func (x *RoomAvator) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *RoomAvator) GetTotalUserStr() string {
	if x != nil {
		return x.TotalUserStr
	}
	return ""
}

func (x *RoomAvator) GetSecret() int32 {
	if x != nil {
		return x.Secret
	}
	return 0
}

func (x *RoomAvator) GetFirstTabLabel() *AnchorTabLabel {
	if x != nil {
		return x.FirstTabLabel
	}
	return nil
}

func (x *RoomAvator) GetSecondTabLabel() *AnchorTabLabel {
	if x != nil {
		return x.SecondTabLabel
	}
	return nil
}

func (x *RoomAvator) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// AnchorTabLabel 消息定义
type AnchorTabLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content           string            `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                                                                                    // 内容
	Label             *Image            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`                                                                                                                        // 标签图像
	Icon              *Image            `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                                                          // 图标
	Style             int32             `protobuf:"varint,4,opt,name=style,proto3" json:"style,omitempty"`                                                                                                                       // 样式
	Type              int32             `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                                                                                                         // 类型
	Key               string            `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`                                                                                                                            // 键
	AccessibleContent string            `protobuf:"bytes,7,opt,name=accessible_content,json=accessibleContent,proto3" json:"accessible_content,omitempty"`                                                                       // 可访问内容
	TrackParams       map[string]string `protobuf:"bytes,8,rep,name=track_params,json=trackParams,proto3" json:"track_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 跟踪参数
	DslLabel          *DSLDetail        `protobuf:"bytes,9,opt,name=dsl_label,json=dslLabel,proto3" json:"dsl_label,omitempty"`                                                                                                  // DSL 标签
}

func (x *AnchorTabLabel) Reset() {
	*x = AnchorTabLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorTabLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorTabLabel) ProtoMessage() {}

func (x *AnchorTabLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorTabLabel.ProtoReflect.Descriptor instead.
func (*AnchorTabLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{195}
}

func (x *AnchorTabLabel) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnchorTabLabel) GetLabel() *Image {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *AnchorTabLabel) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *AnchorTabLabel) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *AnchorTabLabel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AnchorTabLabel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AnchorTabLabel) GetAccessibleContent() string {
	if x != nil {
		return x.AccessibleContent
	}
	return ""
}

func (x *AnchorTabLabel) GetTrackParams() map[string]string {
	if x != nil {
		return x.TrackParams
	}
	return nil
}

func (x *AnchorTabLabel) GetDslLabel() *DSLDetail {
	if x != nil {
		return x.DslLabel
	}
	return nil
}

// DSLDetail 消息定义
type DSLDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DslId               int64                `protobuf:"varint,1,opt,name=dsl_id,json=dslId,proto3" json:"dsl_id,omitempty"`                                              // DSL 唯一标识符
	DslType             int64                `protobuf:"varint,2,opt,name=dsl_type,json=dslType,proto3" json:"dsl_type,omitempty"`                                        // DSL 类型
	DslGeckoDownloadUri string               `protobuf:"bytes,3,opt,name=dsl_gecko_download_uri,json=dslGeckoDownloadUri,proto3" json:"dsl_gecko_download_uri,omitempty"` // DSL 下载 URI
	DslSliceInfo        string               `protobuf:"bytes,4,opt,name=dsl_slice_info,json=dslSliceInfo,proto3" json:"dsl_slice_info,omitempty"`                        // DSL 分片信息
	Version             int64                `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                                       // DSL 版本
	DslData             string               `protobuf:"bytes,6,opt,name=dsl_data,json=dslData,proto3" json:"dsl_data,omitempty"`                                         // DSL 数据
	Extra               *DSLDetail_ExtraInfo `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`                                                            // 附加信息
}

func (x *DSLDetail) Reset() {
	*x = DSLDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSLDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSLDetail) ProtoMessage() {}

func (x *DSLDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSLDetail.ProtoReflect.Descriptor instead.
func (*DSLDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{196}
}

func (x *DSLDetail) GetDslId() int64 {
	if x != nil {
		return x.DslId
	}
	return 0
}

func (x *DSLDetail) GetDslType() int64 {
	if x != nil {
		return x.DslType
	}
	return 0
}

func (x *DSLDetail) GetDslGeckoDownloadUri() string {
	if x != nil {
		return x.DslGeckoDownloadUri
	}
	return ""
}

func (x *DSLDetail) GetDslSliceInfo() string {
	if x != nil {
		return x.DslSliceInfo
	}
	return ""
}

func (x *DSLDetail) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DSLDetail) GetDslData() string {
	if x != nil {
		return x.DslData
	}
	return ""
}

func (x *DSLDetail) GetExtra() *DSLDetail_ExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

// QuizExtra 消息定义
type QuizExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizInfos string `protobuf:"bytes,1,opt,name=quiz_infos,json=quizInfos,proto3" json:"quiz_infos,omitempty"` // 测验信息
}

func (x *QuizExtra) Reset() {
	*x = QuizExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizExtra) ProtoMessage() {}

func (x *QuizExtra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizExtra.ProtoReflect.Descriptor instead.
func (*QuizExtra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{197}
}

func (x *QuizExtra) GetQuizInfos() string {
	if x != nil {
		return x.QuizInfos
	}
	return ""
}

// RoomStats 消息定义
type RoomStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                // 房间 ID
	IdStr                   string                          `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`                                                              // 房间 ID 字符串
	FanTicket               int64                           `protobuf:"varint,3,opt,name=fan_ticket,json=fanTicket,proto3" json:"fan_ticket,omitempty"`                                                 // 粉丝票数
	Money                   int64                           `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`                                                                          // 收益金额
	TotalUser               int64                           `protobuf:"varint,5,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`                                                 // 总用户数
	GiftUvCount             int64                           `protobuf:"varint,6,opt,name=gift_uv_count,json=giftUvCount,proto3" json:"gift_uv_count,omitempty"`                                         // 礼物 UV 数量
	FollowCount             int64                           `protobuf:"varint,7,opt,name=follow_count,json=followCount,proto3" json:"follow_count,omitempty"`                                           // 关注数
	UserCountComposition    *RoomStats_UserCountComposition `protobuf:"bytes,8,opt,name=user_count_composition,json=userCountComposition,proto3" json:"user_count_composition,omitempty"`               // 用户组成数据
	Watermelon              int64                           `protobuf:"varint,9,opt,name=watermelon,proto3" json:"watermelon,omitempty"`                                                                // 西瓜数
	DiggCount               int64                           `protobuf:"varint,10,opt,name=digg_count,json=diggCount,proto3" json:"digg_count,omitempty"`                                                // 点赞数
	EnterCount              int64                           `protobuf:"varint,11,opt,name=enter_count,json=enterCount,proto3" json:"enter_count,omitempty"`                                             // 进入人数
	DouPlusPromotion        string                          `protobuf:"bytes,12,opt,name=dou_plus_promotion,json=douPlusPromotion,proto3" json:"dou_plus_promotion,omitempty"`                          // Dou+ 推广信息
	TotalUserDesp           string                          `protobuf:"bytes,13,opt,name=total_user_desp,json=totalUserDesp,proto3" json:"total_user_desp,omitempty"`                                   // 总用户描述
	LikeCount               int64                           `protobuf:"varint,14,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`                                                // 喜欢数
	TotalUserStr            string                          `protobuf:"bytes,15,opt,name=total_user_str,json=totalUserStr,proto3" json:"total_user_str,omitempty"`                                      // 总用户字符串
	UserCountStr            string                          `protobuf:"bytes,16,opt,name=user_count_str,json=userCountStr,proto3" json:"user_count_str,omitempty"`                                      // 用户计数字符串
	CommentCount            int64                           `protobuf:"varint,17,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`                                       // 评论数
	WelfareDonationAmount   int64                           `protobuf:"varint,18,opt,name=welfare_donation_amount,json=welfareDonationAmount,proto3" json:"welfare_donation_amount,omitempty"`          // 福利捐赠金额
	UpRightStatsStr         string                          `protobuf:"bytes,19,opt,name=up_right_stats_str,json=upRightStatsStr,proto3" json:"up_right_stats_str,omitempty"`                           // 右上角统计字符串
	UpRightStatsStrComplete string                          `protobuf:"bytes,20,opt,name=up_right_stats_str_complete,json=upRightStatsStrComplete,proto3" json:"up_right_stats_str_complete,omitempty"` // 右上角完整统计字符串
}

func (x *RoomStats) Reset() {
	*x = RoomStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStats) ProtoMessage() {}

func (x *RoomStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStats.ProtoReflect.Descriptor instead.
func (*RoomStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{198}
}

func (x *RoomStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomStats) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *RoomStats) GetFanTicket() int64 {
	if x != nil {
		return x.FanTicket
	}
	return 0
}

func (x *RoomStats) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *RoomStats) GetTotalUser() int64 {
	if x != nil {
		return x.TotalUser
	}
	return 0
}

func (x *RoomStats) GetGiftUvCount() int64 {
	if x != nil {
		return x.GiftUvCount
	}
	return 0
}

func (x *RoomStats) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *RoomStats) GetUserCountComposition() *RoomStats_UserCountComposition {
	if x != nil {
		return x.UserCountComposition
	}
	return nil
}

func (x *RoomStats) GetWatermelon() int64 {
	if x != nil {
		return x.Watermelon
	}
	return 0
}

func (x *RoomStats) GetDiggCount() int64 {
	if x != nil {
		return x.DiggCount
	}
	return 0
}

func (x *RoomStats) GetEnterCount() int64 {
	if x != nil {
		return x.EnterCount
	}
	return 0
}

func (x *RoomStats) GetDouPlusPromotion() string {
	if x != nil {
		return x.DouPlusPromotion
	}
	return ""
}

func (x *RoomStats) GetTotalUserDesp() string {
	if x != nil {
		return x.TotalUserDesp
	}
	return ""
}

func (x *RoomStats) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *RoomStats) GetTotalUserStr() string {
	if x != nil {
		return x.TotalUserStr
	}
	return ""
}

func (x *RoomStats) GetUserCountStr() string {
	if x != nil {
		return x.UserCountStr
	}
	return ""
}

func (x *RoomStats) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *RoomStats) GetWelfareDonationAmount() int64 {
	if x != nil {
		return x.WelfareDonationAmount
	}
	return 0
}

func (x *RoomStats) GetUpRightStatsStr() string {
	if x != nil {
		return x.UpRightStatsStr
	}
	return ""
}

func (x *RoomStats) GetUpRightStatsStrComplete() string {
	if x != nil {
		return x.UpRightStatsStrComplete
	}
	return ""
}

// TopFan 消息定义
type TopFan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanTicket int64 `protobuf:"varint,1,opt,name=fan_ticket,json=fanTicket,proto3" json:"fan_ticket,omitempty"` // 粉丝票数
	User      *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                             // 用户信息
}

func (x *TopFan) Reset() {
	*x = TopFan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopFan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopFan) ProtoMessage() {}

func (x *TopFan) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopFan.ProtoReflect.Descriptor instead.
func (*TopFan) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{199}
}

func (x *TopFan) GetFanTicket() int64 {
	if x != nil {
		return x.FanTicket
	}
	return 0
}

func (x *TopFan) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// RoomUserAttr 消息定义
type RoomUserAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int64  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // 房间 ID
	RoomIdStr   string `protobuf:"bytes,2,opt,name=room_id_str,json=roomIdStr,proto3" json:"room_id_str,omitempty"`      // 房间 ID 字符串
	SilenceFlag int64  `protobuf:"varint,3,opt,name=silence_flag,json=silenceFlag,proto3" json:"silence_flag,omitempty"` // 静音标志
	AdminFlag   int64  `protobuf:"varint,4,opt,name=admin_flag,json=adminFlag,proto3" json:"admin_flag,omitempty"`       // 管理员标志
	Rank        int64  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                  // 排名
}

func (x *RoomUserAttr) Reset() {
	*x = RoomUserAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomUserAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomUserAttr) ProtoMessage() {}

func (x *RoomUserAttr) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomUserAttr.ProtoReflect.Descriptor instead.
func (*RoomUserAttr) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{200}
}

func (x *RoomUserAttr) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomUserAttr) GetRoomIdStr() string {
	if x != nil {
		return x.RoomIdStr
	}
	return ""
}

func (x *RoomUserAttr) GetSilenceFlag() int64 {
	if x != nil {
		return x.SilenceFlag
	}
	return 0
}

func (x *RoomUserAttr) GetAdminFlag() int64 {
	if x != nil {
		return x.AdminFlag
	}
	return 0
}

func (x *RoomUserAttr) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// BurstInfo 消息定义
type BurstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BurstTimeRemainSeconds int64  `protobuf:"varint,1,opt,name=burst_time_remain_seconds,json=burstTimeRemainSeconds,proto3" json:"burst_time_remain_seconds,omitempty"` // 爆发时间剩余秒数
	Multiple               int64  `protobuf:"varint,2,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                               // 倍数
	PropertyDefinitionId   int64  `protobuf:"varint,3,opt,name=property_definition_id,json=propertyDefinitionId,proto3" json:"property_definition_id,omitempty"`         // 属性定义 ID
	PropertyIcon           *Image `protobuf:"bytes,4,opt,name=property_icon,json=propertyIcon,proto3" json:"property_icon,omitempty"`                                    // 属性图标
}

func (x *BurstInfo) Reset() {
	*x = BurstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstInfo) ProtoMessage() {}

func (x *BurstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstInfo.ProtoReflect.Descriptor instead.
func (*BurstInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{201}
}

func (x *BurstInfo) GetBurstTimeRemainSeconds() int64 {
	if x != nil {
		return x.BurstTimeRemainSeconds
	}
	return 0
}

func (x *BurstInfo) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *BurstInfo) GetPropertyDefinitionId() int64 {
	if x != nil {
		return x.PropertyDefinitionId
	}
	return 0
}

func (x *BurstInfo) GetPropertyIcon() *Image {
	if x != nil {
		return x.PropertyIcon
	}
	return nil
}

// RoomHealthScoreInfo 消息定义
type RoomHealthScoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score         float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`                                    // 健康分数
	BubbleMessage string  `protobuf:"bytes,2,opt,name=bubble_message,json=bubbleMessage,proto3" json:"bubble_message,omitempty"` // 气泡消息
	JumpUrl       string  `protobuf:"bytes,3,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                   // 跳转 URL
}

func (x *RoomHealthScoreInfo) Reset() {
	*x = RoomHealthScoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomHealthScoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomHealthScoreInfo) ProtoMessage() {}

func (x *RoomHealthScoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomHealthScoreInfo.ProtoReflect.Descriptor instead.
func (*RoomHealthScoreInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{202}
}

func (x *RoomHealthScoreInfo) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RoomHealthScoreInfo) GetBubbleMessage() string {
	if x != nil {
		return x.BubbleMessage
	}
	return ""
}

func (x *RoomHealthScoreInfo) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

// TVStation 消息定义
type TVStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIdle    bool   `protobuf:"varint,1,opt,name=is_idle,json=isIdle,proto3" json:"is_idle,omitempty"`         // 是否空闲
	StateDesc string `protobuf:"bytes,2,opt,name=state_desc,json=stateDesc,proto3" json:"state_desc,omitempty"` // 状态描述
}

func (x *TVStation) Reset() {
	*x = TVStation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVStation) ProtoMessage() {}

func (x *TVStation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVStation.ProtoReflect.Descriptor instead.
func (*TVStation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{203}
}

func (x *TVStation) GetIsIdle() bool {
	if x != nil {
		return x.IsIdle
	}
	return false
}

func (x *TVStation) GetStateDesc() string {
	if x != nil {
		return x.StateDesc
	}
	return ""
}

// CommentBox 消息定义
type CommentBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`               // 图标
	Placeholder string `protobuf:"bytes,2,opt,name=placeholder,proto3" json:"placeholder,omitempty"` // 占位符
}

func (x *CommentBox) Reset() {
	*x = CommentBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentBox) ProtoMessage() {}

func (x *CommentBox) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentBox.ProtoReflect.Descriptor instead.
func (*CommentBox) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{204}
}

func (x *CommentBox) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CommentBox) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

// LinkMic 消息定义
type LinkMic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId          int64                         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                               // 频道 ID
	ChannelInfo        *LinkMic_LinkMicChannelInfo   `protobuf:"bytes,2,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`                          // 频道信息
	BattleScores       []*LinkMic_LinkMicBattleScore `protobuf:"bytes,3,rep,name=battle_scores,json=battleScores,proto3" json:"battle_scores,omitempty"`                       // 对战分数列表
	BattleSettings     *LinkMic_LinkMicBattleSetting `protobuf:"bytes,4,opt,name=battle_settings,json=battleSettings,proto3" json:"battle_settings,omitempty"`                 // 对战设置
	RivalAnchorId      int64                         `protobuf:"varint,5,opt,name=rival_anchor_id,json=rivalAnchorId,proto3" json:"rival_anchor_id,omitempty"`                 // 对手主播 ID
	LinkmicAnchorCount int64                         `protobuf:"varint,6,opt,name=linkmic_anchor_count,json=linkmicAnchorCount,proto3" json:"linkmic_anchor_count,omitempty"`  // 连麦主播数量
	RivalAnchorOpenId  string                        `protobuf:"bytes,5000,opt,name=rival_anchor_open_id,json=rivalAnchorOpenId,proto3" json:"rival_anchor_open_id,omitempty"` // 对手主播开放 ID
}

func (x *LinkMic) Reset() {
	*x = LinkMic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMic) ProtoMessage() {}

func (x *LinkMic) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMic.ProtoReflect.Descriptor instead.
func (*LinkMic) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{205}
}

func (x *LinkMic) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *LinkMic) GetChannelInfo() *LinkMic_LinkMicChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *LinkMic) GetBattleScores() []*LinkMic_LinkMicBattleScore {
	if x != nil {
		return x.BattleScores
	}
	return nil
}

func (x *LinkMic) GetBattleSettings() *LinkMic_LinkMicBattleSetting {
	if x != nil {
		return x.BattleSettings
	}
	return nil
}

func (x *LinkMic) GetRivalAnchorId() int64 {
	if x != nil {
		return x.RivalAnchorId
	}
	return 0
}

func (x *LinkMic) GetLinkmicAnchorCount() int64 {
	if x != nil {
		return x.LinkmicAnchorCount
	}
	return 0
}

func (x *LinkMic) GetRivalAnchorOpenId() string {
	if x != nil {
		return x.RivalAnchorOpenId
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortId            uint64      `protobuf:"varint,2,opt,name=shortId,proto3" json:"shortId,omitempty"`
	NickName           string      `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Gender             uint32      `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Signature          string      `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Level              uint32      `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	Birthday           uint64      `protobuf:"varint,7,opt,name=Birthday,proto3" json:"Birthday,omitempty"`
	Telephone          string      `protobuf:"bytes,8,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	AvatarThumb        *Image      `protobuf:"bytes,9,opt,name=AvatarThumb,proto3" json:"AvatarThumb,omitempty"`
	AvatarMedium       *Image      `protobuf:"bytes,10,opt,name=AvatarMedium,proto3" json:"AvatarMedium,omitempty"`
	AvatarLarge        *Image      `protobuf:"bytes,11,opt,name=AvatarLarge,proto3" json:"AvatarLarge,omitempty"`
	Verified           bool        `protobuf:"varint,12,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Experience         uint32      `protobuf:"varint,13,opt,name=Experience,proto3" json:"Experience,omitempty"`
	City               string      `protobuf:"bytes,14,opt,name=city,proto3" json:"city,omitempty"`
	Status             int32       `protobuf:"varint,15,opt,name=Status,proto3" json:"Status,omitempty"`
	CreateTime         uint64      `protobuf:"varint,16,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	ModifyTime         uint64      `protobuf:"varint,17,opt,name=ModifyTime,proto3" json:"ModifyTime,omitempty"`
	Secret             uint32      `protobuf:"varint,18,opt,name=Secret,proto3" json:"Secret,omitempty"`
	ShareQrcodeUri     string      `protobuf:"bytes,19,opt,name=ShareQrcodeUri,proto3" json:"ShareQrcodeUri,omitempty"`
	IncomeSharePercent uint32      `protobuf:"varint,20,opt,name=IncomeSharePercent,proto3" json:"IncomeSharePercent,omitempty"`
	BadgeImageList     []*Image    `protobuf:"bytes,21,rep,name=BadgeImageList,proto3" json:"BadgeImageList,omitempty"`
	FollowInfo         *FollowInfo `protobuf:"bytes,22,opt,name=FollowInfo,proto3" json:"FollowInfo,omitempty"`
	PayGrade           *PayGrade   `protobuf:"bytes,23,opt,name=PayGrade,proto3" json:"PayGrade,omitempty"`
	FansClub           *FansClub   `protobuf:"bytes,24,opt,name=FansClub,proto3" json:"FansClub,omitempty"`
	// Border Border = 25;
	SpecialId         string   `protobuf:"bytes,26,opt,name=SpecialId,proto3" json:"SpecialId,omitempty"`
	AvatarBorder      *Image   `protobuf:"bytes,27,opt,name=AvatarBorder,proto3" json:"AvatarBorder,omitempty"`
	Medal             *Image   `protobuf:"bytes,28,opt,name=Medal,proto3" json:"Medal,omitempty"`
	RealTimeIconsList []*Image `protobuf:"bytes,29,rep,name=RealTimeIconsList,proto3" json:"RealTimeIconsList,omitempty"`
	DisplayId         string   `protobuf:"bytes,38,opt,name=displayId,proto3" json:"displayId,omitempty"`
	SecUid            string   `protobuf:"bytes,46,opt,name=secUid,proto3" json:"secUid,omitempty"`
	FanTicketCount    uint64   `protobuf:"varint,1022,opt,name=fanTicketCount,proto3" json:"fanTicketCount,omitempty"`
	IdStr             string   `protobuf:"bytes,1028,opt,name=idStr,proto3" json:"idStr,omitempty"`
	AgeRange          uint32   `protobuf:"varint,1045,opt,name=ageRange,proto3" json:"ageRange,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{206}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetShortId() uint64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *User) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *User) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *User) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *User) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User) GetBirthday() uint64 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *User) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *User) GetAvatarThumb() *Image {
	if x != nil {
		return x.AvatarThumb
	}
	return nil
}

func (x *User) GetAvatarMedium() *Image {
	if x != nil {
		return x.AvatarMedium
	}
	return nil
}

func (x *User) GetAvatarLarge() *Image {
	if x != nil {
		return x.AvatarLarge
	}
	return nil
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetExperience() uint32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *User) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetModifyTime() uint64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *User) GetSecret() uint32 {
	if x != nil {
		return x.Secret
	}
	return 0
}

func (x *User) GetShareQrcodeUri() string {
	if x != nil {
		return x.ShareQrcodeUri
	}
	return ""
}

func (x *User) GetIncomeSharePercent() uint32 {
	if x != nil {
		return x.IncomeSharePercent
	}
	return 0
}

func (x *User) GetBadgeImageList() []*Image {
	if x != nil {
		return x.BadgeImageList
	}
	return nil
}

func (x *User) GetFollowInfo() *FollowInfo {
	if x != nil {
		return x.FollowInfo
	}
	return nil
}

func (x *User) GetPayGrade() *PayGrade {
	if x != nil {
		return x.PayGrade
	}
	return nil
}

func (x *User) GetFansClub() *FansClub {
	if x != nil {
		return x.FansClub
	}
	return nil
}

func (x *User) GetSpecialId() string {
	if x != nil {
		return x.SpecialId
	}
	return ""
}

func (x *User) GetAvatarBorder() *Image {
	if x != nil {
		return x.AvatarBorder
	}
	return nil
}

func (x *User) GetMedal() *Image {
	if x != nil {
		return x.Medal
	}
	return nil
}

func (x *User) GetRealTimeIconsList() []*Image {
	if x != nil {
		return x.RealTimeIconsList
	}
	return nil
}

func (x *User) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *User) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

func (x *User) GetFanTicketCount() uint64 {
	if x != nil {
		return x.FanTicketCount
	}
	return 0
}

func (x *User) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *User) GetAgeRange() uint32 {
	if x != nil {
		return x.AgeRange
	}
	return 0
}

type PayGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDiamondCount   int64          `protobuf:"varint,1,opt,name=totalDiamondCount,proto3" json:"totalDiamondCount,omitempty"`
	DiamondIcon         *Image         `protobuf:"bytes,2,opt,name=diamondIcon,proto3" json:"diamondIcon,omitempty"`
	Name                string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon                *Image         `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	NextName            string         `protobuf:"bytes,5,opt,name=nextName,proto3" json:"nextName,omitempty"`
	Level               int64          `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	NextIcon            *Image         `protobuf:"bytes,7,opt,name=nextIcon,proto3" json:"nextIcon,omitempty"`
	NextDiamond         int64          `protobuf:"varint,8,opt,name=nextDiamond,proto3" json:"nextDiamond,omitempty"`
	NowDiamond          int64          `protobuf:"varint,9,opt,name=nowDiamond,proto3" json:"nowDiamond,omitempty"`
	ThisGradeMinDiamond int64          `protobuf:"varint,10,opt,name=thisGradeMinDiamond,proto3" json:"thisGradeMinDiamond,omitempty"`
	ThisGradeMaxDiamond int64          `protobuf:"varint,11,opt,name=thisGradeMaxDiamond,proto3" json:"thisGradeMaxDiamond,omitempty"`
	PayDiamondBak       int64          `protobuf:"varint,12,opt,name=payDiamondBak,proto3" json:"payDiamondBak,omitempty"`
	GradeDescribe       string         `protobuf:"bytes,13,opt,name=gradeDescribe,proto3" json:"gradeDescribe,omitempty"`
	GradeIconList       []*GradeIcon   `protobuf:"bytes,14,rep,name=gradeIconList,proto3" json:"gradeIconList,omitempty"`
	ScreenChatType      int64          `protobuf:"varint,15,opt,name=screenChatType,proto3" json:"screenChatType,omitempty"`
	ImIcon              *Image         `protobuf:"bytes,16,opt,name=imIcon,proto3" json:"imIcon,omitempty"`
	ImIconWithLevel     *Image         `protobuf:"bytes,17,opt,name=imIconWithLevel,proto3" json:"imIconWithLevel,omitempty"`
	LiveIcon            *Image         `protobuf:"bytes,18,opt,name=liveIcon,proto3" json:"liveIcon,omitempty"`
	NewImIconWithLevel  *Image         `protobuf:"bytes,19,opt,name=newImIconWithLevel,proto3" json:"newImIconWithLevel,omitempty"`
	NewLiveIcon         *Image         `protobuf:"bytes,20,opt,name=newLiveIcon,proto3" json:"newLiveIcon,omitempty"`
	UpgradeNeedConsume  int64          `protobuf:"varint,21,opt,name=upgradeNeedConsume,proto3" json:"upgradeNeedConsume,omitempty"`
	NextPrivileges      string         `protobuf:"bytes,22,opt,name=nextPrivileges,proto3" json:"nextPrivileges,omitempty"`
	Background          *Image         `protobuf:"bytes,23,opt,name=background,proto3" json:"background,omitempty"`
	BackgroundBack      *Image         `protobuf:"bytes,24,opt,name=backgroundBack,proto3" json:"backgroundBack,omitempty"`
	Score               int64          `protobuf:"varint,25,opt,name=score,proto3" json:"score,omitempty"`
	BuffInfo            *GradeBuffInfo `protobuf:"bytes,26,opt,name=buffInfo,proto3" json:"buffInfo,omitempty"`
	GradeBanner         string         `protobuf:"bytes,1001,opt,name=gradeBanner,proto3" json:"gradeBanner,omitempty"`
	ProfileDialogBg     *Image         `protobuf:"bytes,1002,opt,name=profileDialogBg,proto3" json:"profileDialogBg,omitempty"`
	ProfileDialogBgBack *Image         `protobuf:"bytes,1003,opt,name=profileDialogBgBack,proto3" json:"profileDialogBgBack,omitempty"`
}

func (x *PayGrade) Reset() {
	*x = PayGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayGrade) ProtoMessage() {}

func (x *PayGrade) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayGrade.ProtoReflect.Descriptor instead.
func (*PayGrade) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{207}
}

func (x *PayGrade) GetTotalDiamondCount() int64 {
	if x != nil {
		return x.TotalDiamondCount
	}
	return 0
}

func (x *PayGrade) GetDiamondIcon() *Image {
	if x != nil {
		return x.DiamondIcon
	}
	return nil
}

func (x *PayGrade) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayGrade) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PayGrade) GetNextName() string {
	if x != nil {
		return x.NextName
	}
	return ""
}

func (x *PayGrade) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PayGrade) GetNextIcon() *Image {
	if x != nil {
		return x.NextIcon
	}
	return nil
}

func (x *PayGrade) GetNextDiamond() int64 {
	if x != nil {
		return x.NextDiamond
	}
	return 0
}

func (x *PayGrade) GetNowDiamond() int64 {
	if x != nil {
		return x.NowDiamond
	}
	return 0
}

func (x *PayGrade) GetThisGradeMinDiamond() int64 {
	if x != nil {
		return x.ThisGradeMinDiamond
	}
	return 0
}

func (x *PayGrade) GetThisGradeMaxDiamond() int64 {
	if x != nil {
		return x.ThisGradeMaxDiamond
	}
	return 0
}

func (x *PayGrade) GetPayDiamondBak() int64 {
	if x != nil {
		return x.PayDiamondBak
	}
	return 0
}

func (x *PayGrade) GetGradeDescribe() string {
	if x != nil {
		return x.GradeDescribe
	}
	return ""
}

func (x *PayGrade) GetGradeIconList() []*GradeIcon {
	if x != nil {
		return x.GradeIconList
	}
	return nil
}

func (x *PayGrade) GetScreenChatType() int64 {
	if x != nil {
		return x.ScreenChatType
	}
	return 0
}

func (x *PayGrade) GetImIcon() *Image {
	if x != nil {
		return x.ImIcon
	}
	return nil
}

func (x *PayGrade) GetImIconWithLevel() *Image {
	if x != nil {
		return x.ImIconWithLevel
	}
	return nil
}

func (x *PayGrade) GetLiveIcon() *Image {
	if x != nil {
		return x.LiveIcon
	}
	return nil
}

func (x *PayGrade) GetNewImIconWithLevel() *Image {
	if x != nil {
		return x.NewImIconWithLevel
	}
	return nil
}

func (x *PayGrade) GetNewLiveIcon() *Image {
	if x != nil {
		return x.NewLiveIcon
	}
	return nil
}

func (x *PayGrade) GetUpgradeNeedConsume() int64 {
	if x != nil {
		return x.UpgradeNeedConsume
	}
	return 0
}

func (x *PayGrade) GetNextPrivileges() string {
	if x != nil {
		return x.NextPrivileges
	}
	return ""
}

func (x *PayGrade) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *PayGrade) GetBackgroundBack() *Image {
	if x != nil {
		return x.BackgroundBack
	}
	return nil
}

func (x *PayGrade) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PayGrade) GetBuffInfo() *GradeBuffInfo {
	if x != nil {
		return x.BuffInfo
	}
	return nil
}

func (x *PayGrade) GetGradeBanner() string {
	if x != nil {
		return x.GradeBanner
	}
	return ""
}

func (x *PayGrade) GetProfileDialogBg() *Image {
	if x != nil {
		return x.ProfileDialogBg
	}
	return nil
}

func (x *PayGrade) GetProfileDialogBgBack() *Image {
	if x != nil {
		return x.ProfileDialogBgBack
	}
	return nil
}

type FansClub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       *FansClubData           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	PreferData map[int32]*FansClubData `protobuf:"bytes,2,rep,name=preferData,proto3" json:"preferData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FansClub) Reset() {
	*x = FansClub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FansClub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FansClub) ProtoMessage() {}

func (x *FansClub) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FansClub.ProtoReflect.Descriptor instead.
func (*FansClub) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{208}
}

func (x *FansClub) GetData() *FansClubData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FansClub) GetPreferData() map[int32]*FansClubData {
	if x != nil {
		return x.PreferData
	}
	return nil
}

type FansClubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubName           string     `protobuf:"bytes,1,opt,name=clubName,proto3" json:"clubName,omitempty"`
	Level              int32      `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	UserFansClubStatus int32      `protobuf:"varint,3,opt,name=userFansClubStatus,proto3" json:"userFansClubStatus,omitempty"`
	Badge              *UserBadge `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	AvailableGiftIds   []int64    `protobuf:"varint,5,rep,packed,name=availableGiftIds,proto3" json:"availableGiftIds,omitempty"`
	AnchorId           int64      `protobuf:"varint,6,opt,name=anchorId,proto3" json:"anchorId,omitempty"`
}

func (x *FansClubData) Reset() {
	*x = FansClubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FansClubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FansClubData) ProtoMessage() {}

func (x *FansClubData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FansClubData.ProtoReflect.Descriptor instead.
func (*FansClubData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{209}
}

func (x *FansClubData) GetClubName() string {
	if x != nil {
		return x.ClubName
	}
	return ""
}

func (x *FansClubData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FansClubData) GetUserFansClubStatus() int32 {
	if x != nil {
		return x.UserFansClubStatus
	}
	return 0
}

func (x *FansClubData) GetBadge() *UserBadge {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *FansClubData) GetAvailableGiftIds() []int64 {
	if x != nil {
		return x.AvailableGiftIds
	}
	return nil
}

func (x *FansClubData) GetAnchorId() int64 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

type UserBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icons map[int32]*Image `protobuf:"bytes,1,rep,name=icons,proto3" json:"icons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UserBadge) Reset() {
	*x = UserBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBadge) ProtoMessage() {}

func (x *UserBadge) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBadge.ProtoReflect.Descriptor instead.
func (*UserBadge) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{210}
}

func (x *UserBadge) GetIcons() map[int32]*Image {
	if x != nil {
		return x.Icons
	}
	return nil
}

func (x *UserBadge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GradeBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GradeBuffInfo) Reset() {
	*x = GradeBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeBuffInfo) ProtoMessage() {}

func (x *GradeBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeBuffInfo.ProtoReflect.Descriptor instead.
func (*GradeBuffInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{211}
}

type Border struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Border) Reset() {
	*x = Border{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Border) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Border) ProtoMessage() {}

func (x *Border) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Border.ProtoReflect.Descriptor instead.
func (*Border) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{212}
}

type GradeIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	IconDiamond int64  `protobuf:"varint,2,opt,name=iconDiamond,proto3" json:"iconDiamond,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LevelStr    string `protobuf:"bytes,4,opt,name=levelStr,proto3" json:"levelStr,omitempty"`
}

func (x *GradeIcon) Reset() {
	*x = GradeIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeIcon) ProtoMessage() {}

func (x *GradeIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeIcon.ProtoReflect.Descriptor instead.
func (*GradeIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{213}
}

func (x *GradeIcon) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GradeIcon) GetIconDiamond() int64 {
	if x != nil {
		return x.IconDiamond
	}
	return 0
}

func (x *GradeIcon) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GradeIcon) GetLevelStr() string {
	if x != nil {
		return x.LevelStr
	}
	return ""
}

type FollowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowingCount    uint64 `protobuf:"varint,1,opt,name=followingCount,proto3" json:"followingCount,omitempty"`
	FollowerCount     uint64 `protobuf:"varint,2,opt,name=followerCount,proto3" json:"followerCount,omitempty"`
	FollowStatus      uint64 `protobuf:"varint,3,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
	PushStatus        uint64 `protobuf:"varint,4,opt,name=pushStatus,proto3" json:"pushStatus,omitempty"`
	RemarkName        string `protobuf:"bytes,5,opt,name=remarkName,proto3" json:"remarkName,omitempty"`
	FollowerCountStr  string `protobuf:"bytes,6,opt,name=followerCountStr,proto3" json:"followerCountStr,omitempty"`
	FollowingCountStr string `protobuf:"bytes,7,opt,name=followingCountStr,proto3" json:"followingCountStr,omitempty"`
}

func (x *FollowInfo) Reset() {
	*x = FollowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowInfo) ProtoMessage() {}

func (x *FollowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowInfo.ProtoReflect.Descriptor instead.
func (*FollowInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{214}
}

func (x *FollowInfo) GetFollowingCount() uint64 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *FollowInfo) GetFollowerCount() uint64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *FollowInfo) GetFollowStatus() uint64 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *FollowInfo) GetPushStatus() uint64 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

func (x *FollowInfo) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

func (x *FollowInfo) GetFollowerCountStr() string {
	if x != nil {
		return x.FollowerCountStr
	}
	return ""
}

func (x *FollowInfo) GetFollowingCountStr() string {
	if x != nil {
		return x.FollowingCountStr
	}
	return ""
}

type NinePatchSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingListList []string `protobuf:"bytes,1,rep,name=settingListList,proto3" json:"settingListList,omitempty"`
}

func (x *NinePatchSetting) Reset() {
	*x = NinePatchSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NinePatchSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NinePatchSetting) ProtoMessage() {}

func (x *NinePatchSetting) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NinePatchSetting.ProtoReflect.Descriptor instead.
func (*NinePatchSetting) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{215}
}

func (x *NinePatchSetting) GetSettingListList() []string {
	if x != nil {
		return x.SettingListList
	}
	return nil
}

type PushFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId           uint64         `protobuf:"varint,1,opt,name=seqId,proto3" json:"seqId,omitempty"`
	LogId           uint64         `protobuf:"varint,2,opt,name=logId,proto3" json:"logId,omitempty"`
	Service         uint64         `protobuf:"varint,3,opt,name=service,proto3" json:"service,omitempty"`
	Method          uint64         `protobuf:"varint,4,opt,name=method,proto3" json:"method,omitempty"`
	HeadersList     []*HeadersList `protobuf:"bytes,5,rep,name=headersList,proto3" json:"headersList,omitempty"`
	PayloadEncoding string         `protobuf:"bytes,6,opt,name=payloadEncoding,proto3" json:"payloadEncoding,omitempty"`
	PayloadType     string         `protobuf:"bytes,7,opt,name=payloadType,proto3" json:"payloadType,omitempty"`
	Payload         []byte         `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PushFrame) Reset() {
	*x = PushFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushFrame) ProtoMessage() {}

func (x *PushFrame) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushFrame.ProtoReflect.Descriptor instead.
func (*PushFrame) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{216}
}

func (x *PushFrame) GetSeqId() uint64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *PushFrame) GetLogId() uint64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *PushFrame) GetService() uint64 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *PushFrame) GetMethod() uint64 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *PushFrame) GetHeadersList() []*HeadersList {
	if x != nil {
		return x.HeadersList
	}
	return nil
}

func (x *PushFrame) GetPayloadEncoding() string {
	if x != nil {
		return x.PayloadEncoding
	}
	return ""
}

func (x *PushFrame) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *PushFrame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Kk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K uint32 `protobuf:"varint,14,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *Kk) Reset() {
	*x = Kk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kk) ProtoMessage() {}

func (x *Kk) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kk.ProtoReflect.Descriptor instead.
func (*Kk) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{217}
}

func (x *Kk) GetK() uint32 {
	if x != nil {
		return x.K
	}
	return 0
}

type SendMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string     `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	ConversationType    uint32     `protobuf:"varint,2,opt,name=conversationType,proto3" json:"conversationType,omitempty"`
	ConversationShortId uint64     `protobuf:"varint,3,opt,name=conversationShortId,proto3" json:"conversationShortId,omitempty"`
	Content             string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ext                 []*ExtList `protobuf:"bytes,5,rep,name=ext,proto3" json:"ext,omitempty"`
	MessageType         uint32     `protobuf:"varint,6,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Ticket              string     `protobuf:"bytes,7,opt,name=ticket,proto3" json:"ticket,omitempty"`
	ClientMessageId     string     `protobuf:"bytes,8,opt,name=clientMessageId,proto3" json:"clientMessageId,omitempty"`
}

func (x *SendMessageBody) Reset() {
	*x = SendMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageBody) ProtoMessage() {}

func (x *SendMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageBody.ProtoReflect.Descriptor instead.
func (*SendMessageBody) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{218}
}

func (x *SendMessageBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMessageBody) GetConversationType() uint32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SendMessageBody) GetConversationShortId() uint64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SendMessageBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageBody) GetExt() []*ExtList {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *SendMessageBody) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SendMessageBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *SendMessageBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

type ExtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExtList) Reset() {
	*x = ExtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtList) ProtoMessage() {}

func (x *ExtList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtList.ProtoReflect.Descriptor instead.
func (*ExtList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{219}
}

func (x *ExtList) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExtList) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B int32  `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	C int32  `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int32  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F *Rsp_F `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H uint64 `protobuf:"varint,10,opt,name=h,proto3" json:"h,omitempty"`
	I uint64 `protobuf:"varint,11,opt,name=i,proto3" json:"i,omitempty"`
	J uint64 `protobuf:"varint,13,opt,name=j,proto3" json:"j,omitempty"`
}

func (x *Rsp) Reset() {
	*x = Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp) ProtoMessage() {}

func (x *Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp.ProtoReflect.Descriptor instead.
func (*Rsp) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{220}
}

func (x *Rsp) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *Rsp) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *Rsp) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *Rsp) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

func (x *Rsp) GetE() int32 {
	if x != nil {
		return x.E
	}
	return 0
}

func (x *Rsp) GetF() *Rsp_F {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *Rsp) GetG() string {
	if x != nil {
		return x.G
	}
	return ""
}

func (x *Rsp) GetH() uint64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Rsp) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *Rsp) GetJ() uint64 {
	if x != nil {
		return x.J
	}
	return 0
}

type PreMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             uint32           `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	SequenceId      uint32           `protobuf:"varint,2,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	SdkVersion      string           `protobuf:"bytes,3,opt,name=sdkVersion,proto3" json:"sdkVersion,omitempty"`
	Token           string           `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Refer           uint32           `protobuf:"varint,5,opt,name=refer,proto3" json:"refer,omitempty"`
	InboxType       uint32           `protobuf:"varint,6,opt,name=inboxType,proto3" json:"inboxType,omitempty"`
	BuildNumber     string           `protobuf:"bytes,7,opt,name=buildNumber,proto3" json:"buildNumber,omitempty"`
	SendMessageBody *SendMessageBody `protobuf:"bytes,8,opt,name=sendMessageBody,proto3" json:"sendMessageBody,omitempty"`
	// 字段名待定
	Aa             string         `protobuf:"bytes,9,opt,name=aa,proto3" json:"aa,omitempty"`
	DevicePlatform string         `protobuf:"bytes,11,opt,name=devicePlatform,proto3" json:"devicePlatform,omitempty"`
	Headers        []*HeadersList `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty"`
	AuthType       uint32         `protobuf:"varint,18,opt,name=authType,proto3" json:"authType,omitempty"`
	Biz            string         `protobuf:"bytes,21,opt,name=biz,proto3" json:"biz,omitempty"`
	Access         string         `protobuf:"bytes,22,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *PreMessage) Reset() {
	*x = PreMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreMessage) ProtoMessage() {}

func (x *PreMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreMessage.ProtoReflect.Descriptor instead.
func (*PreMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{221}
}

func (x *PreMessage) GetCmd() uint32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *PreMessage) GetSequenceId() uint32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *PreMessage) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *PreMessage) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PreMessage) GetRefer() uint32 {
	if x != nil {
		return x.Refer
	}
	return 0
}

func (x *PreMessage) GetInboxType() uint32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *PreMessage) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *PreMessage) GetSendMessageBody() *SendMessageBody {
	if x != nil {
		return x.SendMessageBody
	}
	return nil
}

func (x *PreMessage) GetAa() string {
	if x != nil {
		return x.Aa
	}
	return ""
}

func (x *PreMessage) GetDevicePlatform() string {
	if x != nil {
		return x.DevicePlatform
	}
	return ""
}

func (x *PreMessage) GetHeaders() []*HeadersList {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PreMessage) GetAuthType() uint32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *PreMessage) GetBiz() string {
	if x != nil {
		return x.Biz
	}
	return ""
}

func (x *PreMessage) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type HeadersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HeadersList) Reset() {
	*x = HeadersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadersList) ProtoMessage() {}

func (x *HeadersList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadersList.ProtoReflect.Descriptor instead.
func (*HeadersList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{222}
}

func (x *HeadersList) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeadersList) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RoomStatsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common         *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	DisplayShort   string  `protobuf:"bytes,2,opt,name=displayShort,proto3" json:"displayShort,omitempty"`
	DisplayMiddle  string  `protobuf:"bytes,3,opt,name=displayMiddle,proto3" json:"displayMiddle,omitempty"`
	DisplayLong    string  `protobuf:"bytes,4,opt,name=displayLong,proto3" json:"displayLong,omitempty"`
	DisplayValue   int64   `protobuf:"varint,5,opt,name=displayValue,proto3" json:"displayValue,omitempty"`
	DisplayVersion int64   `protobuf:"varint,6,opt,name=displayVersion,proto3" json:"displayVersion,omitempty"`
	Incremental    bool    `protobuf:"varint,7,opt,name=incremental,proto3" json:"incremental,omitempty"`
	IsHidden       bool    `protobuf:"varint,8,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
	Total          int64   `protobuf:"varint,9,opt,name=total,proto3" json:"total,omitempty"`
	DisplayType    int64   `protobuf:"varint,10,opt,name=displayType,proto3" json:"displayType,omitempty"`
}

func (x *RoomStatsMessage) Reset() {
	*x = RoomStatsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStatsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStatsMessage) ProtoMessage() {}

func (x *RoomStatsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStatsMessage.ProtoReflect.Descriptor instead.
func (*RoomStatsMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{223}
}

func (x *RoomStatsMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomStatsMessage) GetDisplayShort() string {
	if x != nil {
		return x.DisplayShort
	}
	return ""
}

func (x *RoomStatsMessage) GetDisplayMiddle() string {
	if x != nil {
		return x.DisplayMiddle
	}
	return ""
}

func (x *RoomStatsMessage) GetDisplayLong() string {
	if x != nil {
		return x.DisplayLong
	}
	return ""
}

func (x *RoomStatsMessage) GetDisplayValue() int64 {
	if x != nil {
		return x.DisplayValue
	}
	return 0
}

func (x *RoomStatsMessage) GetDisplayVersion() int64 {
	if x != nil {
		return x.DisplayVersion
	}
	return 0
}

func (x *RoomStatsMessage) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *RoomStatsMessage) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *RoomStatsMessage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoomStatsMessage) GetDisplayType() int64 {
	if x != nil {
		return x.DisplayType
	}
	return 0
}

type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromotionId         int64   `protobuf:"varint,1,opt,name=promotionId,proto3" json:"promotionId,omitempty"`
	Index               int32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	TargetFlashUidsList []int64 `protobuf:"varint,3,rep,packed,name=targetFlashUidsList,proto3" json:"targetFlashUidsList,omitempty"`
	ExplainType         int64   `protobuf:"varint,4,opt,name=explainType,proto3" json:"explainType,omitempty"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{224}
}

func (x *ProductInfo) GetPromotionId() int64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *ProductInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ProductInfo) GetTargetFlashUidsList() []int64 {
	if x != nil {
		return x.TargetFlashUidsList
	}
	return nil
}

func (x *ProductInfo) GetExplainType() int64 {
	if x != nil {
		return x.ExplainType
	}
	return 0
}

type CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PromotionIdsList []int64 `protobuf:"varint,3,rep,packed,name=promotionIdsList,proto3" json:"promotionIdsList,omitempty"`
	Type             string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	UniqueIndex      string  `protobuf:"bytes,5,opt,name=uniqueIndex,proto3" json:"uniqueIndex,omitempty"`
}

func (x *CategoryInfo) Reset() {
	*x = CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfo) ProtoMessage() {}

func (x *CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfo.ProtoReflect.Descriptor instead.
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{225}
}

func (x *CategoryInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryInfo) GetPromotionIdsList() []int64 {
	if x != nil {
		return x.PromotionIdsList
	}
	return nil
}

func (x *CategoryInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CategoryInfo) GetUniqueIndex() string {
	if x != nil {
		return x.UniqueIndex
	}
	return ""
}

type ProductChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                 *Common         `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UpdateTimestamp        int64           `protobuf:"varint,2,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	UpdateToast            string          `protobuf:"bytes,3,opt,name=updateToast,proto3" json:"updateToast,omitempty"`
	UpdateProductInfoList  []*ProductInfo  `protobuf:"bytes,4,rep,name=updateProductInfoList,proto3" json:"updateProductInfoList,omitempty"`
	Total                  int64           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	UpdateCategoryInfoList []*CategoryInfo `protobuf:"bytes,8,rep,name=updateCategoryInfoList,proto3" json:"updateCategoryInfoList,omitempty"`
}

func (x *ProductChangeMessage) Reset() {
	*x = ProductChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductChangeMessage) ProtoMessage() {}

func (x *ProductChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductChangeMessage.ProtoReflect.Descriptor instead.
func (*ProductChangeMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{226}
}

func (x *ProductChangeMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ProductChangeMessage) GetUpdateTimestamp() int64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

func (x *ProductChangeMessage) GetUpdateToast() string {
	if x != nil {
		return x.UpdateToast
	}
	return ""
}

func (x *ProductChangeMessage) GetUpdateProductInfoList() []*ProductInfo {
	if x != nil {
		return x.UpdateProductInfoList
	}
	return nil
}

func (x *ProductChangeMessage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductChangeMessage) GetUpdateCategoryInfoList() []*CategoryInfo {
	if x != nil {
		return x.UpdateCategoryInfoList
	}
	return nil
}

// from https://github.com/HaoDong108/DouyinBarrageGrab/blob/main/BarrageGrab/proto/message.proto
// status = 3 下播
type ControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ControlMessage) Reset() {
	*x = ControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessage) ProtoMessage() {}

func (x *ControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessage.ProtoReflect.Descriptor instead.
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{227}
}

func (x *ControlMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ControlMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// from https://github.com/HaoDong108/DouyinBarrageGrab/blob/main/BarrageGrab/proto/message.proto
type FansclubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonInfo *Common `protobuf:"bytes,1,opt,name=commonInfo,proto3" json:"commonInfo,omitempty"`
	// 升级是1，加入是2
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	User    *User  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *FansclubMessage) Reset() {
	*x = FansclubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FansclubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FansclubMessage) ProtoMessage() {}

func (x *FansclubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FansclubMessage.ProtoReflect.Descriptor instead.
func (*FansclubMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{228}
}

func (x *FansclubMessage) GetCommonInfo() *Common {
	if x != nil {
		return x.CommonInfo
	}
	return nil
}

func (x *FansclubMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FansclubMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FansclubMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// from https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomRankMessage.proto
// 直播间排行榜
type RoomRankMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *Common                     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RanksList []*RoomRankMessage_RoomRank `protobuf:"bytes,2,rep,name=ranksList,proto3" json:"ranksList,omitempty"`
}

func (x *RoomRankMessage) Reset() {
	*x = RoomRankMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRankMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRankMessage) ProtoMessage() {}

func (x *RoomRankMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRankMessage.ProtoReflect.Descriptor instead.
func (*RoomRankMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{229}
}

func (x *RoomRankMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomRankMessage) GetRanksList() []*RoomRankMessage_RoomRank {
	if x != nil {
		return x.RanksList
	}
	return nil
}

// from https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomMessage.proto
type RoomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common           *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Content          string            `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SupprotLandscape bool              `protobuf:"varint,3,opt,name=supprotLandscape,proto3" json:"supprotLandscape,omitempty"`
	Roommessagetype  RoomMsgTypeEnum   `protobuf:"varint,4,opt,name=roommessagetype,proto3,enum=RoomMsgTypeEnum" json:"roommessagetype,omitempty"`
	SystemTopMsg     bool              `protobuf:"varint,5,opt,name=systemTopMsg,proto3" json:"systemTopMsg,omitempty"`
	ForcedGuarantee  bool              `protobuf:"varint,6,opt,name=forcedGuarantee,proto3" json:"forcedGuarantee,omitempty"`
	BizScene         string            `protobuf:"bytes,20,opt,name=bizScene,proto3" json:"bizScene,omitempty"`
	BuriedPointMap   map[string]string `protobuf:"bytes,30,rep,name=buriedPointMap,proto3" json:"buriedPointMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoomMessage) Reset() {
	*x = RoomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomMessage) ProtoMessage() {}

func (x *RoomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomMessage.ProtoReflect.Descriptor instead.
func (*RoomMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{230}
}

func (x *RoomMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RoomMessage) GetSupprotLandscape() bool {
	if x != nil {
		return x.SupprotLandscape
	}
	return false
}

func (x *RoomMessage) GetRoommessagetype() RoomMsgTypeEnum {
	if x != nil {
		return x.Roommessagetype
	}
	return RoomMsgTypeEnum_DEFAULTROOMMSG
}

func (x *RoomMessage) GetSystemTopMsg() bool {
	if x != nil {
		return x.SystemTopMsg
	}
	return false
}

func (x *RoomMessage) GetForcedGuarantee() bool {
	if x != nil {
		return x.ForcedGuarantee
	}
	return false
}

func (x *RoomMessage) GetBizScene() string {
	if x != nil {
		return x.BizScene
	}
	return ""
}

func (x *RoomMessage) GetBuriedPointMap() map[string]string {
	if x != nil {
		return x.BuriedPointMap
	}
	return nil
}

type RanklistHourEntranceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common               `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Info   *RanklistHourEntrance `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RanklistHourEntranceMessage) Reset() {
	*x = RanklistHourEntranceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistHourEntranceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistHourEntranceMessage) ProtoMessage() {}

func (x *RanklistHourEntranceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistHourEntranceMessage.ProtoReflect.Descriptor instead.
func (*RanklistHourEntranceMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{231}
}

func (x *RanklistHourEntranceMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RanklistHourEntranceMessage) GetInfo() *RanklistHourEntrance {
	if x != nil {
		return x.Info
	}
	return nil
}

// RanklistHourEntrance 主消息
type RanklistHourEntrance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalInfos          []*RanklistHourEntrance_Info `protobuf:"bytes,1,rep,name=global_infos,json=globalInfos,proto3" json:"global_infos,omitempty"`                              // 全局排行榜信息列表
	DefaultGlobalInfos   []*RanklistHourEntrance_Info `protobuf:"bytes,2,rep,name=default_global_infos,json=defaultGlobalInfos,proto3" json:"default_global_infos,omitempty"`       // 默认全局排行榜信息列表
	VerticalInfos        []*RanklistHourEntrance_Info `protobuf:"bytes,3,rep,name=vertical_infos,json=verticalInfos,proto3" json:"vertical_infos,omitempty"`                        // 垂直排行榜信息列表
	DefaultVerticalInfos []*RanklistHourEntrance_Info `protobuf:"bytes,4,rep,name=default_vertical_infos,json=defaultVerticalInfos,proto3" json:"default_vertical_infos,omitempty"` // 默认垂直排行榜信息列表
}

func (x *RanklistHourEntrance) Reset() {
	*x = RanklistHourEntrance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistHourEntrance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistHourEntrance) ProtoMessage() {}

func (x *RanklistHourEntrance) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistHourEntrance.ProtoReflect.Descriptor instead.
func (*RanklistHourEntrance) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{232}
}

func (x *RanklistHourEntrance) GetGlobalInfos() []*RanklistHourEntrance_Info {
	if x != nil {
		return x.GlobalInfos
	}
	return nil
}

func (x *RanklistHourEntrance) GetDefaultGlobalInfos() []*RanklistHourEntrance_Info {
	if x != nil {
		return x.DefaultGlobalInfos
	}
	return nil
}

func (x *RanklistHourEntrance) GetVerticalInfos() []*RanklistHourEntrance_Info {
	if x != nil {
		return x.VerticalInfos
	}
	return nil
}

func (x *RanklistHourEntrance) GetDefaultVerticalInfos() []*RanklistHourEntrance_Info {
	if x != nil {
		return x.DefaultVerticalInfos
	}
	return nil
}

type InRoomBannerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// extra 字段，字符串类型
	Extra string `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	// position 字段，整型
	Position int32 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	// action_type 字段，整型
	ActionType int32 `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	// container_url 字段，字符串类型
	ContainerUrl string `protobuf:"bytes,5,opt,name=container_url,json=containerUrl,proto3" json:"container_url,omitempty"`
	// lynx_container_url 字段，字符串类型
	LynxContainerUrl string `protobuf:"bytes,6,opt,name=lynx_container_url,json=lynxContainerUrl,proto3" json:"lynx_container_url,omitempty"`
	// container_type 字段，整型
	ContainerType int32 `protobuf:"varint,7,opt,name=container_type,json=containerType,proto3" json:"container_type,omitempty"`
	// op_type 字段，整型
	OpType int32 `protobuf:"varint,8,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
}

func (x *InRoomBannerMessage) Reset() {
	*x = InRoomBannerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InRoomBannerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InRoomBannerMessage) ProtoMessage() {}

func (x *InRoomBannerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InRoomBannerMessage.ProtoReflect.Descriptor instead.
func (*InRoomBannerMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{233}
}

func (x *InRoomBannerMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *InRoomBannerMessage) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *InRoomBannerMessage) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *InRoomBannerMessage) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *InRoomBannerMessage) GetContainerUrl() string {
	if x != nil {
		return x.ContainerUrl
	}
	return ""
}

func (x *InRoomBannerMessage) GetLynxContainerUrl() string {
	if x != nil {
		return x.LynxContainerUrl
	}
	return ""
}

func (x *InRoomBannerMessage) GetContainerType() int32 {
	if x != nil {
		return x.ContainerType
	}
	return 0
}

func (x *InRoomBannerMessage) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

type RoomDataSyncMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// roomID 字段，整型字符串（int64String）
	RoomID uint64 `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	// syncKey 字段，字符串类型
	SyncKey string `protobuf:"bytes,3,opt,name=syncKey,proto3" json:"syncKey,omitempty"`
	// version 字段，整型字符串（int64String）
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// payload 字段，字节类型（bytes）
	Payload []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// bizLogID 字段，字符串类型
	BizLogID string `protobuf:"bytes,6,opt,name=bizLogID,proto3" json:"bizLogID,omitempty"`
}

func (x *RoomDataSyncMessage) Reset() {
	*x = RoomDataSyncMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomDataSyncMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomDataSyncMessage) ProtoMessage() {}

func (x *RoomDataSyncMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomDataSyncMessage.ProtoReflect.Descriptor instead.
func (*RoomDataSyncMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{234}
}

func (x *RoomDataSyncMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomDataSyncMessage) GetRoomID() uint64 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *RoomDataSyncMessage) GetSyncKey() string {
	if x != nil {
		return x.SyncKey
	}
	return ""
}

func (x *RoomDataSyncMessage) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RoomDataSyncMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RoomDataSyncMessage) GetBizLogID() string {
	if x != nil {
		return x.BizLogID
	}
	return ""
}

type LuckyBoxTempStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *LuckyBoxTempStatusMessage) Reset() {
	*x = LuckyBoxTempStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxTempStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxTempStatusMessage) ProtoMessage() {}

func (x *LuckyBoxTempStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxTempStatusMessage.ProtoReflect.Descriptor instead.
func (*LuckyBoxTempStatusMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{235}
}

func (x *LuckyBoxTempStatusMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

type DecorationModifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 存疑
	// 网页原型为DecorationModifyMessage?
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Extra  string  `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *DecorationModifyMessage) Reset() {
	*x = DecorationModifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationModifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationModifyMessage) ProtoMessage() {}

func (x *DecorationModifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationModifyMessage.ProtoReflect.Descriptor instead.
func (*DecorationModifyMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{236}
}

func (x *DecorationModifyMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *DecorationModifyMessage) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type DecorationUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Detai  *DecotationDetail `protobuf:"bytes,2,opt,name=detai,proto3" json:"detai,omitempty"`
}

func (x *DecorationUpdateMessage) Reset() {
	*x = DecorationUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationUpdateMessage) ProtoMessage() {}

func (x *DecorationUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationUpdateMessage.ProtoReflect.Descriptor instead.
func (*DecorationUpdateMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{237}
}

func (x *DecorationUpdateMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *DecorationUpdateMessage) GetDetai() *DecotationDetail {
	if x != nil {
		return x.Detai
	}
	return nil
}

type DecotationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextDecoration  *Decoration `protobuf:"bytes,1,opt,name=text_decoration,json=textDecoration,proto3" json:"text_decoration,omitempty"`
	ImageDecoration *Decoration `protobuf:"bytes,2,opt,name=image_decoration,json=imageDecoration,proto3" json:"image_decoration,omitempty"`
}

func (x *DecotationDetail) Reset() {
	*x = DecotationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecotationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecotationDetail) ProtoMessage() {}

func (x *DecotationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecotationDetail.ProtoReflect.Descriptor instead.
func (*DecotationDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{238}
}

func (x *DecotationDetail) GetTextDecoration() *Decoration {
	if x != nil {
		return x.TextDecoration
	}
	return nil
}

func (x *DecotationDetail) GetImageDecoration() *Decoration {
	if x != nil {
		return x.ImageDecoration
	}
	return nil
}

type Decoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 字段，整型字符串（int64String）
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// image 字段，引用 Image 消息类型
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// type 字段，整型字符串（int64String）
	Type uint64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// input_rect 字段，整型字符串（int64String）列表
	InputRect []uint64 `protobuf:"varint,4,rep,packed,name=input_rect,json=inputRect,proto3" json:"input_rect,omitempty"`
	// text_size 字段，整型字符串（int64String）
	TextSize uint64 `protobuf:"varint,5,opt,name=text_size,json=textSize,proto3" json:"text_size,omitempty"`
	// text_color 字段，字符串类型
	TextColor string `protobuf:"bytes,6,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// content 字段，字符串类型
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	// max_length 字段，整型字符串（int64String）
	MaxLength uint64 `protobuf:"varint,8,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// status 字段，整型字符串（int64String）
	Status uint64 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	// h 字段，整型字符串（int64String）
	H uint64 `protobuf:"varint,10,opt,name=h,proto3" json:"h,omitempty"`
	// x 字段，整型字符串（int64String）
	X uint64 `protobuf:"varint,11,opt,name=x,proto3" json:"x,omitempty"`
	// w 字段，整型字符串（int64String）
	W uint64 `protobuf:"varint,12,opt,name=w,proto3" json:"w,omitempty"`
	// y 字段，整型字符串（int64String）
	Y uint64 `protobuf:"varint,13,opt,name=y,proto3" json:"y,omitempty"`
	// kind 字段，整型字符串（int64String）
	Kind uint64 `protobuf:"varint,14,opt,name=kind,proto3" json:"kind,omitempty"`
	// sub_type 字段，整型字符串（int64String）
	SubType uint64 `protobuf:"varint,15,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// reservation 字段，引用 Reservation 消息类型
	Reservation *Reservation `protobuf:"bytes,16,opt,name=reservation,proto3" json:"reservation,omitempty"`
	// nine_patch_image 字段，引用 Image 消息类型
	NinePatchImage *Image `protobuf:"bytes,17,opt,name=nine_patch_image,json=ninePatchImage,proto3" json:"nine_patch_image,omitempty"`
	// text_special_effects 字段，整型字符串（int64String）列表
	TextSpecialEffects []uint64 `protobuf:"varint,18,rep,packed,name=text_special_effects,json=textSpecialEffects,proto3" json:"text_special_effects,omitempty"`
	// text_image_adjustable_start_position 字段，整型字符串（int64String）
	TextImageAdjustableStartPosition uint64 `protobuf:"varint,19,opt,name=text_image_adjustable_start_position,json=textImageAdjustableStartPosition,proto3" json:"text_image_adjustable_start_position,omitempty"`
	// text_image_adjustable_end_position 字段，整型字符串（int64String）
	TextImageAdjustableEndPosition uint64 `protobuf:"varint,20,opt,name=text_image_adjustable_end_position,json=textImageAdjustableEndPosition,proto3" json:"text_image_adjustable_end_position,omitempty"`
	// text_font_config 字段，引用 DecorationFontConfig 消息类型
	TextFontConfig *DecorationFontConfig `protobuf:"bytes,21,opt,name=text_font_config,json=textFontConfig,proto3" json:"text_font_config,omitempty"`
	// audit_text_color 字段，字符串类型
	AuditTextColor string `protobuf:"bytes,22,opt,name=audit_text_color,json=auditTextColor,proto3" json:"audit_text_color,omitempty"`
}

func (x *Decoration) Reset() {
	*x = Decoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decoration) ProtoMessage() {}

func (x *Decoration) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decoration.ProtoReflect.Descriptor instead.
func (*Decoration) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{239}
}

func (x *Decoration) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Decoration) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Decoration) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Decoration) GetInputRect() []uint64 {
	if x != nil {
		return x.InputRect
	}
	return nil
}

func (x *Decoration) GetTextSize() uint64 {
	if x != nil {
		return x.TextSize
	}
	return 0
}

func (x *Decoration) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Decoration) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Decoration) GetMaxLength() uint64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Decoration) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Decoration) GetH() uint64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Decoration) GetX() uint64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Decoration) GetW() uint64 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Decoration) GetY() uint64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Decoration) GetKind() uint64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Decoration) GetSubType() uint64 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *Decoration) GetReservation() *Reservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *Decoration) GetNinePatchImage() *Image {
	if x != nil {
		return x.NinePatchImage
	}
	return nil
}

func (x *Decoration) GetTextSpecialEffects() []uint64 {
	if x != nil {
		return x.TextSpecialEffects
	}
	return nil
}

func (x *Decoration) GetTextImageAdjustableStartPosition() uint64 {
	if x != nil {
		return x.TextImageAdjustableStartPosition
	}
	return 0
}

func (x *Decoration) GetTextImageAdjustableEndPosition() uint64 {
	if x != nil {
		return x.TextImageAdjustableEndPosition
	}
	return 0
}

func (x *Decoration) GetTextFontConfig() *DecorationFontConfig {
	if x != nil {
		return x.TextFontConfig
	}
	return nil
}

func (x *Decoration) GetAuditTextColor() string {
	if x != nil {
		return x.AuditTextColor
	}
	return ""
}

type Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// appointment_id 字段，整型字符串（int64String）
	AppointmentId uint64 `protobuf:"varint,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	// anchor_id 字段，整型字符串（int64String）
	AnchorId uint64 `protobuf:"varint,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
	// room_id 字段，整型字符串（int64String）
	RoomId uint64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// start_time 字段，整型字符串（int64String）
	StartTime uint64 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time 字段，整型字符串（int64String）
	EndTime uint64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// btn_rect 字段，整型字符串（int64String）列表，假设它是一个矩形区域
	BtnRect []uint64 `protobuf:"varint,6,rep,packed,name=btn_rect,json=btnRect,proto3" json:"btn_rect,omitempty"`
	// btn_color 字段，字符串类型
	BtnColor string `protobuf:"bytes,7,opt,name=btn_color,json=btnColor,proto3" json:"btn_color,omitempty"`
	// is_reserved 字段，布尔类型
	IsReserved bool `protobuf:"varint,8,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{240}
}

func (x *Reservation) GetAppointmentId() uint64 {
	if x != nil {
		return x.AppointmentId
	}
	return 0
}

func (x *Reservation) GetAnchorId() uint64 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

func (x *Reservation) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Reservation) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Reservation) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Reservation) GetBtnRect() []uint64 {
	if x != nil {
		return x.BtnRect
	}
	return nil
}

func (x *Reservation) GetBtnColor() string {
	if x != nil {
		return x.BtnColor
	}
	return ""
}

func (x *Reservation) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

type DecorationFontConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FontID 字段，整型字符串（int64String）
	FontID uint64 `protobuf:"varint,1,opt,name=FontID,proto3" json:"FontID,omitempty"`
	// DownloadUrl 字段，字符串类型
	DownloadUrl string `protobuf:"bytes,2,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`
	// Status 字段，整型字符串（int64String）
	Status uint64 `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`
	// font_name 字段，字符串类型
	FontName string `protobuf:"bytes,4,opt,name=font_name,json=fontName,proto3" json:"font_name,omitempty"`
}

func (x *DecorationFontConfig) Reset() {
	*x = DecorationFontConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationFontConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationFontConfig) ProtoMessage() {}

func (x *DecorationFontConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationFontConfig.ProtoReflect.Descriptor instead.
func (*DecorationFontConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{241}
}

func (x *DecorationFontConfig) GetFontID() uint64 {
	if x != nil {
		return x.FontID
	}
	return 0
}

func (x *DecorationFontConfig) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *DecorationFontConfig) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DecorationFontConfig) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

type LinkMicAudienceKtvMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// message_type 字段，整型字符串（int64String）
	MessageType uint64 `protobuf:"varint,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// list_info 字段，是一个可重复的 ListInfo 消息类型列表
	ListInfo []*ListInfo `protobuf:"bytes,3,rep,name=list_info,json=listInfo,proto3" json:"list_info,omitempty"`
	// want_sing_count 字段，整型字符串（int64String）
	WantSingCount uint64 `protobuf:"varint,4,opt,name=want_sing_count,json=wantSingCount,proto3" json:"want_sing_count,omitempty"`
	// want_sing_song_threshold 字段，整型字符串（int64String）
	WantSingSongThreshold uint64 `protobuf:"varint,5,opt,name=want_sing_song_threshold,json=wantSingSongThreshold,proto3" json:"want_sing_song_threshold,omitempty"`
	// sung_song_count 字段，整型字符串（int64String）
	SungSongCount uint64 `protobuf:"varint,6,opt,name=sung_song_count,json=sungSongCount,proto3" json:"sung_song_count,omitempty"`
	// is_downgrade 字段，布尔类型
	IsDowngrade bool `protobuf:"varint,7,opt,name=is_downgrade,json=isDowngrade,proto3" json:"is_downgrade,omitempty"`
	// all_song_unique_list 字段，是一个可重复的 SongUniqueInfo 消息类型列表
	AllSongUniqueList []*LinkMicAudienceKtvMessage_SongUniqueInfo `protobuf:"bytes,8,rep,name=all_song_unique_list,json=allSongUniqueList,proto3" json:"all_song_unique_list,omitempty"`
}

func (x *LinkMicAudienceKtvMessage) Reset() {
	*x = LinkMicAudienceKtvMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMicAudienceKtvMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMicAudienceKtvMessage) ProtoMessage() {}

func (x *LinkMicAudienceKtvMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMicAudienceKtvMessage.ProtoReflect.Descriptor instead.
func (*LinkMicAudienceKtvMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{242}
}

func (x *LinkMicAudienceKtvMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *LinkMicAudienceKtvMessage) GetMessageType() uint64 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage) GetListInfo() []*ListInfo {
	if x != nil {
		return x.ListInfo
	}
	return nil
}

func (x *LinkMicAudienceKtvMessage) GetWantSingCount() uint64 {
	if x != nil {
		return x.WantSingCount
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage) GetWantSingSongThreshold() uint64 {
	if x != nil {
		return x.WantSingSongThreshold
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage) GetSungSongCount() uint64 {
	if x != nil {
		return x.SungSongCount
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage) GetIsDowngrade() bool {
	if x != nil {
		return x.IsDowngrade
	}
	return false
}

func (x *LinkMicAudienceKtvMessage) GetAllSongUniqueList() []*LinkMicAudienceKtvMessage_SongUniqueInfo {
	if x != nil {
		return x.AllSongUniqueList
	}
	return nil
}

type ListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// music 字段，引用 KtvSongStruct 消息类型
	Music *KtvSongStruct `protobuf:"bytes,1,opt,name=music,proto3" json:"music,omitempty"`
	// is_self_seeing 字段，布尔类型
	IsSelfSeeing bool `protobuf:"varint,2,opt,name=is_self_seeing,json=isSelfSeeing,proto3" json:"is_self_seeing,omitempty"`
}

func (x *ListInfo) Reset() {
	*x = ListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInfo) ProtoMessage() {}

func (x *ListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInfo.ProtoReflect.Descriptor instead.
func (*ListInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{243}
}

func (x *ListInfo) GetMusic() *KtvSongStruct {
	if x != nil {
		return x.Music
	}
	return nil
}

func (x *ListInfo) GetIsSelfSeeing() bool {
	if x != nil {
		return x.IsSelfSeeing
	}
	return false
}

type KtvSongStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 字段，整型字符串（int64String）
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// title 字段，字符串类型
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// author 字段，字符串类型
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// lyric_type 字段，整型字符串（int64String）
	LyricType uint64 `protobuf:"varint,4,opt,name=lyric_type,json=lyricType,proto3" json:"lyric_type,omitempty"`
	// song_url 字段，字符串类型
	SongUrl string `protobuf:"bytes,5,opt,name=song_url,json=songUrl,proto3" json:"song_url,omitempty"`
	// lyric_url_list 字段，字符串列表
	LyricUrlList []string `protobuf:"bytes,6,rep,name=lyric_url_list,json=lyricUrlList,proto3" json:"lyric_url_list,omitempty"`
	// duration 字段，整型字符串（int64String）
	Duration uint64 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// cover_url 字段，字符串类型
	CoverUrl string `protobuf:"bytes,8,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	// song_pattern 字段，整型字符串（int64String）
	SongPattern uint64 `protobuf:"varint,9,opt,name=song_pattern,json=songPattern,proto3" json:"song_pattern,omitempty"`
	// preview_start_time 字段，双精度浮点数
	PreviewStartTime float64 `protobuf:"fixed64,10,opt,name=preview_start_time,json=previewStartTime,proto3" json:"preview_start_time,omitempty"`
	// full_track 字段，AudioInfo 消息类型
	FullTrack *KtvSongStruct_AudioInfo `protobuf:"bytes,11,opt,name=full_track,json=fullTrack,proto3" json:"full_track,omitempty"`
	// accompaniment_track 字段，AudioInfo 消息类型
	AccompanimentTrack *KtvSongStruct_AudioInfo `protobuf:"bytes,12,opt,name=accompaniment_track,json=accompanimentTrack,proto3" json:"accompaniment_track,omitempty"`
	// new_cover_url 字段，字符串类型
	NewCoverUrl string `protobuf:"bytes,13,opt,name=new_cover_url,json=newCoverUrl,proto3" json:"new_cover_url,omitempty"`
	// midi_url 字段，字符串类型
	MidiUrl string `protobuf:"bytes,14,opt,name=midi_url,json=midiUrl,proto3" json:"midi_url,omitempty"`
	// is_favorite 字段，布尔类型
	IsFavorite bool `protobuf:"varint,15,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	// order_info 字段，OrderInfo 消息类型
	OrderInfo *KtvSongStruct_OrderInfo `protobuf:"bytes,16,opt,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	// tags 字段，字符串列表
	Tags []string `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`
	// music_climax 字段，MusicInterval 消息类型列表
	MusicClimax []*MusicInterval `protobuf:"bytes,19,rep,name=music_climax,json=musicClimax,proto3" json:"music_climax,omitempty"`
	// preludes 字段，MusicInterval 消息类型列表
	Preludes []*MusicInterval `protobuf:"bytes,20,rep,name=preludes,proto3" json:"preludes,omitempty"`
	// interludes 字段，MusicInterval 消息类型列表
	Interludes []*MusicInterval `protobuf:"bytes,21,rep,name=interludes,proto3" json:"interludes,omitempty"`
	// segments 字段，MusicInterval 消息类型列表
	Segments []*MusicInterval `protobuf:"bytes,22,rep,name=segments,proto3" json:"segments,omitempty"`
	// pattern_file_url 字段，字符串类型
	PatternFileUrl string `protobuf:"bytes,23,opt,name=pattern_file_url,json=patternFileUrl,proto3" json:"pattern_file_url,omitempty"`
	// bridge_segments 字段，MusicInterval 消息类型列表
	BridgeSegments []*MusicInterval `protobuf:"bytes,24,rep,name=bridge_segments,json=bridgeSegments,proto3" json:"bridge_segments,omitempty"`
	// main_segments 字段，MusicInterval 消息类型列表
	MainSegments []*MusicInterval `protobuf:"bytes,25,rep,name=main_segments,json=mainSegments,proto3" json:"main_segments,omitempty"`
	// finale_segments 字段，MusicInterval 消息类型列表
	FinaleSegments []*MusicInterval `protobuf:"bytes,26,rep,name=finale_segments,json=finaleSegments,proto3" json:"finale_segments,omitempty"`
	// chorus_info 字段，ChorusVideoInfo 消息类型
	ChorusInfo *ChorusVideoInfo `protobuf:"bytes,27,opt,name=chorus_info,json=chorusInfo,proto3" json:"chorus_info,omitempty"`
	// song_type 字段，整型
	SongType int32 `protobuf:"varint,28,opt,name=song_type,json=songType,proto3" json:"song_type,omitempty"`
	// add_song_source 字段，字符串类型
	AddSongSource string `protobuf:"bytes,29,opt,name=add_song_source,json=addSongSource,proto3" json:"add_song_source,omitempty"`
	// total_order_with_cur_anchor 字段，整型字符串（int64String）
	TotalOrderWithCurAnchor uint64 `protobuf:"varint,30,opt,name=total_order_with_cur_anchor,json=totalOrderWithCurAnchor,proto3" json:"total_order_with_cur_anchor,omitempty"`
	// global_total_order 字段，整型字符串（int64String）
	GlobalTotalOrder uint64 `protobuf:"varint,31,opt,name=global_total_order,json=globalTotalOrder,proto3" json:"global_total_order,omitempty"`
	// artist_ids 字段，整型字符串（int64String）列表
	ArtistIds []uint64 `protobuf:"varint,32,rep,packed,name=artist_ids,json=artistIds,proto3" json:"artist_ids,omitempty"`
	// id_str 字段，字符串类型
	IdStr string `protobuf:"bytes,33,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	// song_copyright 字段，整型列表
	SongCopyright []int32 `protobuf:"varint,34,rep,packed,name=song_copyright,json=songCopyright,proto3" json:"song_copyright,omitempty"`
	// is_prior_song 字段，布尔类型
	IsPriorSong bool `protobuf:"varint,35,opt,name=is_prior_song,json=isPriorSong,proto3" json:"is_prior_song,omitempty"`
	// is_fragment_song 字段，布尔类型
	IsFragmentSong bool `protobuf:"varint,36,opt,name=is_fragment_song,json=isFragmentSong,proto3" json:"is_fragment_song,omitempty"`
	// fragment_lyric 字段，字符串类型
	FragmentLyric string `protobuf:"bytes,37,opt,name=fragment_lyric,json=fragmentLyric,proto3" json:"fragment_lyric,omitempty"`
	// personal_song_info 字段，PersonalSongInfo 消息类型
	PersonalSongInfo *PersonalSongInfo `protobuf:"bytes,38,opt,name=personal_song_info,json=personalSongInfo,proto3" json:"personal_song_info,omitempty"`
	// lyric_hash 字段，字符串类型
	LyricHash string `protobuf:"bytes,39,opt,name=lyric_hash,json=lyricHash,proto3" json:"lyric_hash,omitempty"`
	// midi_hash 字段，字符串类型
	MidiHash string `protobuf:"bytes,40,opt,name=midi_hash,json=midiHash,proto3" json:"midi_hash,omitempty"`
	// want_listen_info 字段，WantListenInfo 消息类型
	WantListenInfo *WantListenInfo `protobuf:"bytes,41,opt,name=want_listen_info,json=wantListenInfo,proto3" json:"want_listen_info,omitempty"`
	// challenge_info 字段，ChallengeInfo 消息类型
	ChallengeInfo *KtvSongStruct_ChallengeInfo `protobuf:"bytes,42,opt,name=challenge_info,json=challengeInfo,proto3" json:"challenge_info,omitempty"`
	// 扩展字段，假设 ext 是一个 map<string, string>
	Ext map[string]string `protobuf:"bytes,18,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KtvSongStruct) Reset() {
	*x = KtvSongStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KtvSongStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KtvSongStruct) ProtoMessage() {}

func (x *KtvSongStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KtvSongStruct.ProtoReflect.Descriptor instead.
func (*KtvSongStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{244}
}

func (x *KtvSongStruct) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KtvSongStruct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KtvSongStruct) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *KtvSongStruct) GetLyricType() uint64 {
	if x != nil {
		return x.LyricType
	}
	return 0
}

func (x *KtvSongStruct) GetSongUrl() string {
	if x != nil {
		return x.SongUrl
	}
	return ""
}

func (x *KtvSongStruct) GetLyricUrlList() []string {
	if x != nil {
		return x.LyricUrlList
	}
	return nil
}

func (x *KtvSongStruct) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *KtvSongStruct) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *KtvSongStruct) GetSongPattern() uint64 {
	if x != nil {
		return x.SongPattern
	}
	return 0
}

func (x *KtvSongStruct) GetPreviewStartTime() float64 {
	if x != nil {
		return x.PreviewStartTime
	}
	return 0
}

func (x *KtvSongStruct) GetFullTrack() *KtvSongStruct_AudioInfo {
	if x != nil {
		return x.FullTrack
	}
	return nil
}

func (x *KtvSongStruct) GetAccompanimentTrack() *KtvSongStruct_AudioInfo {
	if x != nil {
		return x.AccompanimentTrack
	}
	return nil
}

func (x *KtvSongStruct) GetNewCoverUrl() string {
	if x != nil {
		return x.NewCoverUrl
	}
	return ""
}

func (x *KtvSongStruct) GetMidiUrl() string {
	if x != nil {
		return x.MidiUrl
	}
	return ""
}

func (x *KtvSongStruct) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *KtvSongStruct) GetOrderInfo() *KtvSongStruct_OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *KtvSongStruct) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KtvSongStruct) GetMusicClimax() []*MusicInterval {
	if x != nil {
		return x.MusicClimax
	}
	return nil
}

func (x *KtvSongStruct) GetPreludes() []*MusicInterval {
	if x != nil {
		return x.Preludes
	}
	return nil
}

func (x *KtvSongStruct) GetInterludes() []*MusicInterval {
	if x != nil {
		return x.Interludes
	}
	return nil
}

func (x *KtvSongStruct) GetSegments() []*MusicInterval {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *KtvSongStruct) GetPatternFileUrl() string {
	if x != nil {
		return x.PatternFileUrl
	}
	return ""
}

func (x *KtvSongStruct) GetBridgeSegments() []*MusicInterval {
	if x != nil {
		return x.BridgeSegments
	}
	return nil
}

func (x *KtvSongStruct) GetMainSegments() []*MusicInterval {
	if x != nil {
		return x.MainSegments
	}
	return nil
}

func (x *KtvSongStruct) GetFinaleSegments() []*MusicInterval {
	if x != nil {
		return x.FinaleSegments
	}
	return nil
}

func (x *KtvSongStruct) GetChorusInfo() *ChorusVideoInfo {
	if x != nil {
		return x.ChorusInfo
	}
	return nil
}

func (x *KtvSongStruct) GetSongType() int32 {
	if x != nil {
		return x.SongType
	}
	return 0
}

func (x *KtvSongStruct) GetAddSongSource() string {
	if x != nil {
		return x.AddSongSource
	}
	return ""
}

func (x *KtvSongStruct) GetTotalOrderWithCurAnchor() uint64 {
	if x != nil {
		return x.TotalOrderWithCurAnchor
	}
	return 0
}

func (x *KtvSongStruct) GetGlobalTotalOrder() uint64 {
	if x != nil {
		return x.GlobalTotalOrder
	}
	return 0
}

func (x *KtvSongStruct) GetArtistIds() []uint64 {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *KtvSongStruct) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *KtvSongStruct) GetSongCopyright() []int32 {
	if x != nil {
		return x.SongCopyright
	}
	return nil
}

func (x *KtvSongStruct) GetIsPriorSong() bool {
	if x != nil {
		return x.IsPriorSong
	}
	return false
}

func (x *KtvSongStruct) GetIsFragmentSong() bool {
	if x != nil {
		return x.IsFragmentSong
	}
	return false
}

func (x *KtvSongStruct) GetFragmentLyric() string {
	if x != nil {
		return x.FragmentLyric
	}
	return ""
}

func (x *KtvSongStruct) GetPersonalSongInfo() *PersonalSongInfo {
	if x != nil {
		return x.PersonalSongInfo
	}
	return nil
}

func (x *KtvSongStruct) GetLyricHash() string {
	if x != nil {
		return x.LyricHash
	}
	return ""
}

func (x *KtvSongStruct) GetMidiHash() string {
	if x != nil {
		return x.MidiHash
	}
	return ""
}

func (x *KtvSongStruct) GetWantListenInfo() *WantListenInfo {
	if x != nil {
		return x.WantListenInfo
	}
	return nil
}

func (x *KtvSongStruct) GetChallengeInfo() *KtvSongStruct_ChallengeInfo {
	if x != nil {
		return x.ChallengeInfo
	}
	return nil
}

func (x *KtvSongStruct) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type PersonalSongInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_midi_score 字段，双精度浮点数
	UserMidiScore float64 `protobuf:"fixed64,1,opt,name=user_midi_score,json=userMidiScore,proto3" json:"user_midi_score,omitempty"`
	// is_high_score_song 字段，布尔类型
	IsHighScoreSong bool `protobuf:"varint,2,opt,name=is_high_score_song,json=isHighScoreSong,proto3" json:"is_high_score_song,omitempty"`
}

func (x *PersonalSongInfo) Reset() {
	*x = PersonalSongInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalSongInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalSongInfo) ProtoMessage() {}

func (x *PersonalSongInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalSongInfo.ProtoReflect.Descriptor instead.
func (*PersonalSongInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{245}
}

func (x *PersonalSongInfo) GetUserMidiScore() float64 {
	if x != nil {
		return x.UserMidiScore
	}
	return 0
}

func (x *PersonalSongInfo) GetIsHighScoreSong() bool {
	if x != nil {
		return x.IsHighScoreSong
	}
	return false
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 字段，整型字符串（int64String）
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// nickname 字段，字符串类型
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// avatar 字段，Image 消息类型
	Avatar *Image `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// id_str 字段，字符串类型
	IdStr string `protobuf:"bytes,4,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	// high_score_song_count 字段，字符串类型
	HighScoreSongCount string `protobuf:"bytes,5,opt,name=high_score_song_count,json=highScoreSongCount,proto3" json:"high_score_song_count,omitempty"`
	// ktv_stage_mic_pos_tag_text 字段，字符串类型
	KtvStageMicPosTagText string `protobuf:"bytes,6,opt,name=ktv_stage_mic_pos_tag_text,json=ktvStageMicPosTagText,proto3" json:"ktv_stage_mic_pos_tag_text,omitempty"`
	// ktv_lyric_text 字段，整型（int32）
	KtvLyricText int32 `protobuf:"varint,7,opt,name=ktv_lyric_text,json=ktvLyricText,proto3" json:"ktv_lyric_text,omitempty"`
	// ktv_component_lyric_text_first_line 字段，字符串类型
	KtvComponentLyricTextFirstLine string `protobuf:"bytes,8,opt,name=ktv_component_lyric_text_first_line,json=ktvComponentLyricTextFirstLine,proto3" json:"ktv_component_lyric_text_first_line,omitempty"`
	// ktv_component_lyric_text_second_line 字段，整型（int32）
	KtvComponentLyricTextSecondLine int32 `protobuf:"varint,9,opt,name=ktv_component_lyric_text_second_line,json=ktvComponentLyricTextSecondLine,proto3" json:"ktv_component_lyric_text_second_line,omitempty"`
	// high_score_song_tag 字段，UserHighScoreSongTag 消息类型
	HighScoreSongTag *UserHighScoreSongTag `protobuf:"bytes,10,opt,name=high_score_song_tag,json=highScoreSongTag,proto3" json:"high_score_song_tag,omitempty"`
	// hit_midi_record_ab 字段，整型字符串（int64String）
	HitMidiRecordAb uint64 `protobuf:"varint,11,opt,name=hit_midi_record_ab,json=hitMidiRecordAb,proto3" json:"hit_midi_record_ab,omitempty"`
	// user_midi_score 字段，双精度浮点数（double）
	UserMidiScore float64 `protobuf:"fixed64,12,opt,name=user_midi_score,json=userMidiScore,proto3" json:"user_midi_score,omitempty"`
	// is_high_score_song 字段，布尔类型（bool）
	IsHighScoreSong bool `protobuf:"varint,13,opt,name=is_high_score_song,json=isHighScoreSong,proto3" json:"is_high_score_song,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{246}
}

func (x *UserInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *UserInfo) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *UserInfo) GetHighScoreSongCount() string {
	if x != nil {
		return x.HighScoreSongCount
	}
	return ""
}

func (x *UserInfo) GetKtvStageMicPosTagText() string {
	if x != nil {
		return x.KtvStageMicPosTagText
	}
	return ""
}

func (x *UserInfo) GetKtvLyricText() int32 {
	if x != nil {
		return x.KtvLyricText
	}
	return 0
}

func (x *UserInfo) GetKtvComponentLyricTextFirstLine() string {
	if x != nil {
		return x.KtvComponentLyricTextFirstLine
	}
	return ""
}

func (x *UserInfo) GetKtvComponentLyricTextSecondLine() int32 {
	if x != nil {
		return x.KtvComponentLyricTextSecondLine
	}
	return 0
}

func (x *UserInfo) GetHighScoreSongTag() *UserHighScoreSongTag {
	if x != nil {
		return x.HighScoreSongTag
	}
	return nil
}

func (x *UserInfo) GetHitMidiRecordAb() uint64 {
	if x != nil {
		return x.HitMidiRecordAb
	}
	return 0
}

func (x *UserInfo) GetUserMidiScore() float64 {
	if x != nil {
		return x.UserMidiScore
	}
	return 0
}

func (x *UserInfo) GetIsHighScoreSong() bool {
	if x != nil {
		return x.IsHighScoreSong
	}
	return false
}

type WantListenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// want_listen_count 字段，整型字符串（int64String）
	WantListenCount uint64 `protobuf:"varint,1,opt,name=want_listen_count,json=wantListenCount,proto3" json:"want_listen_count,omitempty"`
}

func (x *WantListenInfo) Reset() {
	*x = WantListenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantListenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantListenInfo) ProtoMessage() {}

func (x *WantListenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantListenInfo.ProtoReflect.Descriptor instead.
func (*WantListenInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{247}
}

func (x *WantListenInfo) GetWantListenCount() uint64 {
	if x != nil {
		return x.WantListenCount
	}
	return 0
}

type MusicInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StartTimeMillisecond 字段，整型字符串（int64String）
	StartTimeMillisecond uint64 `protobuf:"varint,1,opt,name=StartTimeMillisecond,proto3" json:"StartTimeMillisecond,omitempty"`
	// DurationMillisecond 字段，整型字符串（int64String）
	DurationMillisecond uint64 `protobuf:"varint,2,opt,name=DurationMillisecond,proto3" json:"DurationMillisecond,omitempty"`
}

func (x *MusicInterval) Reset() {
	*x = MusicInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicInterval) ProtoMessage() {}

func (x *MusicInterval) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicInterval.ProtoReflect.Descriptor instead.
func (*MusicInterval) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{248}
}

func (x *MusicInterval) GetStartTimeMillisecond() uint64 {
	if x != nil {
		return x.StartTimeMillisecond
	}
	return 0
}

func (x *MusicInterval) GetDurationMillisecond() uint64 {
	if x != nil {
		return x.DurationMillisecond
	}
	return 0
}

type ChorusVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// item_id 字段，整型字符串（int64String）
	ItemId uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// item_description 字段，字符串类型
	ItemDescription string `protobuf:"bytes,2,opt,name=item_description,json=itemDescription,proto3" json:"item_description,omitempty"`
	// item_url 字段，字符串类型
	ItemUrl string `protobuf:"bytes,3,opt,name=item_url,json=itemUrl,proto3" json:"item_url,omitempty"`
	// author_id 字段，整型字符串（int64String）
	AuthorId uint64 `protobuf:"varint,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// author_name 字段，字符串类型
	AuthorName string `protobuf:"bytes,5,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// use_times 字段，整型字符串（int64String）
	UseTimes uint64 `protobuf:"varint,6,opt,name=use_times,json=useTimes,proto3" json:"use_times,omitempty"`
	// image 字段，Image 消息类型
	Image *Image `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ChorusVideoInfo) Reset() {
	*x = ChorusVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChorusVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChorusVideoInfo) ProtoMessage() {}

func (x *ChorusVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChorusVideoInfo.ProtoReflect.Descriptor instead.
func (*ChorusVideoInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{249}
}

func (x *ChorusVideoInfo) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ChorusVideoInfo) GetItemDescription() string {
	if x != nil {
		return x.ItemDescription
	}
	return ""
}

func (x *ChorusVideoInfo) GetItemUrl() string {
	if x != nil {
		return x.ItemUrl
	}
	return ""
}

func (x *ChorusVideoInfo) GetAuthorId() uint64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *ChorusVideoInfo) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *ChorusVideoInfo) GetUseTimes() uint64 {
	if x != nil {
		return x.UseTimes
	}
	return 0
}

func (x *ChorusVideoInfo) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type UserHighScoreSongTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// high_score_song_count 字段，字符串类型
	HighScoreSongCount string `protobuf:"bytes,1,opt,name=high_score_song_count,json=highScoreSongCount,proto3" json:"high_score_song_count,omitempty"`
	// icon 字段，字符串类型
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	// bg_color 字段，字符串类型列表
	BgColor []string `protobuf:"bytes,3,rep,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
}

func (x *UserHighScoreSongTag) Reset() {
	*x = UserHighScoreSongTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHighScoreSongTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHighScoreSongTag) ProtoMessage() {}

func (x *UserHighScoreSongTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHighScoreSongTag.ProtoReflect.Descriptor instead.
func (*UserHighScoreSongTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{250}
}

func (x *UserHighScoreSongTag) GetHighScoreSongCount() string {
	if x != nil {
		return x.HighScoreSongCount
	}
	return ""
}

func (x *UserHighScoreSongTag) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserHighScoreSongTag) GetBgColor() []string {
	if x != nil {
		return x.BgColor
	}
	return nil
}

type RoomStreamAdaptationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                    *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AdaptationType            int32   `protobuf:"varint,2,opt,name=adaptation_type,json=adaptationType,proto3" json:"adaptation_type,omitempty"`
	AdaptationHeightRatio     float32 `protobuf:"fixed32,3,opt,name=adaptation_height_ratio,json=adaptationHeightRatio,proto3" json:"adaptation_height_ratio,omitempty"`
	AdaptationBodyCenterRatio float32 `protobuf:"fixed32,4,opt,name=adaptation_body_center_ratio,json=adaptationBodyCenterRatio,proto3" json:"adaptation_body_center_ratio,omitempty"`
}

func (x *RoomStreamAdaptationMessage) Reset() {
	*x = RoomStreamAdaptationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStreamAdaptationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStreamAdaptationMessage) ProtoMessage() {}

func (x *RoomStreamAdaptationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStreamAdaptationMessage.ProtoReflect.Descriptor instead.
func (*RoomStreamAdaptationMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{251}
}

func (x *RoomStreamAdaptationMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomStreamAdaptationMessage) GetAdaptationType() int32 {
	if x != nil {
		return x.AdaptationType
	}
	return 0
}

func (x *RoomStreamAdaptationMessage) GetAdaptationHeightRatio() float32 {
	if x != nil {
		return x.AdaptationHeightRatio
	}
	return 0
}

func (x *RoomStreamAdaptationMessage) GetAdaptationBodyCenterRatio() float32 {
	if x != nil {
		return x.AdaptationBodyCenterRatio
	}
	return 0
}

type QuizAudienceStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// quiz_list 字段，是一个可重复的 Quiz 消息类型列表
	QuizList []*Quiz `protobuf:"bytes,2,rep,name=quiz_list,json=quizList,proto3" json:"quiz_list,omitempty"`
}

func (x *QuizAudienceStatusMessage) Reset() {
	*x = QuizAudienceStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizAudienceStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizAudienceStatusMessage) ProtoMessage() {}

func (x *QuizAudienceStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizAudienceStatusMessage.ProtoReflect.Descriptor instead.
func (*QuizAudienceStatusMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{252}
}

func (x *QuizAudienceStatusMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *QuizAudienceStatusMessage) GetQuizList() []*Quiz {
	if x != nil {
		return x.QuizList
	}
	return nil
}

type Quiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// quiz_id 字段，字符串类型
	QuizId string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	// title 字段，字符串类型
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// options 字段，字符串类型
	Options string `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// quiz_status 字段，整型
	QuizStatus int32 `protobuf:"varint,4,opt,name=quiz_status,json=quizStatus,proto3" json:"quiz_status,omitempty"`
	// countdown_time 字段，整型字符串（int64String）
	CountdownTime uint64 `protobuf:"varint,5,opt,name=countdown_time,json=countdownTime,proto3" json:"countdown_time,omitempty"`
	// win_option 字段，整型字符串（int64String）
	WinOption uint64 `protobuf:"varint,6,opt,name=win_option,json=winOption,proto3" json:"win_option,omitempty"`
	// bet_option 字段，整型字符串（int64String）
	BetOption uint64 `protobuf:"varint,7,opt,name=bet_option,json=betOption,proto3" json:"bet_option,omitempty"`
	// gain 字段，字符串类型
	Gain string `protobuf:"bytes,8,opt,name=gain,proto3" json:"gain,omitempty"`
	// template_id 字段，字符串类型
	TemplateId string `protobuf:"bytes,9,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// absolute_end_time 字段，整型字符串（int64String）
	AbsoluteEndTime uint64 `protobuf:"varint,10,opt,name=absolute_end_time,json=absoluteEndTime,proto3" json:"absolute_end_time,omitempty"`
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{253}
}

func (x *Quiz) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *Quiz) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Quiz) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *Quiz) GetQuizStatus() int32 {
	if x != nil {
		return x.QuizStatus
	}
	return 0
}

func (x *Quiz) GetCountdownTime() uint64 {
	if x != nil {
		return x.CountdownTime
	}
	return 0
}

func (x *Quiz) GetWinOption() uint64 {
	if x != nil {
		return x.WinOption
	}
	return 0
}

func (x *Quiz) GetBetOption() uint64 {
	if x != nil {
		return x.BetOption
	}
	return 0
}

func (x *Quiz) GetGain() string {
	if x != nil {
		return x.Gain
	}
	return ""
}

func (x *Quiz) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *Quiz) GetAbsoluteEndTime() uint64 {
	if x != nil {
		return x.AbsoluteEndTime
	}
	return 0
}

type HotChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common          *Common  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                              // 公共信息
	Title           string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                // 标题
	Content         string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                            // 内容
	Num             int64    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`                                                   // 数量
	Duration        int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                         // 持续时间
	ShowDuration    int64    `protobuf:"varint,6,opt,name=show_duration,json=showDuration,proto3" json:"show_duration,omitempty"`             // 显示持续时间
	SequenceId      int64    `protobuf:"varint,7,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`                   // 序列ID
	HotList         []string `protobuf:"bytes,8,rep,name=hot_list,json=hotList,proto3" json:"hot_list,omitempty"`                             // 热门列表
	RtfContent      *Text    `protobuf:"bytes,9,opt,name=rtf_content,json=rtfContent,proto3" json:"rtf_content,omitempty"`                    // 富文本内容
	ChatContentType int64    `protobuf:"varint,10,opt,name=chat_content_type,json=chatContentType,proto3" json:"chat_content_type,omitempty"` // 聊天内容类型
	// 额外信息的映射字段
	Extra map[string]string `protobuf:"bytes,200,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 假设字段编号为200
}

func (x *HotChatMessage) Reset() {
	*x = HotChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotChatMessage) ProtoMessage() {}

func (x *HotChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotChatMessage.ProtoReflect.Descriptor instead.
func (*HotChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{254}
}

func (x *HotChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *HotChatMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HotChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HotChatMessage) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *HotChatMessage) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HotChatMessage) GetShowDuration() int64 {
	if x != nil {
		return x.ShowDuration
	}
	return 0
}

func (x *HotChatMessage) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *HotChatMessage) GetHotList() []string {
	if x != nil {
		return x.HotList
	}
	return nil
}

func (x *HotChatMessage) GetRtfContent() *Text {
	if x != nil {
		return x.RtfContent
	}
	return nil
}

func (x *HotChatMessage) GetChatContentType() int64 {
	if x != nil {
		return x.ChatContentType
	}
	return 0
}

func (x *HotChatMessage) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HotRoomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common field, assuming it's a message type imported from another .proto file
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// info field, assuming it's a message type imported from another .proto file
	Info *HotRoomInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *HotRoomMessage) Reset() {
	*x = HotRoomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotRoomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotRoomMessage) ProtoMessage() {}

func (x *HotRoomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotRoomMessage.ProtoReflect.Descriptor instead.
func (*HotRoomMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{255}
}

func (x *HotRoomMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *HotRoomMessage) GetInfo() *HotRoomInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type HotRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BitMap field, an integer field represented as a string
	BitMap string `protobuf:"bytes,1,opt,name=BitMap,proto3" json:"BitMap,omitempty"`
}

func (x *HotRoomInfo) Reset() {
	*x = HotRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotRoomInfo) ProtoMessage() {}

func (x *HotRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotRoomInfo.ProtoReflect.Descriptor instead.
func (*HotRoomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{256}
}

func (x *HotRoomInfo) GetBitMap() string {
	if x != nil {
		return x.BitMap
	}
	return ""
}

type AudioChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// user 字段，引用 User 消息类型
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// content 字段，字符串类型
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// audio_url 字段，字符串类型
	AudioUrl string `protobuf:"bytes,4,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
	// audio_duration 字段，整型字符串（int64String）
	AudioDuration uint64 `protobuf:"varint,5,opt,name=audio_duration,json=audioDuration,proto3" json:"audio_duration,omitempty"`
	// public_area_common 字段，引用 PublicAreaCommon 消息类型
	PublicAreaCommon *PublicAreaCommon `protobuf:"bytes,6,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`
	// rtf_content 字段，引用 Text 消息类型
	RtfContent *Text `protobuf:"bytes,7,opt,name=rtf_content,json=rtfContent,proto3" json:"rtf_content,omitempty"`
}

func (x *AudioChatMessage) Reset() {
	*x = AudioChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChatMessage) ProtoMessage() {}

func (x *AudioChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChatMessage.ProtoReflect.Descriptor instead.
func (*AudioChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{257}
}

func (x *AudioChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *AudioChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AudioChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AudioChatMessage) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

func (x *AudioChatMessage) GetAudioDuration() uint64 {
	if x != nil {
		return x.AudioDuration
	}
	return 0
}

func (x *AudioChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *AudioChatMessage) GetRtfContent() *Text {
	if x != nil {
		return x.RtfContent
	}
	return nil
}

type NotifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common 字段，引用 Common 消息类型
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// schema 字段，字符串类型
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// notify_type 字段，整型字符串（int64String）
	NotifyType uint64 `protobuf:"varint,3,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty"`
	// content 字段，字符串类型
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// user 字段，引用 User 消息类型
	User *User `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// extra 字段，引用 NotifyMessage.Extra 消息类型
	Extra *NotifyMessage_Extra `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	// notify_class 字段，整型字符串（int64String）
	NotifyClass uint64 `protobuf:"varint,7,opt,name=notify_class,json=notifyClass,proto3" json:"notify_class,omitempty"`
	// flex_setting 字段，整型字符串（int64String）列表
	FlexSetting []uint64 `protobuf:"varint,8,rep,packed,name=flex_setting,json=flexSetting,proto3" json:"flex_setting,omitempty"`
	// biz_scene 字段，字符串类型
	BizScene string `protobuf:"bytes,100,opt,name=biz_scene,json=bizScene,proto3" json:"biz_scene,omitempty"`
}

func (x *NotifyMessage) Reset() {
	*x = NotifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMessage) ProtoMessage() {}

func (x *NotifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMessage.ProtoReflect.Descriptor instead.
func (*NotifyMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{258}
}

func (x *NotifyMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *NotifyMessage) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *NotifyMessage) GetNotifyType() uint64 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *NotifyMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NotifyMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NotifyMessage) GetExtra() *NotifyMessage_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *NotifyMessage) GetNotifyClass() uint64 {
	if x != nil {
		return x.NotifyClass
	}
	return 0
}

func (x *NotifyMessage) GetFlexSetting() []uint64 {
	if x != nil {
		return x.FlexSetting
	}
	return nil
}

func (x *NotifyMessage) GetBizScene() string {
	if x != nil {
		return x.BizScene
	}
	return ""
}

// 幸运盒子消息
type LuckyBoxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common             *Common                           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	DiamondCount       int64                             `protobuf:"varint,2,opt,name=diamond_count,json=diamondCount,proto3" json:"diamond_count,omitempty"`
	BoxId              int64                             `protobuf:"varint,3,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	SendTime           int64                             `protobuf:"varint,4,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	DelayTime          int64                             `protobuf:"varint,5,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	BoxType            int64                             `protobuf:"varint,6,opt,name=box_type,json=boxType,proto3" json:"box_type,omitempty"`
	Title              string                            `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Large              bool                              `protobuf:"varint,8,opt,name=large,proto3" json:"large,omitempty"`
	Background         *Image                            `protobuf:"bytes,9,opt,name=background,proto3" json:"background,omitempty"`
	IsOfficial         bool                              `protobuf:"varint,10,opt,name=is_official,json=isOfficial,proto3" json:"is_official,omitempty"`
	Priority           int64                             `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	User               *User                             `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	DescriptionList    []*LuckyBoxMessage_ImgText        `protobuf:"bytes,13,rep,name=description_list,json=descriptionList,proto3" json:"description_list,omitempty"` // 假设ImgText也在别处定义
	LuckyIcon          *Image                            `protobuf:"bytes,14,opt,name=lucky_icon,json=luckyIcon,proto3" json:"lucky_icon,omitempty"`
	DisplayDuration    int64                             `protobuf:"varint,15,opt,name=display_duration,json=displayDuration,proto3" json:"display_duration,omitempty"`
	BoxStatus          int32                             `protobuf:"varint,16,opt,name=box_status,json=boxStatus,proto3" json:"box_status,omitempty"`
	FlatDuration       int32                             `protobuf:"varint,17,opt,name=flat_duration,json=flatDuration,proto3" json:"flat_duration,omitempty"`
	UnpackType         int32                             `protobuf:"varint,18,opt,name=unpack_type,json=unpackType,proto3" json:"unpack_type,omitempty"`
	Meta               *LuckyBoxMessage_BoxMeta          `protobuf:"bytes,19,opt,name=meta,proto3" json:"meta,omitempty"`
	Extra              *LuckyBoxMessage_Extra            `protobuf:"bytes,20,opt,name=extra,proto3" json:"extra,omitempty"`
	BusinessType       int64                             `protobuf:"varint,21,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	TopCoverImage      *Image                            `protobuf:"bytes,22,opt,name=top_cover_image,json=topCoverImage,proto3" json:"top_cover_image,omitempty"`
	BottomCoverImage   *Image                            `protobuf:"bytes,23,opt,name=bottom_cover_image,json=bottomCoverImage,proto3" json:"bottom_cover_image,omitempty"`
	BoxIdStr           string                            `protobuf:"bytes,24,opt,name=box_id_str,json=boxIdStr,proto3" json:"box_id_str,omitempty"`
	BottomCommentMsg   *LuckyBoxMessage_BottomCommentMsg `protobuf:"bytes,25,opt,name=bottom_comment_msg,json=bottomCommentMsg,proto3" json:"bottom_comment_msg,omitempty"` // 假设BottomCommentMsg也在别处定义
	IsRiskyOwner       bool                              `protobuf:"varint,26,opt,name=is_risky_owner,json=isRiskyOwner,proto3" json:"is_risky_owner,omitempty"`
	ActivityId         string                            `protobuf:"bytes,27,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Dress              *LuckyBoxMessage_Dress            `protobuf:"bytes,28,opt,name=dress,proto3" json:"dress,omitempty"`                                                 // 假设Dress也在别处定义
	PublicAreaCommon   *PublicAreaCommon                 `protobuf:"bytes,29,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"` // 假设PublicAreaCommon也在别处定义
	JoinFrozenDuration int64                             `protobuf:"varint,30,opt,name=join_frozen_duration,json=joinFrozenDuration,proto3" json:"join_frozen_duration,omitempty"`
}

func (x *LuckyBoxMessage) Reset() {
	*x = LuckyBoxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage) ProtoMessage() {}

func (x *LuckyBoxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259}
}

func (x *LuckyBoxMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *LuckyBoxMessage) GetDiamondCount() int64 {
	if x != nil {
		return x.DiamondCount
	}
	return 0
}

func (x *LuckyBoxMessage) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *LuckyBoxMessage) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *LuckyBoxMessage) GetDelayTime() int64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *LuckyBoxMessage) GetBoxType() int64 {
	if x != nil {
		return x.BoxType
	}
	return 0
}

func (x *LuckyBoxMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LuckyBoxMessage) GetLarge() bool {
	if x != nil {
		return x.Large
	}
	return false
}

func (x *LuckyBoxMessage) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *LuckyBoxMessage) GetIsOfficial() bool {
	if x != nil {
		return x.IsOfficial
	}
	return false
}

func (x *LuckyBoxMessage) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LuckyBoxMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LuckyBoxMessage) GetDescriptionList() []*LuckyBoxMessage_ImgText {
	if x != nil {
		return x.DescriptionList
	}
	return nil
}

func (x *LuckyBoxMessage) GetLuckyIcon() *Image {
	if x != nil {
		return x.LuckyIcon
	}
	return nil
}

func (x *LuckyBoxMessage) GetDisplayDuration() int64 {
	if x != nil {
		return x.DisplayDuration
	}
	return 0
}

func (x *LuckyBoxMessage) GetBoxStatus() int32 {
	if x != nil {
		return x.BoxStatus
	}
	return 0
}

func (x *LuckyBoxMessage) GetFlatDuration() int32 {
	if x != nil {
		return x.FlatDuration
	}
	return 0
}

func (x *LuckyBoxMessage) GetUnpackType() int32 {
	if x != nil {
		return x.UnpackType
	}
	return 0
}

func (x *LuckyBoxMessage) GetMeta() *LuckyBoxMessage_BoxMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LuckyBoxMessage) GetExtra() *LuckyBoxMessage_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *LuckyBoxMessage) GetBusinessType() int64 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *LuckyBoxMessage) GetTopCoverImage() *Image {
	if x != nil {
		return x.TopCoverImage
	}
	return nil
}

func (x *LuckyBoxMessage) GetBottomCoverImage() *Image {
	if x != nil {
		return x.BottomCoverImage
	}
	return nil
}

func (x *LuckyBoxMessage) GetBoxIdStr() string {
	if x != nil {
		return x.BoxIdStr
	}
	return ""
}

func (x *LuckyBoxMessage) GetBottomCommentMsg() *LuckyBoxMessage_BottomCommentMsg {
	if x != nil {
		return x.BottomCommentMsg
	}
	return nil
}

func (x *LuckyBoxMessage) GetIsRiskyOwner() bool {
	if x != nil {
		return x.IsRiskyOwner
	}
	return false
}

func (x *LuckyBoxMessage) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *LuckyBoxMessage) GetDress() *LuckyBoxMessage_Dress {
	if x != nil {
		return x.Dress
	}
	return nil
}

func (x *LuckyBoxMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *LuckyBoxMessage) GetJoinFrozenDuration() int64 {
	if x != nil {
		return x.JoinFrozenDuration
	}
	return 0
}

type UpdateFanTicketMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                 *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                                     // 假设Common是已定义的消息类型
	RoomFanTicketCountText string  `protobuf:"bytes,2,opt,name=room_fan_ticket_count_text,json=roomFanTicketCountText,proto3" json:"room_fan_ticket_count_text,omitempty"` // 房间粉丝票计数文本
	RoomFanTicketCount     int64   `protobuf:"varint,3,opt,name=room_fan_ticket_count,json=roomFanTicketCount,proto3" json:"room_fan_ticket_count,omitempty"`              // 房间粉丝票计数
	ForceUpdate            bool    `protobuf:"varint,4,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`                                       // 是否强制更新
}

func (x *UpdateFanTicketMessage) Reset() {
	*x = UpdateFanTicketMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFanTicketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFanTicketMessage) ProtoMessage() {}

func (x *UpdateFanTicketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFanTicketMessage.ProtoReflect.Descriptor instead.
func (*UpdateFanTicketMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{260}
}

func (x *UpdateFanTicketMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *UpdateFanTicketMessage) GetRoomFanTicketCountText() string {
	if x != nil {
		return x.RoomFanTicketCountText
	}
	return ""
}

func (x *UpdateFanTicketMessage) GetRoomFanTicketCount() int64 {
	if x != nil {
		return x.RoomFanTicketCount
	}
	return 0
}

func (x *UpdateFanTicketMessage) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

type ScreenChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                   *Common                                  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                                             // 公共信息
	User                     *User                                    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                                                                 // 用户信息
	ScreenChatType           string                                   `protobuf:"bytes,3,opt,name=screen_chat_type,json=screenChatType,proto3" json:"screen_chat_type,omitempty"`                                     // 屏幕聊天类型
	Content                  string                                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                                                           // 内容
	Priority                 string                                   `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`                                                                         // 优先级
	Effect                   *Effect                                  `protobuf:"bytes,6,opt,name=effect,proto3" json:"effect,omitempty"`                                                                             // 效果
	BackgroundImage          *Image                                   `protobuf:"bytes,7,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`                                    // 背景图像
	EffectV2                 *Effect                                  `protobuf:"bytes,8,opt,name=effect_v2,json=effectV2,proto3" json:"effect_v2,omitempty"`                                                         // 效果v2
	BackgroundImageV2        *Image                                   `protobuf:"bytes,9,opt,name=background_image_v2,json=backgroundImageV2,proto3" json:"background_image_v2,omitempty"`                            // 背景图像v2
	PublicAreaCommon         *PublicAreaCommon                        `protobuf:"bytes,10,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`                              // 公共区域信息
	OfficialCommentConfig    *ScreenChatMessage_OfficialCommentConfig `protobuf:"bytes,11,opt,name=official_comment_config,json=officialCommentConfig,proto3" json:"official_comment_config,omitempty"`               // 官方评论配置
	EventTime                string                                   `protobuf:"bytes,12,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`                                                     // 事件时间
	SendReview               bool                                     `protobuf:"varint,13,opt,name=send_review,json=sendReview,proto3" json:"send_review,omitempty"`                                                 // 是否发送审核
	ChatIdentityInfo         *ChatIdentity                            `protobuf:"bytes,14,opt,name=chat_identity_info,json=chatIdentityInfo,proto3" json:"chat_identity_info,omitempty"`                              // 聊天身份信息
	RtfContent               *Text                                    `protobuf:"bytes,30,opt,name=rtf_content,json=rtfContent,proto3" json:"rtf_content,omitempty"`                                                  // 富文本内容
	PublicAreaDoesNotDisplay bool                                     `protobuf:"varint,31,opt,name=public_area_does_not_display,json=publicAreaDoesNotDisplay,proto3" json:"public_area_does_not_display,omitempty"` // 公共区域是否不显示
	RtfContentV2             *Text                                    `protobuf:"bytes,32,opt,name=rtf_content_v2,json=rtfContentV2,proto3" json:"rtf_content_v2,omitempty"`                                          // 富文本内容v2
}

func (x *ScreenChatMessage) Reset() {
	*x = ScreenChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenChatMessage) ProtoMessage() {}

func (x *ScreenChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenChatMessage.ProtoReflect.Descriptor instead.
func (*ScreenChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{261}
}

func (x *ScreenChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ScreenChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ScreenChatMessage) GetScreenChatType() string {
	if x != nil {
		return x.ScreenChatType
	}
	return ""
}

func (x *ScreenChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ScreenChatMessage) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ScreenChatMessage) GetEffect() *Effect {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *ScreenChatMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *ScreenChatMessage) GetEffectV2() *Effect {
	if x != nil {
		return x.EffectV2
	}
	return nil
}

func (x *ScreenChatMessage) GetBackgroundImageV2() *Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *ScreenChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *ScreenChatMessage) GetOfficialCommentConfig() *ScreenChatMessage_OfficialCommentConfig {
	if x != nil {
		return x.OfficialCommentConfig
	}
	return nil
}

func (x *ScreenChatMessage) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *ScreenChatMessage) GetSendReview() bool {
	if x != nil {
		return x.SendReview
	}
	return false
}

func (x *ScreenChatMessage) GetChatIdentityInfo() *ChatIdentity {
	if x != nil {
		return x.ChatIdentityInfo
	}
	return nil
}

func (x *ScreenChatMessage) GetRtfContent() *Text {
	if x != nil {
		return x.RtfContent
	}
	return nil
}

func (x *ScreenChatMessage) GetPublicAreaDoesNotDisplay() bool {
	if x != nil {
		return x.PublicAreaDoesNotDisplay
	}
	return false
}

func (x *ScreenChatMessage) GetRtfContentV2() *Text {
	if x != nil {
		return x.RtfContentV2
	}
	return nil
}

type Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon            *FlexImageStruct `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                              // 图标结构
	AvatarIcon      *Image           `protobuf:"bytes,2,opt,name=avatar_icon,json=avatarIcon,proto3" json:"avatar_icon,omitempty"`                // 头像图标
	BackgroundColor string           `protobuf:"bytes,3,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"` // 背景颜色
}

func (x *Effect) Reset() {
	*x = Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{262}
}

func (x *Effect) GetIcon() *FlexImageStruct {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Effect) GetAvatarIcon() *Image {
	if x != nil {
		return x.AvatarIcon
	}
	return nil
}

func (x *Effect) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

// FlexImageStruct消息类型
type FlexImageStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlList         []string `protobuf:"bytes,1,rep,name=url_list,json=urlList,proto3" json:"url_list,omitempty"`                           // 图像URL列表
	Uri             string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`                                                  // 图像统一资源标识符
	FlexSetting     string   `protobuf:"bytes,3,opt,name=flex_setting,json=flexSetting,proto3" json:"flex_setting,omitempty"`               // 弹性设置（假设为int64字符串表示）
	TextSetting     string   `protobuf:"bytes,4,opt,name=text_setting,json=textSetting,proto3" json:"text_setting,omitempty"`               // 文本设置（假设为int64字符串表示）
	TopBorderHeight string   `protobuf:"bytes,5,opt,name=top_border_height,json=topBorderHeight,proto3" json:"top_border_height,omitempty"` // 顶部边框高度（假设为int64字符串表示）
}

func (x *FlexImageStruct) Reset() {
	*x = FlexImageStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexImageStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexImageStruct) ProtoMessage() {}

func (x *FlexImageStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexImageStruct.ProtoReflect.Descriptor instead.
func (*FlexImageStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{263}
}

func (x *FlexImageStruct) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *FlexImageStruct) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *FlexImageStruct) GetFlexSetting() string {
	if x != nil {
		return x.FlexSetting
	}
	return ""
}

func (x *FlexImageStruct) GetTextSetting() string {
	if x != nil {
		return x.TextSetting
	}
	return ""
}

func (x *FlexImageStruct) GetTopBorderHeight() string {
	if x != nil {
		return x.TopBorderHeight
	}
	return ""
}

type ChatIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowIdentity  int32  `protobuf:"varint,1,opt,name=show_identity,json=showIdentity,proto3" json:"show_identity,omitempty"`   // 显示身份标识（假设为int32类型）
	IdentityLabel *Image `protobuf:"bytes,2,opt,name=identity_label,json=identityLabel,proto3" json:"identity_label,omitempty"` // 身份标签图像
}

func (x *ChatIdentity) Reset() {
	*x = ChatIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatIdentity) ProtoMessage() {}

func (x *ChatIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatIdentity.ProtoReflect.Descriptor instead.
func (*ChatIdentity) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{264}
}

func (x *ChatIdentity) GetShowIdentity() int32 {
	if x != nil {
		return x.ShowIdentity
	}
	return 0
}

func (x *ChatIdentity) GetIdentityLabel() *Image {
	if x != nil {
		return x.IdentityLabel
	}
	return nil
}

type NotifyEffectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common           *Common                            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"` // 假设Common也在相应的.proto文件中定义
	Icons            []*Image                           `protobuf:"bytes,2,rep,name=icons,proto3" json:"icons,omitempty"`
	Text             *CombinedText                      `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"` // 假设CombinedText也在相应的.proto文件中定义
	Background       *NotifyEffectMessage_Background    `protobuf:"bytes,4,opt,name=background,proto3" json:"background,omitempty"`
	DynamicConfig    *NotifyEffectMessage_DynamicConfig `protobuf:"bytes,5,opt,name=dynamic_config,json=dynamicConfig,proto3" json:"dynamic_config,omitempty"`
	TextV2           *CombinedText                      `protobuf:"bytes,6,opt,name=text_v2,json=textV2,proto3" json:"text_v2,omitempty"` // 假设CombinedText也在相应的.proto文件中定义
	SupportLandscape bool                               `protobuf:"varint,7,opt,name=support_landscape,json=supportLandscape,proto3" json:"support_landscape,omitempty"`
	SceneConfig      *NotifyEffectMessage_SceneConfig   `protobuf:"bytes,10,opt,name=scene_config,json=sceneConfig,proto3" json:"scene_config,omitempty"`
	BuriedPoint      map[string]string                  `protobuf:"bytes,20,rep,name=buried_point,json=buriedPoint,proto3" json:"buried_point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 假设埋点数据为string到string的映射
}

func (x *NotifyEffectMessage) Reset() {
	*x = NotifyEffectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEffectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEffectMessage) ProtoMessage() {}

func (x *NotifyEffectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEffectMessage.ProtoReflect.Descriptor instead.
func (*NotifyEffectMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{265}
}

func (x *NotifyEffectMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *NotifyEffectMessage) GetIcons() []*Image {
	if x != nil {
		return x.Icons
	}
	return nil
}

func (x *NotifyEffectMessage) GetText() *CombinedText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *NotifyEffectMessage) GetBackground() *NotifyEffectMessage_Background {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *NotifyEffectMessage) GetDynamicConfig() *NotifyEffectMessage_DynamicConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *NotifyEffectMessage) GetTextV2() *CombinedText {
	if x != nil {
		return x.TextV2
	}
	return nil
}

func (x *NotifyEffectMessage) GetSupportLandscape() bool {
	if x != nil {
		return x.SupportLandscape
	}
	return false
}

func (x *NotifyEffectMessage) GetSceneConfig() *NotifyEffectMessage_SceneConfig {
	if x != nil {
		return x.SceneConfig
	}
	return nil
}

func (x *NotifyEffectMessage) GetBuriedPoint() map[string]string {
	if x != nil {
		return x.BuriedPoint
	}
	return nil
}

type CombinedText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayItems []*DisplayItem `protobuf:"bytes,1,rep,name=display_items,json=displayItems,proto3" json:"display_items,omitempty"` // 显示项列表
	SchemaInfo   *SchemaInfo    `protobuf:"bytes,10,opt,name=schema_info,json=schemaInfo,proto3" json:"schema_info,omitempty"`      // 模式信息
	ComboInfo    *ComboInfo     `protobuf:"bytes,11,opt,name=combo_info,json=comboInfo,proto3" json:"combo_info,omitempty"`         // 组合信息
}

func (x *CombinedText) Reset() {
	*x = CombinedText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedText) ProtoMessage() {}

func (x *CombinedText) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedText.ProtoReflect.Descriptor instead.
func (*CombinedText) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{266}
}

func (x *CombinedText) GetDisplayItems() []*DisplayItem {
	if x != nil {
		return x.DisplayItems
	}
	return nil
}

func (x *CombinedText) GetSchemaInfo() *SchemaInfo {
	if x != nil {
		return x.SchemaInfo
	}
	return nil
}

func (x *CombinedText) GetComboInfo() *ComboInfo {
	if x != nil {
		return x.ComboInfo
	}
	return nil
}

type ComboInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboSeq   int64 `protobuf:"varint,1,opt,name=combo_seq,json=comboSeq,proto3" json:"combo_seq,omitempty"`       // 组合序列
	ComboOrder int64 `protobuf:"varint,2,opt,name=combo_order,json=comboOrder,proto3" json:"combo_order,omitempty"` // 组合顺序
}

func (x *ComboInfo) Reset() {
	*x = ComboInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboInfo) ProtoMessage() {}

func (x *ComboInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboInfo.ProtoReflect.Descriptor instead.
func (*ComboInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{267}
}

func (x *ComboInfo) GetComboSeq() int64 {
	if x != nil {
		return x.ComboSeq
	}
	return 0
}

func (x *ComboInfo) GetComboOrder() int64 {
	if x != nil {
		return x.ComboOrder
	}
	return 0
}

type SchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaUrl string `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"` // 模式URL
}

func (x *SchemaInfo) Reset() {
	*x = SchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaInfo) ProtoMessage() {}

func (x *SchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaInfo.ProtoReflect.Descriptor instead.
func (*SchemaInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{268}
}

func (x *SchemaInfo) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

type DisplayItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayItemType int32              `protobuf:"varint,1,opt,name=display_item_type,json=displayItemType,proto3" json:"display_item_type,omitempty"` // 显示项类型
	ComboFresh      bool               `protobuf:"varint,20,opt,name=combo_fresh,json=comboFresh,proto3" json:"combo_fresh,omitempty"`                 // 组合新鲜度标记
	SchemaInfo      *SchemaInfo        `protobuf:"bytes,21,opt,name=schema_info,json=schemaInfo,proto3" json:"schema_info,omitempty"`                  // 模式信息
	ImagesItem      *ImagesItem        `protobuf:"bytes,50,opt,name=images_item,json=imagesItem,proto3" json:"images_item,omitempty"`                  // 图像项
	TextItem        *TextItem          `protobuf:"bytes,51,opt,name=text_item,json=textItem,proto3" json:"text_item,omitempty"`                        // 文本项
	Format          *DisplayItemFormat `protobuf:"bytes,100,opt,name=format,proto3" json:"format,omitempty"`                                           // 显示项格式
}

func (x *DisplayItem) Reset() {
	*x = DisplayItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayItem) ProtoMessage() {}

func (x *DisplayItem) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayItem.ProtoReflect.Descriptor instead.
func (*DisplayItem) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{269}
}

func (x *DisplayItem) GetDisplayItemType() int32 {
	if x != nil {
		return x.DisplayItemType
	}
	return 0
}

func (x *DisplayItem) GetComboFresh() bool {
	if x != nil {
		return x.ComboFresh
	}
	return false
}

func (x *DisplayItem) GetSchemaInfo() *SchemaInfo {
	if x != nil {
		return x.SchemaInfo
	}
	return nil
}

func (x *DisplayItem) GetImagesItem() *ImagesItem {
	if x != nil {
		return x.ImagesItem
	}
	return nil
}

func (x *DisplayItem) GetTextItem() *TextItem {
	if x != nil {
		return x.TextItem
	}
	return nil
}

func (x *DisplayItem) GetFormat() *DisplayItemFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type ImagesItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 假设Image是images字段中元素的类型
	Images       []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	DisplayStyle int32    `protobuf:"varint,20,opt,name=display_style,json=displayStyle,proto3" json:"display_style,omitempty"`
}

func (x *ImagesItem) Reset() {
	*x = ImagesItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesItem) ProtoMessage() {}

func (x *ImagesItem) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesItem.ProtoReflect.Descriptor instead.
func (*ImagesItem) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{270}
}

func (x *ImagesItem) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ImagesItem) GetDisplayStyle() int32 {
	if x != nil {
		return x.DisplayStyle
	}
	return 0
}

type TextItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文本字段，使用repeated表示可以有多个文本项
	Text []*Text `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
}

func (x *TextItem) Reset() {
	*x = TextItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextItem) ProtoMessage() {}

func (x *TextItem) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextItem.ProtoReflect.Descriptor instead.
func (*TextItem) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{271}
}

func (x *TextItem) GetText() []*Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type DisplayItemFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLeftSpace bool   `protobuf:"varint,1,opt,name=enable_left_space,json=enableLeftSpace,proto3" json:"enable_left_space,omitempty"` // 布尔类型字段
	LeftSpace       string `protobuf:"bytes,2,opt,name=left_space,json=leftSpace,proto3" json:"left_space,omitempty"`                      // 字符串类型字段，假设int64String被转换为string
}

func (x *DisplayItemFormat) Reset() {
	*x = DisplayItemFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayItemFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayItemFormat) ProtoMessage() {}

func (x *DisplayItemFormat) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayItemFormat.ProtoReflect.Descriptor instead.
func (*DisplayItemFormat) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{272}
}

func (x *DisplayItemFormat) GetEnableLeftSpace() bool {
	if x != nil {
		return x.EnableLeftSpace
	}
	return false
}

func (x *DisplayItemFormat) GetLeftSpace() string {
	if x != nil {
		return x.LeftSpace
	}
	return ""
}

type TempStateAreaReachMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common   *Common                             `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"` // 假设Common是已经定义好的消息类型
	ElemType int64                               `protobuf:"varint,2,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`
	ElemId   int64                               `protobuf:"varint,3,opt,name=elem_id,json=elemId,proto3" json:"elem_id,omitempty"`
	ItemId   int64                               `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Status   int64                               `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Resource *TempStateAreaReachMessage_Resource `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"` // Resource是嵌套类型
}

func (x *TempStateAreaReachMessage) Reset() {
	*x = TempStateAreaReachMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempStateAreaReachMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempStateAreaReachMessage) ProtoMessage() {}

func (x *TempStateAreaReachMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempStateAreaReachMessage.ProtoReflect.Descriptor instead.
func (*TempStateAreaReachMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{273}
}

func (x *TempStateAreaReachMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TempStateAreaReachMessage) GetElemType() int64 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

func (x *TempStateAreaReachMessage) GetElemId() int64 {
	if x != nil {
		return x.ElemId
	}
	return 0
}

func (x *TempStateAreaReachMessage) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *TempStateAreaReachMessage) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TempStateAreaReachMessage) GetResource() *TempStateAreaReachMessage_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type GrowthTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // 64位整数
	IdStr            string             `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`                                      // 字符串
	LiveId           int64              `protobuf:"varint,3,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`                                  // 64位整数
	AppId            int64              `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                     // 64位整数
	ClassId          int64              `protobuf:"varint,5,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`                               // 64位整数
	GroupId          int64              `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                               // 64位整数
	ItemType         int32              `protobuf:"varint,7,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`                            // 32位整数
	ItemId           string             `protobuf:"bytes,8,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                                   // 字符串
	TaskName         string             `protobuf:"bytes,9,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`                             // 字符串
	TaskDesc         string             `protobuf:"bytes,10,opt,name=task_desc,json=taskDesc,proto3" json:"task_desc,omitempty"`                            // 字符串
	StartTime        int64              `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                        // 64位整数
	EndTime          int64              `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                              // 64位整数
	DisplayStartTime int64              `protobuf:"varint,13,opt,name=display_start_time,json=displayStartTime,proto3" json:"display_start_time,omitempty"` // 64位整数
	DisplayEndTime   int64              `protobuf:"varint,14,opt,name=display_end_time,json=displayEndTime,proto3" json:"display_end_time,omitempty"`       // 64位整数
	Status           int32              `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`                                               // 32位整数
	CompletedStage   int64              `protobuf:"varint,16,opt,name=completed_stage,json=completedStage,proto3" json:"completed_stage,omitempty"`         // 64位整数
	FinishTime       int64              `protobuf:"varint,17,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`                     // 64位整数
	StageList        []*GrowthTaskStage `protobuf:"bytes,18,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`                         // 可重复的GrowthTaskStage类型字段
	Extra            string             `protobuf:"bytes,19,opt,name=extra,proto3" json:"extra,omitempty"`                                                  // 字符串
	Config           string             `protobuf:"bytes,20,opt,name=config,proto3" json:"config,omitempty"`                                                // 字符串
	CreateTime       int64              `protobuf:"varint,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     // 64位整数
}

func (x *GrowthTask) Reset() {
	*x = GrowthTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTask) ProtoMessage() {}

func (x *GrowthTask) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTask.ProtoReflect.Descriptor instead.
func (*GrowthTask) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{274}
}

func (x *GrowthTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GrowthTask) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *GrowthTask) GetLiveId() int64 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *GrowthTask) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GrowthTask) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *GrowthTask) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GrowthTask) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *GrowthTask) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *GrowthTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *GrowthTask) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *GrowthTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GrowthTask) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GrowthTask) GetDisplayStartTime() int64 {
	if x != nil {
		return x.DisplayStartTime
	}
	return 0
}

func (x *GrowthTask) GetDisplayEndTime() int64 {
	if x != nil {
		return x.DisplayEndTime
	}
	return 0
}

func (x *GrowthTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GrowthTask) GetCompletedStage() int64 {
	if x != nil {
		return x.CompletedStage
	}
	return 0
}

func (x *GrowthTask) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *GrowthTask) GetStageList() []*GrowthTaskStage {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *GrowthTask) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GrowthTask) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *GrowthTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GrowthTaskStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionList []*GrowthTaskCondition `protobuf:"bytes,1,rep,name=condition_list,json=conditionList,proto3" json:"condition_list,omitempty"`  // 条件列表，可重复的GrowthTaskCondition类型字段
	RewardList    []*GrowthTaskReward    `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`           // 奖励列表，可重复的GrowthTaskReward类型字段
	CompletedTime int64                  `protobuf:"varint,3,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"` // 完成时间，64位整数
}

func (x *GrowthTaskStage) Reset() {
	*x = GrowthTaskStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskStage) ProtoMessage() {}

func (x *GrowthTaskStage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskStage.ProtoReflect.Descriptor instead.
func (*GrowthTaskStage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{275}
}

func (x *GrowthTaskStage) GetConditionList() []*GrowthTaskCondition {
	if x != nil {
		return x.ConditionList
	}
	return nil
}

func (x *GrowthTaskStage) GetRewardList() []*GrowthTaskReward {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *GrowthTaskStage) GetCompletedTime() int64 {
	if x != nil {
		return x.CompletedTime
	}
	return 0
}

type GrowthTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Def            *GrowthTaskRewardDef `protobuf:"bytes,1,opt,name=def,proto3" json:"def,omitempty"`                                              // GrowthTaskRewardDef类型字段
	Status         int32                `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                       // 奖励状态，32位整数
	Extra          string               `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`                                          // 额外信息，字符串类型
	RemainingCount int64                `protobuf:"varint,4,opt,name=remaining_count,json=remainingCount,proto3" json:"remaining_count,omitempty"` // 剩余数量，64位整数
}

func (x *GrowthTaskReward) Reset() {
	*x = GrowthTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskReward) ProtoMessage() {}

func (x *GrowthTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskReward.ProtoReflect.Descriptor instead.
func (*GrowthTaskReward) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{276}
}

func (x *GrowthTaskReward) GetDef() *GrowthTaskRewardDef {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *GrowthTaskReward) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GrowthTaskReward) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GrowthTaskReward) GetRemainingCount() int64 {
	if x != nil {
		return x.RemainingCount
	}
	return 0
}

type GrowthTaskRewardDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 唯一标识符，64位整数
	RewardType   int32  `protobuf:"varint,2,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`        // 奖励类型，32位整数
	SettleType   int32  `protobuf:"varint,3,opt,name=settle_type,json=settleType,proto3" json:"settle_type,omitempty"`        // 结算类型，32位整数
	Target       string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`                                   // 目标，字符串类型
	Desc         string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                                       // 描述，字符串类型
	Operator     string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`                               // 操作符，字符串类型
	SendParamStr string `protobuf:"bytes,7,opt,name=send_param_str,json=sendParamStr,proto3" json:"send_param_str,omitempty"` // 发送参数字符串，字符串类型
	Extra        string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`                                     // 额外信息，字符串类型
	Name         string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                       // 名称，字符串类型
}

func (x *GrowthTaskRewardDef) Reset() {
	*x = GrowthTaskRewardDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskRewardDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskRewardDef) ProtoMessage() {}

func (x *GrowthTaskRewardDef) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskRewardDef.ProtoReflect.Descriptor instead.
func (*GrowthTaskRewardDef) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{277}
}

func (x *GrowthTaskRewardDef) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GrowthTaskRewardDef) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *GrowthTaskRewardDef) GetSettleType() int32 {
	if x != nil {
		return x.SettleType
	}
	return 0
}

func (x *GrowthTaskRewardDef) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GrowthTaskRewardDef) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GrowthTaskRewardDef) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GrowthTaskRewardDef) GetSendParamStr() string {
	if x != nil {
		return x.SendParamStr
	}
	return ""
}

func (x *GrowthTaskRewardDef) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GrowthTaskRewardDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GrowthTaskCondDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`            // 唯一标识符，64位整数
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`           // 条件的键或代码，字符串类型
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`         // 条件描述，字符串类型
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"` // 操作符，可能定义了如何比较条件，字符串类型
	Extra    string `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`       // 额外信息，可能包含其他元数据，字符串类型
}

func (x *GrowthTaskCondDef) Reset() {
	*x = GrowthTaskCondDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskCondDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskCondDef) ProtoMessage() {}

func (x *GrowthTaskCondDef) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskCondDef.ProtoReflect.Descriptor instead.
func (*GrowthTaskCondDef) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{278}
}

func (x *GrowthTaskCondDef) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GrowthTaskCondDef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GrowthTaskCondDef) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GrowthTaskCondDef) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GrowthTaskCondDef) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GrowthTaskCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Def                 *GrowthTaskCondDef `protobuf:"bytes,1,opt,name=def,proto3" json:"def,omitempty"`                                                              // GrowthTaskCondDef类型字段
	Desc                string             `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`                                                            // 字符串类型字段
	CurrentValue        string             `protobuf:"bytes,3,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`                        // 当前值，以字符串形式存储
	TargetValue         string             `protobuf:"bytes,4,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`                           // 目标值，以字符串形式存储
	DisplayCurrentValue string             `protobuf:"bytes,5,opt,name=display_current_value,json=displayCurrentValue,proto3" json:"display_current_value,omitempty"` // 显示的当前值，以字符串形式存储
	DisplayTargetValue  string             `protobuf:"bytes,6,opt,name=display_target_value,json=displayTargetValue,proto3" json:"display_target_value,omitempty"`    // 显示的目标值，以字符串形式存储
	DisplayDelta        string             `protobuf:"bytes,7,opt,name=display_delta,json=displayDelta,proto3" json:"display_delta,omitempty"`                        // 显示的变化量，以字符串形式存储
}

func (x *GrowthTaskCondition) Reset() {
	*x = GrowthTaskCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskCondition) ProtoMessage() {}

func (x *GrowthTaskCondition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskCondition.ProtoReflect.Descriptor instead.
func (*GrowthTaskCondition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{279}
}

func (x *GrowthTaskCondition) GetDef() *GrowthTaskCondDef {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *GrowthTaskCondition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GrowthTaskCondition) GetCurrentValue() string {
	if x != nil {
		return x.CurrentValue
	}
	return ""
}

func (x *GrowthTaskCondition) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *GrowthTaskCondition) GetDisplayCurrentValue() string {
	if x != nil {
		return x.DisplayCurrentValue
	}
	return ""
}

func (x *GrowthTaskCondition) GetDisplayTargetValue() string {
	if x != nil {
		return x.DisplayTargetValue
	}
	return ""
}

func (x *GrowthTaskCondition) GetDisplayDelta() string {
	if x != nil {
		return x.DisplayDelta
	}
	return ""
}

type GrowthTaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common              *Common                                `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Task                *GrowthTask                            `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Action              int32                                  `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
	CurrentContribution *GrowthTaskMessage_CurrentContribution `protobuf:"bytes,4,opt,name=current_contribution,json=currentContribution,proto3" json:"current_contribution,omitempty"`
	Contributors        []*GrowthTaskContributorRank           `protobuf:"bytes,5,rep,name=contributors,proto3" json:"contributors,omitempty"`
	QueueTaskLen        int64                                  `protobuf:"varint,6,opt,name=queue_task_len,json=queueTaskLen,proto3" json:"queue_task_len,omitempty"`
}

func (x *GrowthTaskMessage) Reset() {
	*x = GrowthTaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskMessage) ProtoMessage() {}

func (x *GrowthTaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskMessage.ProtoReflect.Descriptor instead.
func (*GrowthTaskMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{280}
}

func (x *GrowthTaskMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GrowthTaskMessage) GetTask() *GrowthTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *GrowthTaskMessage) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *GrowthTaskMessage) GetCurrentContribution() *GrowthTaskMessage_CurrentContribution {
	if x != nil {
		return x.CurrentContribution
	}
	return nil
}

func (x *GrowthTaskMessage) GetContributors() []*GrowthTaskContributorRank {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *GrowthTaskMessage) GetQueueTaskLen() int64 {
	if x != nil {
		return x.QueueTaskLen
	}
	return 0
}

type GrowthTaskContributorRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`    // 用户信息，关联User消息类型
	Score int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"` // 分数，64位整数
	Rank  int64 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`   // 排名，64位整数
}

func (x *GrowthTaskContributorRank) Reset() {
	*x = GrowthTaskContributorRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskContributorRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskContributorRank) ProtoMessage() {}

func (x *GrowthTaskContributorRank) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskContributorRank.ProtoReflect.Descriptor instead.
func (*GrowthTaskContributorRank) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{281}
}

func (x *GrowthTaskContributorRank) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GrowthTaskContributorRank) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GrowthTaskContributorRank) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type GameCPBaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common   *Common            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                     // 公共信息，关联Common消息类型
	ShowInfo *GameCPShowMessage `protobuf:"bytes,2,opt,name=show_info,json=showInfo,proto3" json:"show_info,omitempty"` // 展示信息，关联GameCPShowMessage消息类型
}

func (x *GameCPBaseMessage) Reset() {
	*x = GameCPBaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCPBaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCPBaseMessage) ProtoMessage() {}

func (x *GameCPBaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCPBaseMessage.ProtoReflect.Descriptor instead.
func (*GameCPBaseMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{282}
}

func (x *GameCPBaseMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GameCPBaseMessage) GetShowInfo() *GameCPShowMessage {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

type GameCPShowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    int32                     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                                                        // 消息类型
	IntroduceDownloadInfo   *Text                     `protobuf:"bytes,2,opt,name=introduce_download_info,json=introduceDownloadInfo,proto3" json:"introduce_download_info,omitempty"`        // 游戏下载信息
	GameImage               string                    `protobuf:"bytes,3,opt,name=game_image,json=gameImage,proto3" json:"game_image,omitempty"`                                              // 游戏图片
	GameName                string                    `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                                 // 游戏名称
	GameDownloadUrl         string                    `protobuf:"bytes,5,opt,name=game_download_url,json=gameDownloadUrl,proto3" json:"game_download_url,omitempty"`                          // 游戏下载链接
	GameTraceInfo           string                    `protobuf:"bytes,6,opt,name=game_trace_info,json=gameTraceInfo,proto3" json:"game_trace_info,omitempty"`                                // 游戏追踪信息
	GameTagNames            []string                  `protobuf:"bytes,7,rep,name=game_tag_names,json=gameTagNames,proto3" json:"game_tag_names,omitempty"`                                   // 游戏标签名称列表
	GameBackgroundColor     string                    `protobuf:"bytes,8,opt,name=game_background_color,json=gameBackgroundColor,proto3" json:"game_background_color,omitempty"`              // 游戏背景颜色
	IntroduceTimeLimit      int32                     `protobuf:"varint,9,opt,name=introduce_time_limit,json=introduceTimeLimit,proto3" json:"introduce_time_limit,omitempty"`                // 介绍时间限制
	IntroduceStartTime      int64                     `protobuf:"varint,10,opt,name=introduce_start_time,json=introduceStartTime,proto3" json:"introduce_start_time,omitempty"`               // 介绍开始时间
	IntroduceStopType       int32                     `protobuf:"varint,11,opt,name=introduce_stop_type,json=introduceStopType,proto3" json:"introduce_stop_type,omitempty"`                  // 介绍停止类型
	IntroduceStopMessage    *Text                     `protobuf:"bytes,12,opt,name=introduce_stop_message,json=introduceStopMessage,proto3" json:"introduce_stop_message,omitempty"`          // 介绍停止信息
	GameId                  string                    `protobuf:"bytes,13,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                      // 游戏ID
	AuditResult             bool                      `protobuf:"varint,14,opt,name=audit_result,json=auditResult,proto3" json:"audit_result,omitempty"`                                      // 审核结果
	IosAppId                string                    `protobuf:"bytes,15,opt,name=ios_app_id,json=iosAppId,proto3" json:"ios_app_id,omitempty"`                                              // iOS应用ID
	CompanyName             string                    `protobuf:"bytes,16,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                                       // 公司名称
	DownloadExtra           string                    `protobuf:"bytes,17,opt,name=download_extra,json=downloadExtra,proto3" json:"download_extra,omitempty"`                                 // 下载额外信息
	AndroidPrivacyUrl       string                    `protobuf:"bytes,18,opt,name=android_privacy_url,json=androidPrivacyUrl,proto3" json:"android_privacy_url,omitempty"`                   // Android隐私政策链接
	AndroidAuthorizationUrl string                    `protobuf:"bytes,19,opt,name=android_authorization_url,json=androidAuthorizationUrl,proto3" json:"android_authorization_url,omitempty"` // Android授权链接
	IosPrivacyUrl           string                    `protobuf:"bytes,20,opt,name=ios_privacy_url,json=iosPrivacyUrl,proto3" json:"ios_privacy_url,omitempty"`                               // iOS隐私政策链接
	IosAuthorizationUrl     string                    `protobuf:"bytes,21,opt,name=ios_authorization_url,json=iosAuthorizationUrl,proto3" json:"ios_authorization_url,omitempty"`             // iOS授权链接
	AndroidVersion          string                    `protobuf:"bytes,22,opt,name=android_version,json=androidVersion,proto3" json:"android_version,omitempty"`                              // Android版本
	IosVersion              string                    `protobuf:"bytes,23,opt,name=ios_version,json=iosVersion,proto3" json:"ios_version,omitempty"`                                          // iOS版本
	ActiveLink              string                    `protobuf:"bytes,24,opt,name=active_link,json=activeLink,proto3" json:"active_link,omitempty"`                                          // 活跃链接
	DownloadCount           int64                     `protobuf:"varint,25,opt,name=download_count,json=downloadCount,proto3" json:"download_count,omitempty"`                                // 下载次数
	IsShowAnimate           bool                      `protobuf:"varint,26,opt,name=is_show_animate,json=isShowAnimate,proto3" json:"is_show_animate,omitempty"`                              // 是否显示动画
	AnimateStartTime        int64                     `protobuf:"varint,27,opt,name=animate_start_time,json=animateStartTime,proto3" json:"animate_start_time,omitempty"`                     // 动画开始时间
	AnimateDuration         int64                     `protobuf:"varint,28,opt,name=animate_duration,json=animateDuration,proto3" json:"animate_duration,omitempty"`                          // 动画持续时间
	AntiHijackContent       string                    `protobuf:"bytes,29,opt,name=anti_hijack_content,json=antiHijackContent,proto3" json:"anti_hijack_content,omitempty"`                   // 反劫持内容
	AntiHijackImage         string                    `protobuf:"bytes,30,opt,name=anti_hijack_image,json=antiHijackImage,proto3" json:"anti_hijack_image,omitempty"`                         // 反劫持图片
	IosSalePoint            string                    `protobuf:"bytes,31,opt,name=ios_sale_point,json=iosSalePoint,proto3" json:"ios_sale_point,omitempty"`                                  // iOS销售点
	IsForbidJumpIosApp      bool                      `protobuf:"varint,32,opt,name=is_forbid_jump_ios_app,json=isForbidJumpIosApp,proto3" json:"is_forbid_jump_ios_app,omitempty"`           // 是否禁止跳转到iOS应用
	HasPlatformGift         bool                      `protobuf:"varint,33,opt,name=has_platform_gift,json=hasPlatformGift,proto3" json:"has_platform_gift,omitempty"`                        // 是否有平台礼物
	OpenGameUrl             string                    `protobuf:"bytes,44,opt,name=open_game_url,json=openGameUrl,proto3" json:"open_game_url,omitempty"`                                     // 打开游戏链接
	PropIcon                string                    `protobuf:"bytes,45,opt,name=prop_icon,json=propIcon,proto3" json:"prop_icon,omitempty"`                                                // 道具图标
	PropName                string                    `protobuf:"bytes,46,opt,name=prop_name,json=propName,proto3" json:"prop_name,omitempty"`                                                // 道具名称
	PropId                  string                    `protobuf:"bytes,47,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`                                                      // 道具ID
	MarketPrice             int64                     `protobuf:"varint,48,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`                                      // 市场价格
	SellingPrice            int64                     `protobuf:"varint,49,opt,name=selling_price,json=sellingPrice,proto3" json:"selling_price,omitempty"`                                   // 销售价格
	PropSkuId               int64                     `protobuf:"varint,50,opt,name=prop_sku_id,json=propSkuId,proto3" json:"prop_sku_id,omitempty"`                                          // 道具SKU ID
	ReserveItem             *ReserveItem              `protobuf:"bytes,51,opt,name=reserve_item,json=reserveItem,proto3" json:"reserve_item,omitempty"`                                       // 预约项目
	PropType                int64                     `protobuf:"varint,52,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`                                               // 道具类型
	GameAccessType          int64                     `protobuf:"varint,53,opt,name=game_access_type,json=gameAccessType,proto3" json:"game_access_type,omitempty"`                           // 游戏访问类型
	IsPropExpGame           bool                      `protobuf:"varint,54,opt,name=is_prop_exp_game,json=isPropExpGame,proto3" json:"is_prop_exp_game,omitempty"`                            // 是否是道具体验游戏
	ComponentIds            []string                  `protobuf:"bytes,55,rep,name=component_ids,json=componentIds,proto3" json:"component_ids,omitempty"`                                    // 组件ID列表
	BizType                 int32                     `protobuf:"varint,56,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`                                                  // 业务类型
	InstallUserCount        int64                     `protobuf:"varint,57,opt,name=install_user_count,json=installUserCount,proto3" json:"install_user_count,omitempty"`                     // 安装用户数量
	AndroidSalePoint        string                    `protobuf:"bytes,58,opt,name=android_sale_point,json=androidSalePoint,proto3" json:"android_sale_point,omitempty"`                      // Android销售点
	MiniGameMeta            *MiniGameMeta             `protobuf:"bytes,59,opt,name=mini_game_meta,json=miniGameMeta,proto3" json:"mini_game_meta,omitempty"`                                  // 小游戏元数据
	SupportPlatforms        int64                     `protobuf:"varint,60,opt,name=support_platforms,json=supportPlatforms,proto3" json:"support_platforms,omitempty"`                       // 支持的平台
	MiniPlayMeta            *MiniPlayMeta             `protobuf:"bytes,61,opt,name=mini_play_meta,json=miniPlayMeta,proto3" json:"mini_play_meta,omitempty"`                                  // 小游戏播放元数据
	PlayIntroduce           string                    `protobuf:"bytes,62,opt,name=play_introduce,json=playIntroduce,proto3" json:"play_introduce,omitempty"`                                 // 播放介绍
	SmallIcon               string                    `protobuf:"bytes,63,opt,name=small_icon,json=smallIcon,proto3" json:"small_icon,omitempty"`                                             // 小图标
	GameIntroductionUrl     string                    `protobuf:"bytes,64,opt,name=game_introduction_url,json=gameIntroductionUrl,proto3" json:"game_introduction_url,omitempty"`             // 游戏介绍链接
	GameIcon                *GameImageBundler         `protobuf:"bytes,65,opt,name=game_icon,json=gameIcon,proto3" json:"game_icon,omitempty"`                                                // 游戏图标捆绑
	CloudGameMeta           *CloudGameMeta            `protobuf:"bytes,66,opt,name=cloud_game_meta,json=cloudGameMeta,proto3" json:"cloud_game_meta,omitempty"`                               // 云游戏元数据
	AtmosphereContent       *AtmosphereContent        `protobuf:"bytes,67,opt,name=atmosphere_content,json=atmosphereContent,proto3" json:"atmosphere_content,omitempty"`                     // 氛围内容
	FeaturedContent         *FeaturedContent          `protobuf:"bytes,68,opt,name=featured_content,json=featuredContent,proto3" json:"featured_content,omitempty"`                           // 特色内容
	PromoteInstanceId       string                    `protobuf:"bytes,70,opt,name=promote_instance_id,json=promoteInstanceId,proto3" json:"promote_instance_id,omitempty"`                   // 推广实例ID
	PropStockNum            int64                     `protobuf:"varint,71,opt,name=prop_stock_num,json=propStockNum,proto3" json:"prop_stock_num,omitempty"`                                 // 道具库存数量
	Tag                     *IntroduceCardTag         `protobuf:"bytes,72,opt,name=tag,proto3" json:"tag,omitempty"`                                                                          // 介绍卡片标签
	CardDisplayInfo         *IntroduceCardDisplayInfo `protobuf:"bytes,73,opt,name=card_display_info,json=cardDisplayInfo,proto3" json:"card_display_info,omitempty"`                         // 卡片显示信息
	IsInPreDownloadPeriod   bool                      `protobuf:"varint,74,opt,name=is_in_pre_download_period,json=isInPreDownloadPeriod,proto3" json:"is_in_pre_download_period,omitempty"`  // 是否在预下载期
}

func (x *GameCPShowMessage) Reset() {
	*x = GameCPShowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCPShowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCPShowMessage) ProtoMessage() {}

func (x *GameCPShowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCPShowMessage.ProtoReflect.Descriptor instead.
func (*GameCPShowMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{283}
}

func (x *GameCPShowMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GameCPShowMessage) GetIntroduceDownloadInfo() *Text {
	if x != nil {
		return x.IntroduceDownloadInfo
	}
	return nil
}

func (x *GameCPShowMessage) GetGameImage() string {
	if x != nil {
		return x.GameImage
	}
	return ""
}

func (x *GameCPShowMessage) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameCPShowMessage) GetGameDownloadUrl() string {
	if x != nil {
		return x.GameDownloadUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetGameTraceInfo() string {
	if x != nil {
		return x.GameTraceInfo
	}
	return ""
}

func (x *GameCPShowMessage) GetGameTagNames() []string {
	if x != nil {
		return x.GameTagNames
	}
	return nil
}

func (x *GameCPShowMessage) GetGameBackgroundColor() string {
	if x != nil {
		return x.GameBackgroundColor
	}
	return ""
}

func (x *GameCPShowMessage) GetIntroduceTimeLimit() int32 {
	if x != nil {
		return x.IntroduceTimeLimit
	}
	return 0
}

func (x *GameCPShowMessage) GetIntroduceStartTime() int64 {
	if x != nil {
		return x.IntroduceStartTime
	}
	return 0
}

func (x *GameCPShowMessage) GetIntroduceStopType() int32 {
	if x != nil {
		return x.IntroduceStopType
	}
	return 0
}

func (x *GameCPShowMessage) GetIntroduceStopMessage() *Text {
	if x != nil {
		return x.IntroduceStopMessage
	}
	return nil
}

func (x *GameCPShowMessage) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameCPShowMessage) GetAuditResult() bool {
	if x != nil {
		return x.AuditResult
	}
	return false
}

func (x *GameCPShowMessage) GetIosAppId() string {
	if x != nil {
		return x.IosAppId
	}
	return ""
}

func (x *GameCPShowMessage) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GameCPShowMessage) GetDownloadExtra() string {
	if x != nil {
		return x.DownloadExtra
	}
	return ""
}

func (x *GameCPShowMessage) GetAndroidPrivacyUrl() string {
	if x != nil {
		return x.AndroidPrivacyUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetAndroidAuthorizationUrl() string {
	if x != nil {
		return x.AndroidAuthorizationUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetIosPrivacyUrl() string {
	if x != nil {
		return x.IosPrivacyUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetIosAuthorizationUrl() string {
	if x != nil {
		return x.IosAuthorizationUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetAndroidVersion() string {
	if x != nil {
		return x.AndroidVersion
	}
	return ""
}

func (x *GameCPShowMessage) GetIosVersion() string {
	if x != nil {
		return x.IosVersion
	}
	return ""
}

func (x *GameCPShowMessage) GetActiveLink() string {
	if x != nil {
		return x.ActiveLink
	}
	return ""
}

func (x *GameCPShowMessage) GetDownloadCount() int64 {
	if x != nil {
		return x.DownloadCount
	}
	return 0
}

func (x *GameCPShowMessage) GetIsShowAnimate() bool {
	if x != nil {
		return x.IsShowAnimate
	}
	return false
}

func (x *GameCPShowMessage) GetAnimateStartTime() int64 {
	if x != nil {
		return x.AnimateStartTime
	}
	return 0
}

func (x *GameCPShowMessage) GetAnimateDuration() int64 {
	if x != nil {
		return x.AnimateDuration
	}
	return 0
}

func (x *GameCPShowMessage) GetAntiHijackContent() string {
	if x != nil {
		return x.AntiHijackContent
	}
	return ""
}

func (x *GameCPShowMessage) GetAntiHijackImage() string {
	if x != nil {
		return x.AntiHijackImage
	}
	return ""
}

func (x *GameCPShowMessage) GetIosSalePoint() string {
	if x != nil {
		return x.IosSalePoint
	}
	return ""
}

func (x *GameCPShowMessage) GetIsForbidJumpIosApp() bool {
	if x != nil {
		return x.IsForbidJumpIosApp
	}
	return false
}

func (x *GameCPShowMessage) GetHasPlatformGift() bool {
	if x != nil {
		return x.HasPlatformGift
	}
	return false
}

func (x *GameCPShowMessage) GetOpenGameUrl() string {
	if x != nil {
		return x.OpenGameUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetPropIcon() string {
	if x != nil {
		return x.PropIcon
	}
	return ""
}

func (x *GameCPShowMessage) GetPropName() string {
	if x != nil {
		return x.PropName
	}
	return ""
}

func (x *GameCPShowMessage) GetPropId() string {
	if x != nil {
		return x.PropId
	}
	return ""
}

func (x *GameCPShowMessage) GetMarketPrice() int64 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *GameCPShowMessage) GetSellingPrice() int64 {
	if x != nil {
		return x.SellingPrice
	}
	return 0
}

func (x *GameCPShowMessage) GetPropSkuId() int64 {
	if x != nil {
		return x.PropSkuId
	}
	return 0
}

func (x *GameCPShowMessage) GetReserveItem() *ReserveItem {
	if x != nil {
		return x.ReserveItem
	}
	return nil
}

func (x *GameCPShowMessage) GetPropType() int64 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *GameCPShowMessage) GetGameAccessType() int64 {
	if x != nil {
		return x.GameAccessType
	}
	return 0
}

func (x *GameCPShowMessage) GetIsPropExpGame() bool {
	if x != nil {
		return x.IsPropExpGame
	}
	return false
}

func (x *GameCPShowMessage) GetComponentIds() []string {
	if x != nil {
		return x.ComponentIds
	}
	return nil
}

func (x *GameCPShowMessage) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *GameCPShowMessage) GetInstallUserCount() int64 {
	if x != nil {
		return x.InstallUserCount
	}
	return 0
}

func (x *GameCPShowMessage) GetAndroidSalePoint() string {
	if x != nil {
		return x.AndroidSalePoint
	}
	return ""
}

func (x *GameCPShowMessage) GetMiniGameMeta() *MiniGameMeta {
	if x != nil {
		return x.MiniGameMeta
	}
	return nil
}

func (x *GameCPShowMessage) GetSupportPlatforms() int64 {
	if x != nil {
		return x.SupportPlatforms
	}
	return 0
}

func (x *GameCPShowMessage) GetMiniPlayMeta() *MiniPlayMeta {
	if x != nil {
		return x.MiniPlayMeta
	}
	return nil
}

func (x *GameCPShowMessage) GetPlayIntroduce() string {
	if x != nil {
		return x.PlayIntroduce
	}
	return ""
}

func (x *GameCPShowMessage) GetSmallIcon() string {
	if x != nil {
		return x.SmallIcon
	}
	return ""
}

func (x *GameCPShowMessage) GetGameIntroductionUrl() string {
	if x != nil {
		return x.GameIntroductionUrl
	}
	return ""
}

func (x *GameCPShowMessage) GetGameIcon() *GameImageBundler {
	if x != nil {
		return x.GameIcon
	}
	return nil
}

func (x *GameCPShowMessage) GetCloudGameMeta() *CloudGameMeta {
	if x != nil {
		return x.CloudGameMeta
	}
	return nil
}

func (x *GameCPShowMessage) GetAtmosphereContent() *AtmosphereContent {
	if x != nil {
		return x.AtmosphereContent
	}
	return nil
}

func (x *GameCPShowMessage) GetFeaturedContent() *FeaturedContent {
	if x != nil {
		return x.FeaturedContent
	}
	return nil
}

func (x *GameCPShowMessage) GetPromoteInstanceId() string {
	if x != nil {
		return x.PromoteInstanceId
	}
	return ""
}

func (x *GameCPShowMessage) GetPropStockNum() int64 {
	if x != nil {
		return x.PropStockNum
	}
	return 0
}

func (x *GameCPShowMessage) GetTag() *IntroduceCardTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GameCPShowMessage) GetCardDisplayInfo() *IntroduceCardDisplayInfo {
	if x != nil {
		return x.CardDisplayInfo
	}
	return nil
}

func (x *GameCPShowMessage) GetIsInPreDownloadPeriod() bool {
	if x != nil {
		return x.IsInPreDownloadPeriod
	}
	return false
}

type ReserveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReserveTodayNum string `protobuf:"bytes,1,opt,name=reserve_today_num,json=reserveTodayNum,proto3" json:"reserve_today_num,omitempty"` // 当天预订数量，字符串类型
	ReserveTotalNum string `protobuf:"bytes,2,opt,name=reserve_total_num,json=reserveTotalNum,proto3" json:"reserve_total_num,omitempty"` // 总预订数量，字符串类型
	ReserveStatus   int32  `protobuf:"varint,3,opt,name=reserve_status,json=reserveStatus,proto3" json:"reserve_status,omitempty"`        // 预订状态，32位整数
}

func (x *ReserveItem) Reset() {
	*x = ReserveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveItem) ProtoMessage() {}

func (x *ReserveItem) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveItem.ProtoReflect.Descriptor instead.
func (*ReserveItem) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{284}
}

func (x *ReserveItem) GetReserveTodayNum() string {
	if x != nil {
		return x.ReserveTodayNum
	}
	return ""
}

func (x *ReserveItem) GetReserveTotalNum() string {
	if x != nil {
		return x.ReserveTotalNum
	}
	return ""
}

func (x *ReserveItem) GetReserveStatus() int32 {
	if x != nil {
		return x.ReserveStatus
	}
	return 0
}

type MiniGameMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`   // 小游戏的schema，字符串类型
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // 小游戏的版本，字符串类型
}

func (x *MiniGameMeta) Reset() {
	*x = MiniGameMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameMeta) ProtoMessage() {}

func (x *MiniGameMeta) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameMeta.ProtoReflect.Descriptor instead.
func (*MiniGameMeta) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{285}
}

func (x *MiniGameMeta) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MiniGameMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type MiniPlayMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema           string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`                                                // 小游戏的schema，字符串类型
	GameName         string `protobuf:"bytes,2,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                            // 小游戏名称，字符串类型
	Icon             string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                                    // 小游戏图标，字符串类型
	GameId           string `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                  // 小游戏ID，字符串类型
	AppId            string `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                     // 应用ID，字符串类型
	SupportLiveScene int64  `protobuf:"varint,6,opt,name=support_live_scene,json=supportLiveScene,proto3" json:"support_live_scene,omitempty"` // 支持的直播场景，64位整数
	Version          string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                              // 小游戏版本，字符串类型
	GameType         int32  `protobuf:"varint,8,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                           // 小游戏类型，32位整数
	Developer        string `protobuf:"bytes,9,opt,name=developer,proto3" json:"developer,omitempty"`                                          // 开发者信息，字符串类型
	Extra            string `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                                                 // 额外信息，字符串类型
}

func (x *MiniPlayMeta) Reset() {
	*x = MiniPlayMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniPlayMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniPlayMeta) ProtoMessage() {}

func (x *MiniPlayMeta) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniPlayMeta.ProtoReflect.Descriptor instead.
func (*MiniPlayMeta) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{286}
}

func (x *MiniPlayMeta) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MiniPlayMeta) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *MiniPlayMeta) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MiniPlayMeta) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MiniPlayMeta) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MiniPlayMeta) GetSupportLiveScene() int64 {
	if x != nil {
		return x.SupportLiveScene
	}
	return 0
}

func (x *MiniPlayMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MiniPlayMeta) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *MiniPlayMeta) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *MiniPlayMeta) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GameImageBundler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginImage    *GameImage `protobuf:"bytes,1,opt,name=origin_image,json=originImage,proto3" json:"origin_image,omitempty"`            // 原始图片，GameImage类型
	ThumbImage     *GameImage `protobuf:"bytes,2,opt,name=thumb_image,json=thumbImage,proto3" json:"thumb_image,omitempty"`               // 缩略图，GameImage类型
	ThumbHeifImage *GameImage `protobuf:"bytes,3,opt,name=thumb_heif_image,json=thumbHeifImage,proto3" json:"thumb_heif_image,omitempty"` // HEIC格式的缩略图，GameImage类型
}

func (x *GameImageBundler) Reset() {
	*x = GameImageBundler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameImageBundler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameImageBundler) ProtoMessage() {}

func (x *GameImageBundler) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameImageBundler.ProtoReflect.Descriptor instead.
func (*GameImageBundler) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{287}
}

func (x *GameImageBundler) GetOriginImage() *GameImage {
	if x != nil {
		return x.OriginImage
	}
	return nil
}

func (x *GameImageBundler) GetThumbImage() *GameImage {
	if x != nil {
		return x.ThumbImage
	}
	return nil
}

func (x *GameImageBundler) GetThumbHeifImage() *GameImage {
	if x != nil {
		return x.ThumbHeifImage
	}
	return nil
}

type GameImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlList  []string `protobuf:"bytes,1,rep,name=url_list,json=urlList,proto3" json:"url_list,omitempty"` // 图片URL列表，重复的字符串类型字段
	Uri      string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`                        // 图片统一资源标识符，字符串类型
	Height   int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`                 // 图片高度，64位整数
	Width    int64    `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`                   // 图片宽度，64位整数
	Rotation int64    `protobuf:"varint,5,opt,name=rotation,proto3" json:"rotation,omitempty"`             // 图片旋转角度，64位整数
}

func (x *GameImage) Reset() {
	*x = GameImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameImage) ProtoMessage() {}

func (x *GameImage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameImage.ProtoReflect.Descriptor instead.
func (*GameImage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{288}
}

func (x *GameImage) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *GameImage) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GameImage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GameImage) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GameImage) GetRotation() int64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

type CloudGameMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"` // 云游戏的schema，字符串类型
}

func (x *CloudGameMeta) Reset() {
	*x = CloudGameMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudGameMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudGameMeta) ProtoMessage() {}

func (x *CloudGameMeta) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudGameMeta.ProtoReflect.Descriptor instead.
func (*CloudGameMeta) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{289}
}

func (x *CloudGameMeta) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type AtmosphereContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDuration int64  `protobuf:"varint,1,opt,name=show_duration,json=showDuration,proto3" json:"show_duration,omitempty"` // 展示时长，64位整数
	Count        string `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`                                    // 计数，字符串类型
}

func (x *AtmosphereContent) Reset() {
	*x = AtmosphereContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtmosphereContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtmosphereContent) ProtoMessage() {}

func (x *AtmosphereContent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtmosphereContent.ProtoReflect.Descriptor instead.
func (*AtmosphereContent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{290}
}

func (x *AtmosphereContent) GetShowDuration() int64 {
	if x != nil {
		return x.ShowDuration
	}
	return 0
}

func (x *AtmosphereContent) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

type FeaturedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RotationTime int32      `protobuf:"varint,1,opt,name=rotation_time,json=rotationTime,proto3" json:"rotation_time,omitempty"` // 轮播时间，32位整数
	Contents     []*Content `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`                              // 内容列表，重复的Content类型字段
}

func (x *FeaturedContent) Reset() {
	*x = FeaturedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedContent) ProtoMessage() {}

func (x *FeaturedContent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedContent.ProtoReflect.Descriptor instead.
func (*FeaturedContent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{291}
}

func (x *FeaturedContent) GetRotationTime() int32 {
	if x != nil {
		return x.RotationTime
	}
	return 0
}

func (x *FeaturedContent) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`      // 内容类型，32位整数
	Content string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 内容正文，字符串类型
	Avatar  []string `protobuf:"bytes,3,rep,name=avatar,proto3" json:"avatar,omitempty"`   // 头像列表，重复的字符串类型字段
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{292}
}

func (x *Content) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Content) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Content) GetAvatar() []string {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type IntroduceCardTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUrl string `protobuf:"bytes,1,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"` // 标签的图标URL，字符串类型
	SubText string `protobuf:"bytes,2,opt,name=sub_text,json=subText,proto3" json:"sub_text,omitempty"` // 标签的辅助文本，字符串类型
}

func (x *IntroduceCardTag) Reset() {
	*x = IntroduceCardTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntroduceCardTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntroduceCardTag) ProtoMessage() {}

func (x *IntroduceCardTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntroduceCardTag.ProtoReflect.Descriptor instead.
func (*IntroduceCardTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{293}
}

func (x *IntroduceCardTag) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *IntroduceCardTag) GetSubText() string {
	if x != nil {
		return x.SubText
	}
	return ""
}

type IntroduceCardDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayDuration          int64 `protobuf:"varint,1,opt,name=display_duration,json=displayDuration,proto3" json:"display_duration,omitempty"`                                  // 展示时长，64位整数
	IsOpenTimerIntroduceCard bool  `protobuf:"varint,2,opt,name=is_open_timer_introduce_card,json=isOpenTimerIntroduceCard,proto3" json:"is_open_timer_introduce_card,omitempty"` // 是否开启定时介绍卡片，布尔类型
	DisplayTimerSpan         int64 `protobuf:"varint,3,opt,name=display_timer_span,json=displayTimerSpan,proto3" json:"display_timer_span,omitempty"`                             // 展示定时间隔，64位整数
	DisplayTimerLoopCnt      int64 `protobuf:"varint,4,opt,name=display_timer_loop_cnt,json=displayTimerLoopCnt,proto3" json:"display_timer_loop_cnt,omitempty"`                  // 展示定时循环次数，64位整数
}

func (x *IntroduceCardDisplayInfo) Reset() {
	*x = IntroduceCardDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntroduceCardDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntroduceCardDisplayInfo) ProtoMessage() {}

func (x *IntroduceCardDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntroduceCardDisplayInfo.ProtoReflect.Descriptor instead.
func (*IntroduceCardDisplayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{294}
}

func (x *IntroduceCardDisplayInfo) GetDisplayDuration() int64 {
	if x != nil {
		return x.DisplayDuration
	}
	return 0
}

func (x *IntroduceCardDisplayInfo) GetIsOpenTimerIntroduceCard() bool {
	if x != nil {
		return x.IsOpenTimerIntroduceCard
	}
	return false
}

func (x *IntroduceCardDisplayInfo) GetDisplayTimerSpan() int64 {
	if x != nil {
		return x.DisplayTimerSpan
	}
	return 0
}

func (x *IntroduceCardDisplayInfo) GetDisplayTimerLoopCnt() int64 {
	if x != nil {
		return x.DisplayTimerLoopCnt
	}
	return 0
}

type SandwichBorderMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common             *Common         `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                     // 对应 JavaScript 中的 common 字段
	SandwichBorderInfo *SandwichBorder `protobuf:"bytes,2,opt,name=sandwich_border_info,json=sandwichBorderInfo,proto3" json:"sandwich_border_info,omitempty"` // 对应 JavaScript 中的 sandwich_border_info 字段
}

func (x *SandwichBorderMessage) Reset() {
	*x = SandwichBorderMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandwichBorderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandwichBorderMessage) ProtoMessage() {}

func (x *SandwichBorderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandwichBorderMessage.ProtoReflect.Descriptor instead.
func (*SandwichBorderMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{295}
}

func (x *SandwichBorderMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SandwichBorderMessage) GetSandwichBorderInfo() *SandwichBorder {
	if x != nil {
		return x.SandwichBorderInfo
	}
	return nil
}

type SandwichBorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    float64 `protobuf:"fixed64,1,opt,name=top,proto3" json:"top,omitempty"`       // 对应 JavaScript 中的 top 字段
	Bottom float64 `protobuf:"fixed64,2,opt,name=bottom,proto3" json:"bottom,omitempty"` // 对应 JavaScript 中的 bottom 字段
	Left   float64 `protobuf:"fixed64,3,opt,name=left,proto3" json:"left,omitempty"`     // 对应 JavaScript 中的 left 字段
	Right  float64 `protobuf:"fixed64,4,opt,name=right,proto3" json:"right,omitempty"`   // 对应 JavaScript 中的 right 字段
}

func (x *SandwichBorder) Reset() {
	*x = SandwichBorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandwichBorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandwichBorder) ProtoMessage() {}

func (x *SandwichBorder) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandwichBorder.ProtoReflect.Descriptor instead.
func (*SandwichBorder) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{296}
}

func (x *SandwichBorder) GetTop() float64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SandwichBorder) GetBottom() float64 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

func (x *SandwichBorder) GetLeft() float64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *SandwichBorder) GetRight() float64 {
	if x != nil {
		return x.Right
	}
	return 0
}

type LiveShoppingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                       *Common                     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                                                                      // 公共字段
	MsgType                      int32                       `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`                                                                    // 消息类型
	PromotionId                  int64                       `protobuf:"varint,3,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`                                                        // 促销 ID
	TargetUid                    int64                       `protobuf:"varint,4,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`                                                              // 目标用户 ID
	BubbleType                   int32                       `protobuf:"varint,5,opt,name=bubble_type,json=bubbleType,proto3" json:"bubble_type,omitempty"`                                                           // 弹窗类型
	ScreenshotTimestamp          int64                       `protobuf:"varint,6,opt,name=screenshot_timestamp,json=screenshotTimestamp,proto3" json:"screenshot_timestamp,omitempty"`                                // 截图时间戳
	SecTargetUid                 string                      `protobuf:"bytes,7,opt,name=sec_target_uid,json=secTargetUid,proto3" json:"sec_target_uid,omitempty"`                                                    // 目标用户的安全 ID
	EcomNotice                   string                      `protobuf:"bytes,8,opt,name=ecom_notice,json=ecomNotice,proto3" json:"ecom_notice,omitempty"`                                                            // 电商通知
	UpdatedProductIds            []int64                     `protobuf:"varint,9,rep,packed,name=updated_product_ids,json=updatedProductIds,proto3" json:"updated_product_ids,omitempty"`                             // 更新的商品 ID 列表
	UpdateType                   int32                       `protobuf:"varint,10,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`                                                          // 更新类型
	UpdatedProductInfo           *UpdatedProductInfo         `protobuf:"bytes,11,opt,name=updated_product_info,json=updatedProductInfo,proto3" json:"updated_product_info,omitempty"`                                 // 更新的商品信息
	SoldOut                      bool                        `protobuf:"varint,12,opt,name=sold_out,json=soldOut,proto3" json:"sold_out,omitempty"`                                                                   // 是否售罄
	UpdatedCouponInfo            *UpdatedCouponInfo          `protobuf:"bytes,13,opt,name=updated_coupon_info,json=updatedCouponInfo,proto3" json:"updated_coupon_info,omitempty"`                                    // 更新的优惠券信息
	UpdatedCampaignInfo          *UpdatedCampaignInfo        `protobuf:"bytes,14,opt,name=updated_campaign_info,json=updatedCampaignInfo,proto3" json:"updated_campaign_info,omitempty"`                              // 更新的活动信息
	UpdateTimestamp              int64                       `protobuf:"varint,15,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`                                           // 更新时间戳
	ButtonLabel                  string                      `protobuf:"bytes,16,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`                                                        // 按钮标签
	PromotionsNum                int64                       `protobuf:"varint,17,opt,name=promotions_num,json=promotionsNum,proto3" json:"promotions_num,omitempty"`                                                 // 促销数量
	UpdateSkuInfo                *UpdatedSkuInfo             `protobuf:"bytes,18,opt,name=update_sku_info,json=updateSkuInfo,proto3" json:"update_sku_info,omitempty"`                                                // 更新的 SKU 信息
	UpdatedCommentaryVideoInfo   *UpdatedCommentaryVideoInfo `protobuf:"bytes,19,opt,name=updated_commentary_video_info,json=updatedCommentaryVideoInfo,proto3" json:"updated_commentary_video_info,omitempty"`       // 更新的解说视频信息
	UpdatedGroupInfo             *UpdatedGroupInfo           `protobuf:"bytes,20,opt,name=updated_group_info,json=updatedGroupInfo,proto3" json:"updated_group_info,omitempty"`                                       // 更新的组信息
	CommerceAuthorityChangeToast string                      `protobuf:"bytes,21,opt,name=commerce_authority_change_toast,json=commerceAuthorityChangeToast,proto3" json:"commerce_authority_change_toast,omitempty"` // 商业权限更改提示
	TraceTimeMetric              *TraceTimeMetric            `protobuf:"bytes,22,opt,name=trace_time_metric,json=traceTimeMetric,proto3" json:"trace_time_metric,omitempty"`                                          // 时间跟踪指标
	AuctionSuccess               *AuctionSuccess             `protobuf:"bytes,23,opt,name=auction_success,json=auctionSuccess,proto3" json:"auction_success,omitempty"`                                               // 拍卖成功信息
	AuctionInfo                  *AuctionInfo                `protobuf:"bytes,24,opt,name=auction_info,json=auctionInfo,proto3" json:"auction_info,omitempty"`                                                        // 拍卖信息
	RedpackActivityInfo          *RedpackActivityInfo        `protobuf:"bytes,25,opt,name=redpack_activity_info,json=redpackActivityInfo,proto3" json:"redpack_activity_info,omitempty"`                              // 红包活动信息
	UpdatedCartInfo              *UpdatedCartInfo            `protobuf:"bytes,26,opt,name=updated_cart_info,json=updatedCartInfo,proto3" json:"updated_cart_info,omitempty"`                                          // 更新的购物车信息
	LotteryInfo                  *LotteryInfo                `protobuf:"bytes,27,opt,name=lottery_info,json=lotteryInfo,proto3" json:"lottery_info,omitempty"`                                                        // 抽奖信息
	WinLotteryinfo               *WinLotteryInfo             `protobuf:"bytes,28,opt,name=win_lotteryinfo,json=winLotteryinfo,proto3" json:"win_lotteryinfo,omitempty"`                                               // 抽奖中奖信息
	LotteryInfoList              *LotteryInfoList            `protobuf:"bytes,29,opt,name=lottery_info_list,json=lotteryInfoList,proto3" json:"lottery_info_list,omitempty"`                                          // 抽奖信息列表
	HotAtmosphere                *HotAtmosphere              `protobuf:"bytes,30,opt,name=hot_atmosphere,json=hotAtmosphere,proto3" json:"hot_atmosphere,omitempty"`                                                  // 热烈氛围
	UpdateToast                  string                      `protobuf:"bytes,31,opt,name=update_toast,json=updateToast,proto3" json:"update_toast,omitempty"`                                                        // 更新提示
	CanSold                      bool                        `protobuf:"varint,32,opt,name=can_sold,json=canSold,proto3" json:"can_sold,omitempty"`                                                                   // 是否可售
	LogicalClock                 int64                       `protobuf:"varint,33,opt,name=logical_clock,json=logicalClock,proto3" json:"logical_clock,omitempty"`                                                    // 逻辑时钟
	RoomTagOfflineInfo           *RoomTagOfflineInfo         `protobuf:"bytes,34,opt,name=room_tag_offline_info,json=roomTagOfflineInfo,proto3" json:"room_tag_offline_info,omitempty"`                               // 房间标签离线信息
	FilterSwitchChangeData       *FilterSwitchChangeData     `protobuf:"bytes,35,opt,name=filter_switch_change_data,json=filterSwitchChangeData,proto3" json:"filter_switch_change_data,omitempty"`                   // 过滤开关变化数据
	InteractionData              *InteractionData            `protobuf:"bytes,36,opt,name=interaction_data,json=interactionData,proto3" json:"interaction_data,omitempty"`                                            // 交互数据
	TargetOpenId                 string                      `protobuf:"bytes,5000,opt,name=target_open_id,json=targetOpenId,proto3" json:"target_open_id,omitempty"`                                                 // 目标 Open ID
}

func (x *LiveShoppingMessage) Reset() {
	*x = LiveShoppingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveShoppingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveShoppingMessage) ProtoMessage() {}

func (x *LiveShoppingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveShoppingMessage.ProtoReflect.Descriptor instead.
func (*LiveShoppingMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{297}
}

func (x *LiveShoppingMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *LiveShoppingMessage) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *LiveShoppingMessage) GetPromotionId() int64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *LiveShoppingMessage) GetTargetUid() int64 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *LiveShoppingMessage) GetBubbleType() int32 {
	if x != nil {
		return x.BubbleType
	}
	return 0
}

func (x *LiveShoppingMessage) GetScreenshotTimestamp() int64 {
	if x != nil {
		return x.ScreenshotTimestamp
	}
	return 0
}

func (x *LiveShoppingMessage) GetSecTargetUid() string {
	if x != nil {
		return x.SecTargetUid
	}
	return ""
}

func (x *LiveShoppingMessage) GetEcomNotice() string {
	if x != nil {
		return x.EcomNotice
	}
	return ""
}

func (x *LiveShoppingMessage) GetUpdatedProductIds() []int64 {
	if x != nil {
		return x.UpdatedProductIds
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *LiveShoppingMessage) GetUpdatedProductInfo() *UpdatedProductInfo {
	if x != nil {
		return x.UpdatedProductInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetSoldOut() bool {
	if x != nil {
		return x.SoldOut
	}
	return false
}

func (x *LiveShoppingMessage) GetUpdatedCouponInfo() *UpdatedCouponInfo {
	if x != nil {
		return x.UpdatedCouponInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdatedCampaignInfo() *UpdatedCampaignInfo {
	if x != nil {
		return x.UpdatedCampaignInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdateTimestamp() int64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

func (x *LiveShoppingMessage) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *LiveShoppingMessage) GetPromotionsNum() int64 {
	if x != nil {
		return x.PromotionsNum
	}
	return 0
}

func (x *LiveShoppingMessage) GetUpdateSkuInfo() *UpdatedSkuInfo {
	if x != nil {
		return x.UpdateSkuInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdatedCommentaryVideoInfo() *UpdatedCommentaryVideoInfo {
	if x != nil {
		return x.UpdatedCommentaryVideoInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdatedGroupInfo() *UpdatedGroupInfo {
	if x != nil {
		return x.UpdatedGroupInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetCommerceAuthorityChangeToast() string {
	if x != nil {
		return x.CommerceAuthorityChangeToast
	}
	return ""
}

func (x *LiveShoppingMessage) GetTraceTimeMetric() *TraceTimeMetric {
	if x != nil {
		return x.TraceTimeMetric
	}
	return nil
}

func (x *LiveShoppingMessage) GetAuctionSuccess() *AuctionSuccess {
	if x != nil {
		return x.AuctionSuccess
	}
	return nil
}

func (x *LiveShoppingMessage) GetAuctionInfo() *AuctionInfo {
	if x != nil {
		return x.AuctionInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetRedpackActivityInfo() *RedpackActivityInfo {
	if x != nil {
		return x.RedpackActivityInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdatedCartInfo() *UpdatedCartInfo {
	if x != nil {
		return x.UpdatedCartInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetLotteryInfo() *LotteryInfo {
	if x != nil {
		return x.LotteryInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetWinLotteryinfo() *WinLotteryInfo {
	if x != nil {
		return x.WinLotteryinfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetLotteryInfoList() *LotteryInfoList {
	if x != nil {
		return x.LotteryInfoList
	}
	return nil
}

func (x *LiveShoppingMessage) GetHotAtmosphere() *HotAtmosphere {
	if x != nil {
		return x.HotAtmosphere
	}
	return nil
}

func (x *LiveShoppingMessage) GetUpdateToast() string {
	if x != nil {
		return x.UpdateToast
	}
	return ""
}

func (x *LiveShoppingMessage) GetCanSold() bool {
	if x != nil {
		return x.CanSold
	}
	return false
}

func (x *LiveShoppingMessage) GetLogicalClock() int64 {
	if x != nil {
		return x.LogicalClock
	}
	return 0
}

func (x *LiveShoppingMessage) GetRoomTagOfflineInfo() *RoomTagOfflineInfo {
	if x != nil {
		return x.RoomTagOfflineInfo
	}
	return nil
}

func (x *LiveShoppingMessage) GetFilterSwitchChangeData() *FilterSwitchChangeData {
	if x != nil {
		return x.FilterSwitchChangeData
	}
	return nil
}

func (x *LiveShoppingMessage) GetInteractionData() *InteractionData {
	if x != nil {
		return x.InteractionData
	}
	return nil
}

func (x *LiveShoppingMessage) GetTargetOpenId() string {
	if x != nil {
		return x.TargetOpenId
	}
	return ""
}

// LiveEcomGeneralMessage 消息定义
type LiveEcomGeneralMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common          *Common            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`                                            // 通用信息
	ContentType     string             `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`               // 内容类型
	ContentFormat   string             `protobuf:"bytes,3,opt,name=content_format,json=contentFormat,proto3" json:"content_format,omitempty"`         // 内容格式
	LogicClock      int64              `protobuf:"varint,4,opt,name=logic_clock,json=logicClock,proto3" json:"logic_clock,omitempty"`                 // 逻辑时钟
	TraceTimeMetric *TraceTimeMetricV2 `protobuf:"bytes,5,opt,name=trace_time_metric,json=traceTimeMetric,proto3" json:"trace_time_metric,omitempty"` // 时间跟踪指标
	Data            []byte             `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                                // 数据内容
	TargetRoomId    int64              `protobuf:"varint,50,opt,name=target_room_id,json=targetRoomId,proto3" json:"target_room_id,omitempty"`        // 目标房间 ID
}

func (x *LiveEcomGeneralMessage) Reset() {
	*x = LiveEcomGeneralMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveEcomGeneralMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveEcomGeneralMessage) ProtoMessage() {}

func (x *LiveEcomGeneralMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveEcomGeneralMessage.ProtoReflect.Descriptor instead.
func (*LiveEcomGeneralMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{298}
}

func (x *LiveEcomGeneralMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *LiveEcomGeneralMessage) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *LiveEcomGeneralMessage) GetContentFormat() string {
	if x != nil {
		return x.ContentFormat
	}
	return ""
}

func (x *LiveEcomGeneralMessage) GetLogicClock() int64 {
	if x != nil {
		return x.LogicClock
	}
	return 0
}

func (x *LiveEcomGeneralMessage) GetTraceTimeMetric() *TraceTimeMetricV2 {
	if x != nil {
		return x.TraceTimeMetric
	}
	return nil
}

func (x *LiveEcomGeneralMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LiveEcomGeneralMessage) GetTargetRoomId() int64 {
	if x != nil {
		return x.TargetRoomId
	}
	return 0
}

// TraceTimeMetricV2 消息定义
type TraceTimeMetricV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpTimestamp      int64 `protobuf:"varint,1,opt,name=op_timestamp,json=opTimestamp,proto3" json:"op_timestamp,omitempty"`                  // 操作时间戳
	ProducerDuration int64 `protobuf:"varint,2,opt,name=producer_duration,json=producerDuration,proto3" json:"producer_duration,omitempty"`   // 生产者耗时
	ConsumerDuration int64 `protobuf:"varint,3,opt,name=consumer_duration,json=consumerDuration,proto3" json:"consumer_duration,omitempty"`   // 消费者耗时
	MsgSendTimestamp int64 `protobuf:"varint,4,opt,name=msg_send_timestamp,json=msgSendTimestamp,proto3" json:"msg_send_timestamp,omitempty"` // 消息发送时间戳
}

func (x *TraceTimeMetricV2) Reset() {
	*x = TraceTimeMetricV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceTimeMetricV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTimeMetricV2) ProtoMessage() {}

func (x *TraceTimeMetricV2) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTimeMetricV2.ProtoReflect.Descriptor instead.
func (*TraceTimeMetricV2) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{299}
}

func (x *TraceTimeMetricV2) GetOpTimestamp() int64 {
	if x != nil {
		return x.OpTimestamp
	}
	return 0
}

func (x *TraceTimeMetricV2) GetProducerDuration() int64 {
	if x != nil {
		return x.ProducerDuration
	}
	return 0
}

func (x *TraceTimeMetricV2) GetConsumerDuration() int64 {
	if x != nil {
		return x.ConsumerDuration
	}
	return 0
}

func (x *TraceTimeMetricV2) GetMsgSendTimestamp() int64 {
	if x != nil {
		return x.MsgSendTimestamp
	}
	return 0
}

// FilterSwitchChangeData 消息定义
type FilterSwitchChangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool    `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`              // 是否启用过滤器
	UpIcon *UpIcon `protobuf:"bytes,2,opt,name=up_icon,json=upIcon,proto3" json:"up_icon,omitempty"` // 上升图标信息
}

func (x *FilterSwitchChangeData) Reset() {
	*x = FilterSwitchChangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSwitchChangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSwitchChangeData) ProtoMessage() {}

func (x *FilterSwitchChangeData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSwitchChangeData.ProtoReflect.Descriptor instead.
func (*FilterSwitchChangeData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{300}
}

func (x *FilterSwitchChangeData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *FilterSwitchChangeData) GetUpIcon() *UpIcon {
	if x != nil {
		return x.UpIcon
	}
	return nil
}

// UpIcon 消息定义
type UpIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                         // 名称
	UpIcon             string `protobuf:"bytes,2,opt,name=up_icon,json=upIcon,proto3" json:"up_icon,omitempty"`                                       // 上升图标 URL
	UpDesc             string `protobuf:"bytes,3,opt,name=up_desc,json=upDesc,proto3" json:"up_desc,omitempty"`                                       // 上升描述
	PublicScreenNotice string `protobuf:"bytes,4,opt,name=public_screen_notice,json=publicScreenNotice,proto3" json:"public_screen_notice,omitempty"` // 公屏通知
}

func (x *UpIcon) Reset() {
	*x = UpIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpIcon) ProtoMessage() {}

func (x *UpIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpIcon.ProtoReflect.Descriptor instead.
func (*UpIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{301}
}

func (x *UpIcon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpIcon) GetUpIcon() string {
	if x != nil {
		return x.UpIcon
	}
	return ""
}

func (x *UpIcon) GetUpDesc() string {
	if x != nil {
		return x.UpDesc
	}
	return ""
}

func (x *UpIcon) GetPublicScreenNotice() string {
	if x != nil {
		return x.PublicScreenNotice
	}
	return ""
}

// RoomTagOfflineInfo 消息定义
type RoomTagOfflineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   int64  `protobuf:"varint,1,opt,name=tag_type,json=tagType,proto3" json:"tag_type,omitempty"`      // 标签类型
	UserToast string `protobuf:"bytes,2,opt,name=user_toast,json=userToast,proto3" json:"user_toast,omitempty"` // 用户提示信息
}

func (x *RoomTagOfflineInfo) Reset() {
	*x = RoomTagOfflineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTagOfflineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTagOfflineInfo) ProtoMessage() {}

func (x *RoomTagOfflineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTagOfflineInfo.ProtoReflect.Descriptor instead.
func (*RoomTagOfflineInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{302}
}

func (x *RoomTagOfflineInfo) GetTagType() int64 {
	if x != nil {
		return x.TagType
	}
	return 0
}

func (x *RoomTagOfflineInfo) GetUserToast() string {
	if x != nil {
		return x.UserToast
	}
	return ""
}

// InteractionData 消息定义
type InteractionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full     bool                  `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`        // 是否为完整交互数据
	Contents []*InteractionContent `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"` // 交互内容列表
}

func (x *InteractionData) Reset() {
	*x = InteractionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionData) ProtoMessage() {}

func (x *InteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionData.ProtoReflect.Descriptor instead.
func (*InteractionData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{303}
}

func (x *InteractionData) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *InteractionData) GetContents() []*InteractionContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

// InteractionContent 消息定义
type InteractionContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check      *InteractionContentCheck `protobuf:"bytes,1,opt,name=check,proto3" json:"check,omitempty"`                                                                                                                     // 内容检查信息
	Priority   int32                    `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`                                                                                                              // 优先级
	LoopCount  int32                    `protobuf:"varint,3,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty"`                                                                                           // 循环次数
	Content    []*InteractionElement    `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`                                                                                                                 // 交互元素列表
	EventParam map[string]string        `protobuf:"bytes,5,rep,name=event_param,json=eventParam,proto3" json:"event_param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 事件参数映射
}

func (x *InteractionContent) Reset() {
	*x = InteractionContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionContent) ProtoMessage() {}

func (x *InteractionContent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionContent.ProtoReflect.Descriptor instead.
func (*InteractionContent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{304}
}

func (x *InteractionContent) GetCheck() *InteractionContentCheck {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *InteractionContent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InteractionContent) GetLoopCount() int32 {
	if x != nil {
		return x.LoopCount
	}
	return 0
}

func (x *InteractionContent) GetContent() []*InteractionElement {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *InteractionContent) GetEventParam() map[string]string {
	if x != nil {
		return x.EventParam
	}
	return nil
}

// InteractionContentCheck 消息定义
type InteractionContentCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品 ID
	Index     int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                          // 索引
}

func (x *InteractionContentCheck) Reset() {
	*x = InteractionContentCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionContentCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionContentCheck) ProtoMessage() {}

func (x *InteractionContentCheck) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionContentCheck.ProtoReflect.Descriptor instead.
func (*InteractionContentCheck) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{305}
}

func (x *InteractionContentCheck) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *InteractionContentCheck) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// InteractionElement 消息定义
type InteractionElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementType int32              `protobuf:"varint,1,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"` // 元素类型
	Text        string             `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                   // 文本内容
	TextColor   string             `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`        // 文本颜色
	Avatars     *InteractionAvatar `protobuf:"bytes,4,opt,name=avatars,proto3" json:"avatars,omitempty"`                             // 头像信息
	BlankWidth  int32              `protobuf:"varint,5,opt,name=blank_width,json=blankWidth,proto3" json:"blank_width,omitempty"`    // 空白宽度
}

func (x *InteractionElement) Reset() {
	*x = InteractionElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionElement) ProtoMessage() {}

func (x *InteractionElement) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionElement.ProtoReflect.Descriptor instead.
func (*InteractionElement) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{306}
}

func (x *InteractionElement) GetElementType() int32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

func (x *InteractionElement) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InteractionElement) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *InteractionElement) GetAvatars() *InteractionAvatar {
	if x != nil {
		return x.Avatars
	}
	return nil
}

func (x *InteractionElement) GetBlankWidth() int32 {
	if x != nil {
		return x.BlankWidth
	}
	return 0
}

// InteractionAvatar 消息定义
type InteractionAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlList []string `protobuf:"bytes,1,rep,name=url_list,json=urlList,proto3" json:"url_list,omitempty"` // URL 列表
	Width   int32    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`                   // 宽度
	Height  int32    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`                 // 高度
}

func (x *InteractionAvatar) Reset() {
	*x = InteractionAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAvatar) ProtoMessage() {}

func (x *InteractionAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAvatar.ProtoReflect.Descriptor instead.
func (*InteractionAvatar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{307}
}

func (x *InteractionAvatar) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *InteractionAvatar) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *InteractionAvatar) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type UpdatedProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     int64  `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`                         // 商品价格
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                          // 商品标题
	Cover     string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                          // 商品封面
	Status    int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                       // 商品状态
	PopUpicon string `protobuf:"bytes,5,opt,name=pop_upicon,json=popUpicon,proto3" json:"pop_upicon,omitempty"` // 弹出图标
}

func (x *UpdatedProductInfo) Reset() {
	*x = UpdatedProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedProductInfo) ProtoMessage() {}

func (x *UpdatedProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedProductInfo.ProtoReflect.Descriptor instead.
func (*UpdatedProductInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{308}
}

func (x *UpdatedProductInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdatedProductInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatedProductInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *UpdatedProductInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdatedProductInfo) GetPopUpicon() string {
	if x != nil {
		return x.PopUpicon
	}
	return ""
}

// UpdatedCouponInfo 消息定义
type UpdatedCouponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag          string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`                                         // 优惠券标签
	CouponUrl    string `protobuf:"bytes,2,opt,name=coupon_url,json=couponUrl,proto3" json:"coupon_url,omitempty"`            // 优惠券链接
	CouponApplet string `protobuf:"bytes,3,opt,name=coupon_applet,json=couponApplet,proto3" json:"coupon_applet,omitempty"`   // 优惠券小程序
	IsValid      bool   `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`                 // 是否有效
	CouponMetaId string `protobuf:"bytes,5,opt,name=coupon_meta_id,json=couponMetaId,proto3" json:"coupon_meta_id,omitempty"` // 优惠券元数据 ID
}

func (x *UpdatedCouponInfo) Reset() {
	*x = UpdatedCouponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedCouponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedCouponInfo) ProtoMessage() {}

func (x *UpdatedCouponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedCouponInfo.ProtoReflect.Descriptor instead.
func (*UpdatedCouponInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{309}
}

func (x *UpdatedCouponInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdatedCouponInfo) GetCouponUrl() string {
	if x != nil {
		return x.CouponUrl
	}
	return ""
}

func (x *UpdatedCouponInfo) GetCouponApplet() string {
	if x != nil {
		return x.CouponApplet
	}
	return ""
}

func (x *UpdatedCouponInfo) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *UpdatedCouponInfo) GetCouponMetaId() string {
	if x != nil {
		return x.CouponMetaId
	}
	return ""
}

// UpdatedCampaignInfo 消息定义
type UpdatedCampaignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid        bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`                       // 活动是否有效
	Label          string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`                                           // 活动标签
	Price          string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                           // 活动价格
	Pic            string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                               // 活动图片
	StartTime      string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                  // 活动开始时间
	EndTime        string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                        // 活动结束时间
	TimeStartLabel string `protobuf:"bytes,7,opt,name=time_start_label,json=timeStartLabel,proto3" json:"time_start_label,omitempty"` // 开始时间标签
	TimeEndLabel   string `protobuf:"bytes,8,opt,name=time_end_label,json=timeEndLabel,proto3" json:"time_end_label,omitempty"`       // 结束时间标签
	UserLimit      string `protobuf:"bytes,9,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`                  // 用户限制
	IsPreheat      string `protobuf:"bytes,10,opt,name=is_preheat,json=isPreheat,proto3" json:"is_preheat,omitempty"`                 // 是否预热
	CampaignId     string `protobuf:"bytes,11,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`              // 活动 ID
}

func (x *UpdatedCampaignInfo) Reset() {
	*x = UpdatedCampaignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedCampaignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedCampaignInfo) ProtoMessage() {}

func (x *UpdatedCampaignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedCampaignInfo.ProtoReflect.Descriptor instead.
func (*UpdatedCampaignInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{310}
}

func (x *UpdatedCampaignInfo) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *UpdatedCampaignInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetTimeStartLabel() string {
	if x != nil {
		return x.TimeStartLabel
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetTimeEndLabel() string {
	if x != nil {
		return x.TimeEndLabel
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetUserLimit() string {
	if x != nil {
		return x.UserLimit
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetIsPreheat() string {
	if x != nil {
		return x.IsPreheat
	}
	return ""
}

func (x *UpdatedCampaignInfo) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

// SkuInfo 消息定义
type SkuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId       string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                    // SKU ID
	StockNum    int64  `protobuf:"varint,2,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`          // 库存数量
	Price       int64  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`                                // SKU 价格
	CouponPrice int64  `protobuf:"varint,4,opt,name=coupon_price,json=couponPrice,proto3" json:"coupon_price,omitempty"` // 优惠价格
}

func (x *SkuInfo) Reset() {
	*x = SkuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuInfo) ProtoMessage() {}

func (x *SkuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuInfo.ProtoReflect.Descriptor instead.
func (*SkuInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{311}
}

func (x *SkuInfo) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *SkuInfo) GetStockNum() int64 {
	if x != nil {
		return x.StockNum
	}
	return 0
}

func (x *SkuInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuInfo) GetCouponPrice() int64 {
	if x != nil {
		return x.CouponPrice
	}
	return 0
}

// TraceTimeMetric 消息定义
type TraceTimeMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpTimestamp      int64 `protobuf:"varint,1,opt,name=op_timestamp,json=opTimestamp,proto3" json:"op_timestamp,omitempty"`                  // 操作时间戳
	ProducerDuration int64 `protobuf:"varint,2,opt,name=producer_duration,json=producerDuration,proto3" json:"producer_duration,omitempty"`   // 生产者持续时间
	ConsumerDuration int64 `protobuf:"varint,3,opt,name=consumer_duration,json=consumerDuration,proto3" json:"consumer_duration,omitempty"`   // 消费者持续时间
	MsgSendTimestamp int64 `protobuf:"varint,4,opt,name=msg_send_timestamp,json=msgSendTimestamp,proto3" json:"msg_send_timestamp,omitempty"` // 消息发送时间戳
}

func (x *TraceTimeMetric) Reset() {
	*x = TraceTimeMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceTimeMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTimeMetric) ProtoMessage() {}

func (x *TraceTimeMetric) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTimeMetric.ProtoReflect.Descriptor instead.
func (*TraceTimeMetric) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{312}
}

func (x *TraceTimeMetric) GetOpTimestamp() int64 {
	if x != nil {
		return x.OpTimestamp
	}
	return 0
}

func (x *TraceTimeMetric) GetProducerDuration() int64 {
	if x != nil {
		return x.ProducerDuration
	}
	return 0
}

func (x *TraceTimeMetric) GetConsumerDuration() int64 {
	if x != nil {
		return x.ConsumerDuration
	}
	return 0
}

func (x *TraceTimeMetric) GetMsgSendTimestamp() int64 {
	if x != nil {
		return x.MsgSendTimestamp
	}
	return 0
}

// UpdatedSkuInfo 消息定义
type UpdatedSkuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skus          map[string]*SkuInfo `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // SKU 信息映射
	MinPrice      int64               `protobuf:"varint,2,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`                                                                // 最低价格
	MaxPrice      int64               `protobuf:"varint,3,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`                                                                // 最高价格
	UnuseMinPrice int64               `protobuf:"varint,4,opt,name=unuse_min_price,json=unuseMinPrice,proto3" json:"unuse_min_price,omitempty"`                                               // 未使用最低价格
	CouponPrice   int64               `protobuf:"varint,5,opt,name=coupon_price,json=couponPrice,proto3" json:"coupon_price,omitempty"`                                                       // 优惠价格
}

func (x *UpdatedSkuInfo) Reset() {
	*x = UpdatedSkuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedSkuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedSkuInfo) ProtoMessage() {}

func (x *UpdatedSkuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedSkuInfo.ProtoReflect.Descriptor instead.
func (*UpdatedSkuInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{313}
}

func (x *UpdatedSkuInfo) GetSkus() map[string]*SkuInfo {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *UpdatedSkuInfo) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *UpdatedSkuInfo) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *UpdatedSkuInfo) GetUnuseMinPrice() int64 {
	if x != nil {
		return x.UnuseMinPrice
	}
	return 0
}

func (x *UpdatedSkuInfo) GetCouponPrice() int64 {
	if x != nil {
		return x.CouponPrice
	}
	return 0
}

// UpdatedCommentaryVideoInfo 消息定义
type UpdatedCommentaryVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action int64 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"` // 动作
}

func (x *UpdatedCommentaryVideoInfo) Reset() {
	*x = UpdatedCommentaryVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedCommentaryVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedCommentaryVideoInfo) ProtoMessage() {}

func (x *UpdatedCommentaryVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedCommentaryVideoInfo.ProtoReflect.Descriptor instead.
func (*UpdatedCommentaryVideoInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{314}
}

func (x *UpdatedCommentaryVideoInfo) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

// UpdatedGroupInfo 消息定义
type UpdatedGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList []string `protobuf:"bytes,1,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"` // 头像列表
	Joined     int64    `protobuf:"varint,2,opt,name=joined,proto3" json:"joined,omitempty"`                          // 加入人数
	GroupSize  int64    `protobuf:"varint,3,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"`   // 组大小
	Persent    int64    `protobuf:"varint,4,opt,name=persent,proto3" json:"persent,omitempty"`                        // 百分比
}

func (x *UpdatedGroupInfo) Reset() {
	*x = UpdatedGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedGroupInfo) ProtoMessage() {}

func (x *UpdatedGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedGroupInfo.ProtoReflect.Descriptor instead.
func (*UpdatedGroupInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{315}
}

func (x *UpdatedGroupInfo) GetAvatarList() []string {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *UpdatedGroupInfo) GetJoined() int64 {
	if x != nil {
		return x.Joined
	}
	return 0
}

func (x *UpdatedGroupInfo) GetGroupSize() int64 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *UpdatedGroupInfo) GetPersent() int64 {
	if x != nil {
		return x.Persent
	}
	return 0
}

type AuctionSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                // 标题
	ProductId       int64  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                      // 产品 ID
	ProductName     string `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                 // 产品名称
	ProductPic      string `protobuf:"bytes,4,opt,name=product_pic,json=productPic,proto3" json:"product_pic,omitempty"`                    // 产品图片
	Price           int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                               // 价格
	Charge          int64  `protobuf:"varint,6,opt,name=charge,proto3" json:"charge,omitempty"`                                             // 费用
	Freight         int64  `protobuf:"varint,7,opt,name=freight,proto3" json:"freight,omitempty"`                                           // 运费
	Total           int64  `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`                                               // 总计
	ButtonLabel     string `protobuf:"bytes,9,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`                 // 按钮标签
	JumpUrl         string `protobuf:"bytes,10,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                            // 跳转 URL
	FreightCollect  string `protobuf:"bytes,11,opt,name=freight_collect,json=freightCollect,proto3" json:"freight_collect,omitempty"`       // 运费收集
	LeftPaymentTime int64  `protobuf:"varint,12,opt,name=left_payment_time,json=leftPaymentTime,proto3" json:"left_payment_time,omitempty"` // 剩余支付时间
	BizId           int32  `protobuf:"varint,13,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`                                 // 业务 ID
	DepositInfo     string `protobuf:"bytes,14,opt,name=deposit_info,json=depositInfo,proto3" json:"deposit_info,omitempty"`                // 定金信息
}

func (x *AuctionSuccess) Reset() {
	*x = AuctionSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionSuccess) ProtoMessage() {}

func (x *AuctionSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionSuccess.ProtoReflect.Descriptor instead.
func (*AuctionSuccess) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{316}
}

func (x *AuctionSuccess) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AuctionSuccess) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AuctionSuccess) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AuctionSuccess) GetProductPic() string {
	if x != nil {
		return x.ProductPic
	}
	return ""
}

func (x *AuctionSuccess) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AuctionSuccess) GetCharge() int64 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *AuctionSuccess) GetFreight() int64 {
	if x != nil {
		return x.Freight
	}
	return 0
}

func (x *AuctionSuccess) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AuctionSuccess) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *AuctionSuccess) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *AuctionSuccess) GetFreightCollect() string {
	if x != nil {
		return x.FreightCollect
	}
	return ""
}

func (x *AuctionSuccess) GetLeftPaymentTime() int64 {
	if x != nil {
		return x.LeftPaymentTime
	}
	return 0
}

func (x *AuctionSuccess) GetBizId() int32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *AuctionSuccess) GetDepositInfo() string {
	if x != nil {
		return x.DepositInfo
	}
	return ""
}

// RedpackActivityInfo 消息定义
type RedpackActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedpackType                    int64  `protobuf:"varint,1,opt,name=redpack_type,json=redpackType,proto3" json:"redpack_type,omitempty"`                                                              // 红包类型
	RedpackActivityId              string `protobuf:"bytes,2,opt,name=redpack_activity_id,json=redpackActivityId,proto3" json:"redpack_activity_id,omitempty"`                                           // 红包活动 ID
	RedpackActivityName            string `protobuf:"bytes,3,opt,name=redpack_activity_name,json=redpackActivityName,proto3" json:"redpack_activity_name,omitempty"`                                     // 红包活动名称
	StartApplyTime                 int64  `protobuf:"varint,4,opt,name=start_apply_time,json=startApplyTime,proto3" json:"start_apply_time,omitempty"`                                                   // 开始申请时间
	EndApplyTime                   int64  `protobuf:"varint,5,opt,name=end_apply_time,json=endApplyTime,proto3" json:"end_apply_time,omitempty"`                                                         // 结束申请时间
	PreheatTime                    int64  `protobuf:"varint,6,opt,name=preheat_time,json=preheatTime,proto3" json:"preheat_time,omitempty"`                                                              // 预热时间
	TotalAmount                    int64  `protobuf:"varint,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`                                                              // 总金额
	AuthorAvatarUrl                string `protobuf:"bytes,8,opt,name=author_avatar_url,json=authorAvatarUrl,proto3" json:"author_avatar_url,omitempty"`                                                 // 作者头像 URL
	AuthorName                     string `protobuf:"bytes,9,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`                                                                  // 作者名称
	PendantBackgroundUrl           string `protobuf:"bytes,10,opt,name=pendant_background_url,json=pendantBackgroundUrl,proto3" json:"pendant_background_url,omitempty"`                                 // 挂件背景 URL
	RedpackFrontBackgroundUrl      string `protobuf:"bytes,11,opt,name=redpack_front_background_url,json=redpackFrontBackgroundUrl,proto3" json:"redpack_front_background_url,omitempty"`                // 红包前景背景 URL
	RedpackLabel                   string `protobuf:"bytes,12,opt,name=redpack_label,json=redpackLabel,proto3" json:"redpack_label,omitempty"`                                                           // 红包标签
	RedpackAfterBackgroundUrl      string `protobuf:"bytes,13,opt,name=redpack_after_background_url,json=redpackAfterBackgroundUrl,proto3" json:"redpack_after_background_url,omitempty"`                // 红包后背景 URL
	RedpackAfterBeltUrl            string `protobuf:"bytes,14,opt,name=redpack_after_belt_url,json=redpackAfterBeltUrl,proto3" json:"redpack_after_belt_url,omitempty"`                                  // 红包后带 URL
	ScatterTime                    int64  `protobuf:"varint,15,opt,name=scatter_time,json=scatterTime,proto3" json:"scatter_time,omitempty"`                                                             // 分散时间
	ServerTime                     int64  `protobuf:"varint,16,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`                                                                // 服务器时间
	MaxAmount                      int64  `protobuf:"varint,17,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`                                                                   // 最大金额
	ShowType                       int64  `protobuf:"varint,18,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`                                                                      // 显示类型
	ShorttouchPendantBackgroundUrl string `protobuf:"bytes,19,opt,name=shorttouch_pendant_background_url,json=shorttouchPendantBackgroundUrl,proto3" json:"shorttouch_pendant_background_url,omitempty"` // 短触挂件背景 URL
	ShorttouchPendantIconUrl       string `protobuf:"bytes,20,opt,name=shorttouch_pendant_icon_url,json=shorttouchPendantIconUrl,proto3" json:"shorttouch_pendant_icon_url,omitempty"`                   // 短触挂件图标 URL
	ShorttouchLottieUrl            string `protobuf:"bytes,21,opt,name=shorttouch_lottie_url,json=shorttouchLottieUrl,proto3" json:"shorttouch_lottie_url,omitempty"`                                    // 短触 Lottie URL
}

func (x *RedpackActivityInfo) Reset() {
	*x = RedpackActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedpackActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedpackActivityInfo) ProtoMessage() {}

func (x *RedpackActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedpackActivityInfo.ProtoReflect.Descriptor instead.
func (*RedpackActivityInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{317}
}

func (x *RedpackActivityInfo) GetRedpackType() int64 {
	if x != nil {
		return x.RedpackType
	}
	return 0
}

func (x *RedpackActivityInfo) GetRedpackActivityId() string {
	if x != nil {
		return x.RedpackActivityId
	}
	return ""
}

func (x *RedpackActivityInfo) GetRedpackActivityName() string {
	if x != nil {
		return x.RedpackActivityName
	}
	return ""
}

func (x *RedpackActivityInfo) GetStartApplyTime() int64 {
	if x != nil {
		return x.StartApplyTime
	}
	return 0
}

func (x *RedpackActivityInfo) GetEndApplyTime() int64 {
	if x != nil {
		return x.EndApplyTime
	}
	return 0
}

func (x *RedpackActivityInfo) GetPreheatTime() int64 {
	if x != nil {
		return x.PreheatTime
	}
	return 0
}

func (x *RedpackActivityInfo) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RedpackActivityInfo) GetAuthorAvatarUrl() string {
	if x != nil {
		return x.AuthorAvatarUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *RedpackActivityInfo) GetPendantBackgroundUrl() string {
	if x != nil {
		return x.PendantBackgroundUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetRedpackFrontBackgroundUrl() string {
	if x != nil {
		return x.RedpackFrontBackgroundUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetRedpackLabel() string {
	if x != nil {
		return x.RedpackLabel
	}
	return ""
}

func (x *RedpackActivityInfo) GetRedpackAfterBackgroundUrl() string {
	if x != nil {
		return x.RedpackAfterBackgroundUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetRedpackAfterBeltUrl() string {
	if x != nil {
		return x.RedpackAfterBeltUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetScatterTime() int64 {
	if x != nil {
		return x.ScatterTime
	}
	return 0
}

func (x *RedpackActivityInfo) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *RedpackActivityInfo) GetMaxAmount() int64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *RedpackActivityInfo) GetShowType() int64 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *RedpackActivityInfo) GetShorttouchPendantBackgroundUrl() string {
	if x != nil {
		return x.ShorttouchPendantBackgroundUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetShorttouchPendantIconUrl() string {
	if x != nil {
		return x.ShorttouchPendantIconUrl
	}
	return ""
}

func (x *RedpackActivityInfo) GetShorttouchLottieUrl() string {
	if x != nil {
		return x.ShorttouchLottieUrl
	}
	return ""
}

// UpdatedCartInfo 消息定义
type UpdatedCartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertical          *CartVertical      `protobuf:"bytes,1,opt,name=vertical,proto3" json:"vertical,omitempty"`                                              // 垂直信息
	Horizontal        *CartHorizontal    `protobuf:"bytes,2,opt,name=horizontal,proto3" json:"horizontal,omitempty"`                                          // 水平信息
	GlobalCustomIcons *GlobalCustomIcons `protobuf:"bytes,3,opt,name=global_custom_icons,json=globalCustomIcons,proto3" json:"global_custom_icons,omitempty"` // 全局自定义图标
}

func (x *UpdatedCartInfo) Reset() {
	*x = UpdatedCartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedCartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedCartInfo) ProtoMessage() {}

func (x *UpdatedCartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedCartInfo.ProtoReflect.Descriptor instead.
func (*UpdatedCartInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{318}
}

func (x *UpdatedCartInfo) GetVertical() *CartVertical {
	if x != nil {
		return x.Vertical
	}
	return nil
}

func (x *UpdatedCartInfo) GetHorizontal() *CartHorizontal {
	if x != nil {
		return x.Horizontal
	}
	return nil
}

func (x *UpdatedCartInfo) GetGlobalCustomIcons() *GlobalCustomIcons {
	if x != nil {
		return x.GlobalCustomIcons
	}
	return nil
}

// LotteryProductShortInfo 消息定义
type LotteryProductShortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品 ID
	Img       string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`                               // 图片
}

func (x *LotteryProductShortInfo) Reset() {
	*x = LotteryProductShortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryProductShortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryProductShortInfo) ProtoMessage() {}

func (x *LotteryProductShortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryProductShortInfo.ProtoReflect.Descriptor instead.
func (*LotteryProductShortInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{319}
}

func (x *LotteryProductShortInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *LotteryProductShortInfo) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// LotteryInfo 消息定义
type LotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryType int64                    `protobuf:"varint,1,opt,name=lottery_type,json=lotteryType,proto3" json:"lottery_type,omitempty"` // 抽奖类型
	EnterIcon   string                   `protobuf:"bytes,2,opt,name=enter_icon,json=enterIcon,proto3" json:"enter_icon,omitempty"`        // 进入图标
	Icon        string                   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                   // 图标
	ActivityId  string                   `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`     // 活动 ID
	OpenTime    int64                    `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`          // 开放时间
	ProductInfo *LotteryProductShortInfo `protobuf:"bytes,6,opt,name=product_info,json=productInfo,proto3" json:"product_info,omitempty"`  // 产品信息
}

func (x *LotteryInfo) Reset() {
	*x = LotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryInfo) ProtoMessage() {}

func (x *LotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryInfo.ProtoReflect.Descriptor instead.
func (*LotteryInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{320}
}

func (x *LotteryInfo) GetLotteryType() int64 {
	if x != nil {
		return x.LotteryType
	}
	return 0
}

func (x *LotteryInfo) GetEnterIcon() string {
	if x != nil {
		return x.EnterIcon
	}
	return ""
}

func (x *LotteryInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *LotteryInfo) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *LotteryInfo) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *LotteryInfo) GetProductInfo() *LotteryProductShortInfo {
	if x != nil {
		return x.ProductInfo
	}
	return nil
}

// LotteryUnusualInfo 消息定义
type LotteryUnusualInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName string `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"` // 产品名称
	OpenTime    int64  `protobuf:"varint,2,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`         // 开放时间
}

func (x *LotteryUnusualInfo) Reset() {
	*x = LotteryUnusualInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryUnusualInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryUnusualInfo) ProtoMessage() {}

func (x *LotteryUnusualInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryUnusualInfo.ProtoReflect.Descriptor instead.
func (*LotteryUnusualInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{321}
}

func (x *LotteryUnusualInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *LotteryUnusualInfo) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type CartVertical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowShowCart bool `protobuf:"varint,1,opt,name=allow_show_cart,json=allowShowCart,proto3" json:"allow_show_cart,omitempty"` // 是否允许显示购物车
}

func (x *CartVertical) Reset() {
	*x = CartVertical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartVertical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartVertical) ProtoMessage() {}

func (x *CartVertical) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartVertical.ProtoReflect.Descriptor instead.
func (*CartVertical) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{322}
}

func (x *CartVertical) GetAllowShowCart() bool {
	if x != nil {
		return x.AllowShowCart
	}
	return false
}

// CartHorizontal 消息定义
type CartHorizontal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowShowCart bool `protobuf:"varint,1,opt,name=allow_show_cart,json=allowShowCart,proto3" json:"allow_show_cart,omitempty"` // 是否允许显示购物车
}

func (x *CartHorizontal) Reset() {
	*x = CartHorizontal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartHorizontal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartHorizontal) ProtoMessage() {}

func (x *CartHorizontal) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartHorizontal.ProtoReflect.Descriptor instead.
func (*CartHorizontal) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{323}
}

func (x *CartHorizontal) GetAllowShowCart() bool {
	if x != nil {
		return x.AllowShowCart
	}
	return false
}

// GlobalCustomIcons 消息定义
type GlobalCustomIcons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticIconUrl         string `protobuf:"bytes,1,opt,name=static_icon_url,json=staticIconUrl,proto3" json:"static_icon_url,omitempty"`                           // 静态图标 URL
	AnimatedIconUrl       string `protobuf:"bytes,2,opt,name=animated_icon_url,json=animatedIconUrl,proto3" json:"animated_icon_url,omitempty"`                     // 动态图标 URL
	AnimatedCommonIconUrl string `protobuf:"bytes,3,opt,name=animated_common_icon_url,json=animatedCommonIconUrl,proto3" json:"animated_common_icon_url,omitempty"` // 通用动态图标 URL
}

func (x *GlobalCustomIcons) Reset() {
	*x = GlobalCustomIcons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalCustomIcons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalCustomIcons) ProtoMessage() {}

func (x *GlobalCustomIcons) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalCustomIcons.ProtoReflect.Descriptor instead.
func (*GlobalCustomIcons) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{324}
}

func (x *GlobalCustomIcons) GetStaticIconUrl() string {
	if x != nil {
		return x.StaticIconUrl
	}
	return ""
}

func (x *GlobalCustomIcons) GetAnimatedIconUrl() string {
	if x != nil {
		return x.AnimatedIconUrl
	}
	return ""
}

func (x *GlobalCustomIcons) GetAnimatedCommonIconUrl() string {
	if x != nil {
		return x.AnimatedCommonIconUrl
	}
	return ""
}

type AuctionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price           int64            `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`                                             // 当前价格
	PriceLabel      string           `protobuf:"bytes,2,opt,name=price_label,json=priceLabel,proto3" json:"price_label,omitempty"`                  // 价格标签
	Status          int32            `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                           // 状态
	JumpUrl         string           `protobuf:"bytes,4,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                           // 跳转 URL
	CurrentUserInfo *CurrentUserInfo `protobuf:"bytes,5,opt,name=current_user_info,json=currentUserInfo,proto3" json:"current_user_info,omitempty"` // 当前用户信息
	IncrPriceLists  []*IncrPriceList `protobuf:"bytes,6,rep,name=incr_price_lists,json=incrPriceLists,proto3" json:"incr_price_lists,omitempty"`    // 增价列表
	ButtonLabel     string           `protobuf:"bytes,7,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`               // 按钮标签
	ProductId       int64            `protobuf:"varint,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    // 产品 ID
	EndTime         int64            `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                          // 结束时间
	BizId           int32            `protobuf:"varint,10,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`                               // 业务 ID
}

func (x *AuctionInfo) Reset() {
	*x = AuctionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionInfo) ProtoMessage() {}

func (x *AuctionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionInfo.ProtoReflect.Descriptor instead.
func (*AuctionInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{325}
}

func (x *AuctionInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AuctionInfo) GetPriceLabel() string {
	if x != nil {
		return x.PriceLabel
	}
	return ""
}

func (x *AuctionInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AuctionInfo) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *AuctionInfo) GetCurrentUserInfo() *CurrentUserInfo {
	if x != nil {
		return x.CurrentUserInfo
	}
	return nil
}

func (x *AuctionInfo) GetIncrPriceLists() []*IncrPriceList {
	if x != nil {
		return x.IncrPriceLists
	}
	return nil
}

func (x *AuctionInfo) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *AuctionInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AuctionInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AuctionInfo) GetBizId() int32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

type CurrentUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPic  *Img   `protobuf:"bytes,1,opt,name=user_pic,json=userPic,proto3" json:"user_pic,omitempty"`    // 用户头像
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` // 用户名
	UserId   int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`      // 用户 ID
}

func (x *CurrentUserInfo) Reset() {
	*x = CurrentUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUserInfo) ProtoMessage() {}

func (x *CurrentUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUserInfo.ProtoReflect.Descriptor instead.
func (*CurrentUserInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{326}
}

func (x *CurrentUserInfo) GetUserPic() *Img {
	if x != nil {
		return x.UserPic
	}
	return nil
}

func (x *CurrentUserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CurrentUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Img struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *Img) Reset() {
	*x = Img{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Img) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Img) ProtoMessage() {}

func (x *Img) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Img.ProtoReflect.Descriptor instead.
func (*Img) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{327}
}

func (x *Img) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Img) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Img) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type IncrPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"` // 增价的价格
	Range int64 `protobuf:"varint,2,opt,name=range,proto3" json:"range,omitempty"` // 增价的范围
}

func (x *IncrPriceList) Reset() {
	*x = IncrPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrPriceList) ProtoMessage() {}

func (x *IncrPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrPriceList.ProtoReflect.Descriptor instead.
func (*IncrPriceList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{328}
}

func (x *IncrPriceList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *IncrPriceList) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

// WinLotteryInfo 消息定义
type WinLotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                               // 标题
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 // 名称
	Img           string           `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`                                                   // 图片 URL
	ButtonLabel   string           `protobuf:"bytes,4,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`                // 按钮标签
	WinRecordId   string           `protobuf:"bytes,5,opt,name=win_record_id,json=winRecordId,proto3" json:"win_record_id,omitempty"`              // 中奖记录 ID
	ActivityId    string           `protobuf:"bytes,6,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                   // 活动 ID
	IsAddressed   bool             `protobuf:"varint,7,opt,name=is_addressed,json=isAddressed,proto3" json:"is_addressed,omitempty"`               // 是否已处理
	Alert         *WinLotteryAlert `protobuf:"bytes,8,opt,name=alert,proto3" json:"alert,omitempty"`                                               // 中奖提示信息
	IsWin         bool             `protobuf:"varint,9,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`                                 // 是否中奖
	JumpUrl       string           `protobuf:"bytes,10,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                           // 跳转 URL
	ProductId     int64            `protobuf:"varint,11,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    // 产品 ID
	ActivityPrice []int64          `protobuf:"varint,12,rep,packed,name=activity_price,json=activityPrice,proto3" json:"activity_price,omitempty"` // 活动价格
	BuyTime       int64            `protobuf:"varint,13,opt,name=buy_time,json=buyTime,proto3" json:"buy_time,omitempty"`                          // 购买时间
	LotteryType   int64            `protobuf:"varint,14,opt,name=lottery_type,json=lotteryType,proto3" json:"lottery_type,omitempty"`              // 抽奖类型
	ProductIdStr  string           `protobuf:"bytes,15,opt,name=product_id_str,json=productIdStr,proto3" json:"product_id_str,omitempty"`          // 产品 ID 字符串
}

func (x *WinLotteryInfo) Reset() {
	*x = WinLotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinLotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinLotteryInfo) ProtoMessage() {}

func (x *WinLotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinLotteryInfo.ProtoReflect.Descriptor instead.
func (*WinLotteryInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{329}
}

func (x *WinLotteryInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinLotteryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinLotteryInfo) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *WinLotteryInfo) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *WinLotteryInfo) GetWinRecordId() string {
	if x != nil {
		return x.WinRecordId
	}
	return ""
}

func (x *WinLotteryInfo) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *WinLotteryInfo) GetIsAddressed() bool {
	if x != nil {
		return x.IsAddressed
	}
	return false
}

func (x *WinLotteryInfo) GetAlert() *WinLotteryAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

func (x *WinLotteryInfo) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *WinLotteryInfo) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *WinLotteryInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *WinLotteryInfo) GetActivityPrice() []int64 {
	if x != nil {
		return x.ActivityPrice
	}
	return nil
}

func (x *WinLotteryInfo) GetBuyTime() int64 {
	if x != nil {
		return x.BuyTime
	}
	return 0
}

func (x *WinLotteryInfo) GetLotteryType() int64 {
	if x != nil {
		return x.LotteryType
	}
	return 0
}

func (x *WinLotteryInfo) GetProductIdStr() string {
	if x != nil {
		return x.ProductIdStr
	}
	return ""
}

// WinLotteryAlert 消息定义
type WinLotteryAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                // 标题
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                            // 内容
	ButtonLabel string `protobuf:"bytes,3,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"` // 按钮标签
}

func (x *WinLotteryAlert) Reset() {
	*x = WinLotteryAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinLotteryAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinLotteryAlert) ProtoMessage() {}

func (x *WinLotteryAlert) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinLotteryAlert.ProtoReflect.Descriptor instead.
func (*WinLotteryAlert) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{330}
}

func (x *WinLotteryAlert) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinLotteryAlert) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WinLotteryAlert) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

type LotteryInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId         string        `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                            // 活动 ID
	TaskType           int64         `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`                                 // 任务类型
	OpenTime           int64         `protobuf:"varint,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`                                 // 开放时间
	UserActivityStatus int64         `protobuf:"varint,4,opt,name=user_activity_status,json=userActivityStatus,proto3" json:"user_activity_status,omitempty"` // 用户活动状态
	WinRecordId        string        `protobuf:"bytes,5,opt,name=win_record_id,json=winRecordId,proto3" json:"win_record_id,omitempty"`                       // 中奖记录 ID
	ResultLabel        string        `protobuf:"bytes,6,opt,name=result_label,json=resultLabel,proto3" json:"result_label,omitempty"`                         // 结果标签
	ButtonLabel        string        `protobuf:"bytes,7,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`                         // 按钮标签
	Text               []string      `protobuf:"bytes,8,rep,name=text,proto3" json:"text,omitempty"`                                                          // 文本数组
	JumpUrl            string        `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                                     // 跳转 URL
	LotteryType        int64         `protobuf:"varint,10,opt,name=lottery_type,json=lotteryType,proto3" json:"lottery_type,omitempty"`                       // 抽奖类型
	ElasticTitle       string        `protobuf:"bytes,11,opt,name=elastic_title,json=elasticTitle,proto3" json:"elastic_title,omitempty"`                     // 弹性标题
	BenefitLabel       *BenefitLabel `protobuf:"bytes,12,opt,name=benefit_label,json=benefitLabel,proto3" json:"benefit_label,omitempty"`                     // 福利标签
}

func (x *LotteryInfoList) Reset() {
	*x = LotteryInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryInfoList) ProtoMessage() {}

func (x *LotteryInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryInfoList.ProtoReflect.Descriptor instead.
func (*LotteryInfoList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{331}
}

func (x *LotteryInfoList) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *LotteryInfoList) GetTaskType() int64 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *LotteryInfoList) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *LotteryInfoList) GetUserActivityStatus() int64 {
	if x != nil {
		return x.UserActivityStatus
	}
	return 0
}

func (x *LotteryInfoList) GetWinRecordId() string {
	if x != nil {
		return x.WinRecordId
	}
	return ""
}

func (x *LotteryInfoList) GetResultLabel() string {
	if x != nil {
		return x.ResultLabel
	}
	return ""
}

func (x *LotteryInfoList) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *LotteryInfoList) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *LotteryInfoList) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *LotteryInfoList) GetLotteryType() int64 {
	if x != nil {
		return x.LotteryType
	}
	return 0
}

func (x *LotteryInfoList) GetElasticTitle() string {
	if x != nil {
		return x.ElasticTitle
	}
	return ""
}

func (x *LotteryInfoList) GetBenefitLabel() *BenefitLabel {
	if x != nil {
		return x.BenefitLabel
	}
	return nil
}

// BenefitLabel 消息定义
type BenefitLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftText   string `protobuf:"bytes,1,opt,name=LeftText,proto3" json:"LeftText,omitempty"`      // 左侧文本
	RightText  string `protobuf:"bytes,2,opt,name=RightText,proto3" json:"RightText,omitempty"`    // 右侧文本
	TextStyle  int32  `protobuf:"varint,3,opt,name=TextStyle,proto3" json:"TextStyle,omitempty"`   // 文本样式
	ColorStyle int32  `protobuf:"varint,4,opt,name=ColorStyle,proto3" json:"ColorStyle,omitempty"` // 颜色样式
	DivLine    int32  `protobuf:"varint,5,opt,name=DivLine,proto3" json:"DivLine,omitempty"`       // 分割线样式
}

func (x *BenefitLabel) Reset() {
	*x = BenefitLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenefitLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenefitLabel) ProtoMessage() {}

func (x *BenefitLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenefitLabel.ProtoReflect.Descriptor instead.
func (*BenefitLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{332}
}

func (x *BenefitLabel) GetLeftText() string {
	if x != nil {
		return x.LeftText
	}
	return ""
}

func (x *BenefitLabel) GetRightText() string {
	if x != nil {
		return x.RightText
	}
	return ""
}

func (x *BenefitLabel) GetTextStyle() int32 {
	if x != nil {
		return x.TextStyle
	}
	return 0
}

func (x *BenefitLabel) GetColorStyle() int32 {
	if x != nil {
		return x.ColorStyle
	}
	return 0
}

func (x *BenefitLabel) GetDivLine() int32 {
	if x != nil {
		return x.DivLine
	}
	return 0
}

// HotAtmosphere 消息定义
type HotAtmosphere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Img          string   `protobuf:"bytes,1,opt,name=img,proto3" json:"img,omitempty"`                                        // 图片 URL
	SaleNum      string   `protobuf:"bytes,2,opt,name=sale_num,json=saleNum,proto3" json:"sale_num,omitempty"`                 // 销售数量
	Type         int64    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                     // 类型
	Num          string   `protobuf:"bytes,4,opt,name=num,proto3" json:"num,omitempty"`                                        // 数量
	BgColor      string   `protobuf:"bytes,5,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`                 // 背景颜色
	BorderColor  string   `protobuf:"bytes,6,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`     // 边框颜色
	LeftMargin   int64    `protobuf:"varint,7,opt,name=left_margin,json=leftMargin,proto3" json:"left_margin,omitempty"`       // 左边距
	UiType       int64    `protobuf:"varint,8,opt,name=ui_type,json=uiType,proto3" json:"ui_type,omitempty"`                   // UI 类型
	BgColors     []string `protobuf:"bytes,9,rep,name=bg_colors,json=bgColors,proto3" json:"bg_colors,omitempty"`              // 背景颜色数组
	BorderColors []string `protobuf:"bytes,10,rep,name=border_colors,json=borderColors,proto3" json:"border_colors,omitempty"` // 边框颜色数组
	TopImg       string   `protobuf:"bytes,11,opt,name=top_img,json=topImg,proto3" json:"top_img,omitempty"`                   // 顶部图片 URL
}

func (x *HotAtmosphere) Reset() {
	*x = HotAtmosphere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotAtmosphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotAtmosphere) ProtoMessage() {}

func (x *HotAtmosphere) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotAtmosphere.ProtoReflect.Descriptor instead.
func (*HotAtmosphere) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{333}
}

func (x *HotAtmosphere) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *HotAtmosphere) GetSaleNum() string {
	if x != nil {
		return x.SaleNum
	}
	return ""
}

func (x *HotAtmosphere) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HotAtmosphere) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *HotAtmosphere) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *HotAtmosphere) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *HotAtmosphere) GetLeftMargin() int64 {
	if x != nil {
		return x.LeftMargin
	}
	return 0
}

func (x *HotAtmosphere) GetUiType() int64 {
	if x != nil {
		return x.UiType
	}
	return 0
}

func (x *HotAtmosphere) GetBgColors() []string {
	if x != nil {
		return x.BgColors
	}
	return nil
}

func (x *HotAtmosphere) GetBorderColors() []string {
	if x != nil {
		return x.BorderColors
	}
	return nil
}

func (x *HotAtmosphere) GetTopImg() string {
	if x != nil {
		return x.TopImg
	}
	return ""
}

// EffectConfig 子消息
type MemberMessage_EffectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 int64                 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                                                                                                          // 效果类型
	Icon                 *Image                `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                                                           // 图标
	AvatarPos            int64                 `protobuf:"varint,3,opt,name=avatar_pos,json=avatarPos,proto3" json:"avatar_pos,omitempty"`                                                                                               // 头像位置
	Text                 *Text                 `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`                                                                                                                           // 文本
	TextIcon             *Image                `protobuf:"bytes,5,opt,name=text_icon,json=textIcon,proto3" json:"text_icon,omitempty"`                                                                                                   // 文本图标
	StayTime             int32                 `protobuf:"varint,6,opt,name=stay_time,json=stayTime,proto3" json:"stay_time,omitempty"`                                                                                                  // 停留时间
	AnimAssetId          int64                 `protobuf:"varint,7,opt,name=anim_asset_id,json=animAssetId,proto3" json:"anim_asset_id,omitempty"`                                                                                       // 动画资产 ID
	Badge                *Image                `protobuf:"bytes,8,opt,name=badge,proto3" json:"badge,omitempty"`                                                                                                                         // 徽章
	FlexSettingArray     []int64               `protobuf:"varint,9,rep,packed,name=flex_setting_array,json=flexSettingArray,proto3" json:"flex_setting_array,omitempty"`                                                                 // 灵活设置数组
	TextIconOverlay      *Image                `protobuf:"bytes,10,opt,name=text_icon_overlay,json=textIconOverlay,proto3" json:"text_icon_overlay,omitempty"`                                                                           // 文本图标覆盖
	AnimatedBadge        *Image                `protobuf:"bytes,11,opt,name=animated_badge,json=animatedBadge,proto3" json:"animated_badge,omitempty"`                                                                                   // 动画徽章
	HasSweepLight        bool                  `protobuf:"varint,12,opt,name=has_sweep_light,json=hasSweepLight,proto3" json:"has_sweep_light,omitempty"`                                                                                // 是否有扫光
	TextFlexSettingArray []int64               `protobuf:"varint,13,rep,packed,name=text_flex_setting_array,json=textFlexSettingArray,proto3" json:"text_flex_setting_array,omitempty"`                                                  // 文本灵活设置数组
	CenterAnimAssetId    int64                 `protobuf:"varint,14,opt,name=center_anim_asset_id,json=centerAnimAssetId,proto3" json:"center_anim_asset_id,omitempty"`                                                                  // 中心动画资产 ID
	DynamicImage         *Image                `protobuf:"bytes,15,opt,name=dynamic_image,json=dynamicImage,proto3" json:"dynamic_image,omitempty"`                                                                                      // 动态图像
	Extra                map[string]string     `protobuf:"bytes,16,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                // 额外信息
	Mp4AnimAssetId       int64                 `protobuf:"varint,17,opt,name=mp4_anim_asset_id,json=mp4AnimAssetId,proto3" json:"mp4_anim_asset_id,omitempty"`                                                                           // MP4 动画资产 ID
	Priority             int64                 `protobuf:"varint,18,opt,name=priority,proto3" json:"priority,omitempty"`                                                                                                                 // 优先级
	MaxWaitTime          int64                 `protobuf:"varint,19,opt,name=max_wait_time,json=maxWaitTime,proto3" json:"max_wait_time,omitempty"`                                                                                      // 最大等待时间
	DressId              string                `protobuf:"bytes,20,opt,name=dress_id,json=dressId,proto3" json:"dress_id,omitempty"`                                                                                                     // 装饰 ID
	Alignment            int64                 `protobuf:"varint,21,opt,name=alignment,proto3" json:"alignment,omitempty"`                                                                                                               // 对齐方式
	AlignmentOffset      int64                 `protobuf:"varint,22,opt,name=alignment_offset,json=alignmentOffset,proto3" json:"alignment_offset,omitempty"`                                                                            // 对齐偏移
	EffectScene          string                `protobuf:"bytes,23,opt,name=effect_scene,json=effectScene,proto3" json:"effect_scene,omitempty"`                                                                                         // 效果场景
	PieceValues          map[string]*TextPiece `protobuf:"bytes,24,rep,name=piece_values,json=pieceValues,proto3" json:"piece_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 片段值
}

func (x *MemberMessage_EffectConfig) Reset() {
	*x = MemberMessage_EffectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberMessage_EffectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberMessage_EffectConfig) ProtoMessage() {}

func (x *MemberMessage_EffectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberMessage_EffectConfig.ProtoReflect.Descriptor instead.
func (*MemberMessage_EffectConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{24, 2}
}

func (x *MemberMessage_EffectConfig) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetAvatarPos() int64 {
	if x != nil {
		return x.AvatarPos
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetTextIcon() *Image {
	if x != nil {
		return x.TextIcon
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetStayTime() int32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetAnimAssetId() int64 {
	if x != nil {
		return x.AnimAssetId
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetFlexSettingArray() []int64 {
	if x != nil {
		return x.FlexSettingArray
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetTextIconOverlay() *Image {
	if x != nil {
		return x.TextIconOverlay
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetAnimatedBadge() *Image {
	if x != nil {
		return x.AnimatedBadge
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetHasSweepLight() bool {
	if x != nil {
		return x.HasSweepLight
	}
	return false
}

func (x *MemberMessage_EffectConfig) GetTextFlexSettingArray() []int64 {
	if x != nil {
		return x.TextFlexSettingArray
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetCenterAnimAssetId() int64 {
	if x != nil {
		return x.CenterAnimAssetId
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetDynamicImage() *Image {
	if x != nil {
		return x.DynamicImage
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *MemberMessage_EffectConfig) GetMp4AnimAssetId() int64 {
	if x != nil {
		return x.Mp4AnimAssetId
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetMaxWaitTime() int64 {
	if x != nil {
		return x.MaxWaitTime
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetDressId() string {
	if x != nil {
		return x.DressId
	}
	return ""
}

func (x *MemberMessage_EffectConfig) GetAlignment() int64 {
	if x != nil {
		return x.Alignment
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetAlignmentOffset() int64 {
	if x != nil {
		return x.AlignmentOffset
	}
	return 0
}

func (x *MemberMessage_EffectConfig) GetEffectScene() string {
	if x != nil {
		return x.EffectScene
	}
	return ""
}

func (x *MemberMessage_EffectConfig) GetPieceValues() map[string]*TextPiece {
	if x != nil {
		return x.PieceValues
	}
	return nil
}

// PicoEffectConfig 子消息
type MemberMessage_PicoEffectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              int64             `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                                                                          // 效果类型
	Icon              *Image            `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                           // 图标
	Text              *Text             `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                                                                                           // 文本
	TextIcon          *Image            `protobuf:"bytes,4,opt,name=text_icon,json=textIcon,proto3" json:"text_icon,omitempty"`                                                                   // 文本图标
	StayTime          int32             `protobuf:"varint,5,opt,name=stay_time,json=stayTime,proto3" json:"stay_time,omitempty"`                                                                  // 停留时间
	Badge             *Image            `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`                                                                                         // 徽章
	CenterAnimAssetId int64             `protobuf:"varint,7,opt,name=center_anim_asset_id,json=centerAnimAssetId,proto3" json:"center_anim_asset_id,omitempty"`                                   // 中心动画资产 ID
	Extra             map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	DressId           string            `protobuf:"bytes,9,opt,name=dress_id,json=dressId,proto3" json:"dress_id,omitempty"`                                                                      // 装饰 ID
}

func (x *MemberMessage_PicoEffectConfig) Reset() {
	*x = MemberMessage_PicoEffectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberMessage_PicoEffectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberMessage_PicoEffectConfig) ProtoMessage() {}

func (x *MemberMessage_PicoEffectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberMessage_PicoEffectConfig.ProtoReflect.Descriptor instead.
func (*MemberMessage_PicoEffectConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{24, 3}
}

func (x *MemberMessage_PicoEffectConfig) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MemberMessage_PicoEffectConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *MemberMessage_PicoEffectConfig) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MemberMessage_PicoEffectConfig) GetTextIcon() *Image {
	if x != nil {
		return x.TextIcon
	}
	return nil
}

func (x *MemberMessage_PicoEffectConfig) GetStayTime() int32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *MemberMessage_PicoEffectConfig) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *MemberMessage_PicoEffectConfig) GetCenterAnimAssetId() int64 {
	if x != nil {
		return x.CenterAnimAssetId
	}
	return 0
}

func (x *MemberMessage_PicoEffectConfig) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *MemberMessage_PicoEffectConfig) GetDressId() string {
	if x != nil {
		return x.DressId
	}
	return ""
}

// SuperResolution 消息定义
type StreamUrlExtra_SuperResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`             // 是否启用
	Strength     int64 `protobuf:"varint,2,opt,name=strength,proto3" json:"strength,omitempty"`         // 强度
	Antialiasing bool  `protobuf:"varint,3,opt,name=antialiasing,proto3" json:"antialiasing,omitempty"` // 是否启用抗锯齿
}

func (x *StreamUrlExtra_SuperResolution) Reset() {
	*x = StreamUrlExtra_SuperResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUrlExtra_SuperResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUrlExtra_SuperResolution) ProtoMessage() {}

func (x *StreamUrlExtra_SuperResolution) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUrlExtra_SuperResolution.ProtoReflect.Descriptor instead.
func (*StreamUrlExtra_SuperResolution) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{50, 0}
}

func (x *StreamUrlExtra_SuperResolution) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *StreamUrlExtra_SuperResolution) GetStrength() int64 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *StreamUrlExtra_SuperResolution) GetAntialiasing() bool {
	if x != nil {
		return x.Antialiasing
	}
	return false
}

// AnchorClientInfo 消息定义
type StreamUrlExtra_AnchorClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomInfo string `protobuf:"bytes,1,opt,name=custom_info,json=customInfo,proto3" json:"custom_info,omitempty"` // 自定义信息
}

func (x *StreamUrlExtra_AnchorClientInfo) Reset() {
	*x = StreamUrlExtra_AnchorClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUrlExtra_AnchorClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUrlExtra_AnchorClientInfo) ProtoMessage() {}

func (x *StreamUrlExtra_AnchorClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUrlExtra_AnchorClientInfo.ProtoReflect.Descriptor instead.
func (*StreamUrlExtra_AnchorClientInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{50, 1}
}

func (x *StreamUrlExtra_AnchorClientInfo) GetCustomInfo() string {
	if x != nil {
		return x.CustomInfo
	}
	return ""
}

// AdaptionInfo 消息定义
type StreamUrlExtra_AdaptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerticalResizeMode int32 `protobuf:"varint,1,opt,name=vertical_resize_mode,json=verticalResizeMode,proto3" json:"vertical_resize_mode,omitempty"` // 垂直调整模式
}

func (x *StreamUrlExtra_AdaptionInfo) Reset() {
	*x = StreamUrlExtra_AdaptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUrlExtra_AdaptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUrlExtra_AdaptionInfo) ProtoMessage() {}

func (x *StreamUrlExtra_AdaptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUrlExtra_AdaptionInfo.ProtoReflect.Descriptor instead.
func (*StreamUrlExtra_AdaptionInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{50, 2}
}

func (x *StreamUrlExtra_AdaptionInfo) GetVerticalResizeMode() int32 {
	if x != nil {
		return x.VerticalResizeMode
	}
	return 0
}

// PullData 消息定义
type LiveCoreSDKData_PullData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamData         string                               `protobuf:"bytes,1,opt,name=stream_data,json=streamData,proto3" json:"stream_data,omitempty"`                                                                                                                   // 流数据
	Options            *LiveCoreSDKData_PullData_Options    `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`                                                                                                                                           // 选项
	Version            int64                                `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                                                                                                                          // 版本
	HlsDataUnencrypted map[string]string                    `protobuf:"bytes,4,rep,name=hls_data_unencrypted,json=hlsDataUnencrypted,proto3" json:"hls_data_unencrypted,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 未加密的 HLS 数据
	Kind               int32                                `protobuf:"varint,5,opt,name=kind,proto3" json:"kind,omitempty"`                                                                                                                                                // 类型
	Extension          *LiveCoreSDKData_PullData_Extension  `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`                                                                                                                                       // 扩展信息
	Hls                []*LiveCoreSDKData_PullData_PlayInfo `protobuf:"bytes,7,rep,name=Hls,proto3" json:"Hls,omitempty"`                                                                                                                                                   // HLS 播放信息
	Flv                []*LiveCoreSDKData_PullData_PlayInfo `protobuf:"bytes,8,rep,name=Flv,proto3" json:"Flv,omitempty"`                                                                                                                                                   // FLV 播放信息
	Codec              string                               `protobuf:"bytes,9,opt,name=codec,proto3" json:"codec,omitempty"`                                                                                                                                               // 编解码器
	Display            *LiveCoreSDKData_PullData_Display    `protobuf:"bytes,10,opt,name=display,proto3" json:"display,omitempty"`                                                                                                                                          // 显示信息
	CompensatoryData   string                               `protobuf:"bytes,11,opt,name=compensatory_data,json=compensatoryData,proto3" json:"compensatory_data,omitempty"`                                                                                                // 补偿数据
}

func (x *LiveCoreSDKData_PullData) Reset() {
	*x = LiveCoreSDKData_PullData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0}
}

func (x *LiveCoreSDKData_PullData) GetStreamData() string {
	if x != nil {
		return x.StreamData
	}
	return ""
}

func (x *LiveCoreSDKData_PullData) GetOptions() *LiveCoreSDKData_PullData_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LiveCoreSDKData_PullData) GetHlsDataUnencrypted() map[string]string {
	if x != nil {
		return x.HlsDataUnencrypted
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *LiveCoreSDKData_PullData) GetExtension() *LiveCoreSDKData_PullData_Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetHls() []*LiveCoreSDKData_PullData_PlayInfo {
	if x != nil {
		return x.Hls
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetFlv() []*LiveCoreSDKData_PullData_PlayInfo {
	if x != nil {
		return x.Flv
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *LiveCoreSDKData_PullData) GetDisplay() *LiveCoreSDKData_PullData_Display {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *LiveCoreSDKData_PullData) GetCompensatoryData() string {
	if x != nil {
		return x.CompensatoryData
	}
	return ""
}

// PushData 消息定义
type LiveCoreSDKData_PushData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionParams map[string]*LiveCoreSDKData_PushData_ResolutionParams `protobuf:"bytes,1,rep,name=resolution_params,json=resolutionParams,proto3" json:"resolution_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 分辨率参数映射
	PushStreamLevel  int32                                                 `protobuf:"varint,2,opt,name=push_stream_level,json=pushStreamLevel,proto3" json:"push_stream_level,omitempty"`                                                                                         // 推流级别
	PreSchedule      bool                                                  `protobuf:"varint,3,opt,name=pre_schedule,json=preSchedule,proto3" json:"pre_schedule,omitempty"`                                                                                                       // 预调度
	RtmpPushUrl      string                                                `protobuf:"bytes,4,opt,name=rtmp_push_url,json=rtmpPushUrl,proto3" json:"rtmp_push_url,omitempty"`                                                                                                      // RTMP 推流 URL
	PushParams       string                                                `protobuf:"bytes,5,opt,name=push_params,json=pushParams,proto3" json:"push_params,omitempty"`                                                                                                           // 推流参数
	Kind             int32                                                 `protobuf:"varint,6,opt,name=kind,proto3" json:"kind,omitempty"`                                                                                                                                        // 类型
	StreamId         int64                                                 `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                                                // 流 ID
	StreamIdStr      string                                                `protobuf:"bytes,8,opt,name=stream_id_str,json=streamIdStr,proto3" json:"stream_id_str,omitempty"`                                                                                                      // 流 ID 字符串
}

func (x *LiveCoreSDKData_PushData) Reset() {
	*x = LiveCoreSDKData_PushData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PushData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PushData) ProtoMessage() {}

func (x *LiveCoreSDKData_PushData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PushData.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PushData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 1}
}

func (x *LiveCoreSDKData_PushData) GetResolutionParams() map[string]*LiveCoreSDKData_PushData_ResolutionParams {
	if x != nil {
		return x.ResolutionParams
	}
	return nil
}

func (x *LiveCoreSDKData_PushData) GetPushStreamLevel() int32 {
	if x != nil {
		return x.PushStreamLevel
	}
	return 0
}

func (x *LiveCoreSDKData_PushData) GetPreSchedule() bool {
	if x != nil {
		return x.PreSchedule
	}
	return false
}

func (x *LiveCoreSDKData_PushData) GetRtmpPushUrl() string {
	if x != nil {
		return x.RtmpPushUrl
	}
	return ""
}

func (x *LiveCoreSDKData_PushData) GetPushParams() string {
	if x != nil {
		return x.PushParams
	}
	return ""
}

func (x *LiveCoreSDKData_PushData) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *LiveCoreSDKData_PushData) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *LiveCoreSDKData_PushData) GetStreamIdStr() string {
	if x != nil {
		return x.StreamIdStr
	}
	return ""
}

// Options 消息定义
type LiveCoreSDKData_PullData_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultQuality *LiveCoreSDKData_PullData_Options_Quality   `protobuf:"bytes,1,opt,name=default_quality,json=defaultQuality,proto3" json:"default_quality,omitempty"` // 默认质量
	Qualities      []*LiveCoreSDKData_PullData_Options_Quality `protobuf:"bytes,2,rep,name=qualities,proto3" json:"qualities,omitempty"`                                 // 质量列表
	VpassDefault   bool                                        `protobuf:"varint,3,opt,name=vpass_default,json=vpassDefault,proto3" json:"vpass_default,omitempty"`      // 默认 VPass
}

func (x *LiveCoreSDKData_PullData_Options) Reset() {
	*x = LiveCoreSDKData_PullData_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_Options) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_Options) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_Options.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_Options) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 1}
}

func (x *LiveCoreSDKData_PullData_Options) GetDefaultQuality() *LiveCoreSDKData_PullData_Options_Quality {
	if x != nil {
		return x.DefaultQuality
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Options) GetQualities() []*LiveCoreSDKData_PullData_Options_Quality {
	if x != nil {
		return x.Qualities
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Options) GetVpassDefault() bool {
	if x != nil {
		return x.VpassDefault
	}
	return false
}

// Clip 消息定义
type LiveCoreSDKData_PullData_Clip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"` // X 坐标
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"` // Y 坐标
	W float32 `protobuf:"fixed32,3,opt,name=w,proto3" json:"w,omitempty"` // 宽度
	H float32 `protobuf:"fixed32,4,opt,name=h,proto3" json:"h,omitempty"` // 高度
}

func (x *LiveCoreSDKData_PullData_Clip) Reset() {
	*x = LiveCoreSDKData_PullData_Clip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_Clip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_Clip) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_Clip) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_Clip.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_Clip) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 2}
}

func (x *LiveCoreSDKData_PullData_Clip) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Clip) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Clip) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Clip) GetH() float32 {
	if x != nil {
		return x.H
	}
	return 0
}

// CameraHorizontalPosition 消息定义
type LiveCoreSDKData_PullData_CameraHorizontalPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor int32   `protobuf:"varint,1,opt,name=anchor,proto3" json:"anchor,omitempty"` // 锚点
	X      float32 `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`          // X 坐标
	Y      float32 `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`          // Y 坐标
	W      float32 `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`          // 宽度
	H      float32 `protobuf:"fixed32,5,opt,name=h,proto3" json:"h,omitempty"`          // 高度
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) Reset() {
	*x = LiveCoreSDKData_PullData_CameraHorizontalPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_CameraHorizontalPosition) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_CameraHorizontalPosition.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_CameraHorizontalPosition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 3}
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) GetAnchor() int32 {
	if x != nil {
		return x.Anchor
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_CameraHorizontalPosition) GetH() float32 {
	if x != nil {
		return x.H
	}
	return 0
}

// Extension 消息定义
type LiveCoreSDKData_PullData_Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameClip                 *LiveCoreSDKData_PullData_Clip                     `protobuf:"bytes,1,opt,name=game_clip,json=gameClip,proto3" json:"game_clip,omitempty"`                                                    // 游戏剪辑
	CameraClip               *LiveCoreSDKData_PullData_Clip                     `protobuf:"bytes,2,opt,name=camera_clip,json=cameraClip,proto3" json:"camera_clip,omitempty"`                                              // 摄像头剪辑
	CameraHidden             int32                                              `protobuf:"varint,3,opt,name=camera_hidden,json=cameraHidden,proto3" json:"camera_hidden,omitempty"`                                       // 摄像头隐藏
	Ts                       string                                             `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`                                                                                // 时间戳
	Refresh                  int64                                              `protobuf:"varint,5,opt,name=refresh,proto3" json:"refresh,omitempty"`                                                                     // 刷新
	DisplayMode              int32                                              `protobuf:"varint,6,opt,name=display_mode,json=displayMode,proto3" json:"display_mode,omitempty"`                                          // 显示模式
	GameHidden               int32                                              `protobuf:"varint,7,opt,name=game_hidden,json=gameHidden,proto3" json:"game_hidden,omitempty"`                                             // 游戏隐藏
	GameRoomId               string                                             `protobuf:"bytes,8,opt,name=game_room_id,json=gameRoomId,proto3" json:"game_room_id,omitempty"`                                            // 游戏房间 ID
	Layout                   int32                                              `protobuf:"varint,9,opt,name=layout,proto3" json:"layout,omitempty"`                                                                       // 布局
	CameraClipCustom         *LiveCoreSDKData_PullData_Clip                     `protobuf:"bytes,10,opt,name=camera_clip_custom,json=cameraClipCustom,proto3" json:"camera_clip_custom,omitempty"`                         // 自定义摄像头剪辑
	CameraVerticalType       int32                                              `protobuf:"varint,11,opt,name=camera_vertical_type,json=cameraVerticalType,proto3" json:"camera_vertical_type,omitempty"`                  // 摄像头垂直类型
	CameraHorizontalPosition *LiveCoreSDKData_PullData_CameraHorizontalPosition `protobuf:"bytes,12,opt,name=camera_horizontal_position,json=cameraHorizontalPosition,proto3" json:"camera_horizontal_position,omitempty"` // 摄像头水平位置
	CameraHorizontalHidden   int32                                              `protobuf:"varint,13,opt,name=camera_horizontal_hidden,json=cameraHorizontalHidden,proto3" json:"camera_horizontal_hidden,omitempty"`      // 摄像头水平隐藏
	CameraHorizontalType     int32                                              `protobuf:"varint,14,opt,name=camera_horizontal_type,json=cameraHorizontalType,proto3" json:"camera_horizontal_type,omitempty"`            // 摄像头水平类型
}

func (x *LiveCoreSDKData_PullData_Extension) Reset() {
	*x = LiveCoreSDKData_PullData_Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_Extension) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_Extension) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_Extension.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_Extension) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 4}
}

func (x *LiveCoreSDKData_PullData_Extension) GetGameClip() *LiveCoreSDKData_PullData_Clip {
	if x != nil {
		return x.GameClip
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraClip() *LiveCoreSDKData_PullData_Clip {
	if x != nil {
		return x.CameraClip
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraHidden() int32 {
	if x != nil {
		return x.CameraHidden
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetTs() string {
	if x != nil {
		return x.Ts
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Extension) GetRefresh() int64 {
	if x != nil {
		return x.Refresh
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetDisplayMode() int32 {
	if x != nil {
		return x.DisplayMode
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetGameHidden() int32 {
	if x != nil {
		return x.GameHidden
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetGameRoomId() string {
	if x != nil {
		return x.GameRoomId
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Extension) GetLayout() int32 {
	if x != nil {
		return x.Layout
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraClipCustom() *LiveCoreSDKData_PullData_Clip {
	if x != nil {
		return x.CameraClipCustom
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraVerticalType() int32 {
	if x != nil {
		return x.CameraVerticalType
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraHorizontalPosition() *LiveCoreSDKData_PullData_CameraHorizontalPosition {
	if x != nil {
		return x.CameraHorizontalPosition
	}
	return nil
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraHorizontalHidden() int32 {
	if x != nil {
		return x.CameraHorizontalHidden
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Extension) GetCameraHorizontalType() int32 {
	if x != nil {
		return x.CameraHorizontalType
	}
	return 0
}

// PlayInfo 消息定义
type LiveCoreSDKData_PullData_PlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                    // URL
	QualityName string `protobuf:"bytes,2,opt,name=quality_name,json=qualityName,proto3" json:"quality_name,omitempty"` // 质量名称
	Params      string `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`                              // 参数
}

func (x *LiveCoreSDKData_PullData_PlayInfo) Reset() {
	*x = LiveCoreSDKData_PullData_PlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_PlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_PlayInfo) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_PlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_PlayInfo.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_PlayInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 5}
}

func (x *LiveCoreSDKData_PullData_PlayInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_PlayInfo) GetQualityName() string {
	if x != nil {
		return x.QualityName
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_PlayInfo) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// Display 消息定义
type LiveCoreSDKData_PullData_Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleWidth  int64 `protobuf:"varint,1,opt,name=scale_width,json=scaleWidth,proto3" json:"scale_width,omitempty"`    // 缩放宽度
	ScaleHeight int64 `protobuf:"varint,2,opt,name=scale_height,json=scaleHeight,proto3" json:"scale_height,omitempty"` // 缩放高度
}

func (x *LiveCoreSDKData_PullData_Display) Reset() {
	*x = LiveCoreSDKData_PullData_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_Display) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_Display) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_Display.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_Display) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 6}
}

func (x *LiveCoreSDKData_PullData_Display) GetScaleWidth() int64 {
	if x != nil {
		return x.ScaleWidth
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Display) GetScaleHeight() int64 {
	if x != nil {
		return x.ScaleHeight
	}
	return 0
}

// Quality 消息定义
type LiveCoreSDKData_PullData_Options_Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    // 名称
	SdkKey            string `protobuf:"bytes,2,opt,name=sdk_key,json=sdkKey,proto3" json:"sdk_key,omitempty"`                                  // SDK 键
	VCodec            string `protobuf:"bytes,3,opt,name=v_codec,json=vCodec,proto3" json:"v_codec,omitempty"`                                  // 视频编解码器
	Resolution        string `protobuf:"bytes,4,opt,name=resolution,proto3" json:"resolution,omitempty"`                                        // 分辨率
	Level             int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                                 // 级别
	VBitRate          int32  `protobuf:"varint,6,opt,name=v_bit_rate,json=vBitRate,proto3" json:"v_bit_rate,omitempty"`                         // 视频比特率
	AdditionalContent string `protobuf:"bytes,7,opt,name=additional_content,json=additionalContent,proto3" json:"additional_content,omitempty"` // 附加内容
	Fps               int32  `protobuf:"varint,8,opt,name=fps,proto3" json:"fps,omitempty"`                                                     // 帧率
	Disable           int32  `protobuf:"varint,9,opt,name=disable,proto3" json:"disable,omitempty"`                                             // 禁用标志
}

func (x *LiveCoreSDKData_PullData_Options_Quality) Reset() {
	*x = LiveCoreSDKData_PullData_Options_Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PullData_Options_Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PullData_Options_Quality) ProtoMessage() {}

func (x *LiveCoreSDKData_PullData_Options_Quality) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PullData_Options_Quality.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PullData_Options_Quality) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 0, 1, 0}
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetSdkKey() string {
	if x != nil {
		return x.SdkKey
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetVCodec() string {
	if x != nil {
		return x.VCodec
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetVBitRate() int32 {
	if x != nil {
		return x.VBitRate
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetAdditionalContent() string {
	if x != nil {
		return x.AdditionalContent
	}
	return ""
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *LiveCoreSDKData_PullData_Options_Quality) GetDisable() int32 {
	if x != nil {
		return x.Disable
	}
	return 0
}

// ResolutionParams 消息定义
type LiveCoreSDKData_PushData_ResolutionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width          int64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`                                         // 宽度
	Height         int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`                                       // 高度
	DefaultBitrate int64 `protobuf:"varint,3,opt,name=default_bitrate,json=defaultBitrate,proto3" json:"default_bitrate,omitempty"` // 默认比特率
	MinBitrate     int64 `protobuf:"varint,4,opt,name=min_bitrate,json=minBitrate,proto3" json:"min_bitrate,omitempty"`             // 最小比特率
	MaxBitrate     int64 `protobuf:"varint,5,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`             // 最大比特率
	Fps            int64 `protobuf:"varint,6,opt,name=fps,proto3" json:"fps,omitempty"`                                             // 帧率
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) Reset() {
	*x = LiveCoreSDKData_PushData_ResolutionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCoreSDKData_PushData_ResolutionParams) ProtoMessage() {}

func (x *LiveCoreSDKData_PushData_ResolutionParams) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCoreSDKData_PushData_ResolutionParams.ProtoReflect.Descriptor instead.
func (*LiveCoreSDKData_PushData_ResolutionParams) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{51, 1, 1}
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetDefaultBitrate() int64 {
	if x != nil {
		return x.DefaultBitrate
	}
	return 0
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetMinBitrate() int64 {
	if x != nil {
		return x.MinBitrate
	}
	return 0
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetMaxBitrate() int64 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *LiveCoreSDKData_PushData_ResolutionParams) GetFps() int64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

// RoomAuthOffReasons 消息定义
type RoomAuthStatus_RoomAuthOffReasons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gift string `protobuf:"bytes,1,opt,name=gift,proto3" json:"gift,omitempty"` // 礼物关闭原因
}

func (x *RoomAuthStatus_RoomAuthOffReasons) Reset() {
	*x = RoomAuthStatus_RoomAuthOffReasons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAuthStatus_RoomAuthOffReasons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAuthStatus_RoomAuthOffReasons) ProtoMessage() {}

func (x *RoomAuthStatus_RoomAuthOffReasons) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAuthStatus_RoomAuthOffReasons.ProtoReflect.Descriptor instead.
func (*RoomAuthStatus_RoomAuthOffReasons) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{57, 0}
}

func (x *RoomAuthStatus_RoomAuthOffReasons) GetGift() string {
	if x != nil {
		return x.Gift
	}
	return ""
}

// RoomAuthSpecialStyle 消息定义
type RoomAuthStatus_RoomAuthSpecialStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat            *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,1,opt,name=Chat,proto3" json:"Chat,omitempty"`                       // 聊天特殊样式
	Gift            *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,2,opt,name=Gift,proto3" json:"Gift,omitempty"`                       // 礼物特殊样式
	RoomContributor *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,3,opt,name=RoomContributor,proto3" json:"RoomContributor,omitempty"` // 房间贡献者特殊样式
	Like            *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,4,opt,name=Like,proto3" json:"Like,omitempty"`                       // 点赞特殊样式
	RoomChannel     *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,5,opt,name=RoomChannel,proto3" json:"RoomChannel,omitempty"`         // 房间频道特殊样式
	Share           *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,6,opt,name=Share,proto3" json:"Share,omitempty"`                     // 分享特殊样式
	CastScreenAuth  *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,7,opt,name=CastScreenAuth,proto3" json:"CastScreenAuth,omitempty"`   // 投屏授权特殊样式
	Landscape       *RoomAuthStatus_RoomAuthSpecialStyle_Style `protobuf:"bytes,8,opt,name=Landscape,proto3" json:"Landscape,omitempty"`             // 横屏特殊样式
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) Reset() {
	*x = RoomAuthStatus_RoomAuthSpecialStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAuthStatus_RoomAuthSpecialStyle) ProtoMessage() {}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAuthStatus_RoomAuthSpecialStyle.ProtoReflect.Descriptor instead.
func (*RoomAuthStatus_RoomAuthSpecialStyle) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{57, 1}
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetChat() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetGift() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetRoomContributor() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.RoomContributor
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetLike() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.Like
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetRoomChannel() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.RoomChannel
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetShare() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetCastScreenAuth() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.CastScreenAuth
	}
	return nil
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle) GetLandscape() *RoomAuthStatus_RoomAuthSpecialStyle_Style {
	if x != nil {
		return x.Landscape
	}
	return nil
}

// Style 消息定义
type RoomAuthStatus_RoomAuthSpecialStyle_Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnableStyle              int32  `protobuf:"varint,1,opt,name=UnableStyle,proto3" json:"UnableStyle,omitempty"`                          // 无法使用的样式
	Content                  string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`                                   // 内容
	OffType                  int32  `protobuf:"varint,3,opt,name=OffType,proto3" json:"OffType,omitempty"`                                  // 关闭类型
	AnchorSwitch             int32  `protobuf:"varint,4,opt,name=AnchorSwitch,proto3" json:"AnchorSwitch,omitempty"`                        // 主播开关
	SwitchStatusTipMsg       string `protobuf:"bytes,5,opt,name=SwitchStatusTipMsg,proto3" json:"SwitchStatusTipMsg,omitempty"`             // 开关状态提示消息
	SwitchStatusAnchorTipMsg string `protobuf:"bytes,6,opt,name=SwitchStatusAnchorTipMsg,proto3" json:"SwitchStatusAnchorTipMsg,omitempty"` // 主播开关状态提示消息
	AnchorSwitchForPaidLive  int32  `protobuf:"varint,7,opt,name=AnchorSwitchForPaidLive,proto3" json:"AnchorSwitchForPaidLive,omitempty"`  // 付费直播的主播开关
	ContentForPaidLive       string `protobuf:"bytes,8,opt,name=ContentForPaidLive,proto3" json:"ContentForPaidLive,omitempty"`             // 付费直播的内容
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) Reset() {
	*x = RoomAuthStatus_RoomAuthSpecialStyle_Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAuthStatus_RoomAuthSpecialStyle_Style) ProtoMessage() {}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAuthStatus_RoomAuthSpecialStyle_Style.ProtoReflect.Descriptor instead.
func (*RoomAuthStatus_RoomAuthSpecialStyle_Style) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{57, 1, 0}
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetUnableStyle() int32 {
	if x != nil {
		return x.UnableStyle
	}
	return 0
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetOffType() int32 {
	if x != nil {
		return x.OffType
	}
	return 0
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetAnchorSwitch() int32 {
	if x != nil {
		return x.AnchorSwitch
	}
	return 0
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetSwitchStatusTipMsg() string {
	if x != nil {
		return x.SwitchStatusTipMsg
	}
	return ""
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetSwitchStatusAnchorTipMsg() string {
	if x != nil {
		return x.SwitchStatusAnchorTipMsg
	}
	return ""
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetAnchorSwitchForPaidLive() int32 {
	if x != nil {
		return x.AnchorSwitchForPaidLive
	}
	return 0
}

func (x *RoomAuthStatus_RoomAuthSpecialStyle_Style) GetContentForPaidLive() string {
	if x != nil {
		return x.ContentForPaidLive
	}
	return ""
}

// FollowBtnSkin 消息定义
type MatchSkinInfo_FollowBtnSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftColor  string `protobuf:"bytes,1,opt,name=left_color,json=leftColor,proto3" json:"left_color,omitempty"`    // 左侧颜色
	RightColor string `protobuf:"bytes,2,opt,name=right_color,json=rightColor,proto3" json:"right_color,omitempty"` // 右侧颜色
	FontColor  string `protobuf:"bytes,3,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`    // 字体颜色
}

func (x *MatchSkinInfo_FollowBtnSkin) Reset() {
	*x = MatchSkinInfo_FollowBtnSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSkinInfo_FollowBtnSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSkinInfo_FollowBtnSkin) ProtoMessage() {}

func (x *MatchSkinInfo_FollowBtnSkin) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSkinInfo_FollowBtnSkin.ProtoReflect.Descriptor instead.
func (*MatchSkinInfo_FollowBtnSkin) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{61, 0}
}

func (x *MatchSkinInfo_FollowBtnSkin) GetLeftColor() string {
	if x != nil {
		return x.LeftColor
	}
	return ""
}

func (x *MatchSkinInfo_FollowBtnSkin) GetRightColor() string {
	if x != nil {
		return x.RightColor
	}
	return ""
}

func (x *MatchSkinInfo_FollowBtnSkin) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

// Element 消息定义
type RoomShortTouchAreaConfig_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`         // 元素类型
	Priority int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"` // 优先级
}

func (x *RoomShortTouchAreaConfig_Element) Reset() {
	*x = RoomShortTouchAreaConfig_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_Element) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_Element) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_Element.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_Element) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 4}
}

func (x *RoomShortTouchAreaConfig_Element) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_Element) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// ForbiddenType 消息定义
type RoomShortTouchAreaConfig_ForbiddenType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`    // 禁用类型
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // 禁用原因
}

func (x *RoomShortTouchAreaConfig_ForbiddenType) Reset() {
	*x = RoomShortTouchAreaConfig_ForbiddenType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_ForbiddenType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_ForbiddenType) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_ForbiddenType) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_ForbiddenType.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_ForbiddenType) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 5}
}

func (x *RoomShortTouchAreaConfig_ForbiddenType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_ForbiddenType) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// TempStateType 消息定义
type RoomShortTouchAreaConfig_TempStateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyType int32 `protobuf:"varint,1,opt,name=strategy_type,json=strategyType,proto3" json:"strategy_type,omitempty"` // 策略类型
	Priority     int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`                             // 优先级
}

func (x *RoomShortTouchAreaConfig_TempStateType) Reset() {
	*x = RoomShortTouchAreaConfig_TempStateType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_TempStateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_TempStateType) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_TempStateType) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_TempStateType.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_TempStateType) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 6}
}

func (x *RoomShortTouchAreaConfig_TempStateType) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_TempStateType) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// TempStateCondition 消息定义
type RoomShortTouchAreaConfig_TempStateCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *RoomShortTouchAreaConfig_TempStateType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                // 临时状态类型
	MinimumGap int32                                   `protobuf:"varint,2,opt,name=minimum_gap,json=minimumGap,proto3" json:"minimum_gap,omitempty"` // 最小间隔时间
}

func (x *RoomShortTouchAreaConfig_TempStateCondition) Reset() {
	*x = RoomShortTouchAreaConfig_TempStateCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_TempStateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_TempStateCondition) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_TempStateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_TempStateCondition.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_TempStateCondition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 7}
}

func (x *RoomShortTouchAreaConfig_TempStateCondition) GetType() *RoomShortTouchAreaConfig_TempStateType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RoomShortTouchAreaConfig_TempStateCondition) GetMinimumGap() int32 {
	if x != nil {
		return x.MinimumGap
	}
	return 0
}

// TempStateStrategy 消息定义
type RoomShortTouchAreaConfig_TempStateStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortTouchType int32                                                                       `protobuf:"varint,1,opt,name=short_touch_type,json=shortTouchType,proto3" json:"short_touch_type,omitempty"`                                                                              // 短触类型
	StrategyMap    map[int32]*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo `protobuf:"bytes,2,rep,name=strategy_map,json=strategyMap,proto3" json:"strategy_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 策略信息映射
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy) Reset() {
	*x = RoomShortTouchAreaConfig_TempStateStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_TempStateStrategy) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_TempStateStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_TempStateStrategy.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_TempStateStrategy) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 8}
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy) GetShortTouchType() int32 {
	if x != nil {
		return x.ShortTouchType
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy) GetStrategyMap() map[int32]*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo {
	if x != nil {
		return x.StrategyMap
	}
	return nil
}

// TempStateGlobalCondition 消息定义
type RoomShortTouchAreaConfig_TempStateGlobalCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationGap         int32   `protobuf:"varint,1,opt,name=duration_gap,json=durationGap,proto3" json:"duration_gap,omitempty"`                                  // 全局持续时间间隔
	AllowCount          int32   `protobuf:"varint,2,opt,name=allow_count,json=allowCount,proto3" json:"allow_count,omitempty"`                                     // 允许次数
	IgnoreStrategyTypes []int32 `protobuf:"varint,3,rep,packed,name=ignore_strategy_types,json=ignoreStrategyTypes,proto3" json:"ignore_strategy_types,omitempty"` // 忽略的策略类型列表
}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) Reset() {
	*x = RoomShortTouchAreaConfig_TempStateGlobalCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_TempStateGlobalCondition) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_TempStateGlobalCondition.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_TempStateGlobalCondition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 9}
}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) GetDurationGap() int32 {
	if x != nil {
		return x.DurationGap
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) GetAllowCount() int32 {
	if x != nil {
		return x.AllowCount
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_TempStateGlobalCondition) GetIgnoreStrategyTypes() []int32 {
	if x != nil {
		return x.IgnoreStrategyTypes
	}
	return nil
}

// TempStateStrategyInfo 消息定义
type RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *RoomShortTouchAreaConfig_TempStateType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                           // 策略类型
	Duration       int32                                   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                                  // 策略持续时间
	StrategyMethod string                                  `protobuf:"bytes,3,opt,name=strategy_method,json=strategyMethod,proto3" json:"strategy_method,omitempty"` // 策略方法
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) Reset() {
	*x = RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) ProtoMessage() {}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo.ProtoReflect.Descriptor instead.
func (*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{63, 8, 1}
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) GetType() *RoomShortTouchAreaConfig_TempStateType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo) GetStrategyMethod() string {
	if x != nil {
		return x.StrategyMethod
	}
	return ""
}

// CartVertical 消息定义
type RoomCart_CartVertical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowShowCart bool `protobuf:"varint,1,opt,name=allow_show_cart,json=allowShowCart,proto3" json:"allow_show_cart,omitempty"` // 是否允许显示垂直购物车
}

func (x *RoomCart_CartVertical) Reset() {
	*x = RoomCart_CartVertical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCart_CartVertical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCart_CartVertical) ProtoMessage() {}

func (x *RoomCart_CartVertical) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCart_CartVertical.ProtoReflect.Descriptor instead.
func (*RoomCart_CartVertical) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{66, 0}
}

func (x *RoomCart_CartVertical) GetAllowShowCart() bool {
	if x != nil {
		return x.AllowShowCart
	}
	return false
}

// CartHorizontal 消息定义
type RoomCart_CartHorizontal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowShowCart bool `protobuf:"varint,1,opt,name=allow_show_cart,json=allowShowCart,proto3" json:"allow_show_cart,omitempty"` // 是否允许显示水平购物车
}

func (x *RoomCart_CartHorizontal) Reset() {
	*x = RoomCart_CartHorizontal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCart_CartHorizontal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCart_CartHorizontal) ProtoMessage() {}

func (x *RoomCart_CartHorizontal) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCart_CartHorizontal.ProtoReflect.Descriptor instead.
func (*RoomCart_CartHorizontal) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{66, 1}
}

func (x *RoomCart_CartHorizontal) GetAllowShowCart() bool {
	if x != nil {
		return x.AllowShowCart
	}
	return false
}

// GlobalCustomIcons 消息定义
type RoomCart_GlobalCustomIcons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticIconUrl         string `protobuf:"bytes,1,opt,name=static_icon_url,json=staticIconUrl,proto3" json:"static_icon_url,omitempty"`                           // 静态图标 URL
	AnimatedIconUrl       string `protobuf:"bytes,2,opt,name=animated_icon_url,json=animatedIconUrl,proto3" json:"animated_icon_url,omitempty"`                     // 动态图标 URL
	AnimatedCommonIconUrl string `protobuf:"bytes,3,opt,name=animated_common_icon_url,json=animatedCommonIconUrl,proto3" json:"animated_common_icon_url,omitempty"` // 通用动态图标 URL
}

func (x *RoomCart_GlobalCustomIcons) Reset() {
	*x = RoomCart_GlobalCustomIcons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCart_GlobalCustomIcons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCart_GlobalCustomIcons) ProtoMessage() {}

func (x *RoomCart_GlobalCustomIcons) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCart_GlobalCustomIcons.ProtoReflect.Descriptor instead.
func (*RoomCart_GlobalCustomIcons) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{66, 2}
}

func (x *RoomCart_GlobalCustomIcons) GetStaticIconUrl() string {
	if x != nil {
		return x.StaticIconUrl
	}
	return ""
}

func (x *RoomCart_GlobalCustomIcons) GetAnimatedIconUrl() string {
	if x != nil {
		return x.AnimatedIconUrl
	}
	return ""
}

func (x *RoomCart_GlobalCustomIcons) GetAnimatedCommonIconUrl() string {
	if x != nil {
		return x.AnimatedCommonIconUrl
	}
	return ""
}

// StaticBorderInfo 嵌套消息定义
type BorderInfo_StaticBorderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color     string `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`          // 静态边框颜色
	Thickness int32  `protobuf:"varint,2,opt,name=thickness,proto3" json:"thickness,omitempty"` // 边框厚度
}

func (x *BorderInfo_StaticBorderInfo) Reset() {
	*x = BorderInfo_StaticBorderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorderInfo_StaticBorderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorderInfo_StaticBorderInfo) ProtoMessage() {}

func (x *BorderInfo_StaticBorderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorderInfo_StaticBorderInfo.ProtoReflect.Descriptor instead.
func (*BorderInfo_StaticBorderInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{68, 0}
}

func (x *BorderInfo_StaticBorderInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *BorderInfo_StaticBorderInfo) GetThickness() int32 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

// DynamicBorderInfo 嵌套消息定义
type BorderInfo_DynamicBorderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationUrl string `protobuf:"bytes,1,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"` // 动态边框动画 URL
	FrameRate    int32  `protobuf:"varint,2,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`         // 动画帧率
}

func (x *BorderInfo_DynamicBorderInfo) Reset() {
	*x = BorderInfo_DynamicBorderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorderInfo_DynamicBorderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorderInfo_DynamicBorderInfo) ProtoMessage() {}

func (x *BorderInfo_DynamicBorderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorderInfo_DynamicBorderInfo.ProtoReflect.Descriptor instead.
func (*BorderInfo_DynamicBorderInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{68, 1}
}

func (x *BorderInfo_DynamicBorderInfo) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

func (x *BorderInfo_DynamicBorderInfo) GetFrameRate() int32 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

// Image 消息定义
type EasterEggData_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *EasterEggData_Image) Reset() {
	*x = EasterEggData_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEggData_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEggData_Image) ProtoMessage() {}

func (x *EasterEggData_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEggData_Image.ProtoReflect.Descriptor instead.
func (*EasterEggData_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{70, 0}
}

func (x *EasterEggData_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EasterEggData_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *EasterEggData_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type VerticalTypeInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VerticalTypeInfo_Image) Reset() {
	*x = VerticalTypeInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalTypeInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalTypeInfo_Image) ProtoMessage() {}

func (x *VerticalTypeInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalTypeInfo_Image.ProtoReflect.Descriptor instead.
func (*VerticalTypeInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{73, 0}
}

func (x *VerticalTypeInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VerticalTypeInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VerticalTypeInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type ToolbarItemConfig_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *ToolbarItemConfig_Image) Reset() {
	*x = ToolbarItemConfig_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarItemConfig_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarItemConfig_Image) ProtoMessage() {}

func (x *ToolbarItemConfig_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarItemConfig_Image.ProtoReflect.Descriptor instead.
func (*ToolbarItemConfig_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{79, 0}
}

func (x *ToolbarItemConfig_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ToolbarItemConfig_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ToolbarItemConfig_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Toast 消息定义
type ToolbarItemConfig_Toast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`    // 提示信息
	Duration int32  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"` // 显示时长
}

func (x *ToolbarItemConfig_Toast) Reset() {
	*x = ToolbarItemConfig_Toast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarItemConfig_Toast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarItemConfig_Toast) ProtoMessage() {}

func (x *ToolbarItemConfig_Toast) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarItemConfig_Toast.ProtoReflect.Descriptor instead.
func (*ToolbarItemConfig_Toast) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{79, 1}
}

func (x *ToolbarItemConfig_Toast) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToolbarItemConfig_Toast) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// VsEpisodeHighLight 主消息
type EpisodePremierePlay_VsEpisodeHighLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location    int64                                         `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`      // 精彩片段位置（时间戳或标记点）
	Description string                                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 精彩片段描述
	Image       *EpisodePremierePlay_VsEpisodeHighLight_Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`             // 精彩片段相关图片
	Pid         string                                        `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`                 // 精彩片段的唯一标识符
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) Reset() {
	*x = EpisodePremierePlay_VsEpisodeHighLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePremierePlay_VsEpisodeHighLight) ProtoMessage() {}

func (x *EpisodePremierePlay_VsEpisodeHighLight) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePremierePlay_VsEpisodeHighLight.ProtoReflect.Descriptor instead.
func (*EpisodePremierePlay_VsEpisodeHighLight) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{80, 0}
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) GetLocation() int64 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) GetImage() *EpisodePremierePlay_VsEpisodeHighLight_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *EpisodePremierePlay_VsEpisodeHighLight) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

// Image 消息定义
type EpisodePremierePlay_VsEpisodeHighLight_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) Reset() {
	*x = EpisodePremierePlay_VsEpisodeHighLight_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePremierePlay_VsEpisodeHighLight_Image) ProtoMessage() {}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePremierePlay_VsEpisodeHighLight_Image.ProtoReflect.Descriptor instead.
func (*EpisodePremierePlay_VsEpisodeHighLight_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{80, 0, 0}
}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *EpisodePremierePlay_VsEpisodeHighLight_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type EpisodePreviewImage_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *EpisodePreviewImage_Image) Reset() {
	*x = EpisodePreviewImage_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodePreviewImage_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodePreviewImage_Image) ProtoMessage() {}

func (x *EpisodePreviewImage_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodePreviewImage_Image.ProtoReflect.Descriptor instead.
func (*EpisodePreviewImage_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{81, 0}
}

func (x *EpisodePreviewImage_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EpisodePreviewImage_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *EpisodePreviewImage_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type VSGiftPannel_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VSGiftPannel_Image) Reset() {
	*x = VSGiftPannel_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSGiftPannel_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSGiftPannel_Image) ProtoMessage() {}

func (x *VSGiftPannel_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSGiftPannel_Image.ProtoReflect.Descriptor instead.
func (*VSGiftPannel_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{82, 0}
}

func (x *VSGiftPannel_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSGiftPannel_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSGiftPannel_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type VSPannelIcon_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VSPannelIcon_Image) Reset() {
	*x = VSPannelIcon_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSPannelIcon_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSPannelIcon_Image) ProtoMessage() {}

func (x *VSPannelIcon_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSPannelIcon_Image.ProtoReflect.Descriptor instead.
func (*VSPannelIcon_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{83, 0}
}

func (x *VSPannelIcon_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSPannelIcon_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSPannelIcon_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type VSCameraInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VSCameraInfo_Image) Reset() {
	*x = VSCameraInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo_Image) ProtoMessage() {}

func (x *VSCameraInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo_Image.ProtoReflect.Descriptor instead.
func (*VSCameraInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85, 0}
}

func (x *VSCameraInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSCameraInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSCameraInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// StreamUrl 消息定义
type VSCameraInfo_StreamUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`           // 流 URL
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"` // 流协议类型（如 HLS/RTMP）
}

func (x *VSCameraInfo_StreamUrl) Reset() {
	*x = VSCameraInfo_StreamUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo_StreamUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo_StreamUrl) ProtoMessage() {}

func (x *VSCameraInfo_StreamUrl) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo_StreamUrl.ProtoReflect.Descriptor instead.
func (*VSCameraInfo_StreamUrl) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85, 1}
}

func (x *VSCameraInfo_StreamUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSCameraInfo_StreamUrl) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// RoomAuthStatus 消息定义
type VSCameraInfo_RoomAuthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuthenticated bool   `protobuf:"varint,1,opt,name=is_authenticated,json=isAuthenticated,proto3" json:"is_authenticated,omitempty"` // 是否通过认证
	AuthType        string `protobuf:"bytes,2,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`                       // 认证类型
}

func (x *VSCameraInfo_RoomAuthStatus) Reset() {
	*x = VSCameraInfo_RoomAuthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo_RoomAuthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo_RoomAuthStatus) ProtoMessage() {}

func (x *VSCameraInfo_RoomAuthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo_RoomAuthStatus.ProtoReflect.Descriptor instead.
func (*VSCameraInfo_RoomAuthStatus) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85, 2}
}

func (x *VSCameraInfo_RoomAuthStatus) GetIsAuthenticated() bool {
	if x != nil {
		return x.IsAuthenticated
	}
	return false
}

func (x *VSCameraInfo_RoomAuthStatus) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

// CameraPaidInfo 消息定义
type VSCameraInfo_CameraPaidInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPaid   bool    `protobuf:"varint,1,opt,name=is_paid,json=isPaid,proto3" json:"is_paid,omitempty"` // 是否需要付费
	Price    float32 `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`                // 付费金额
	Currency string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`            // 货币类型
}

func (x *VSCameraInfo_CameraPaidInfo) Reset() {
	*x = VSCameraInfo_CameraPaidInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo_CameraPaidInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo_CameraPaidInfo) ProtoMessage() {}

func (x *VSCameraInfo_CameraPaidInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo_CameraPaidInfo.ProtoReflect.Descriptor instead.
func (*VSCameraInfo_CameraPaidInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85, 3}
}

func (x *VSCameraInfo_CameraPaidInfo) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *VSCameraInfo_CameraPaidInfo) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VSCameraInfo_CameraPaidInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// CameraMatchInfo 消息定义
type VSCameraInfo_CameraMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`       // 比赛 ID
	MatchName string `protobuf:"bytes,2,opt,name=match_name,json=matchName,proto3" json:"match_name,omitempty"` // 比赛名称
}

func (x *VSCameraInfo_CameraMatchInfo) Reset() {
	*x = VSCameraInfo_CameraMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCameraInfo_CameraMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCameraInfo_CameraMatchInfo) ProtoMessage() {}

func (x *VSCameraInfo_CameraMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCameraInfo_CameraMatchInfo.ProtoReflect.Descriptor instead.
func (*VSCameraInfo_CameraMatchInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{85, 4}
}

func (x *VSCameraInfo_CameraMatchInfo) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *VSCameraInfo_CameraMatchInfo) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

// VSWatermarkIcon 消息定义
type VSWatermark_VSWatermarkIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图标 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图标宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图标高度
}

func (x *VSWatermark_VSWatermarkIcon) Reset() {
	*x = VSWatermark_VSWatermarkIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSWatermark_VSWatermarkIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSWatermark_VSWatermarkIcon) ProtoMessage() {}

func (x *VSWatermark_VSWatermarkIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSWatermark_VSWatermarkIcon.ProtoReflect.Descriptor instead.
func (*VSWatermark_VSWatermarkIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{86, 0}
}

func (x *VSWatermark_VSWatermarkIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSWatermark_VSWatermarkIcon) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSWatermark_VSWatermarkIcon) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type VSItemComment_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VSItemComment_Image) Reset() {
	*x = VSItemComment_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSItemComment_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSItemComment_Image) ProtoMessage() {}

func (x *VSItemComment_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSItemComment_Image.ProtoReflect.Descriptor instead.
func (*VSItemComment_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{87, 0}
}

func (x *VSItemComment_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSItemComment_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSItemComment_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// VSItemBar 消息定义
type VSBar_VSItemBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUrl string `protobuf:"bytes,1,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"` // 图标的 URL
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`                    // 图标对应的文字标签
	Order   int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`                   // 显示顺序
}

func (x *VSBar_VSItemBar) Reset() {
	*x = VSBar_VSItemBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSBar_VSItemBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSBar_VSItemBar) ProtoMessage() {}

func (x *VSBar_VSItemBar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSBar_VSItemBar.ProtoReflect.Descriptor instead.
func (*VSBar_VSItemBar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{88, 0}
}

func (x *VSBar_VSItemBar) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *VSBar_VSItemBar) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *VSBar_VSItemBar) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

// VSLinkNode 消息定义
type VSLinkInfo_VSLinkNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                 // 房间 ID
	RoomName    string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`           // 房间名称
	HostName    string `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`           // 主持人名称
	ViewerCount int32  `protobuf:"varint,4,opt,name=viewer_count,json=viewerCount,proto3" json:"viewer_count,omitempty"` // 观看人数
}

func (x *VSLinkInfo_VSLinkNode) Reset() {
	*x = VSLinkInfo_VSLinkNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSLinkInfo_VSLinkNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSLinkInfo_VSLinkNode) ProtoMessage() {}

func (x *VSLinkInfo_VSLinkNode) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSLinkInfo_VSLinkNode.ProtoReflect.Descriptor instead.
func (*VSLinkInfo_VSLinkNode) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{89, 0}
}

func (x *VSLinkInfo_VSLinkNode) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *VSLinkInfo_VSLinkNode) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *VSLinkInfo_VSLinkNode) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *VSLinkInfo_VSLinkNode) GetViewerCount() int32 {
	if x != nil {
		return x.ViewerCount
	}
	return 0
}

// CommentColor 消息定义
type CommentConfig_CommentColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorCode   string `protobuf:"bytes,1,opt,name=color_code,json=colorCode,proto3" json:"color_code,omitempty"` // 颜色代码
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`              // 颜色描述
}

func (x *CommentConfig_CommentColor) Reset() {
	*x = CommentConfig_CommentColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig_CommentColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig_CommentColor) ProtoMessage() {}

func (x *CommentConfig_CommentColor) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig_CommentColor.ProtoReflect.Descriptor instead.
func (*CommentConfig_CommentColor) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{90, 0}
}

func (x *CommentConfig_CommentColor) GetColorCode() string {
	if x != nil {
		return x.ColorCode
	}
	return ""
}

func (x *CommentConfig_CommentColor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// CommentRole 消息定义
type CommentConfig_CommentRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId          string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`                            // 角色 ID
	RoleName        string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`                      // 角色名称
	RoleDescription string `protobuf:"bytes,3,opt,name=role_description,json=roleDescription,proto3" json:"role_description,omitempty"` // 角色描述
}

func (x *CommentConfig_CommentRole) Reset() {
	*x = CommentConfig_CommentRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig_CommentRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig_CommentRole) ProtoMessage() {}

func (x *CommentConfig_CommentRole) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig_CommentRole.ProtoReflect.Descriptor instead.
func (*CommentConfig_CommentRole) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{90, 1}
}

func (x *CommentConfig_CommentRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *CommentConfig_CommentRole) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *CommentConfig_CommentRole) GetRoleDescription() string {
	if x != nil {
		return x.RoleDescription
	}
	return ""
}

// CommentMedal 消息定义
type CommentConfig_CommentMedal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedalId          string `protobuf:"bytes,1,opt,name=medal_id,json=medalId,proto3" json:"medal_id,omitempty"`                            // 勋章 ID
	MedalName        string `protobuf:"bytes,2,opt,name=medal_name,json=medalName,proto3" json:"medal_name,omitempty"`                      // 勋章名称
	MedalDescription string `protobuf:"bytes,3,opt,name=medal_description,json=medalDescription,proto3" json:"medal_description,omitempty"` // 勋章描述
}

func (x *CommentConfig_CommentMedal) Reset() {
	*x = CommentConfig_CommentMedal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig_CommentMedal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig_CommentMedal) ProtoMessage() {}

func (x *CommentConfig_CommentMedal) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig_CommentMedal.ProtoReflect.Descriptor instead.
func (*CommentConfig_CommentMedal) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{90, 2}
}

func (x *CommentConfig_CommentMedal) GetMedalId() string {
	if x != nil {
		return x.MedalId
	}
	return ""
}

func (x *CommentConfig_CommentMedal) GetMedalName() string {
	if x != nil {
		return x.MedalName
	}
	return ""
}

func (x *CommentConfig_CommentMedal) GetMedalDescription() string {
	if x != nil {
		return x.MedalDescription
	}
	return ""
}

// MatchTabFrame 主消息
type MatchRoomInfo_MatchTabFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tabs            []*MatchRoomInfo_MatchTabFrame_MatchTab `protobuf:"bytes,1,rep,name=tabs,proto3" json:"tabs,omitempty"`                                              // 比赛的标签列表
	ReplayTabs      []*MatchRoomInfo_MatchTabFrame_MatchTab `protobuf:"bytes,2,rep,name=replay_tabs,json=replayTabs,proto3" json:"replay_tabs,omitempty"`                // 比赛回放的标签列表
	Color           string                                  `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`                                            // 标签文字颜色
	BackgroundColor string                                  `protobuf:"bytes,4,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"` // 标签背景颜色
}

func (x *MatchRoomInfo_MatchTabFrame) Reset() {
	*x = MatchRoomInfo_MatchTabFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchTabFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchTabFrame) ProtoMessage() {}

func (x *MatchRoomInfo_MatchTabFrame) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchTabFrame.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchTabFrame) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 1}
}

func (x *MatchRoomInfo_MatchTabFrame) GetTabs() []*MatchRoomInfo_MatchTabFrame_MatchTab {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *MatchRoomInfo_MatchTabFrame) GetReplayTabs() []*MatchRoomInfo_MatchTabFrame_MatchTab {
	if x != nil {
		return x.ReplayTabs
	}
	return nil
}

func (x *MatchRoomInfo_MatchTabFrame) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MatchRoomInfo_MatchTabFrame) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

// MatchTitle 主消息
type MatchRoomInfo_MatchTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomTitle string                              `protobuf:"bytes,1,opt,name=room_title,json=roomTitle,proto3" json:"room_title,omitempty"` // 比赛房间的标题
	TitleIcon *MatchRoomInfo_MatchTitle_TitleIcon `protobuf:"bytes,2,opt,name=title_icon,json=titleIcon,proto3" json:"title_icon,omitempty"` // 标题图标
}

func (x *MatchRoomInfo_MatchTitle) Reset() {
	*x = MatchRoomInfo_MatchTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchTitle) ProtoMessage() {}

func (x *MatchRoomInfo_MatchTitle) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchTitle.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchTitle) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 2}
}

func (x *MatchRoomInfo_MatchTitle) GetRoomTitle() string {
	if x != nil {
		return x.RoomTitle
	}
	return ""
}

func (x *MatchRoomInfo_MatchTitle) GetTitleIcon() *MatchRoomInfo_MatchTitle_TitleIcon {
	if x != nil {
		return x.TitleIcon
	}
	return nil
}

// ToutiaoMatchData 主消息
type MatchRoomInfo_ToutiaoMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            int64                                         `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                     // 比赛唯一标识
	MatchTitle         string                                        `protobuf:"bytes,2,opt,name=match_title,json=matchTitle,proto3" json:"match_title,omitempty"`                             // 比赛标题
	Against            *MatchRoomInfo_ToutiaoMatchData_Against       `protobuf:"bytes,3,opt,name=against,proto3" json:"against,omitempty"`                                                     // 比赛对阵信息
	StartedTime        string                                        `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`                          // 比赛开始时间 (格式化)
	City               string                                        `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                           // 比赛城市
	VenueName          string                                        `protobuf:"bytes,6,opt,name=venue_name,json=venueName,proto3" json:"venue_name,omitempty"`                                // 比赛场馆名称
	Referee            string                                        `protobuf:"bytes,7,opt,name=referee,proto3" json:"referee,omitempty"`                                                     // 裁判姓名
	TeamStats          *MatchRoomInfo_ToutiaoMatchData_TeamStats     `protobuf:"bytes,8,opt,name=team_stats,json=teamStats,proto3" json:"team_stats,omitempty"`                                // 队伍统计信息
	PlayerStats        []*MatchRoomInfo_ToutiaoMatchData_PlayerStats `protobuf:"bytes,9,rep,name=player_stats,json=playerStats,proto3" json:"player_stats,omitempty"`                          // 球员统计信息列表
	MatchGroup         string                                        `protobuf:"bytes,10,opt,name=match_group,json=matchGroup,proto3" json:"match_group,omitempty"`                            // 比赛分组
	MatchRound         string                                        `protobuf:"bytes,11,opt,name=match_round,json=matchRound,proto3" json:"match_round,omitempty"`                            // 比赛轮次
	MatchPhaseName     string                                        `protobuf:"bytes,12,opt,name=match_phase_name,json=matchPhaseName,proto3" json:"match_phase_name,omitempty"`              // 比赛阶段名称
	CanSubscribe       bool                                          `protobuf:"varint,13,opt,name=can_subscribe,json=canSubscribe,proto3" json:"can_subscribe,omitempty"`                     // 是否可订阅
	DisplayStatus      int32                                         `protobuf:"varint,14,opt,name=display_status,json=displayStatus,proto3" json:"display_status,omitempty"`                  // 显示状态
	BjtFormat          string                                        `protobuf:"bytes,15,opt,name=bjt_format,json=bjtFormat,proto3" json:"bjt_format,omitempty"`                               // 北京时间格式
	LocalTimeFormat    string                                        `protobuf:"bytes,16,opt,name=local_time_format,json=localTimeFormat,proto3" json:"local_time_format,omitempty"`           // 本地时间格式
	LiveStatus         int32                                         `protobuf:"varint,17,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                           // 直播状态
	MatchStatus        int32                                         `protobuf:"varint,18,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`                        // 比赛状态
	MatchIdStr         string                                        `protobuf:"bytes,19,opt,name=match_id_str,json=matchIdStr,proto3" json:"match_id_str,omitempty"`                          // 比赛 ID (字符串格式)
	StartedTimeUnix    int64                                         `protobuf:"varint,20,opt,name=started_time_unix,json=startedTimeUnix,proto3" json:"started_time_unix,omitempty"`          // 比赛开始时间 (Unix 时间戳)
	LeftScoreAddition  int32                                         `protobuf:"varint,21,opt,name=left_score_addition,json=leftScoreAddition,proto3" json:"left_score_addition,omitempty"`    // 左队得分加成
	RightScoreAddition int32                                         `protobuf:"varint,22,opt,name=right_score_addition,json=rightScoreAddition,proto3" json:"right_score_addition,omitempty"` // 右队得分加成
	Duration           string                                        `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                  // 比赛时长
	EventIds           []int64                                       `protobuf:"varint,24,rep,packed,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`                          // 赛事 ID 列表
	WinnerId           int64                                         `protobuf:"varint,25,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`                                 // 胜利方 ID
	WinnerIdStr        string                                        `protobuf:"bytes,26,opt,name=winner_id_str,json=winnerIdStr,proto3" json:"winner_id_str,omitempty"`                       // 胜利方 ID (字符串格式)
	WinnerIcon         *MatchRoomInfo_ToutiaoMatchData_Image         `protobuf:"bytes,27,opt,name=winner_icon,json=winnerIcon,proto3" json:"winner_icon,omitempty"`                            // 胜利方图标
	EventName          string                                        `protobuf:"bytes,28,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`                               // 赛事名称
	BoNum              string                                        `protobuf:"bytes,29,opt,name=bo_num,json=boNum,proto3" json:"bo_num,omitempty"`                                           // 比赛局数 (如 BO3)
}

func (x *MatchRoomInfo_ToutiaoMatchData) Reset() {
	*x = MatchRoomInfo_ToutiaoMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_ToutiaoMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_ToutiaoMatchData) ProtoMessage() {}

func (x *MatchRoomInfo_ToutiaoMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_ToutiaoMatchData.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_ToutiaoMatchData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 3}
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchTitle() string {
	if x != nil {
		return x.MatchTitle
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetAgainst() *MatchRoomInfo_ToutiaoMatchData_Against {
	if x != nil {
		return x.Against
	}
	return nil
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetStartedTime() string {
	if x != nil {
		return x.StartedTime
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetTeamStats() *MatchRoomInfo_ToutiaoMatchData_TeamStats {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetPlayerStats() []*MatchRoomInfo_ToutiaoMatchData_PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchGroup() string {
	if x != nil {
		return x.MatchGroup
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchRound() string {
	if x != nil {
		return x.MatchRound
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchPhaseName() string {
	if x != nil {
		return x.MatchPhaseName
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetCanSubscribe() bool {
	if x != nil {
		return x.CanSubscribe
	}
	return false
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetDisplayStatus() int32 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetBjtFormat() string {
	if x != nil {
		return x.BjtFormat
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetLocalTimeFormat() string {
	if x != nil {
		return x.LocalTimeFormat
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchStatus() int32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetMatchIdStr() string {
	if x != nil {
		return x.MatchIdStr
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetStartedTimeUnix() int64 {
	if x != nil {
		return x.StartedTimeUnix
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetLeftScoreAddition() int32 {
	if x != nil {
		return x.LeftScoreAddition
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetRightScoreAddition() int32 {
	if x != nil {
		return x.RightScoreAddition
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetWinnerId() int64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetWinnerIdStr() string {
	if x != nil {
		return x.WinnerIdStr
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetWinnerIcon() *MatchRoomInfo_ToutiaoMatchData_Image {
	if x != nil {
		return x.WinnerIcon
	}
	return nil
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData) GetBoNum() string {
	if x != nil {
		return x.BoNum
	}
	return ""
}

// Image 消息定义
type MatchRoomInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MatchRoomInfo_Image) Reset() {
	*x = MatchRoomInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_Image) ProtoMessage() {}

func (x *MatchRoomInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_Image.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 4}
}

func (x *MatchRoomInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MatchRoomInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MatchRoomInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// MatchRoomImInfo 主消息
type MatchRoomInfo_MatchRoomImInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon  *MatchRoomInfo_MatchRoomImInfo_Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`   // 即时通讯信息的图标
	Title string                               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` // 即时通讯信息的标题
}

func (x *MatchRoomInfo_MatchRoomImInfo) Reset() {
	*x = MatchRoomInfo_MatchRoomImInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchRoomImInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchRoomImInfo) ProtoMessage() {}

func (x *MatchRoomInfo_MatchRoomImInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchRoomImInfo.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchRoomImInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 5}
}

func (x *MatchRoomInfo_MatchRoomImInfo) GetIcon() *MatchRoomInfo_MatchRoomImInfo_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *MatchRoomInfo_MatchRoomImInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// MatchShareBackground 主消息
type MatchRoomInfo_MatchShareBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerticalImg   *MatchRoomInfo_MatchShareBackground_Image `protobuf:"bytes,1,opt,name=vertical_img,json=verticalImg,proto3" json:"vertical_img,omitempty"`       // 竖屏分享背景图片
	HorizontalImg *MatchRoomInfo_MatchShareBackground_Image `protobuf:"bytes,2,opt,name=horizontal_img,json=horizontalImg,proto3" json:"horizontal_img,omitempty"` // 横屏分享背景图片
}

func (x *MatchRoomInfo_MatchShareBackground) Reset() {
	*x = MatchRoomInfo_MatchShareBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchShareBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchShareBackground) ProtoMessage() {}

func (x *MatchRoomInfo_MatchShareBackground) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchShareBackground.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchShareBackground) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 6}
}

func (x *MatchRoomInfo_MatchShareBackground) GetVerticalImg() *MatchRoomInfo_MatchShareBackground_Image {
	if x != nil {
		return x.VerticalImg
	}
	return nil
}

func (x *MatchRoomInfo_MatchShareBackground) GetHorizontalImg() *MatchRoomInfo_MatchShareBackground_Image {
	if x != nil {
		return x.HorizontalImg
	}
	return nil
}

// MatchTab 消息定义
type MatchRoomInfo_MatchTabFrame_MatchTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabId    string `protobuf:"bytes,1,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`           // 标签 ID
	TabName  string `protobuf:"bytes,2,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`     // 标签名称
	TabUrl   string `protobuf:"bytes,3,opt,name=tab_url,json=tabUrl,proto3" json:"tab_url,omitempty"`        // 标签对应的 URL
	IsActive bool   `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"` // 标签是否激活
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) Reset() {
	*x = MatchRoomInfo_MatchTabFrame_MatchTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchTabFrame_MatchTab) ProtoMessage() {}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchTabFrame_MatchTab.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchTabFrame_MatchTab) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 1, 0}
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) GetTabId() string {
	if x != nil {
		return x.TabId
	}
	return ""
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) GetTabUrl() string {
	if x != nil {
		return x.TabUrl
	}
	return ""
}

func (x *MatchRoomInfo_MatchTabFrame_MatchTab) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// TitleIcon 消息定义
type MatchRoomInfo_MatchTitle_TitleIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                            // 图标的 URL
	SizeType int32  `protobuf:"varint,2,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"` // 图标尺寸类型 (例如: 小、中、大)
}

func (x *MatchRoomInfo_MatchTitle_TitleIcon) Reset() {
	*x = MatchRoomInfo_MatchTitle_TitleIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchTitle_TitleIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchTitle_TitleIcon) ProtoMessage() {}

func (x *MatchRoomInfo_MatchTitle_TitleIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchTitle_TitleIcon.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchTitle_TitleIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 2, 0}
}

func (x *MatchRoomInfo_MatchTitle_TitleIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MatchRoomInfo_MatchTitle_TitleIcon) GetSizeType() int32 {
	if x != nil {
		return x.SizeType
	}
	return 0
}

// Against 消息定义
type MatchRoomInfo_ToutiaoMatchData_Against struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTeam   string `protobuf:"bytes,1,opt,name=left_team,json=leftTeam,proto3" json:"left_team,omitempty"`        // 左队名称
	RightTeam  string `protobuf:"bytes,2,opt,name=right_team,json=rightTeam,proto3" json:"right_team,omitempty"`     // 右队名称
	LeftScore  int32  `protobuf:"varint,3,opt,name=left_score,json=leftScore,proto3" json:"left_score,omitempty"`    // 左队得分
	RightScore int32  `protobuf:"varint,4,opt,name=right_score,json=rightScore,proto3" json:"right_score,omitempty"` // 右队得分
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) Reset() {
	*x = MatchRoomInfo_ToutiaoMatchData_Against{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_ToutiaoMatchData_Against) ProtoMessage() {}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_ToutiaoMatchData_Against.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_ToutiaoMatchData_Against) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 3, 0}
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) GetLeftTeam() string {
	if x != nil {
		return x.LeftTeam
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) GetRightTeam() string {
	if x != nil {
		return x.RightTeam
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) GetLeftScore() int32 {
	if x != nil {
		return x.LeftScore
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData_Against) GetRightScore() int32 {
	if x != nil {
		return x.RightScore
	}
	return 0
}

// TeamStats 消息定义
type MatchRoomInfo_ToutiaoMatchData_TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName   string `protobuf:"bytes,1,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`        // 队伍名称
	TotalScore int32  `protobuf:"varint,2,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"` // 总得分
	Fouls      int32  `protobuf:"varint,3,opt,name=fouls,proto3" json:"fouls,omitempty"`                             // 犯规次数
}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) Reset() {
	*x = MatchRoomInfo_ToutiaoMatchData_TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_ToutiaoMatchData_TeamStats) ProtoMessage() {}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_ToutiaoMatchData_TeamStats.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_ToutiaoMatchData_TeamStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 3, 1}
}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData_TeamStats) GetFouls() int32 {
	if x != nil {
		return x.Fouls
	}
	return 0
}

// PlayerStats 消息定义
type MatchRoomInfo_ToutiaoMatchData_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"` // 球员姓名
	Points     int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`                          // 得分
	Assists    int32  `protobuf:"varint,3,opt,name=assists,proto3" json:"assists,omitempty"`                        // 助攻
	Rebounds   int32  `protobuf:"varint,4,opt,name=rebounds,proto3" json:"rebounds,omitempty"`                      // 篮板
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) Reset() {
	*x = MatchRoomInfo_ToutiaoMatchData_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_ToutiaoMatchData_PlayerStats) ProtoMessage() {}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_ToutiaoMatchData_PlayerStats.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_ToutiaoMatchData_PlayerStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 3, 2}
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData_PlayerStats) GetRebounds() int32 {
	if x != nil {
		return x.Rebounds
	}
	return 0
}

// Image 消息定义
type MatchRoomInfo_ToutiaoMatchData_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) Reset() {
	*x = MatchRoomInfo_ToutiaoMatchData_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_ToutiaoMatchData_Image) ProtoMessage() {}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_ToutiaoMatchData_Image.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_ToutiaoMatchData_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 3, 3}
}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MatchRoomInfo_ToutiaoMatchData_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type MatchRoomInfo_MatchRoomImInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) Reset() {
	*x = MatchRoomInfo_MatchRoomImInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchRoomImInfo_Image) ProtoMessage() {}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchRoomImInfo_Image.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchRoomImInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 5, 0}
}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MatchRoomInfo_MatchRoomImInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type MatchRoomInfo_MatchShareBackground_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MatchRoomInfo_MatchShareBackground_Image) Reset() {
	*x = MatchRoomInfo_MatchShareBackground_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo_MatchShareBackground_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo_MatchShareBackground_Image) ProtoMessage() {}

func (x *MatchRoomInfo_MatchShareBackground_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo_MatchShareBackground_Image.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo_MatchShareBackground_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{91, 6, 0}
}

func (x *MatchRoomInfo_MatchShareBackground_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MatchRoomInfo_MatchShareBackground_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MatchRoomInfo_MatchShareBackground_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type MultiCameraBasicInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MultiCameraBasicInfo_Image) Reset() {
	*x = MultiCameraBasicInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCameraBasicInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCameraBasicInfo_Image) ProtoMessage() {}

func (x *MultiCameraBasicInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCameraBasicInfo_Image.ProtoReflect.Descriptor instead.
func (*MultiCameraBasicInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{92, 0}
}

func (x *MultiCameraBasicInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MultiCameraBasicInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MultiCameraBasicInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// PosterData 消息定义
type SharePosterInfo_PosterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster    []*SharePosterInfo_Image `protobuf:"bytes,1,rep,name=poster,proto3" json:"poster,omitempty"`       // 海报图片列表
	Decorator []*SharePosterInfo_Image `protobuf:"bytes,2,rep,name=decorator,proto3" json:"decorator,omitempty"` // 装饰图片列表
}

func (x *SharePosterInfo_PosterData) Reset() {
	*x = SharePosterInfo_PosterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePosterInfo_PosterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePosterInfo_PosterData) ProtoMessage() {}

func (x *SharePosterInfo_PosterData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePosterInfo_PosterData.ProtoReflect.Descriptor instead.
func (*SharePosterInfo_PosterData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{93, 0}
}

func (x *SharePosterInfo_PosterData) GetPoster() []*SharePosterInfo_Image {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *SharePosterInfo_PosterData) GetDecorator() []*SharePosterInfo_Image {
	if x != nil {
		return x.Decorator
	}
	return nil
}

// Image 消息定义
type SharePosterInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *SharePosterInfo_Image) Reset() {
	*x = SharePosterInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePosterInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePosterInfo_Image) ProtoMessage() {}

func (x *SharePosterInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePosterInfo_Image.ProtoReflect.Descriptor instead.
func (*SharePosterInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{93, 1}
}

func (x *SharePosterInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SharePosterInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SharePosterInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ToutiaoMatchData 主消息
type MainCameraMatchInfo_ToutiaoMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            int64                                               `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                     // 比赛 ID
	MatchTitle         string                                              `protobuf:"bytes,2,opt,name=match_title,json=matchTitle,proto3" json:"match_title,omitempty"`                             // 比赛标题
	Against            *MainCameraMatchInfo_ToutiaoMatchData_Against       `protobuf:"bytes,3,opt,name=against,proto3" json:"against,omitempty"`                                                     // 对阵信息
	StartedTime        string                                              `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`                          // 开始时间 (格式化字符串)
	City               string                                              `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                           // 比赛城市
	VenueName          string                                              `protobuf:"bytes,6,opt,name=venue_name,json=venueName,proto3" json:"venue_name,omitempty"`                                // 场馆名称
	Referee            string                                              `protobuf:"bytes,7,opt,name=referee,proto3" json:"referee,omitempty"`                                                     // 裁判信息
	TeamStats          *MainCameraMatchInfo_ToutiaoMatchData_TeamStats     `protobuf:"bytes,8,opt,name=team_stats,json=teamStats,proto3" json:"team_stats,omitempty"`                                // 团队统计信息
	PlayerStats        []*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats `protobuf:"bytes,9,rep,name=player_stats,json=playerStats,proto3" json:"player_stats,omitempty"`                          // 球员统计信息列表
	MatchGroup         string                                              `protobuf:"bytes,10,opt,name=match_group,json=matchGroup,proto3" json:"match_group,omitempty"`                            // 比赛组别
	MatchRound         string                                              `protobuf:"bytes,11,opt,name=match_round,json=matchRound,proto3" json:"match_round,omitempty"`                            // 比赛轮次
	MatchPhaseName     string                                              `protobuf:"bytes,12,opt,name=match_phase_name,json=matchPhaseName,proto3" json:"match_phase_name,omitempty"`              // 比赛阶段名称
	CanSubscribe       bool                                                `protobuf:"varint,13,opt,name=can_subscribe,json=canSubscribe,proto3" json:"can_subscribe,omitempty"`                     // 是否可订阅
	DisplayStatus      int32                                               `protobuf:"varint,14,opt,name=display_status,json=displayStatus,proto3" json:"display_status,omitempty"`                  // 显示状态
	BjtFormat          string                                              `protobuf:"bytes,15,opt,name=bjt_format,json=bjtFormat,proto3" json:"bjt_format,omitempty"`                               // 北京时间格式
	LocalTimeFormat    string                                              `protobuf:"bytes,16,opt,name=local_time_format,json=localTimeFormat,proto3" json:"local_time_format,omitempty"`           // 本地时间格式
	LiveStatus         int32                                               `protobuf:"varint,17,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                           // 直播状态
	MatchStatus        int32                                               `protobuf:"varint,18,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`                        // 比赛状态
	MatchIdStr         string                                              `protobuf:"bytes,19,opt,name=match_id_str,json=matchIdStr,proto3" json:"match_id_str,omitempty"`                          // 比赛 ID 字符串
	StartedTimeUnix    int64                                               `protobuf:"varint,20,opt,name=started_time_unix,json=startedTimeUnix,proto3" json:"started_time_unix,omitempty"`          // 开始时间 (Unix 时间戳)
	LeftScoreAddition  int32                                               `protobuf:"varint,21,opt,name=left_score_addition,json=leftScoreAddition,proto3" json:"left_score_addition,omitempty"`    // 左侧比分加成
	RightScoreAddition int32                                               `protobuf:"varint,22,opt,name=right_score_addition,json=rightScoreAddition,proto3" json:"right_score_addition,omitempty"` // 右侧比分加成
	Duration           string                                              `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                  // 比赛时长
	EventIds           []int64                                             `protobuf:"varint,24,rep,packed,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`                          // 事件 ID 列表
	WinnerId           int64                                               `protobuf:"varint,25,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`                                 // 胜者 ID
	WinnerIdStr        string                                              `protobuf:"bytes,26,opt,name=winner_id_str,json=winnerIdStr,proto3" json:"winner_id_str,omitempty"`                       // 胜者 ID 字符串
	WinnerIcon         *MainCameraMatchInfo_ToutiaoMatchData_Image         `protobuf:"bytes,27,opt,name=winner_icon,json=winnerIcon,proto3" json:"winner_icon,omitempty"`                            // 胜者图标
	EventName          string                                              `protobuf:"bytes,28,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`                               // 事件名称
	BoNum              string                                              `protobuf:"bytes,29,opt,name=bo_num,json=boNum,proto3" json:"bo_num,omitempty"`                                           // BO (Best of) 数量
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchTitle() string {
	if x != nil {
		return x.MatchTitle
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetAgainst() *MainCameraMatchInfo_ToutiaoMatchData_Against {
	if x != nil {
		return x.Against
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetStartedTime() string {
	if x != nil {
		return x.StartedTime
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetTeamStats() *MainCameraMatchInfo_ToutiaoMatchData_TeamStats {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetPlayerStats() []*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchGroup() string {
	if x != nil {
		return x.MatchGroup
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchRound() string {
	if x != nil {
		return x.MatchRound
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchPhaseName() string {
	if x != nil {
		return x.MatchPhaseName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetCanSubscribe() bool {
	if x != nil {
		return x.CanSubscribe
	}
	return false
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetDisplayStatus() int32 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetBjtFormat() string {
	if x != nil {
		return x.BjtFormat
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetLocalTimeFormat() string {
	if x != nil {
		return x.LocalTimeFormat
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchStatus() int32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetMatchIdStr() string {
	if x != nil {
		return x.MatchIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetStartedTimeUnix() int64 {
	if x != nil {
		return x.StartedTimeUnix
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetLeftScoreAddition() int32 {
	if x != nil {
		return x.LeftScoreAddition
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetRightScoreAddition() int32 {
	if x != nil {
		return x.RightScoreAddition
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetWinnerId() int64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetWinnerIdStr() string {
	if x != nil {
		return x.WinnerIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetWinnerIcon() *MainCameraMatchInfo_ToutiaoMatchData_Image {
	if x != nil {
		return x.WinnerIcon
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData) GetBoNum() string {
	if x != nil {
		return x.BoNum
	}
	return ""
}

// LeagueInfo 主消息
type MainCameraMatchInfo_LeagueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId int64  `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"` // 联赛 ID
	CnnName  string `protobuf:"bytes,2,opt,name=cnn_name,json=cnnName,proto3" json:"cnn_name,omitempty"`     // 联赛的中文名称
	EnnName  string `protobuf:"bytes,3,opt,name=enn_name,json=ennName,proto3" json:"enn_name,omitempty"`     // 联赛的英文名称
	Season   string `protobuf:"bytes,4,opt,name=season,proto3" json:"season,omitempty"`                      // 当前赛季信息
}

func (x *MainCameraMatchInfo_LeagueInfo) Reset() {
	*x = MainCameraMatchInfo_LeagueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_LeagueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_LeagueInfo) ProtoMessage() {}

func (x *MainCameraMatchInfo_LeagueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_LeagueInfo.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_LeagueInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 1}
}

func (x *MainCameraMatchInfo_LeagueInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *MainCameraMatchInfo_LeagueInfo) GetCnnName() string {
	if x != nil {
		return x.CnnName
	}
	return ""
}

func (x *MainCameraMatchInfo_LeagueInfo) GetEnnName() string {
	if x != nil {
		return x.EnnName
	}
	return ""
}

func (x *MainCameraMatchInfo_LeagueInfo) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

// Against 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftName             string                                                                  `protobuf:"bytes,1,opt,name=left_name,json=leftName,proto3" json:"left_name,omitempty"`                                          // 左侧队伍名称
	LeftLogo             *MainCameraMatchInfo_ToutiaoMatchData_Against_Image                     `protobuf:"bytes,2,opt,name=left_logo,json=leftLogo,proto3" json:"left_logo,omitempty"`                                          // 左侧队伍标志
	LeftGoal             string                                                                  `protobuf:"bytes,3,opt,name=left_goal,json=leftGoal,proto3" json:"left_goal,omitempty"`                                          // 左侧队伍进球数（字符串形式）
	LeftPlayers          []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo              `protobuf:"bytes,4,rep,name=left_players,json=leftPlayers,proto3" json:"left_players,omitempty"`                                 // 左侧队伍球员信息列表
	LeftGoalStageDetail  *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail           `protobuf:"bytes,5,opt,name=left_goal_stage_detail,json=leftGoalStageDetail,proto3" json:"left_goal_stage_detail,omitempty"`     // 左侧队伍进球阶段详情
	RightName            string                                                                  `protobuf:"bytes,6,opt,name=right_name,json=rightName,proto3" json:"right_name,omitempty"`                                       // 右侧队伍名称
	RightLogo            *MainCameraMatchInfo_ToutiaoMatchData_Against_Image                     `protobuf:"bytes,7,opt,name=right_logo,json=rightLogo,proto3" json:"right_logo,omitempty"`                                       // 右侧队伍标志
	RightGoal            string                                                                  `protobuf:"bytes,8,opt,name=right_goal,json=rightGoal,proto3" json:"right_goal,omitempty"`                                       // 右侧队伍进球数（字符串形式）
	RightPlayers         []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo              `protobuf:"bytes,9,rep,name=right_players,json=rightPlayers,proto3" json:"right_players,omitempty"`                              // 右侧队伍球员信息列表
	RightGoalStageDetail *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail           `protobuf:"bytes,10,opt,name=right_goal_stage_detail,json=rightGoalStageDetail,proto3" json:"right_goal_stage_detail,omitempty"` // 右侧队伍进球阶段详情
	Timestamp            int64                                                                   `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                      // 时间戳
	Version              int64                                                                   `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`                                                          // 版本号
	LeftTeamId           int64                                                                   `protobuf:"varint,13,opt,name=left_team_id,json=leftTeamId,proto3" json:"left_team_id,omitempty"`                                // 左侧队伍 ID
	RightTeamId          int64                                                                   `protobuf:"varint,14,opt,name=right_team_id,json=rightTeamId,proto3" json:"right_team_id,omitempty"`                             // 右侧队伍 ID
	DiffSei2AbsSecond    int64                                                                   `protobuf:"varint,15,opt,name=diff_sei2abs_second,json=diffSei2absSecond,proto3" json:"diff_sei2abs_second,omitempty"`           // 时间差异（秒）
	FinalGoalStage       int32                                                                   `protobuf:"varint,16,opt,name=final_goal_stage,json=finalGoalStage,proto3" json:"final_goal_stage,omitempty"`                    // 最终进球阶段
	CurrentGoalStage     int32                                                                   `protobuf:"varint,17,opt,name=current_goal_stage,json=currentGoalStage,proto3" json:"current_goal_stage,omitempty"`              // 当前进球阶段
	LeftScoreAddition    int32                                                                   `protobuf:"varint,18,opt,name=left_score_addition,json=leftScoreAddition,proto3" json:"left_score_addition,omitempty"`           // 左侧队伍比分加成
	RightScoreAddition   int32                                                                   `protobuf:"varint,19,opt,name=right_score_addition,json=rightScoreAddition,proto3" json:"right_score_addition,omitempty"`        // 右侧队伍比分加成
	LeftGoalInt          int64                                                                   `protobuf:"varint,20,opt,name=left_goal_int,json=leftGoalInt,proto3" json:"left_goal_int,omitempty"`                             // 左侧队伍进球数（整数形式）
	RightGoalInt         int64                                                                   `protobuf:"varint,21,opt,name=right_goal_int,json=rightGoalInt,proto3" json:"right_goal_int,omitempty"`                          // 右侧队伍进球数（整数形式）
	LeftScoreDetail      *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail `protobuf:"bytes,22,opt,name=left_score_detail,json=leftScoreDetail,proto3" json:"left_score_detail,omitempty"`                  // 左侧队伍比分详情
	RightScoreDetail     *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail `protobuf:"bytes,23,opt,name=right_score_detail,json=rightScoreDetail,proto3" json:"right_score_detail,omitempty"`               // 右侧队伍比分详情
	BasketballStage      *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage           `protobuf:"bytes,24,opt,name=basketball_stage,json=basketballStage,proto3" json:"basketball_stage,omitempty"`                    // 篮球阶段信息
	EsportStage          *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage              `protobuf:"bytes,25,opt,name=esport_stage,json=esportStage,proto3" json:"esport_stage,omitempty"`                                // 电竞阶段信息
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftName() string {
	if x != nil {
		return x.LeftName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftLogo() *MainCameraMatchInfo_ToutiaoMatchData_Against_Image {
	if x != nil {
		return x.LeftLogo
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftGoal() string {
	if x != nil {
		return x.LeftGoal
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftPlayers() []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo {
	if x != nil {
		return x.LeftPlayers
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftGoalStageDetail() *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail {
	if x != nil {
		return x.LeftGoalStageDetail
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightName() string {
	if x != nil {
		return x.RightName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightLogo() *MainCameraMatchInfo_ToutiaoMatchData_Against_Image {
	if x != nil {
		return x.RightLogo
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightGoal() string {
	if x != nil {
		return x.RightGoal
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightPlayers() []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo {
	if x != nil {
		return x.RightPlayers
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightGoalStageDetail() *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail {
	if x != nil {
		return x.RightGoalStageDetail
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftTeamId() int64 {
	if x != nil {
		return x.LeftTeamId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightTeamId() int64 {
	if x != nil {
		return x.RightTeamId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetDiffSei2AbsSecond() int64 {
	if x != nil {
		return x.DiffSei2AbsSecond
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetFinalGoalStage() int32 {
	if x != nil {
		return x.FinalGoalStage
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetCurrentGoalStage() int32 {
	if x != nil {
		return x.CurrentGoalStage
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftScoreAddition() int32 {
	if x != nil {
		return x.LeftScoreAddition
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightScoreAddition() int32 {
	if x != nil {
		return x.RightScoreAddition
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftGoalInt() int64 {
	if x != nil {
		return x.LeftGoalInt
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightGoalInt() int64 {
	if x != nil {
		return x.RightGoalInt
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetLeftScoreDetail() *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail {
	if x != nil {
		return x.LeftScoreDetail
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetRightScoreDetail() *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail {
	if x != nil {
		return x.RightScoreDetail
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetBasketballStage() *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage {
	if x != nil {
		return x.BasketballStage
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against) GetEsportStage() *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage {
	if x != nil {
		return x.EsportStage
	}
	return nil
}

// TeamStats 主消息
type MainCameraMatchInfo_ToutiaoMatchData_TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId            int64   `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                                      // 队伍 ID
	Possession        float64 `protobuf:"fixed64,2,opt,name=possession,proto3" json:"possession,omitempty"`                                           // 控球率 (%)
	ShotOn            float64 `protobuf:"fixed64,3,opt,name=shot_on,json=shotOn,proto3" json:"shot_on,omitempty"`                                     // 射正次数
	ShotOff           float64 `protobuf:"fixed64,4,opt,name=shot_off,json=shotOff,proto3" json:"shot_off,omitempty"`                                  // 射偏次数
	FreeKick          float64 `protobuf:"fixed64,5,opt,name=free_kick,json=freeKick,proto3" json:"free_kick,omitempty"`                               // 任意球次数
	Corner            float64 `protobuf:"fixed64,6,opt,name=corner,proto3" json:"corner,omitempty"`                                                   // 角球次数
	Counter           float64 `protobuf:"fixed64,7,opt,name=counter,proto3" json:"counter,omitempty"`                                                 // 快攻次数
	Saves             float64 `protobuf:"fixed64,8,opt,name=saves,proto3" json:"saves,omitempty"`                                                     // 扑救次数
	Offside           float64 `protobuf:"fixed64,9,opt,name=offside,proto3" json:"offside,omitempty"`                                                 // 越位次数
	FoulCommit        float64 `protobuf:"fixed64,10,opt,name=foul_commit,json=foulCommit,proto3" json:"foul_commit,omitempty"`                        // 犯规次数
	YellowCards       float64 `protobuf:"fixed64,11,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`                     // 黄牌数
	RedCards          float64 `protobuf:"fixed64,12,opt,name=redCards,proto3" json:"redCards,omitempty"`                                              // 红牌数
	Pass              float64 `protobuf:"fixed64,13,opt,name=pass,proto3" json:"pass,omitempty"`                                                      // 传球次数
	KeyPass           float64 `protobuf:"fixed64,14,opt,name=key_pass,json=keyPass,proto3" json:"key_pass,omitempty"`                                 // 关键传球次数
	PassesCompleted   float64 `protobuf:"fixed64,15,opt,name=passes_completed,json=passesCompleted,proto3" json:"passes_completed,omitempty"`         // 成功传球次数
	Steal             float64 `protobuf:"fixed64,16,opt,name=steal,proto3" json:"steal,omitempty"`                                                    // 抢断次数
	Intercept         float64 `protobuf:"fixed64,17,opt,name=intercept,proto3" json:"intercept,omitempty"`                                            // 拦截次数
	Shots             float64 `protobuf:"fixed64,18,opt,name=shots,proto3" json:"shots,omitempty"`                                                    // 总射门次数
	PossessionFiveMin float64 `protobuf:"fixed64,19,opt,name=possession_five_min,json=possessionFiveMin,proto3" json:"possession_five_min,omitempty"` // 最近五分钟控球率 (%)
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_TeamStats) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_TeamStats.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_TeamStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 1}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetPossession() float64 {
	if x != nil {
		return x.Possession
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetShotOn() float64 {
	if x != nil {
		return x.ShotOn
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetShotOff() float64 {
	if x != nil {
		return x.ShotOff
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetFreeKick() float64 {
	if x != nil {
		return x.FreeKick
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetCorner() float64 {
	if x != nil {
		return x.Corner
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetCounter() float64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetSaves() float64 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetOffside() float64 {
	if x != nil {
		return x.Offside
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetFoulCommit() float64 {
	if x != nil {
		return x.FoulCommit
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetYellowCards() float64 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetRedCards() float64 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetPass() float64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetKeyPass() float64 {
	if x != nil {
		return x.KeyPass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetPassesCompleted() float64 {
	if x != nil {
		return x.PassesCompleted
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetIntercept() float64 {
	if x != nil {
		return x.Intercept
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetShots() float64 {
	if x != nil {
		return x.Shots
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_TeamStats) GetPossessionFiveMin() float64 {
	if x != nil {
		return x.PossessionFiveMin
	}
	return 0
}

// PlayerStats 主消息
type MainCameraMatchInfo_ToutiaoMatchData_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        int64   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                        // 球员 ID
	TeamId          int64   `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                              // 队伍 ID
	MinutesPlayed   float64 `protobuf:"fixed64,3,opt,name=minutes_played,json=minutesPlayed,proto3" json:"minutes_played,omitempty"`        // 比赛出场时间 (分钟)
	Goals           float64 `protobuf:"fixed64,4,opt,name=goals,proto3" json:"goals,omitempty"`                                             // 进球数
	Assists         float64 `protobuf:"fixed64,5,opt,name=assists,proto3" json:"assists,omitempty"`                                         // 助攻数
	Shots           float64 `protobuf:"fixed64,6,opt,name=shots,proto3" json:"shots,omitempty"`                                             // 射门次数
	ShotsOn         float64 `protobuf:"fixed64,7,opt,name=shots_on,json=shotsOn,proto3" json:"shots_on,omitempty"`                          // 射正次数
	YCards          float64 `protobuf:"fixed64,8,opt,name=y_cards,json=yCards,proto3" json:"y_cards,omitempty"`                             // 黄牌数
	RCards          float64 `protobuf:"fixed64,9,opt,name=r_cards,json=rCards,proto3" json:"r_cards,omitempty"`                             // 红牌数
	Offsides        float64 `protobuf:"fixed64,10,opt,name=offsides,proto3" json:"offsides,omitempty"`                                      // 越位次数
	FoulsCommitted  float64 `protobuf:"fixed64,11,opt,name=fouls_committed,json=foulsCommitted,proto3" json:"fouls_committed,omitempty"`    // 犯规次数
	OwnGoals        float64 `protobuf:"fixed64,12,opt,name=own_goals,json=ownGoals,proto3" json:"own_goals,omitempty"`                      // 乌龙球数
	Saves           float64 `protobuf:"fixed64,13,opt,name=saves,proto3" json:"saves,omitempty"`                                            // 扑救次数
	CaughtBall      float64 `protobuf:"fixed64,14,opt,name=caught_ball,json=caughtBall,proto3" json:"caught_ball,omitempty"`                // 捕捉球次数
	CleanSheets     float64 `protobuf:"fixed64,15,opt,name=clean_sheets,json=cleanSheets,proto3" json:"clean_sheets,omitempty"`             // 零封场次
	Pass            float64 `protobuf:"fixed64,16,opt,name=pass,proto3" json:"pass,omitempty"`                                              // 传球次数
	KeyPass         float64 `protobuf:"fixed64,17,opt,name=key_pass,json=keyPass,proto3" json:"key_pass,omitempty"`                         // 关键传球次数
	PassesCompleted float64 `protobuf:"fixed64,18,opt,name=passes_completed,json=passesCompleted,proto3" json:"passes_completed,omitempty"` // 成功传球次数
	Steal           float64 `protobuf:"fixed64,19,opt,name=steal,proto3" json:"steal,omitempty"`                                            // 抢断次数
	Intercept       float64 `protobuf:"fixed64,20,opt,name=intercept,proto3" json:"intercept,omitempty"`                                    // 拦截次数
	Clearances      float64 `protobuf:"fixed64,21,opt,name=clearances,proto3" json:"clearances,omitempty"`                                  // 解围次数
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_PlayerStats.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 2}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetMinutesPlayed() float64 {
	if x != nil {
		return x.MinutesPlayed
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetGoals() float64 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetAssists() float64 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetShots() float64 {
	if x != nil {
		return x.Shots
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetShotsOn() float64 {
	if x != nil {
		return x.ShotsOn
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetYCards() float64 {
	if x != nil {
		return x.YCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetRCards() float64 {
	if x != nil {
		return x.RCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetOffsides() float64 {
	if x != nil {
		return x.Offsides
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetFoulsCommitted() float64 {
	if x != nil {
		return x.FoulsCommitted
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetOwnGoals() float64 {
	if x != nil {
		return x.OwnGoals
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetSaves() float64 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetCaughtBall() float64 {
	if x != nil {
		return x.CaughtBall
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetCleanSheets() float64 {
	if x != nil {
		return x.CleanSheets
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetPass() float64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetKeyPass() float64 {
	if x != nil {
		return x.KeyPass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetPassesCompleted() float64 {
	if x != nil {
		return x.PassesCompleted
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetIntercept() float64 {
	if x != nil {
		return x.Intercept
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_PlayerStats) GetClearances() float64 {
	if x != nil {
		return x.Clearances
	}
	return 0
}

// Image 消息定义
type MainCameraMatchInfo_ToutiaoMatchData_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Image) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Image.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 3}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Image 消息定义
type MainCameraMatchInfo_ToutiaoMatchData_Against_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_Image) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_Image.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 0}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// PlayerInfo 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                                                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 球员 ID
	Name          string                                                                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                          // 球员名称
	Shirt         int32                                                                         `protobuf:"varint,3,opt,name=shirt,proto3" json:"shirt,omitempty"`                                       // 球衣号码
	Position      string                                                                        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`                                  // 球员位置
	LineupType    int32                                                                         `protobuf:"varint,5,opt,name=lineup_type,json=lineupType,proto3" json:"lineup_type,omitempty"`           // 阵容类型
	Portrait      *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image                `protobuf:"bytes,6,opt,name=portrait,proto3" json:"portrait,omitempty"`                                  // 球员头像
	LastEvent     *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo   `protobuf:"bytes,7,opt,name=last_event,json=lastEvent,proto3" json:"last_event,omitempty"`               // 上一次事件
	XAxis         float64                                                                       `protobuf:"fixed64,8,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`                         // X 坐标位置
	YAxis         float64                                                                       `protobuf:"fixed64,9,opt,name=y_axis,json=yAxis,proto3" json:"y_axis,omitempty"`                         // Y 坐标位置
	PositionNum   int32                                                                         `protobuf:"varint,10,opt,name=position_num,json=positionNum,proto3" json:"position_num,omitempty"`       // 位置编号
	PlayingTime   float64                                                                       `protobuf:"fixed64,11,opt,name=playing_time,json=playingTime,proto3" json:"playing_time,omitempty"`      // 上场时间
	PlayerStats   *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats          `protobuf:"bytes,12,opt,name=player_stats,json=playerStats,proto3" json:"player_stats,omitempty"`        // 球员统计数据
	PlayerIdStr   string                                                                        `protobuf:"bytes,13,opt,name=player_id_str,json=playerIdStr,proto3" json:"player_id_str,omitempty"`      // 球员 ID 字符串
	LastUpEvent   *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo   `protobuf:"bytes,14,opt,name=last_up_event,json=lastUpEvent,proto3" json:"last_up_event,omitempty"`      // 最近更新的事件
	EventList     []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo `protobuf:"bytes,15,rep,name=event_list,json=eventList,proto3" json:"event_list,omitempty"`              // 事件列表
	Age           int32                                                                         `protobuf:"varint,16,opt,name=age,proto3" json:"age,omitempty"`                                          // 球员年龄
	Worth         float64                                                                       `protobuf:"fixed64,17,opt,name=worth,proto3" json:"worth,omitempty"`                                     // 球员身价
	ClubName      string                                                                        `protobuf:"bytes,18,opt,name=club_name,json=clubName,proto3" json:"club_name,omitempty"`                 // 所属俱乐部名称
	SuperstarFlag bool                                                                          `protobuf:"varint,19,opt,name=superstar_flag,json=superstarFlag,proto3" json:"superstar_flag,omitempty"` // 是否为超级明星
	SuperstarImg  *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image                `protobuf:"bytes,20,opt,name=superstar_img,json=superstarImg,proto3" json:"superstar_img,omitempty"`     // 超级明星图片
	SuperstarName string                                                                        `protobuf:"bytes,21,opt,name=superstar_name,json=superstarName,proto3" json:"superstar_name,omitempty"`  // 超级明星称号
	SuperstarDesc string                                                                        `protobuf:"bytes,22,opt,name=superstar_desc,json=superstarDesc,proto3" json:"superstar_desc,omitempty"`  // 超级明星描述
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 1}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetShirt() int32 {
	if x != nil {
		return x.Shirt
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetLineupType() int32 {
	if x != nil {
		return x.LineupType
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPortrait() *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetLastEvent() *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetXAxis() float64 {
	if x != nil {
		return x.XAxis
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetYAxis() float64 {
	if x != nil {
		return x.YAxis
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPositionNum() int32 {
	if x != nil {
		return x.PositionNum
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPlayingTime() float64 {
	if x != nil {
		return x.PlayingTime
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPlayerStats() *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetPlayerIdStr() string {
	if x != nil {
		return x.PlayerIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetLastUpEvent() *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo {
	if x != nil {
		return x.LastUpEvent
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetEventList() []*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo {
	if x != nil {
		return x.EventList
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetWorth() float64 {
	if x != nil {
		return x.Worth
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetClubName() string {
	if x != nil {
		return x.ClubName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetSuperstarFlag() bool {
	if x != nil {
		return x.SuperstarFlag
	}
	return false
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetSuperstarImg() *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image {
	if x != nil {
		return x.SuperstarImg
	}
	return nil
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetSuperstarName() string {
	if x != nil {
		return x.SuperstarName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo) GetSuperstarDesc() string {
	if x != nil {
		return x.SuperstarDesc
	}
	return ""
}

// GoalStageDetail 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstHalfGoal  string `protobuf:"bytes,1,opt,name=first_half_goal,json=firstHalfGoal,proto3" json:"first_half_goal,omitempty"`    // 上半场进球数
	SecondHalfGoal string `protobuf:"bytes,2,opt,name=second_half_goal,json=secondHalfGoal,proto3" json:"second_half_goal,omitempty"` // 下半场进球数
	Overtime       string `protobuf:"bytes,3,opt,name=overtime,proto3" json:"overtime,omitempty"`                                     // 加时赛进球数
	Shots          string `protobuf:"bytes,4,opt,name=shots,proto3" json:"shots,omitempty"`                                           // 射门次数
	Total          string `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`                                           // 总进球数
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 2}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) GetFirstHalfGoal() string {
	if x != nil {
		return x.FirstHalfGoal
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) GetSecondHalfGoal() string {
	if x != nil {
		return x.SecondHalfGoal
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) GetOvertime() string {
	if x != nil {
		return x.Overtime
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) GetShots() string {
	if x != nil {
		return x.Shots
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

// BasketBallGoalStageDetail 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstPeriod  int32 `protobuf:"varint,1,opt,name=first_period,json=firstPeriod,proto3" json:"first_period,omitempty"`    // 第一节得分
	SecondPeriod int32 `protobuf:"varint,2,opt,name=second_period,json=secondPeriod,proto3" json:"second_period,omitempty"` // 第二节得分
	ThirdPeriod  int32 `protobuf:"varint,3,opt,name=third_period,json=thirdPeriod,proto3" json:"third_period,omitempty"`    // 第三节得分
	ForthPeriod  int32 `protobuf:"varint,4,opt,name=forth_period,json=forthPeriod,proto3" json:"forth_period,omitempty"`    // 第四节得分
	Overtime     int32 `protobuf:"varint,5,opt,name=overtime,proto3" json:"overtime,omitempty"`                             // 加时赛得分
	Total        int32 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`                                   // 总得分
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 3}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetFirstPeriod() int32 {
	if x != nil {
		return x.FirstPeriod
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetSecondPeriod() int32 {
	if x != nil {
		return x.SecondPeriod
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetThirdPeriod() int32 {
	if x != nil {
		return x.ThirdPeriod
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetForthPeriod() int32 {
	if x != nil {
		return x.ForthPeriod
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetOvertime() int32 {
	if x != nil {
		return x.Overtime
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// BasketballStage 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStage int32 `protobuf:"varint,1,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"` // 当前阶段
	FinalStage   int32 `protobuf:"varint,2,opt,name=final_stage,json=finalStage,proto3" json:"final_stage,omitempty"`       // 最终阶段
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 4}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage) GetFinalStage() int32 {
	if x != nil {
		return x.FinalStage
	}
	return 0
}

// ESportsStage 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStage int32 `protobuf:"varint,1,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"` // 当前阶段
	FinalStage   int32 `protobuf:"varint,2,opt,name=final_stage,json=finalStage,proto3" json:"final_stage,omitempty"`       // 最终阶段
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 5}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage) GetFinalStage() int32 {
	if x != nil {
		return x.FinalStage
	}
	return 0
}

// Image 消息定义
type MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 1, 0}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// PlayByPlayItemInfo 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                     // 事件时间戳
	PlayerId       int64   `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                       // 球员 ID
	RefPlayerId    int64   `protobuf:"varint,3,opt,name=ref_player_id,json=refPlayerId,proto3" json:"ref_player_id,omitempty"`            // 参考球员 ID
	IncidentType   int32   `protobuf:"varint,4,opt,name=incident_type,json=incidentType,proto3" json:"incident_type,omitempty"`           // 事件类型
	Elapsed        float64 `protobuf:"fixed64,5,opt,name=elapsed,proto3" json:"elapsed,omitempty"`                                        // 事件经过时间
	ElapsedPlus    float64 `protobuf:"fixed64,6,opt,name=elapsed_plus,json=elapsedPlus,proto3" json:"elapsed_plus,omitempty"`             // 事件额外经过时间
	PlayerName     string  `protobuf:"bytes,7,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`                  // 球员名称
	RefPlayerName  string  `protobuf:"bytes,8,opt,name=ref_player_name,json=refPlayerName,proto3" json:"ref_player_name,omitempty"`       // 参考球员名称
	PlayerIdStr    string  `protobuf:"bytes,9,opt,name=player_id_str,json=playerIdStr,proto3" json:"player_id_str,omitempty"`             // 球员 ID 字符串
	RefPlayerIdStr string  `protobuf:"bytes,10,opt,name=ref_player_id_str,json=refPlayerIdStr,proto3" json:"ref_player_id_str,omitempty"` // 参考球员 ID 字符串
	StartTimePts   int64   `protobuf:"varint,11,opt,name=start_time_pts,json=startTimePts,proto3" json:"start_time_pts,omitempty"`        // 开始时间 PTS
	EndTimePts     int64   `protobuf:"varint,12,opt,name=end_time_pts,json=endTimePts,proto3" json:"end_time_pts,omitempty"`              // 结束时间 PTS
	StartTimeSei   int64   `protobuf:"varint,13,opt,name=start_time_sei,json=startTimeSei,proto3" json:"start_time_sei,omitempty"`        // 开始时间 SEI
	EndTimeSei     int64   `protobuf:"varint,14,opt,name=end_time_sei,json=endTimeSei,proto3" json:"end_time_sei,omitempty"`              // 结束时间 SEI
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 1, 1}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetRefPlayerId() int64 {
	if x != nil {
		return x.RefPlayerId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetIncidentType() int32 {
	if x != nil {
		return x.IncidentType
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetElapsed() float64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetElapsedPlus() float64 {
	if x != nil {
		return x.ElapsedPlus
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetRefPlayerName() string {
	if x != nil {
		return x.RefPlayerName
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetPlayerIdStr() string {
	if x != nil {
		return x.PlayerIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetRefPlayerIdStr() string {
	if x != nil {
		return x.RefPlayerIdStr
	}
	return ""
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetStartTimePts() int64 {
	if x != nil {
		return x.StartTimePts
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetEndTimePts() int64 {
	if x != nil {
		return x.EndTimePts
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetStartTimeSei() int64 {
	if x != nil {
		return x.StartTimeSei
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo) GetEndTimeSei() int64 {
	if x != nil {
		return x.EndTimeSei
	}
	return 0
}

// PlayerStats 主消息
type MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        int64   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                        // 球员 ID
	TeamId          int64   `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                              // 队伍 ID
	MinutesPlayed   float64 `protobuf:"fixed64,3,opt,name=minutes_played,json=minutesPlayed,proto3" json:"minutes_played,omitempty"`        // 比赛出场时间 (分钟)
	Goals           float64 `protobuf:"fixed64,4,opt,name=goals,proto3" json:"goals,omitempty"`                                             // 进球数
	Assists         float64 `protobuf:"fixed64,5,opt,name=assists,proto3" json:"assists,omitempty"`                                         // 助攻数
	Shots           float64 `protobuf:"fixed64,6,opt,name=shots,proto3" json:"shots,omitempty"`                                             // 射门次数
	ShotsOn         float64 `protobuf:"fixed64,7,opt,name=shots_on,json=shotsOn,proto3" json:"shots_on,omitempty"`                          // 射正次数
	YCards          float64 `protobuf:"fixed64,8,opt,name=y_cards,json=yCards,proto3" json:"y_cards,omitempty"`                             // 黄牌数
	RCards          float64 `protobuf:"fixed64,9,opt,name=r_cards,json=rCards,proto3" json:"r_cards,omitempty"`                             // 红牌数
	Offsides        float64 `protobuf:"fixed64,10,opt,name=offsides,proto3" json:"offsides,omitempty"`                                      // 越位次数
	FoulsCommitted  float64 `protobuf:"fixed64,11,opt,name=fouls_committed,json=foulsCommitted,proto3" json:"fouls_committed,omitempty"`    // 犯规次数
	OwnGoals        float64 `protobuf:"fixed64,12,opt,name=own_goals,json=ownGoals,proto3" json:"own_goals,omitempty"`                      // 乌龙球数
	Saves           float64 `protobuf:"fixed64,13,opt,name=saves,proto3" json:"saves,omitempty"`                                            // 扑救次数
	CaughtBall      float64 `protobuf:"fixed64,14,opt,name=caught_ball,json=caughtBall,proto3" json:"caught_ball,omitempty"`                // 捕捉球次数
	CleanSheets     float64 `protobuf:"fixed64,15,opt,name=clean_sheets,json=cleanSheets,proto3" json:"clean_sheets,omitempty"`             // 零封场次
	Pass            float64 `protobuf:"fixed64,16,opt,name=pass,proto3" json:"pass,omitempty"`                                              // 传球次数
	KeyPass         float64 `protobuf:"fixed64,17,opt,name=key_pass,json=keyPass,proto3" json:"key_pass,omitempty"`                         // 关键传球次数
	PassesCompleted float64 `protobuf:"fixed64,18,opt,name=passes_completed,json=passesCompleted,proto3" json:"passes_completed,omitempty"` // 成功传球次数
	Steal           float64 `protobuf:"fixed64,19,opt,name=steal,proto3" json:"steal,omitempty"`                                            // 抢断次数
	Intercept       float64 `protobuf:"fixed64,20,opt,name=intercept,proto3" json:"intercept,omitempty"`                                    // 拦截次数
	Clearances      float64 `protobuf:"fixed64,21,opt,name=clearances,proto3" json:"clearances,omitempty"`                                  // 解围次数
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) Reset() {
	*x = MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) ProtoMessage() {}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats.ProtoReflect.Descriptor instead.
func (*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{97, 0, 0, 1, 2}
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetMinutesPlayed() float64 {
	if x != nil {
		return x.MinutesPlayed
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetGoals() float64 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetAssists() float64 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetShots() float64 {
	if x != nil {
		return x.Shots
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetShotsOn() float64 {
	if x != nil {
		return x.ShotsOn
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetYCards() float64 {
	if x != nil {
		return x.YCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetRCards() float64 {
	if x != nil {
		return x.RCards
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetOffsides() float64 {
	if x != nil {
		return x.Offsides
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetFoulsCommitted() float64 {
	if x != nil {
		return x.FoulsCommitted
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetOwnGoals() float64 {
	if x != nil {
		return x.OwnGoals
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetSaves() float64 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetCaughtBall() float64 {
	if x != nil {
		return x.CaughtBall
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetCleanSheets() float64 {
	if x != nil {
		return x.CleanSheets
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetPass() float64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetKeyPass() float64 {
	if x != nil {
		return x.KeyPass
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetPassesCompleted() float64 {
	if x != nil {
		return x.PassesCompleted
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetIntercept() float64 {
	if x != nil {
		return x.Intercept
	}
	return 0
}

func (x *MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats) GetClearances() float64 {
	if x != nil {
		return x.Clearances
	}
	return 0
}

// TabItem 子消息
type MultiTab_TabItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabType        int64            `protobuf:"varint,1,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"`                            // 标签类型
	TabName        string           `protobuf:"bytes,2,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`                             // 标签名称
	JumpLink       string           `protobuf:"bytes,3,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`                          // 标签跳转链接
	TabId          int64            `protobuf:"varint,4,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`                                  // 标签 ID
	TabShowType    int32            `protobuf:"varint,5,opt,name=tab_show_type,json=tabShowType,proto3" json:"tab_show_type,omitempty"`              // 标签显示类型
	HideCameraIds  []int64          `protobuf:"varint,6,rep,packed,name=hide_camera_ids,json=hideCameraIds,proto3" json:"hide_camera_ids,omitempty"` // 隐藏的摄像头 ID 列表
	Bubble         *MultiTab_Bubble `protobuf:"bytes,7,opt,name=bubble,proto3" json:"bubble,omitempty"`                                              // 气泡信息
	DisablePreload int32            `protobuf:"varint,8,opt,name=disable_preload,json=disablePreload,proto3" json:"disable_preload,omitempty"`       // 是否禁用预加载
	Color          string           `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`                                                // 标签颜色
	ExpireTime     int64            `protobuf:"varint,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`                  // 标签过期时间 (Unix 时间戳)
	Scene          []int32          `protobuf:"varint,11,rep,packed,name=scene,proto3" json:"scene,omitempty"`                                       // 适用场景列表
}

func (x *MultiTab_TabItem) Reset() {
	*x = MultiTab_TabItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTab_TabItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTab_TabItem) ProtoMessage() {}

func (x *MultiTab_TabItem) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTab_TabItem.ProtoReflect.Descriptor instead.
func (*MultiTab_TabItem) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{98, 0}
}

func (x *MultiTab_TabItem) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *MultiTab_TabItem) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *MultiTab_TabItem) GetJumpLink() string {
	if x != nil {
		return x.JumpLink
	}
	return ""
}

func (x *MultiTab_TabItem) GetTabId() int64 {
	if x != nil {
		return x.TabId
	}
	return 0
}

func (x *MultiTab_TabItem) GetTabShowType() int32 {
	if x != nil {
		return x.TabShowType
	}
	return 0
}

func (x *MultiTab_TabItem) GetHideCameraIds() []int64 {
	if x != nil {
		return x.HideCameraIds
	}
	return nil
}

func (x *MultiTab_TabItem) GetBubble() *MultiTab_Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *MultiTab_TabItem) GetDisablePreload() int32 {
	if x != nil {
		return x.DisablePreload
	}
	return 0
}

func (x *MultiTab_TabItem) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MultiTab_TabItem) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MultiTab_TabItem) GetScene() []int32 {
	if x != nil {
		return x.Scene
	}
	return nil
}

// Bubble 子消息
type MultiTab_Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch     int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                          // 气泡开关
	BubbleId   int64  `protobuf:"varint,2,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`      // 气泡 ID
	Duration   int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                      // 气泡持续时间
	Delay      int64  `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`                            // 气泡延迟时间
	BubbleText string `protobuf:"bytes,5,opt,name=bubble_text,json=bubbleText,proto3" json:"bubble_text,omitempty"` // 气泡文字
}

func (x *MultiTab_Bubble) Reset() {
	*x = MultiTab_Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTab_Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTab_Bubble) ProtoMessage() {}

func (x *MultiTab_Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTab_Bubble.ProtoReflect.Descriptor instead.
func (*MultiTab_Bubble) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{98, 1}
}

func (x *MultiTab_Bubble) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *MultiTab_Bubble) GetBubbleId() int64 {
	if x != nil {
		return x.BubbleId
	}
	return 0
}

func (x *MultiTab_Bubble) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MultiTab_Bubble) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *MultiTab_Bubble) GetBubbleText() string {
	if x != nil {
		return x.BubbleText
	}
	return ""
}

// ResourceConfigure 消息定义
type BusinessConfigure_ResourceConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                 // 资源 URL
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 资源描述
	Priority    int32  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`      // 优先级
}

func (x *BusinessConfigure_ResourceConfigure) Reset() {
	*x = BusinessConfigure_ResourceConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessConfigure_ResourceConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessConfigure_ResourceConfigure) ProtoMessage() {}

func (x *BusinessConfigure_ResourceConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessConfigure_ResourceConfigure.ProtoReflect.Descriptor instead.
func (*BusinessConfigure_ResourceConfigure) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{99, 0}
}

func (x *BusinessConfigure_ResourceConfigure) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BusinessConfigure_ResourceConfigure) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BusinessConfigure_ResourceConfigure) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Image 消息定义
type VSPremiereToast_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *VSPremiereToast_Image) Reset() {
	*x = VSPremiereToast_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSPremiereToast_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSPremiereToast_Image) ProtoMessage() {}

func (x *VSPremiereToast_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSPremiereToast_Image.ProtoReflect.Descriptor instead.
func (*VSPremiereToast_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{100, 0}
}

func (x *VSPremiereToast_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VSPremiereToast_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VSPremiereToast_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// TicketData 主消息
type PaidLiveData_TicketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketSessionId              int64                                                  `protobuf:"varint,1,opt,name=ticket_session_id,json=ticketSessionId,proto3" json:"ticket_session_id,omitempty"`                                                                      // 门票会话 ID
	Title                        string                                                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                    // 标题
	SubTitle                     string                                                 `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                                                                              // 副标题
	Price                        string                                                 `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`                                                                                                                    // 价格
	RawReleaseTime               int64                                                  `protobuf:"varint,5,opt,name=raw_release_time,json=rawReleaseTime,proto3" json:"raw_release_time,omitempty"`                                                                         // 原始发布时间
	Tags                         []string                                               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                                                      // 标签列表
	TicketExplanationCardJumpUrl string                                                 `protobuf:"bytes,7,opt,name=ticket_explanation_card_jump_url,json=ticketExplanationCardJumpUrl,proto3" json:"ticket_explanation_card_jump_url,omitempty"`                            // 票务说明卡片跳转 URL
	TicketPanelJumpUrl           string                                                 `protobuf:"bytes,8,opt,name=ticket_panel_jump_url,json=ticketPanelJumpUrl,proto3" json:"ticket_panel_jump_url,omitempty"`                                                            // 票务面板跳转 URL
	TicketSessionIdStr           string                                                 `protobuf:"bytes,9,opt,name=ticket_session_id_str,json=ticketSessionIdStr,proto3" json:"ticket_session_id_str,omitempty"`                                                            // 门票会话 ID 字符串
	SellStatus                   int32                                                  `protobuf:"varint,10,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`                                                                                      // 销售状态
	CoverUri                     string                                                 `protobuf:"bytes,11,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`                                                                                             // 封面 URI
	CoverUriVertical             string                                                 `protobuf:"bytes,12,opt,name=cover_uri_vertical,json=coverUriVertical,proto3" json:"cover_uri_vertical,omitempty"`                                                                   // 垂直封面 URI
	Introduction                 string                                                 `protobuf:"bytes,13,opt,name=Introduction,proto3" json:"Introduction,omitempty"`                                                                                                     // 简介
	RawShowStartTime             int64                                                  `protobuf:"varint,14,opt,name=raw_show_start_time,json=rawShowStartTime,proto3" json:"raw_show_start_time,omitempty"`                                                                // 原始展示开始时间
	RawShowEndTime               int64                                                  `protobuf:"varint,15,opt,name=raw_show_end_time,json=rawShowEndTime,proto3" json:"raw_show_end_time,omitempty"`                                                                      // 原始展示结束时间
	RawSaleStartTime             int64                                                  `protobuf:"varint,16,opt,name=raw_sale_start_time,json=rawSaleStartTime,proto3" json:"raw_sale_start_time,omitempty"`                                                                // 原始销售开始时间
	RawSaleEndTime               int64                                                  `protobuf:"varint,17,opt,name=raw_sale_end_time,json=rawSaleEndTime,proto3" json:"raw_sale_end_time,omitempty"`                                                                      // 原始销售结束时间
	RawRefundDeadline            int64                                                  `protobuf:"varint,18,opt,name=raw_refund_deadline,json=rawRefundDeadline,proto3" json:"raw_refund_deadline,omitempty"`                                                               // 原始退款截止时间
	RawEarlyBirdStartTime        int64                                                  `protobuf:"varint,19,opt,name=raw_early_bird_start_time,json=rawEarlyBirdStartTime,proto3" json:"raw_early_bird_start_time,omitempty"`                                               // 原始早鸟开始时间
	RawEarlyBirdEndTime          int64                                                  `protobuf:"varint,20,opt,name=raw_early_bird_end_time,json=rawEarlyBirdEndTime,proto3" json:"raw_early_bird_end_time,omitempty"`                                                     // 原始早鸟结束时间
	RawFullPriceStartTime        int64                                                  `protobuf:"varint,21,opt,name=raw_full_price_start_time,json=rawFullPriceStartTime,proto3" json:"raw_full_price_start_time,omitempty"`                                               // 原始全价开始时间
	RawFullPriceEndTime          int64                                                  `protobuf:"varint,22,opt,name=raw_full_price_end_time,json=rawFullPriceEndTime,proto3" json:"raw_full_price_end_time,omitempty"`                                                     // 原始全价结束时间
	RawActivityStartTime         int64                                                  `protobuf:"varint,23,opt,name=raw_activity_start_time,json=rawActivityStartTime,proto3" json:"raw_activity_start_time,omitempty"`                                                    // 原始活动开始时间
	RawActivityEndTime           int64                                                  `protobuf:"varint,24,opt,name=raw_activity_end_time,json=rawActivityEndTime,proto3" json:"raw_activity_end_time,omitempty"`                                                          // 原始活动结束时间
	EarlyBirdPrice               string                                                 `protobuf:"bytes,25,opt,name=early_bird_price,json=earlyBirdPrice,proto3" json:"early_bird_price,omitempty"`                                                                         // 早鸟价格
	ActivityPrice                string                                                 `protobuf:"bytes,26,opt,name=activity_price,json=activityPrice,proto3" json:"activity_price,omitempty"`                                                                              // 活动价格
	Status                       int32                                                  `protobuf:"varint,27,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                // 状态
	ShowStartTime                string                                                 `protobuf:"bytes,28,opt,name=show_start_time,json=showStartTime,proto3" json:"show_start_time,omitempty"`                                                                            // 展示开始时间
	ShowEndTime                  string                                                 `protobuf:"bytes,29,opt,name=show_end_time,json=showEndTime,proto3" json:"show_end_time,omitempty"`                                                                                  // 展示结束时间
	SaleStartTime                string                                                 `protobuf:"bytes,30,opt,name=sale_start_time,json=saleStartTime,proto3" json:"sale_start_time,omitempty"`                                                                            // 销售开始时间
	SaleEndTime                  string                                                 `protobuf:"bytes,31,opt,name=sale_end_time,json=saleEndTime,proto3" json:"sale_end_time,omitempty"`                                                                                  // 销售结束时间
	EarlyBirdStartTime           string                                                 `protobuf:"bytes,32,opt,name=early_bird_start_time,json=earlyBirdStartTime,proto3" json:"early_bird_start_time,omitempty"`                                                           // 早鸟开始时间
	EarlyBirdEndTime             string                                                 `protobuf:"bytes,33,opt,name=early_bird_end_time,json=earlyBirdEndTime,proto3" json:"early_bird_end_time,omitempty"`                                                                 // 早鸟结束时间
	FullPriceStartTime           string                                                 `protobuf:"bytes,34,opt,name=full_price_start_time,json=fullPriceStartTime,proto3" json:"full_price_start_time,omitempty"`                                                           // 全价开始时间
	FullPriceEndTime             string                                                 `protobuf:"bytes,35,opt,name=full_price_end_time,json=fullPriceEndTime,proto3" json:"full_price_end_time,omitempty"`                                                                 // 全价结束时间
	ActivityStartTime            string                                                 `protobuf:"bytes,36,opt,name=activity_start_time,json=activityStartTime,proto3" json:"activity_start_time,omitempty"`                                                                // 活动开始时间
	ActivityEndTime              string                                                 `protobuf:"bytes,37,opt,name=activity_end_time,json=activityEndTime,proto3" json:"activity_end_time,omitempty"`                                                                      // 活动结束时间
	RefundDeadline               string                                                 `protobuf:"bytes,38,opt,name=refund_deadline,json=refundDeadline,proto3" json:"refund_deadline,omitempty"`                                                                           // 退款截止时间
	ActivityTitle                string                                                 `protobuf:"bytes,39,opt,name=activity_title,json=activityTitle,proto3" json:"activity_title,omitempty"`                                                                              // 活动标题
	ActivityJumpUrl              string                                                 `protobuf:"bytes,40,opt,name=activity_jump_url,json=activityJumpUrl,proto3" json:"activity_jump_url,omitempty"`                                                                      // 活动跳转 URL
	ReleaseTime                  string                                                 `protobuf:"bytes,41,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`                                                                                    // 发布时间
	TicketExplanationCardStatus  int32                                                  `protobuf:"varint,42,opt,name=ticket_explanation_card_status,json=ticketExplanationCardStatus,proto3" json:"ticket_explanation_card_status,omitempty"`                               // 票务说明卡片状态
	LastDuration                 int32                                                  `protobuf:"varint,43,opt,name=last_duration,json=lastDuration,proto3" json:"last_duration,omitempty"`                                                                                // 最后时长
	PaidConversionJumpUrl        string                                                 `protobuf:"bytes,44,opt,name=paid_conversion_jump_url,json=paidConversionJumpUrl,proto3" json:"paid_conversion_jump_url,omitempty"`                                                  // 付费转换跳转 URL
	TicketPanelSixJumpUrl        string                                                 `protobuf:"bytes,45,opt,name=ticket_panel_six_jump_url,json=ticketPanelSixJumpUrl,proto3" json:"ticket_panel_six_jump_url,omitempty"`                                                // 票务面板六跳转 URL
	TicketPanelNineJumpUrl       string                                                 `protobuf:"bytes,46,opt,name=ticket_panel_nine_jump_url,json=ticketPanelNineJumpUrl,proto3" json:"ticket_panel_nine_jump_url,omitempty"`                                             // 票务面板九跳转 URL
	Cover                        *Image                                                 `protobuf:"bytes,47,opt,name=cover,proto3" json:"cover,omitempty"`                                                                                                                   // 封面图片
	IosPayType                   int32                                                  `protobuf:"varint,48,opt,name=ios_pay_type,json=iosPayType,proto3" json:"ios_pay_type,omitempty"`                                                                                    // iOS 支付类型
	AndroidPayType               int32                                                  `protobuf:"varint,49,opt,name=android_pay_type,json=androidPayType,proto3" json:"android_pay_type,omitempty"`                                                                        // Android 支付类型
	IosPayPrice                  int32                                                  `protobuf:"varint,50,opt,name=ios_pay_price,json=iosPayPrice,proto3" json:"ios_pay_price,omitempty"`                                                                                 // iOS 支付价格
	AndroidPayPrice              int32                                                  `protobuf:"varint,51,opt,name=android_pay_price,json=androidPayPrice,proto3" json:"android_pay_price,omitempty"`                                                                     // Android 支付价格
	RightDuration                int32                                                  `protobuf:"varint,52,opt,name=right_duration,json=rightDuration,proto3" json:"right_duration,omitempty"`                                                                             // 权利时长
	FriendPriceInfo              *PaidLiveData_TicketData_PaidLivePriceInfo             `protobuf:"bytes,53,opt,name=friend_priceInfo,json=friendPriceInfo,proto3" json:"friend_priceInfo,omitempty"`                                                                        // 朋友价格信息
	HelpingPriceInfo             *PaidLiveData_TicketData_PaidLivePriceInfo             `protobuf:"bytes,54,opt,name=helping_priceInfo,json=helpingPriceInfo,proto3" json:"helping_priceInfo,omitempty"`                                                                     // 帮助价格信息
	PriceInfo                    map[int64]*PaidLiveData_TicketData_PaidLivePriceInfoV2 `protobuf:"bytes,55,rep,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 价格信息映射
	TicketAnchorId               int64                                                  `protobuf:"varint,56,opt,name=ticket_anchor_id,json=ticketAnchorId,proto3" json:"ticket_anchor_id,omitempty"`                                                                        // 门票主播 ID
	Extra                        string                                                 `protobuf:"bytes,57,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                                   // 额外信息
	SkuDetails                   []*PaidLiveData_TicketData_TicketSkuDetail             `protobuf:"bytes,58,rep,name=sku_details,json=skuDetails,proto3" json:"sku_details,omitempty"`                                                                                       // SKU 详情列表
	FinalPriceInfo               *PaidLiveData_TicketData_PaidLivePriceInfoV2           `protobuf:"bytes,59,opt,name=final_price_info,json=finalPriceInfo,proto3" json:"final_price_info,omitempty"`                                                                         // 最终价格信息
	ParentTicketSessionId        int64                                                  `protobuf:"varint,60,opt,name=parent_ticket_session_id,json=parentTicketSessionId,proto3" json:"parent_ticket_session_id,omitempty"`                                                 // 父门票会话 ID
	ParentTicketSessionIdStr     string                                                 `protobuf:"bytes,61,opt,name=parent_ticket_session_id_str,json=parentTicketSessionIdStr,proto3" json:"parent_ticket_session_id_str,omitempty"`                                       // 父门票会话 ID 字符串
	TicketCategory               int32                                                  `protobuf:"varint,62,opt,name=ticket_category,json=ticketCategory,proto3" json:"ticket_category,omitempty"`                                                                          // 门票类别
	PrepayCashierJumpUrl         string                                                 `protobuf:"bytes,63,opt,name=prepay_cashier_jump_url,json=prepayCashierJumpUrl,proto3" json:"prepay_cashier_jump_url,omitempty"`                                                     // 预付收银跳转 URL
	SubscribeMemberMark          *PaidLiveData_TicketData_SubscribeMemberMark           `protobuf:"bytes,64,opt,name=subscribe_member_mark,json=subscribeMemberMark,proto3" json:"subscribe_member_mark,omitempty"`                                                          // 订阅会员标记
	TicketAnchorOpenId           string                                                 `protobuf:"bytes,5000,opt,name=ticket_anchor_open_id,json=ticketAnchorOpenId,proto3" json:"ticket_anchor_open_id,omitempty"`                                                         // 门票主播开放 ID
}

func (x *PaidLiveData_TicketData) Reset() {
	*x = PaidLiveData_TicketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_TicketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_TicketData) ProtoMessage() {}

func (x *PaidLiveData_TicketData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_TicketData.ProtoReflect.Descriptor instead.
func (*PaidLiveData_TicketData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 2}
}

func (x *PaidLiveData_TicketData) GetTicketSessionId() int64 {
	if x != nil {
		return x.TicketSessionId
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetRawReleaseTime() int64 {
	if x != nil {
		return x.RawReleaseTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetTicketExplanationCardJumpUrl() string {
	if x != nil {
		return x.TicketExplanationCardJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketPanelJumpUrl() string {
	if x != nil {
		return x.TicketPanelJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketSessionIdStr() string {
	if x != nil {
		return x.TicketSessionIdStr
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSellStatus() int32 {
	if x != nil {
		return x.SellStatus
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetCoverUriVertical() string {
	if x != nil {
		return x.CoverUriVertical
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetRawShowStartTime() int64 {
	if x != nil {
		return x.RawShowStartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawShowEndTime() int64 {
	if x != nil {
		return x.RawShowEndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawSaleStartTime() int64 {
	if x != nil {
		return x.RawSaleStartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawSaleEndTime() int64 {
	if x != nil {
		return x.RawSaleEndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawRefundDeadline() int64 {
	if x != nil {
		return x.RawRefundDeadline
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawEarlyBirdStartTime() int64 {
	if x != nil {
		return x.RawEarlyBirdStartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawEarlyBirdEndTime() int64 {
	if x != nil {
		return x.RawEarlyBirdEndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawFullPriceStartTime() int64 {
	if x != nil {
		return x.RawFullPriceStartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawFullPriceEndTime() int64 {
	if x != nil {
		return x.RawFullPriceEndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawActivityStartTime() int64 {
	if x != nil {
		return x.RawActivityStartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRawActivityEndTime() int64 {
	if x != nil {
		return x.RawActivityEndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetEarlyBirdPrice() string {
	if x != nil {
		return x.EarlyBirdPrice
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetActivityPrice() string {
	if x != nil {
		return x.ActivityPrice
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetShowStartTime() string {
	if x != nil {
		return x.ShowStartTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetShowEndTime() string {
	if x != nil {
		return x.ShowEndTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSaleStartTime() string {
	if x != nil {
		return x.SaleStartTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSaleEndTime() string {
	if x != nil {
		return x.SaleEndTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetEarlyBirdStartTime() string {
	if x != nil {
		return x.EarlyBirdStartTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetEarlyBirdEndTime() string {
	if x != nil {
		return x.EarlyBirdEndTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetFullPriceStartTime() string {
	if x != nil {
		return x.FullPriceStartTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetFullPriceEndTime() string {
	if x != nil {
		return x.FullPriceEndTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetActivityStartTime() string {
	if x != nil {
		return x.ActivityStartTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetActivityEndTime() string {
	if x != nil {
		return x.ActivityEndTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetRefundDeadline() string {
	if x != nil {
		return x.RefundDeadline
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetActivityTitle() string {
	if x != nil {
		return x.ActivityTitle
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetActivityJumpUrl() string {
	if x != nil {
		return x.ActivityJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketExplanationCardStatus() int32 {
	if x != nil {
		return x.TicketExplanationCardStatus
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetLastDuration() int32 {
	if x != nil {
		return x.LastDuration
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetPaidConversionJumpUrl() string {
	if x != nil {
		return x.PaidConversionJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketPanelSixJumpUrl() string {
	if x != nil {
		return x.TicketPanelSixJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketPanelNineJumpUrl() string {
	if x != nil {
		return x.TicketPanelNineJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetIosPayType() int32 {
	if x != nil {
		return x.IosPayType
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetAndroidPayType() int32 {
	if x != nil {
		return x.AndroidPayType
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetIosPayPrice() int32 {
	if x != nil {
		return x.IosPayPrice
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetAndroidPayPrice() int32 {
	if x != nil {
		return x.AndroidPayPrice
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetRightDuration() int32 {
	if x != nil {
		return x.RightDuration
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetFriendPriceInfo() *PaidLiveData_TicketData_PaidLivePriceInfo {
	if x != nil {
		return x.FriendPriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetHelpingPriceInfo() *PaidLiveData_TicketData_PaidLivePriceInfo {
	if x != nil {
		return x.HelpingPriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetPriceInfo() map[int64]*PaidLiveData_TicketData_PaidLivePriceInfoV2 {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetTicketAnchorId() int64 {
	if x != nil {
		return x.TicketAnchorId
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSkuDetails() []*PaidLiveData_TicketData_TicketSkuDetail {
	if x != nil {
		return x.SkuDetails
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetFinalPriceInfo() *PaidLiveData_TicketData_PaidLivePriceInfoV2 {
	if x != nil {
		return x.FinalPriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetParentTicketSessionId() int64 {
	if x != nil {
		return x.ParentTicketSessionId
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetParentTicketSessionIdStr() string {
	if x != nil {
		return x.ParentTicketSessionIdStr
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetTicketCategory() int32 {
	if x != nil {
		return x.TicketCategory
	}
	return 0
}

func (x *PaidLiveData_TicketData) GetPrepayCashierJumpUrl() string {
	if x != nil {
		return x.PrepayCashierJumpUrl
	}
	return ""
}

func (x *PaidLiveData_TicketData) GetSubscribeMemberMark() *PaidLiveData_TicketData_SubscribeMemberMark {
	if x != nil {
		return x.SubscribeMemberMark
	}
	return nil
}

func (x *PaidLiveData_TicketData) GetTicketAnchorOpenId() string {
	if x != nil {
		return x.TicketAnchorOpenId
	}
	return ""
}

// OrderData 主消息
type PaidLiveData_OrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单 ID，唯一标识一个订单
}

func (x *PaidLiveData_OrderData) Reset() {
	*x = PaidLiveData_OrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_OrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_OrderData) ProtoMessage() {}

func (x *PaidLiveData_OrderData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_OrderData.ProtoReflect.Descriptor instead.
func (*PaidLiveData_OrderData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 3}
}

func (x *PaidLiveData_OrderData) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// AsyncAuthData 主消息
type PaidLiveData_AsyncAuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeepAliveTime              int64 `protobuf:"varint,1,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`                                        // 保持活动时间（毫秒）
	AsyncAuthenticationOperate int64 `protobuf:"varint,2,opt,name=async_authentication_operate,json=asyncAuthenticationOperate,proto3" json:"async_authentication_operate,omitempty"` // 异步认证操作类型
	AsyncAuthenticationAbType  int64 `protobuf:"varint,3,opt,name=async_authentication_ab_type,json=asyncAuthenticationAbType,proto3" json:"async_authentication_ab_type,omitempty"`  // 异步认证 AB 测试类型
	KeepAliveTimeStamp         int64 `protobuf:"varint,4,opt,name=keep_alive_time_stamp,json=keepAliveTimeStamp,proto3" json:"keep_alive_time_stamp,omitempty"`                       // 活动时间戳（毫秒）
	Buffer                     int64 `protobuf:"varint,5,opt,name=buffer,proto3" json:"buffer,omitempty"`                                                                             // 缓冲区
}

func (x *PaidLiveData_AsyncAuthData) Reset() {
	*x = PaidLiveData_AsyncAuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_AsyncAuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_AsyncAuthData) ProtoMessage() {}

func (x *PaidLiveData_AsyncAuthData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_AsyncAuthData.ProtoReflect.Descriptor instead.
func (*PaidLiveData_AsyncAuthData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 4}
}

func (x *PaidLiveData_AsyncAuthData) GetKeepAliveTime() int64 {
	if x != nil {
		return x.KeepAliveTime
	}
	return 0
}

func (x *PaidLiveData_AsyncAuthData) GetAsyncAuthenticationOperate() int64 {
	if x != nil {
		return x.AsyncAuthenticationOperate
	}
	return 0
}

func (x *PaidLiveData_AsyncAuthData) GetAsyncAuthenticationAbType() int64 {
	if x != nil {
		return x.AsyncAuthenticationAbType
	}
	return 0
}

func (x *PaidLiveData_AsyncAuthData) GetKeepAliveTimeStamp() int64 {
	if x != nil {
		return x.KeepAliveTimeStamp
	}
	return 0
}

func (x *PaidLiveData_AsyncAuthData) GetBuffer() int64 {
	if x != nil {
		return x.Buffer
	}
	return 0
}

// ProductsData 主消息
type PaidLiveData_ProductsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolBar                     *PaidLiveData_ProductsData_ToolBar     `protobuf:"bytes,1,opt,name=tool_bar,json=toolBar,proto3" json:"tool_bar,omitempty"`                                                                    // 工具栏
	ExplainCard                 *PaidLiveData_ProductsData_ExplainCard `protobuf:"bytes,2,opt,name=explain_card,json=explainCard,proto3" json:"explain_card,omitempty"`                                                        // 说明卡片
	ProductListToolBar          *PaidLiveData_ProductsData_ToolBar     `protobuf:"bytes,3,opt,name=product_list_tool_bar,json=productListToolBar,proto3" json:"product_list_tool_bar,omitempty"`                               // 产品列表工具栏
	BringProductSwitchStatus    int32                                  `protobuf:"varint,4,opt,name=bring_product_switch_status,json=bringProductSwitchStatus,proto3" json:"bring_product_switch_status,omitempty"`            // 带产品开关状态
	PaidLiveBringingProductFlag int32                                  `protobuf:"varint,5,opt,name=paid_live_bringing_product_flag,json=paidLiveBringingProductFlag,proto3" json:"paid_live_bringing_product_flag,omitempty"` // 付费直播带产品标志
}

func (x *PaidLiveData_ProductsData) Reset() {
	*x = PaidLiveData_ProductsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_ProductsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_ProductsData) ProtoMessage() {}

func (x *PaidLiveData_ProductsData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_ProductsData.ProtoReflect.Descriptor instead.
func (*PaidLiveData_ProductsData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 5}
}

func (x *PaidLiveData_ProductsData) GetToolBar() *PaidLiveData_ProductsData_ToolBar {
	if x != nil {
		return x.ToolBar
	}
	return nil
}

func (x *PaidLiveData_ProductsData) GetExplainCard() *PaidLiveData_ProductsData_ExplainCard {
	if x != nil {
		return x.ExplainCard
	}
	return nil
}

func (x *PaidLiveData_ProductsData) GetProductListToolBar() *PaidLiveData_ProductsData_ToolBar {
	if x != nil {
		return x.ProductListToolBar
	}
	return nil
}

func (x *PaidLiveData_ProductsData) GetBringProductSwitchStatus() int32 {
	if x != nil {
		return x.BringProductSwitchStatus
	}
	return 0
}

func (x *PaidLiveData_ProductsData) GetPaidLiveBringingProductFlag() int32 {
	if x != nil {
		return x.PaidLiveBringingProductFlag
	}
	return 0
}

// PaidLivePriceInfo 主消息
type PaidLiveData_TicketData_PaidLivePriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始时间（秒级时间戳）
	EndTime   int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 结束时间（秒级时间戳）
	Price     int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`                          // 价格（以最小货币单位表示，例如分）
	ClaimDdl  int32 `protobuf:"varint,4,opt,name=claim_ddl,json=claimDdl,proto3" json:"claim_ddl,omitempty"`    // 认领截止时间（秒级时间戳）
	SkuId     int64 `protobuf:"varint,5,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`             // SKU ID
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) Reset() {
	*x = PaidLiveData_TicketData_PaidLivePriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_TicketData_PaidLivePriceInfo) ProtoMessage() {}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_TicketData_PaidLivePriceInfo.ProtoReflect.Descriptor instead.
func (*PaidLiveData_TicketData_PaidLivePriceInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 2, 1}
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) GetClaimDdl() int32 {
	if x != nil {
		return x.ClaimDdl
	}
	return 0
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfo) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

// PaidLivePriceInfoV2 子消息定义
type PaidLiveData_TicketData_PaidLivePriceInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   string  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`                          // 金额
	Currency string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                      // 货币
	Pos      int64   `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`                               // 位置
	PayType  []int32 `protobuf:"varint,4,rep,packed,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"` // 支付类型列表
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) Reset() {
	*x = PaidLiveData_TicketData_PaidLivePriceInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_TicketData_PaidLivePriceInfoV2) ProtoMessage() {}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_TicketData_PaidLivePriceInfoV2.ProtoReflect.Descriptor instead.
func (*PaidLiveData_TicketData_PaidLivePriceInfoV2) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 2, 2}
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *PaidLiveData_TicketData_PaidLivePriceInfoV2) GetPayType() []int32 {
	if x != nil {
		return x.PayType
	}
	return nil
}

// TicketSkuDetail 子消息定义
type PaidLiveData_TicketData_TicketSkuDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketType      int32                                        `protobuf:"varint,1,opt,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`                  // 门票类型
	TicketName      string                                       `protobuf:"bytes,2,opt,name=ticket_name,json=ticketName,proto3" json:"ticket_name,omitempty"`                   // 门票名称
	StartSellTime   int64                                        `protobuf:"varint,3,opt,name=start_sell_time,json=startSellTime,proto3" json:"start_sell_time,omitempty"`       // 开始销售时间
	ClosingSellTime int64                                        `protobuf:"varint,4,opt,name=closing_sell_time,json=closingSellTime,proto3" json:"closing_sell_time,omitempty"` // 结束销售时间
	SellStatus      int32                                        `protobuf:"varint,5,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`                  // 销售状态
	PriceInfo       *PaidLiveData_TicketData_PaidLivePriceInfoV2 `protobuf:"bytes,6,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`                      // 价格信息
	DouPriceInfo    *PaidLiveData_TicketData_PaidLivePriceInfoV2 `protobuf:"bytes,7,opt,name=dou_price_info,json=douPriceInfo,proto3" json:"dou_price_info,omitempty"`           // Dou 价格信息
	SkuId           int64                                        `protobuf:"varint,8,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                 // SKU ID
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) Reset() {
	*x = PaidLiveData_TicketData_TicketSkuDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_TicketData_TicketSkuDetail) ProtoMessage() {}

func (x *PaidLiveData_TicketData_TicketSkuDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_TicketData_TicketSkuDetail.ProtoReflect.Descriptor instead.
func (*PaidLiveData_TicketData_TicketSkuDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 2, 3}
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetTicketType() int32 {
	if x != nil {
		return x.TicketType
	}
	return 0
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetTicketName() string {
	if x != nil {
		return x.TicketName
	}
	return ""
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetStartSellTime() int64 {
	if x != nil {
		return x.StartSellTime
	}
	return 0
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetClosingSellTime() int64 {
	if x != nil {
		return x.ClosingSellTime
	}
	return 0
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetSellStatus() int32 {
	if x != nil {
		return x.SellStatus
	}
	return 0
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetPriceInfo() *PaidLiveData_TicketData_PaidLivePriceInfoV2 {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetDouPriceInfo() *PaidLiveData_TicketData_PaidLivePriceInfoV2 {
	if x != nil {
		return x.DouPriceInfo
	}
	return nil
}

func (x *PaidLiveData_TicketData_TicketSkuDetail) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

// SubscribeMemberMark 主消息
type PaidLiveData_TicketData_SubscribeMemberMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeMemberWatchFree bool `protobuf:"varint,1,opt,name=subscribe_member_watch_free,json=subscribeMemberWatchFree,proto3" json:"subscribe_member_watch_free,omitempty"` // 标记订阅会员是否可以免费观看
}

func (x *PaidLiveData_TicketData_SubscribeMemberMark) Reset() {
	*x = PaidLiveData_TicketData_SubscribeMemberMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_TicketData_SubscribeMemberMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_TicketData_SubscribeMemberMark) ProtoMessage() {}

func (x *PaidLiveData_TicketData_SubscribeMemberMark) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_TicketData_SubscribeMemberMark.ProtoReflect.Descriptor instead.
func (*PaidLiveData_TicketData_SubscribeMemberMark) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 2, 4}
}

func (x *PaidLiveData_TicketData_SubscribeMemberMark) GetSubscribeMemberWatchFree() bool {
	if x != nil {
		return x.SubscribeMemberWatchFree
	}
	return false
}

// ToolBar 子消息定义
type PaidLiveData_ProductsData_ToolBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelJumpUrl string `protobuf:"bytes,1,opt,name=panel_jump_url,json=panelJumpUrl,proto3" json:"panel_jump_url,omitempty"` // 面板跳转 URL
	SixJumpUrl   string `protobuf:"bytes,2,opt,name=six_jump_url,json=sixJumpUrl,proto3" json:"six_jump_url,omitempty"`       // 六跳转 URL
	NineJumpUrl  string `protobuf:"bytes,3,opt,name=nine_jump_url,json=nineJumpUrl,proto3" json:"nine_jump_url,omitempty"`    // 九跳转 URL
}

func (x *PaidLiveData_ProductsData_ToolBar) Reset() {
	*x = PaidLiveData_ProductsData_ToolBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_ProductsData_ToolBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_ProductsData_ToolBar) ProtoMessage() {}

func (x *PaidLiveData_ProductsData_ToolBar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_ProductsData_ToolBar.ProtoReflect.Descriptor instead.
func (*PaidLiveData_ProductsData_ToolBar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 5, 0}
}

func (x *PaidLiveData_ProductsData_ToolBar) GetPanelJumpUrl() string {
	if x != nil {
		return x.PanelJumpUrl
	}
	return ""
}

func (x *PaidLiveData_ProductsData_ToolBar) GetSixJumpUrl() string {
	if x != nil {
		return x.SixJumpUrl
	}
	return ""
}

func (x *PaidLiveData_ProductsData_ToolBar) GetNineJumpUrl() string {
	if x != nil {
		return x.NineJumpUrl
	}
	return ""
}

// ExplainCard 子消息定义
type PaidLiveData_ProductsData_ExplainCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                 // 状态
	CardJumpUrl  string   `protobuf:"bytes,2,opt,name=card_jump_url,json=cardJumpUrl,proto3" json:"card_jump_url,omitempty"`   // 卡片跳转 URL
	LastDuration int32    `protobuf:"varint,3,opt,name=last_duration,json=lastDuration,proto3" json:"last_duration,omitempty"` // 最后持续时间
	Product      *Product `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`                                // 产品信息
}

func (x *PaidLiveData_ProductsData_ExplainCard) Reset() {
	*x = PaidLiveData_ProductsData_ExplainCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiveData_ProductsData_ExplainCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiveData_ProductsData_ExplainCard) ProtoMessage() {}

func (x *PaidLiveData_ProductsData_ExplainCard) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiveData_ProductsData_ExplainCard.ProtoReflect.Descriptor instead.
func (*PaidLiveData_ProductsData_ExplainCard) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{101, 5, 1}
}

func (x *PaidLiveData_ProductsData_ExplainCard) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PaidLiveData_ProductsData_ExplainCard) GetCardJumpUrl() string {
	if x != nil {
		return x.CardJumpUrl
	}
	return ""
}

func (x *PaidLiveData_ProductsData_ExplainCard) GetLastDuration() int32 {
	if x != nil {
		return x.LastDuration
	}
	return 0
}

func (x *PaidLiveData_ProductsData_ExplainCard) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

// ProductBasicInfo 主消息
type Product_ProductBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                           // 产品 ID
	IdStr                  string                                          `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`                                                         // 产品 ID 字符串
	OwnerUserId            int64                                           `protobuf:"varint,3,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`                                    // 所有者用户 ID
	Status                 int32                                           `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                                                   // 状态
	Biz                    int32                                           `protobuf:"varint,5,opt,name=biz,proto3" json:"biz,omitempty"`                                                                         // 业务类型
	Category               int32                                           `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"`                                                               // 分类
	CategoryContent        string                                          `protobuf:"bytes,7,opt,name=category_content,json=categoryContent,proto3" json:"category_content,omitempty"`                           // 分类内容
	Title                  string                                          `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`                                                                      // 标题
	Source                 int32                                           `protobuf:"varint,9,opt,name=source,proto3" json:"source,omitempty"`                                                                   // 来源
	CoverUri               string                                          `protobuf:"bytes,10,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`                                               // 封面 URI
	Cover                  *Image                                          `protobuf:"bytes,11,opt,name=cover,proto3" json:"cover,omitempty"`                                                                     // 封面图片
	ReviewStatus           int32                                           `protobuf:"varint,12,opt,name=review_status,json=reviewStatus,proto3" json:"review_status,omitempty"`                                  // 审核状态
	PerformanceStatus      int32                                           `protobuf:"varint,13,opt,name=performance_status,json=performanceStatus,proto3" json:"performance_status,omitempty"`                   // 性能状态
	DisableReason          int32                                           `protobuf:"varint,14,opt,name=disable_reason,json=disableReason,proto3" json:"disable_reason,omitempty"`                               // 禁用原因
	SaleStartTime          int64                                           `protobuf:"varint,15,opt,name=sale_start_time,json=saleStartTime,proto3" json:"sale_start_time,omitempty"`                             // 销售开始时间
	SaleEndTime            int64                                           `protobuf:"varint,16,opt,name=sale_end_time,json=saleEndTime,proto3" json:"sale_end_time,omitempty"`                                   // 销售结束时间
	RefundDeadline         int64                                           `protobuf:"varint,17,opt,name=refund_deadline,json=refundDeadline,proto3" json:"refund_deadline,omitempty"`                            // 退款截止时间
	IntroductionText       string                                          `protobuf:"bytes,18,opt,name=introduction_text,json=introductionText,proto3" json:"introduction_text,omitempty"`                       // 介绍文本
	Introduction           []*Product_ProductBasicInfo_Introduction        `protobuf:"bytes,19,rep,name=introduction,proto3" json:"introduction,omitempty"`                                                       // 介绍内容
	HeaderMedia            []*Product_ProductBasicInfo_HeaderMedia         `protobuf:"bytes,20,rep,name=header_media,json=headerMedia,proto3" json:"header_media,omitempty"`                                      // 头部媒体
	Tags                   []*Product_ProductBasicInfo_ProductTag          `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`                                                                       // 标签
	ContentTitle           string                                          `protobuf:"bytes,22,opt,name=content_title,json=contentTitle,proto3" json:"content_title,omitempty"`                                   // 内容标题
	ContentCategory        string                                          `protobuf:"bytes,23,opt,name=content_category,json=contentCategory,proto3" json:"content_category,omitempty"`                          // 内容分类
	ContentExtentInfo      string                                          `protobuf:"bytes,24,opt,name=content_extent_info,json=contentExtentInfo,proto3" json:"content_extent_info,omitempty"`                  // 内容扩展信息
	SaleStatus             int32                                           `protobuf:"varint,26,opt,name=sale_status,json=saleStatus,proto3" json:"sale_status,omitempty"`                                        // 销售状态
	ServicePeriod          int64                                           `protobuf:"varint,27,opt,name=service_period,json=servicePeriod,proto3" json:"service_period,omitempty"`                               // 服务期限
	GeoBan                 bool                                            `protobuf:"varint,28,opt,name=geo_ban,json=geoBan,proto3" json:"geo_ban,omitempty"`                                                    // 地理限制
	CombinedViewRight      int32                                           `protobuf:"varint,29,opt,name=combined_view_right,json=combinedViewRight,proto3" json:"combined_view_right,omitempty"`                 // 组合视图权限
	JumpSchema             string                                          `protobuf:"bytes,30,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`                                         // 跳转 schema
	DetailSchema           string                                          `protobuf:"bytes,31,opt,name=detail_schema,json=detailSchema,proto3" json:"detail_schema,omitempty"`                                   // 详情 schema
	NewProduct             int32                                           `protobuf:"varint,32,opt,name=new_product,json=newProduct,proto3" json:"new_product,omitempty"`                                        // 新品标志
	ContentExtentInfoColor string                                          `protobuf:"bytes,33,opt,name=content_extent_info_color,json=contentExtentInfoColor,proto3" json:"content_extent_info_color,omitempty"` // 内容扩展信息颜色
	CreateTime             int64                                           `protobuf:"varint,34,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                        // 创建时间
	ShowStartTime          int64                                           `protobuf:"varint,35,opt,name=show_start_time,json=showStartTime,proto3" json:"show_start_time,omitempty"`                             // 展示开始时间
	ContentTips            []*Product_ProductBasicInfo_ContentTip          `protobuf:"bytes,36,rep,name=content_tips,json=contentTips,proto3" json:"content_tips,omitempty"`                                      // 内容提示
	PrepayCashierJumpUrl   string                                          `protobuf:"bytes,37,opt,name=prepay_cashier_jump_url,json=prepayCashierJumpUrl,proto3" json:"prepay_cashier_jump_url,omitempty"`       // 预付收银跳转 URL
	SellingPoints          []*Product_ProductBasicInfo_ProductSellingPoint `protobuf:"bytes,38,rep,name=selling_points,json=sellingPoints,proto3" json:"selling_points,omitempty"`                                // 卖点
	SaleInfo               *Product_ProductBasicInfo_ProductSaleInfo       `protobuf:"bytes,39,opt,name=sale_info,json=saleInfo,proto3" json:"sale_info,omitempty"`                                               // 销售信息
	RecentPurchasedUser    []*Product_ProductBasicInfo_RecentPurchasedUser `protobuf:"bytes,40,rep,name=recent_purchased_user,json=recentPurchasedUser,proto3" json:"recent_purchased_user,omitempty"`            // 最近购买用户
	OwnerOpenId            string                                          `protobuf:"bytes,5000,opt,name=owner_open_id,json=ownerOpenId,proto3" json:"owner_open_id,omitempty"`                                  // 所有者开放 ID
}

func (x *Product_ProductBasicInfo) Reset() {
	*x = Product_ProductBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo) ProtoMessage() {}

func (x *Product_ProductBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0}
}

func (x *Product_ProductBasicInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetOwnerUserId() int64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetBiz() int32 {
	if x != nil {
		return x.Biz
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetCategoryContent() string {
	if x != nil {
		return x.CategoryContent
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetReviewStatus() int32 {
	if x != nil {
		return x.ReviewStatus
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetPerformanceStatus() int32 {
	if x != nil {
		return x.PerformanceStatus
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetDisableReason() int32 {
	if x != nil {
		return x.DisableReason
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetSaleStartTime() int64 {
	if x != nil {
		return x.SaleStartTime
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetSaleEndTime() int64 {
	if x != nil {
		return x.SaleEndTime
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetRefundDeadline() int64 {
	if x != nil {
		return x.RefundDeadline
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetIntroductionText() string {
	if x != nil {
		return x.IntroductionText
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetIntroduction() []*Product_ProductBasicInfo_Introduction {
	if x != nil {
		return x.Introduction
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetHeaderMedia() []*Product_ProductBasicInfo_HeaderMedia {
	if x != nil {
		return x.HeaderMedia
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetTags() []*Product_ProductBasicInfo_ProductTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetContentTitle() string {
	if x != nil {
		return x.ContentTitle
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetContentCategory() string {
	if x != nil {
		return x.ContentCategory
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetContentExtentInfo() string {
	if x != nil {
		return x.ContentExtentInfo
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetSaleStatus() int32 {
	if x != nil {
		return x.SaleStatus
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetServicePeriod() int64 {
	if x != nil {
		return x.ServicePeriod
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetGeoBan() bool {
	if x != nil {
		return x.GeoBan
	}
	return false
}

func (x *Product_ProductBasicInfo) GetCombinedViewRight() int32 {
	if x != nil {
		return x.CombinedViewRight
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetDetailSchema() string {
	if x != nil {
		return x.DetailSchema
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetNewProduct() int32 {
	if x != nil {
		return x.NewProduct
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetContentExtentInfoColor() string {
	if x != nil {
		return x.ContentExtentInfoColor
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetShowStartTime() int64 {
	if x != nil {
		return x.ShowStartTime
	}
	return 0
}

func (x *Product_ProductBasicInfo) GetContentTips() []*Product_ProductBasicInfo_ContentTip {
	if x != nil {
		return x.ContentTips
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetPrepayCashierJumpUrl() string {
	if x != nil {
		return x.PrepayCashierJumpUrl
	}
	return ""
}

func (x *Product_ProductBasicInfo) GetSellingPoints() []*Product_ProductBasicInfo_ProductSellingPoint {
	if x != nil {
		return x.SellingPoints
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetSaleInfo() *Product_ProductBasicInfo_ProductSaleInfo {
	if x != nil {
		return x.SaleInfo
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetRecentPurchasedUser() []*Product_ProductBasicInfo_RecentPurchasedUser {
	if x != nil {
		return x.RecentPurchasedUser
	}
	return nil
}

func (x *Product_ProductBasicInfo) GetOwnerOpenId() string {
	if x != nil {
		return x.OwnerOpenId
	}
	return ""
}

// ProductPriceStruct 主消息
type Product_ProductPriceStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount             string  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`                                                    // 价格金额
	Currency           string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                                                // 货币类型（例如 USD, CNY）
	Pos                int64   `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`                                                         // 位置或序号
	PayType            []int32 `protobuf:"varint,4,rep,packed,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`                           // 支付类型列表
	FullPrice          string  `protobuf:"bytes,5,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`                             // 全价（未折扣时的原价）
	CountdownTimestamp int64   `protobuf:"varint,6,opt,name=countdown_timestamp,json=countdownTimestamp,proto3" json:"countdown_timestamp,omitempty"` // 倒计时的时间戳（通常是促销结束时间）
	Start              string  `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`                                                      // 开始时间
}

func (x *Product_ProductPriceStruct) Reset() {
	*x = Product_ProductPriceStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductPriceStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductPriceStruct) ProtoMessage() {}

func (x *Product_ProductPriceStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductPriceStruct.ProtoReflect.Descriptor instead.
func (*Product_ProductPriceStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 1}
}

func (x *Product_ProductPriceStruct) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Product_ProductPriceStruct) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Product_ProductPriceStruct) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Product_ProductPriceStruct) GetPayType() []int32 {
	if x != nil {
		return x.PayType
	}
	return nil
}

func (x *Product_ProductPriceStruct) GetFullPrice() string {
	if x != nil {
		return x.FullPrice
	}
	return ""
}

func (x *Product_ProductPriceStruct) GetCountdownTimestamp() int64 {
	if x != nil {
		return x.CountdownTimestamp
	}
	return 0
}

func (x *Product_ProductPriceStruct) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

// LiveInfo 主消息
type Product_LiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId                   int64  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                                              // 房间 ID
	Title                    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                               // 直播标题
	EpisodeStage             int32  `protobuf:"varint,3,opt,name=episode_stage,json=episodeStage,proto3" json:"episode_stage,omitempty"`                                            // 直播阶段
	RoomStartTime            int64  `protobuf:"varint,4,opt,name=room_start_time,json=roomStartTime,proto3" json:"room_start_time,omitempty"`                                       // 房间开始时间（Unix 时间戳）
	LiveStatus               int32  `protobuf:"varint,5,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                                                  // 直播状态
	Vid                      string `protobuf:"bytes,6,opt,name=vid,proto3" json:"vid,omitempty"`                                                                                   // 视频 ID
	ReplayIdStr              string `protobuf:"bytes,7,opt,name=replay_id_str,json=replayIdStr,proto3" json:"replay_id_str,omitempty"`                                              // 回放 ID
	IsReplay                 bool   `protobuf:"varint,8,opt,name=is_replay,json=isReplay,proto3" json:"is_replay,omitempty"`                                                        // 是否为回放
	Delivery                 int32  `protobuf:"varint,9,opt,name=delivery,proto3" json:"delivery,omitempty"`                                                                        // 投放标志
	ViewRight                int64  `protobuf:"varint,10,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                                                    // 查看权限
	AnchorSignTagContent     string `protobuf:"bytes,11,opt,name=anchor_sign_tag_content,json=anchorSignTagContent,proto3" json:"anchor_sign_tag_content,omitempty"`                // 主播标签内容
	RoomIdStr                string `protobuf:"bytes,12,opt,name=room_id_str,json=roomIdStr,proto3" json:"room_id_str,omitempty"`                                                   // 房间 ID（字符串形式）
	PaidLiveBringProductFlag int32  `protobuf:"varint,13,opt,name=paid_live_bring_product_flag,json=paidLiveBringProductFlag,proto3" json:"paid_live_bring_product_flag,omitempty"` // 付费直播带货标志
	LivingSkuId              string `protobuf:"bytes,14,opt,name=living_sku_id,json=livingSkuId,proto3" json:"living_sku_id,omitempty"`                                             // 当前直播 SKU ID
	ReplayAutoOfflineTime    int64  `protobuf:"varint,15,opt,name=replay_auto_offline_time,json=replayAutoOfflineTime,proto3" json:"replay_auto_offline_time,omitempty"`            // 回放自动下线时间（Unix 时间戳）
}

func (x *Product_LiveInfo) Reset() {
	*x = Product_LiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_LiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_LiveInfo) ProtoMessage() {}

func (x *Product_LiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_LiveInfo.ProtoReflect.Descriptor instead.
func (*Product_LiveInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 2}
}

func (x *Product_LiveInfo) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Product_LiveInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_LiveInfo) GetEpisodeStage() int32 {
	if x != nil {
		return x.EpisodeStage
	}
	return 0
}

func (x *Product_LiveInfo) GetRoomStartTime() int64 {
	if x != nil {
		return x.RoomStartTime
	}
	return 0
}

func (x *Product_LiveInfo) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *Product_LiveInfo) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *Product_LiveInfo) GetReplayIdStr() string {
	if x != nil {
		return x.ReplayIdStr
	}
	return ""
}

func (x *Product_LiveInfo) GetIsReplay() bool {
	if x != nil {
		return x.IsReplay
	}
	return false
}

func (x *Product_LiveInfo) GetDelivery() int32 {
	if x != nil {
		return x.Delivery
	}
	return 0
}

func (x *Product_LiveInfo) GetViewRight() int64 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *Product_LiveInfo) GetAnchorSignTagContent() string {
	if x != nil {
		return x.AnchorSignTagContent
	}
	return ""
}

func (x *Product_LiveInfo) GetRoomIdStr() string {
	if x != nil {
		return x.RoomIdStr
	}
	return ""
}

func (x *Product_LiveInfo) GetPaidLiveBringProductFlag() int32 {
	if x != nil {
		return x.PaidLiveBringProductFlag
	}
	return 0
}

func (x *Product_LiveInfo) GetLivingSkuId() string {
	if x != nil {
		return x.LivingSkuId
	}
	return ""
}

func (x *Product_LiveInfo) GetReplayAutoOfflineTime() int64 {
	if x != nil {
		return x.ReplayAutoOfflineTime
	}
	return 0
}

// ItemInfo 主消息
type Product_ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`            // 项目 ID
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // 项目标题
	TagType    string `protobuf:"bytes,3,opt,name=tag_type,json=tagType,proto3" json:"tag_type,omitempty"`          // 标签类型
	Lastest    int32  `protobuf:"varint,4,opt,name=lastest,proto3" json:"lastest,omitempty"`                        // 最新的标识或版本
	Total      int32  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`                            // 总数或总量
	PlayCounts string `protobuf:"bytes,6,opt,name=play_counts,json=playCounts,proto3" json:"play_counts,omitempty"` // 播放次数
	ViewRight  int64  `protobuf:"varint,7,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`   // 查看权限
	ItemIdStr  string `protobuf:"bytes,8,opt,name=item_id_str,json=itemIdStr,proto3" json:"item_id_str,omitempty"`  // 项目 ID 的字符串形式
	Duration   int32  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                      // 时长（秒）
}

func (x *Product_ItemInfo) Reset() {
	*x = Product_ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ItemInfo) ProtoMessage() {}

func (x *Product_ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ItemInfo.ProtoReflect.Descriptor instead.
func (*Product_ItemInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 3}
}

func (x *Product_ItemInfo) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Product_ItemInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_ItemInfo) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *Product_ItemInfo) GetLastest() int32 {
	if x != nil {
		return x.Lastest
	}
	return 0
}

func (x *Product_ItemInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Product_ItemInfo) GetPlayCounts() string {
	if x != nil {
		return x.PlayCounts
	}
	return ""
}

func (x *Product_ItemInfo) GetViewRight() int64 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *Product_ItemInfo) GetItemIdStr() string {
	if x != nil {
		return x.ItemIdStr
	}
	return ""
}

func (x *Product_ItemInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// ContentInfo 主消息
type Product_ContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentId         int64  `protobuf:"varint,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`                            // 内容 ID
	Title             string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                      // 内容标题
	TagType           string `protobuf:"bytes,3,opt,name=tag_type,json=tagType,proto3" json:"tag_type,omitempty"`                                   // 标签类型
	Lastest           int32  `protobuf:"varint,4,opt,name=lastest,proto3" json:"lastest,omitempty"`                                                 // 最新的标识或版本
	Total             int32  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`                                                     // 总数或总量
	Category          string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`                                                // 内容类别
	ViewRight         int64  `protobuf:"varint,7,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                            // 查看权限
	ContentIdStr      string `protobuf:"bytes,8,opt,name=content_id_str,json=contentIdStr,proto3" json:"content_id_str,omitempty"`                  // 内容 ID 的字符串形式
	Duration          int32  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                                               // 时长（秒）
	PromiseUpdateTime int64  `protobuf:"varint,10,opt,name=promise_update_time,json=promiseUpdateTime,proto3" json:"promise_update_time,omitempty"` // 承诺更新时间（Unix 时间戳）
}

func (x *Product_ContentInfo) Reset() {
	*x = Product_ContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ContentInfo) ProtoMessage() {}

func (x *Product_ContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ContentInfo.ProtoReflect.Descriptor instead.
func (*Product_ContentInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 4}
}

func (x *Product_ContentInfo) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *Product_ContentInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_ContentInfo) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *Product_ContentInfo) GetLastest() int32 {
	if x != nil {
		return x.Lastest
	}
	return 0
}

func (x *Product_ContentInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Product_ContentInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product_ContentInfo) GetViewRight() int64 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *Product_ContentInfo) GetContentIdStr() string {
	if x != nil {
		return x.ContentIdStr
	}
	return ""
}

func (x *Product_ContentInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Product_ContentInfo) GetPromiseUpdateTime() int64 {
	if x != nil {
		return x.PromiseUpdateTime
	}
	return 0
}

// PaymentArea 主消息
type Product_PaymentArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayButton        *Product_PaymentArea_PayButton        `protobuf:"bytes,1,opt,name=pay_button,json=payButton,proto3" json:"pay_button,omitempty"`                      // 支付按钮
	AdditionalButton *Product_PaymentArea_AdditionalButton `protobuf:"bytes,2,opt,name=additional_button,json=additionalButton,proto3" json:"additional_button,omitempty"` // 附加按钮
}

func (x *Product_PaymentArea) Reset() {
	*x = Product_PaymentArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PaymentArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PaymentArea) ProtoMessage() {}

func (x *Product_PaymentArea) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PaymentArea.ProtoReflect.Descriptor instead.
func (*Product_PaymentArea) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 5}
}

func (x *Product_PaymentArea) GetPayButton() *Product_PaymentArea_PayButton {
	if x != nil {
		return x.PayButton
	}
	return nil
}

func (x *Product_PaymentArea) GetAdditionalButton() *Product_PaymentArea_AdditionalButton {
	if x != nil {
		return x.AdditionalButton
	}
	return nil
}

// ProductPriceRichText 主消息
type Product_ProductPriceRichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichTexts []*Product_ProductPriceRichText_ProductRichText `protobuf:"bytes,1,rep,name=rich_texts,json=richTexts,proto3" json:"rich_texts,omitempty"`                                                                // 富文本数组
	Extra     map[string]string                               `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外的键值对信息
}

func (x *Product_ProductPriceRichText) Reset() {
	*x = Product_ProductPriceRichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductPriceRichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductPriceRichText) ProtoMessage() {}

func (x *Product_ProductPriceRichText) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductPriceRichText.ProtoReflect.Descriptor instead.
func (*Product_ProductPriceRichText) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 6}
}

func (x *Product_ProductPriceRichText) GetRichTexts() []*Product_ProductPriceRichText_ProductRichText {
	if x != nil {
		return x.RichTexts
	}
	return nil
}

func (x *Product_ProductPriceRichText) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// ProductComments 主消息
type Product_ProductComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                                    `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`           // 评论区标题
	TotalCount string                                    `protobuf:"bytes,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"` // 评论总数
	JumpTitle  string                                    `protobuf:"bytes,3,opt,name=JumpTitle,proto3" json:"JumpTitle,omitempty"`   // 跳转按钮标题
	JumpSchema string                                    `protobuf:"bytes,4,opt,name=JumpSchema,proto3" json:"JumpSchema,omitempty"` // 跳转链接
	Comments   []*Product_ProductComments_ProductComment `protobuf:"bytes,5,rep,name=Comments,proto3" json:"Comments,omitempty"`     // 评论列表
}

func (x *Product_ProductComments) Reset() {
	*x = Product_ProductComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductComments) ProtoMessage() {}

func (x *Product_ProductComments) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductComments.ProtoReflect.Descriptor instead.
func (*Product_ProductComments) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 7}
}

func (x *Product_ProductComments) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_ProductComments) GetTotalCount() string {
	if x != nil {
		return x.TotalCount
	}
	return ""
}

func (x *Product_ProductComments) GetJumpTitle() string {
	if x != nil {
		return x.JumpTitle
	}
	return ""
}

func (x *Product_ProductComments) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_ProductComments) GetComments() []*Product_ProductComments_ProductComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

// ShareTicket 主消息
type Product_ShareTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasShare        bool          `protobuf:"varint,1,opt,name=has_share,json=hasShare,proto3" json:"has_share,omitempty"`                       // 是否已分享
	FromUser        *Product_User `protobuf:"bytes,2,opt,name=from_user,json=fromUser,proto3" json:"from_user,omitempty"`                        // 分享来源用户
	PackageRecordId string        `protobuf:"bytes,3,opt,name=package_record_id,json=packageRecordId,proto3" json:"package_record_id,omitempty"` // 分享关联的记录 ID
	HasGrabShare    bool          `protobuf:"varint,4,opt,name=has_grab_share,json=hasGrabShare,proto3" json:"has_grab_share,omitempty"`         // 是否已领取分享
}

func (x *Product_ShareTicket) Reset() {
	*x = Product_ShareTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ShareTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ShareTicket) ProtoMessage() {}

func (x *Product_ShareTicket) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ShareTicket.ProtoReflect.Descriptor instead.
func (*Product_ShareTicket) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 8}
}

func (x *Product_ShareTicket) GetHasShare() bool {
	if x != nil {
		return x.HasShare
	}
	return false
}

func (x *Product_ShareTicket) GetFromUser() *Product_User {
	if x != nil {
		return x.FromUser
	}
	return nil
}

func (x *Product_ShareTicket) GetPackageRecordId() string {
	if x != nil {
		return x.PackageRecordId
	}
	return ""
}

func (x *Product_ShareTicket) GetHasGrabShare() bool {
	if x != nil {
		return x.HasGrabShare
	}
	return false
}

// PrivilegeTicket 主消息
type Product_PrivilegeTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId            []string                                      `protobuf:"bytes,1,rep,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                     // SKU ID 列表
	PrivilegeConf    []*Product_PrivilegeTicket_PrivilegeConfigure `protobuf:"bytes,2,rep,name=privilege_conf,json=privilegeConf,proto3" json:"privilege_conf,omitempty"`             // 权益配置列表
	PrivilegeHasPaid bool                                          `protobuf:"varint,3,opt,name=privilege_has_paid,json=privilegeHasPaid,proto3" json:"privilege_has_paid,omitempty"` // 是否已支付权益
}

func (x *Product_PrivilegeTicket) Reset() {
	*x = Product_PrivilegeTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PrivilegeTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PrivilegeTicket) ProtoMessage() {}

func (x *Product_PrivilegeTicket) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PrivilegeTicket.ProtoReflect.Descriptor instead.
func (*Product_PrivilegeTicket) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 9}
}

func (x *Product_PrivilegeTicket) GetSkuId() []string {
	if x != nil {
		return x.SkuId
	}
	return nil
}

func (x *Product_PrivilegeTicket) GetPrivilegeConf() []*Product_PrivilegeTicket_PrivilegeConfigure {
	if x != nil {
		return x.PrivilegeConf
	}
	return nil
}

func (x *Product_PrivilegeTicket) GetPrivilegeHasPaid() bool {
	if x != nil {
		return x.PrivilegeHasPaid
	}
	return false
}

// Combined 主消息
type Product_Combined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindSubTicketList     []*Product_Combined_BindSubProductData    `protobuf:"bytes,1,rep,name=bind_sub_ticket_list,json=bindSubTicketList,proto3" json:"bind_sub_ticket_list,omitempty"`             // 绑定的子票据列表
	ParentTicketPanelData *Product_Combined_ParentProductSimpleData `protobuf:"bytes,2,opt,name=parent_ticket_panel_data,json=parentTicketPanelData,proto3" json:"parent_ticket_panel_data,omitempty"` // 父票据面板数据
}

func (x *Product_Combined) Reset() {
	*x = Product_Combined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined) ProtoMessage() {}

func (x *Product_Combined) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined.ProtoReflect.Descriptor instead.
func (*Product_Combined) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10}
}

func (x *Product_Combined) GetBindSubTicketList() []*Product_Combined_BindSubProductData {
	if x != nil {
		return x.BindSubTicketList
	}
	return nil
}

func (x *Product_Combined) GetParentTicketPanelData() *Product_Combined_ParentProductSimpleData {
	if x != nil {
		return x.ParentTicketPanelData
	}
	return nil
}

// Comments 主消息
type Product_Comments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                             // 评论标题
	Count      int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                            // 评论总数
	HasMore    bool                         `protobuf:"varint,3,opt,name=hasMore,proto3" json:"hasMore,omitempty"`                        // 是否有更多评论
	JumpSchema string                       `protobuf:"bytes,4,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"` // 跳转链接（可能是评论详情页）
	Texts      []*Product_Comments_TextInfo `protobuf:"bytes,5,rep,name=texts,proto3" json:"texts,omitempty"`                             // 评论列表
}

func (x *Product_Comments) Reset() {
	*x = Product_Comments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Comments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Comments) ProtoMessage() {}

func (x *Product_Comments) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Comments.ProtoReflect.Descriptor instead.
func (*Product_Comments) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 11}
}

func (x *Product_Comments) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_Comments) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Product_Comments) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *Product_Comments) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_Comments) GetTexts() []*Product_Comments_TextInfo {
	if x != nil {
		return x.Texts
	}
	return nil
}

// Rating 主消息
type Product_Rating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Product_Rating) Reset() {
	*x = Product_Rating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Rating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Rating) ProtoMessage() {}

func (x *Product_Rating) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Rating.ProtoReflect.Descriptor instead.
func (*Product_Rating) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 12}
}

// User 主消息
type Product_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // 用户 ID
	NickName      string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                       // 用户昵称
	Avatar        string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                                           // 用户头像 URL
	UserIdStr     string `protobuf:"bytes,4,opt,name=user_id_str,json=userIdStr,proto3" json:"user_id_str,omitempty"`                  // 用户 ID 的字符串形式
	UserOpenId    string `protobuf:"bytes,5000,opt,name=user_open_id,json=userOpenId,proto3" json:"user_open_id,omitempty"`            // 用户 Open ID
	UserOpenIdStr string `protobuf:"bytes,5001,opt,name=user_open_id_str,json=userOpenIdStr,proto3" json:"user_open_id_str,omitempty"` // 用户 Open ID 的字符串形式
}

func (x *Product_User) Reset() {
	*x = Product_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_User) ProtoMessage() {}

func (x *Product_User) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_User.ProtoReflect.Descriptor instead.
func (*Product_User) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 13}
}

func (x *Product_User) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Product_User) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Product_User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Product_User) GetUserIdStr() string {
	if x != nil {
		return x.UserIdStr
	}
	return ""
}

func (x *Product_User) GetUserOpenId() string {
	if x != nil {
		return x.UserOpenId
	}
	return ""
}

func (x *Product_User) GetUserOpenIdStr() string {
	if x != nil {
		return x.UserOpenIdStr
	}
	return ""
}

// Author 主消息
type Product_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            int32                           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                               // 作者类型
	UserInfo        *Product_Author_User            `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`                        // 作者的用户信息
	AuthorBasicInfo *Product_Author_AuthorBasicInfo `protobuf:"bytes,3,opt,name=author_basic_info,json=authorBasicInfo,proto3" json:"author_basic_info,omitempty"` // 作者的基础信息
	JumpSchema      string                          `protobuf:"bytes,4,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`                  // 跳转链接
}

func (x *Product_Author) Reset() {
	*x = Product_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Author) ProtoMessage() {}

func (x *Product_Author) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Author.ProtoReflect.Descriptor instead.
func (*Product_Author) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 14}
}

func (x *Product_Author) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product_Author) GetUserInfo() *Product_Author_User {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Product_Author) GetAuthorBasicInfo() *Product_Author_AuthorBasicInfo {
	if x != nil {
		return x.AuthorBasicInfo
	}
	return nil
}

func (x *Product_Author) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

// ProductBanner 主消息
type Product_ProductBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cover  *Image `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`   // 封面图片
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"` // 跳转链接或模式
}

func (x *Product_ProductBanner) Reset() {
	*x = Product_ProductBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBanner) ProtoMessage() {}

func (x *Product_ProductBanner) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBanner.ProtoReflect.Descriptor instead.
func (*Product_ProductBanner) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 15}
}

func (x *Product_ProductBanner) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Product_ProductBanner) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

// SKU 主消息
type Product_SKU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                         // SKU 唯一标识
	Category              int32                               `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty"`                                                            // 分类 ID
	Price                 int64                               `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`                                                                  // 价格（单位分）
	SaleStartTime         int64                               `protobuf:"varint,4,opt,name=sale_start_time,json=saleStartTime,proto3" json:"sale_start_time,omitempty"`                           // 开售时间（Unix 时间戳）
	SaleEndTime           int64                               `protobuf:"varint,5,opt,name=sale_end_time,json=saleEndTime,proto3" json:"sale_end_time,omitempty"`                                 // 停售时间（Unix 时间戳）
	Refundable            int32                               `protobuf:"varint,6,opt,name=refundable,proto3" json:"refundable,omitempty"`                                                        // 是否可退款（0：不可退款，1：可退款）
	CoverUri              string                              `protobuf:"bytes,7,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`                                             // 封面图片 URI
	Cover                 *Product_SKU_Image                  `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover,omitempty"`                                                                   // 封面图片对象
	Introduction          string                              `protobuf:"bytes,9,opt,name=introduction,proto3" json:"introduction,omitempty"`                                                     // 简介
	Title                 string                              `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`                                                                  // 标题
	SaleStatus            int32                               `protobuf:"varint,11,opt,name=sale_status,json=saleStatus,proto3" json:"sale_status,omitempty"`                                     // 销售状态
	ProductId             string                              `protobuf:"bytes,12,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                         // 产品 ID
	RelatedSkuSimpleInfos []*Product_SKU_RelatedSkuSimpleInfo `protobuf:"bytes,13,rep,name=related_sku_simple_infos,json=relatedSkuSimpleInfos,proto3" json:"related_sku_simple_infos,omitempty"` // 相关 SKU 简略信息
	OrderItemType         int32                               `protobuf:"varint,14,opt,name=order_item_type,json=orderItemType,proto3" json:"order_item_type,omitempty"`                          // 订单项目类型
	OrderBizExtInfo       string                              `protobuf:"bytes,15,opt,name=order_biz_ext_info,json=orderBizExtInfo,proto3" json:"order_biz_ext_info,omitempty"`                   // 订单扩展信息
	LimitCount            int32                               `protobuf:"varint,16,opt,name=limit_count,json=limitCount,proto3" json:"limit_count,omitempty"`                                     // 购买限制数量
	PurchaseStatus        int32                               `protobuf:"varint,17,opt,name=purchase_status,json=purchaseStatus,proto3" json:"purchase_status,omitempty"`                         // 购买状态
	CanPurchase           bool                                `protobuf:"varint,18,opt,name=can_purchase,json=canPurchase,proto3" json:"can_purchase,omitempty"`                                  // 是否可以购买
	Episode               int64                               `protobuf:"varint,19,opt,name=episode,proto3" json:"episode,omitempty"`                                                             // 集数（适用于特定商品类型）
	IntroductionText      string                              `protobuf:"bytes,20,opt,name=introduction_text,json=introductionText,proto3" json:"introduction_text,omitempty"`                    // 文本简介
	PriceType             int32                               `protobuf:"varint,21,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`                                        // 价格类型
	CameraInfo            *Product_SKU_CameraInfo             `protobuf:"bytes,22,opt,name=camera_info,json=cameraInfo,proto3" json:"camera_info,omitempty"`                                      // 摄像机信息
	EntityIdsMap          []*Product_SKU_EntityIDsMap         `protobuf:"bytes,23,rep,name=entity_ids_map,json=entityIdsMap,proto3" json:"entity_ids_map,omitempty"`                              // 实体映射
	FreeStatus            int32                               `protobuf:"varint,24,opt,name=free_status,json=freeStatus,proto3" json:"free_status,omitempty"`                                     // 免费状态
	LimitedFreeNotice     *Product_SKU_LimitedFreeNotice      `protobuf:"bytes,25,opt,name=limited_free_notice,json=limitedFreeNotice,proto3" json:"limited_free_notice,omitempty"`               // 限免通知
	LiveStatus            int32                               `protobuf:"varint,26,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                                     // 直播状态
	EnableRenewVip        bool                                `protobuf:"varint,27,opt,name=enable_renew_vip,json=enableRenewVip,proto3" json:"enable_renew_vip,omitempty"`                       // 是否支持会员续费
	BonusAmount           int64                               `protobuf:"varint,28,opt,name=bonus_amount,json=bonusAmount,proto3" json:"bonus_amount,omitempty"`                                  // 奖励金额
	RightValidDuration    int64                               `protobuf:"varint,29,opt,name=right_valid_duration,json=rightValidDuration,proto3" json:"right_valid_duration,omitempty"`           // 权益有效时长（单位秒）
}

func (x *Product_SKU) Reset() {
	*x = Product_SKU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU) ProtoMessage() {}

func (x *Product_SKU) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU.ProtoReflect.Descriptor instead.
func (*Product_SKU) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16}
}

func (x *Product_SKU) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product_SKU) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *Product_SKU) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product_SKU) GetSaleStartTime() int64 {
	if x != nil {
		return x.SaleStartTime
	}
	return 0
}

func (x *Product_SKU) GetSaleEndTime() int64 {
	if x != nil {
		return x.SaleEndTime
	}
	return 0
}

func (x *Product_SKU) GetRefundable() int32 {
	if x != nil {
		return x.Refundable
	}
	return 0
}

func (x *Product_SKU) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

func (x *Product_SKU) GetCover() *Product_SKU_Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Product_SKU) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Product_SKU) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_SKU) GetSaleStatus() int32 {
	if x != nil {
		return x.SaleStatus
	}
	return 0
}

func (x *Product_SKU) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product_SKU) GetRelatedSkuSimpleInfos() []*Product_SKU_RelatedSkuSimpleInfo {
	if x != nil {
		return x.RelatedSkuSimpleInfos
	}
	return nil
}

func (x *Product_SKU) GetOrderItemType() int32 {
	if x != nil {
		return x.OrderItemType
	}
	return 0
}

func (x *Product_SKU) GetOrderBizExtInfo() string {
	if x != nil {
		return x.OrderBizExtInfo
	}
	return ""
}

func (x *Product_SKU) GetLimitCount() int32 {
	if x != nil {
		return x.LimitCount
	}
	return 0
}

func (x *Product_SKU) GetPurchaseStatus() int32 {
	if x != nil {
		return x.PurchaseStatus
	}
	return 0
}

func (x *Product_SKU) GetCanPurchase() bool {
	if x != nil {
		return x.CanPurchase
	}
	return false
}

func (x *Product_SKU) GetEpisode() int64 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *Product_SKU) GetIntroductionText() string {
	if x != nil {
		return x.IntroductionText
	}
	return ""
}

func (x *Product_SKU) GetPriceType() int32 {
	if x != nil {
		return x.PriceType
	}
	return 0
}

func (x *Product_SKU) GetCameraInfo() *Product_SKU_CameraInfo {
	if x != nil {
		return x.CameraInfo
	}
	return nil
}

func (x *Product_SKU) GetEntityIdsMap() []*Product_SKU_EntityIDsMap {
	if x != nil {
		return x.EntityIdsMap
	}
	return nil
}

func (x *Product_SKU) GetFreeStatus() int32 {
	if x != nil {
		return x.FreeStatus
	}
	return 0
}

func (x *Product_SKU) GetLimitedFreeNotice() *Product_SKU_LimitedFreeNotice {
	if x != nil {
		return x.LimitedFreeNotice
	}
	return nil
}

func (x *Product_SKU) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *Product_SKU) GetEnableRenewVip() bool {
	if x != nil {
		return x.EnableRenewVip
	}
	return false
}

func (x *Product_SKU) GetBonusAmount() int64 {
	if x != nil {
		return x.BonusAmount
	}
	return 0
}

func (x *Product_SKU) GetRightValidDuration() int64 {
	if x != nil {
		return x.RightValidDuration
	}
	return 0
}

// SubscribeMember 主消息
type Product_SubscribeMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaySchema       string                                      `protobuf:"bytes,1,opt,name=pay_schema,json=paySchema,proto3" json:"pay_schema,omitempty"`                    // 支付模式（如支付链接或支付类型标识）
	Title           string                                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                             // 订阅标题
	SubTitle        string                                      `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                       // 订阅副标题
	PriceInfo       *Product_SubscribeMember_ProductPriceStruct `protobuf:"bytes,4,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`                    // 价格信息
	SubscribeStatus int32                                       `protobuf:"varint,5,opt,name=subscribe_status,json=subscribeStatus,proto3" json:"subscribe_status,omitempty"` // 订阅状态（0：未订阅，1：已订阅等）
	ValidStartTime  int64                                       `protobuf:"varint,6,opt,name=valid_start_time,json=validStartTime,proto3" json:"valid_start_time,omitempty"`  // 有效期开始时间（Unix 时间戳）
	ValidEndTime    int64                                       `protobuf:"varint,7,opt,name=valid_end_time,json=validEndTime,proto3" json:"valid_end_time,omitempty"`        // 有效期结束时间（Unix 时间戳）
}

func (x *Product_SubscribeMember) Reset() {
	*x = Product_SubscribeMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SubscribeMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SubscribeMember) ProtoMessage() {}

func (x *Product_SubscribeMember) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SubscribeMember.ProtoReflect.Descriptor instead.
func (*Product_SubscribeMember) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 17}
}

func (x *Product_SubscribeMember) GetPaySchema() string {
	if x != nil {
		return x.PaySchema
	}
	return ""
}

func (x *Product_SubscribeMember) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_SubscribeMember) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Product_SubscribeMember) GetPriceInfo() *Product_SubscribeMember_ProductPriceStruct {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *Product_SubscribeMember) GetSubscribeStatus() int32 {
	if x != nil {
		return x.SubscribeStatus
	}
	return 0
}

func (x *Product_SubscribeMember) GetValidStartTime() int64 {
	if x != nil {
		return x.ValidStartTime
	}
	return 0
}

func (x *Product_SubscribeMember) GetValidEndTime() int64 {
	if x != nil {
		return x.ValidEndTime
	}
	return 0
}

// FilterReason 主消息
type Product_FilterReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed     bool   `protobuf:"varint,1,opt,name=failed,proto3" json:"failed,omitempty"`                          // 是否过滤失败
	CanShow    bool   `protobuf:"varint,2,opt,name=can_show,json=canShow,proto3" json:"can_show,omitempty"`         // 是否可以展示
	Reason     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                           // 过滤原因
	WerrCode   int32  `protobuf:"varint,4,opt,name=werr_code,json=werrCode,proto3" json:"werr_code,omitempty"`      // 错误代码
	FilterName string `protobuf:"bytes,5,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"` // 过滤器名称
}

func (x *Product_FilterReason) Reset() {
	*x = Product_FilterReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_FilterReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_FilterReason) ProtoMessage() {}

func (x *Product_FilterReason) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_FilterReason.ProtoReflect.Descriptor instead.
func (*Product_FilterReason) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 18}
}

func (x *Product_FilterReason) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *Product_FilterReason) GetCanShow() bool {
	if x != nil {
		return x.CanShow
	}
	return false
}

func (x *Product_FilterReason) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Product_FilterReason) GetWerrCode() int32 {
	if x != nil {
		return x.WerrCode
	}
	return 0
}

func (x *Product_FilterReason) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

// Introduction 主消息
type Product_ProductBasicInfo_Introduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`      // 介绍类型
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 介绍内容
}

func (x *Product_ProductBasicInfo_Introduction) Reset() {
	*x = Product_ProductBasicInfo_Introduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_Introduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_Introduction) ProtoMessage() {}

func (x *Product_ProductBasicInfo_Introduction) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_Introduction.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_Introduction) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 0}
}

func (x *Product_ProductBasicInfo_Introduction) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product_ProductBasicInfo_Introduction) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// HeaderMedia 主消息
type Product_ProductBasicInfo_HeaderMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32                                            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                              // 媒体类型
	ImageInfo  *Image                                           `protobuf:"bytes,2,opt,name=image_info,json=imageInfo,proto3" json:"image_info,omitempty"`    // 图片信息
	ViewButton *Product_ProductBasicInfo_HeaderMedia_ViewButton `protobuf:"bytes,3,opt,name=view_button,json=viewButton,proto3" json:"view_button,omitempty"` // 查看按钮
}

func (x *Product_ProductBasicInfo_HeaderMedia) Reset() {
	*x = Product_ProductBasicInfo_HeaderMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_HeaderMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_HeaderMedia) ProtoMessage() {}

func (x *Product_ProductBasicInfo_HeaderMedia) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_HeaderMedia.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_HeaderMedia) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 1}
}

func (x *Product_ProductBasicInfo_HeaderMedia) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product_ProductBasicInfo_HeaderMedia) GetImageInfo() *Image {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

func (x *Product_ProductBasicInfo_HeaderMedia) GetViewButton() *Product_ProductBasicInfo_HeaderMedia_ViewButton {
	if x != nil {
		return x.ViewButton
	}
	return nil
}

// ProductTag 主消息
type Product_ProductBasicInfo_ProductTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon    *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`       // 标签图标
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 标签内容
}

func (x *Product_ProductBasicInfo_ProductTag) Reset() {
	*x = Product_ProductBasicInfo_ProductTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_ProductTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_ProductTag) ProtoMessage() {}

func (x *Product_ProductBasicInfo_ProductTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_ProductTag.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_ProductTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 2}
}

func (x *Product_ProductBasicInfo_ProductTag) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_ProductBasicInfo_ProductTag) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// ContentTip 主消息
type Product_ProductBasicInfo_ContentTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                   // 提示标题
	Context      string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`                               // 提示内容
	ClickTitle   string `protobuf:"bytes,3,opt,name=click_title,json=clickTitle,proto3" json:"click_title,omitempty"`       // 点击后的标题
	ClickContext string `protobuf:"bytes,4,opt,name=click_context,json=clickContext,proto3" json:"click_context,omitempty"` // 点击后的内容
}

func (x *Product_ProductBasicInfo_ContentTip) Reset() {
	*x = Product_ProductBasicInfo_ContentTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_ContentTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_ContentTip) ProtoMessage() {}

func (x *Product_ProductBasicInfo_ContentTip) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_ContentTip.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_ContentTip) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 3}
}

func (x *Product_ProductBasicInfo_ContentTip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_ProductBasicInfo_ContentTip) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Product_ProductBasicInfo_ContentTip) GetClickTitle() string {
	if x != nil {
		return x.ClickTitle
	}
	return ""
}

func (x *Product_ProductBasicInfo_ContentTip) GetClickContext() string {
	if x != nil {
		return x.ClickContext
	}
	return ""
}

// ProductSellingPoint 主消息
type Product_ProductBasicInfo_ProductSellingPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                   // 卖点类型
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`              // 卖点内容
	OriginalValue int64  `protobuf:"varint,3,opt,name=originalValue,proto3" json:"originalValue,omitempty"` // 原始值（可能用于表示某种数值信息）
}

func (x *Product_ProductBasicInfo_ProductSellingPoint) Reset() {
	*x = Product_ProductBasicInfo_ProductSellingPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_ProductSellingPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_ProductSellingPoint) ProtoMessage() {}

func (x *Product_ProductBasicInfo_ProductSellingPoint) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_ProductSellingPoint.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_ProductSellingPoint) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 4}
}

func (x *Product_ProductBasicInfo_ProductSellingPoint) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product_ProductBasicInfo_ProductSellingPoint) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Product_ProductBasicInfo_ProductSellingPoint) GetOriginalValue() int64 {
	if x != nil {
		return x.OriginalValue
	}
	return 0
}

// ProductSaleInfo 主消息
type Product_ProductBasicInfo_ProductSaleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleCnt          int64  `protobuf:"varint,1,opt,name=sale_cnt,json=saleCnt,proto3" json:"sale_cnt,omitempty"`                             // 销售数量
	HelpingSaleCnt   int64  `protobuf:"varint,2,opt,name=helping_sale_cnt,json=helpingSaleCnt,proto3" json:"helping_sale_cnt,omitempty"`      // 帮助销售数量
	WrittenOffAmount string `protobuf:"bytes,3,opt,name=written_off_amount,json=writtenOffAmount,proto3" json:"written_off_amount,omitempty"` // 核销金额
}

func (x *Product_ProductBasicInfo_ProductSaleInfo) Reset() {
	*x = Product_ProductBasicInfo_ProductSaleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_ProductSaleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_ProductSaleInfo) ProtoMessage() {}

func (x *Product_ProductBasicInfo_ProductSaleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_ProductSaleInfo.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_ProductSaleInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 5}
}

func (x *Product_ProductBasicInfo_ProductSaleInfo) GetSaleCnt() int64 {
	if x != nil {
		return x.SaleCnt
	}
	return 0
}

func (x *Product_ProductBasicInfo_ProductSaleInfo) GetHelpingSaleCnt() int64 {
	if x != nil {
		return x.HelpingSaleCnt
	}
	return 0
}

func (x *Product_ProductBasicInfo_ProductSaleInfo) GetWrittenOffAmount() string {
	if x != nil {
		return x.WrittenOffAmount
	}
	return ""
}

// RecentPurchasedUser 主消息
type Product_ProductBasicInfo_RecentPurchasedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                              // 用户 ID
	AvatarUri string `protobuf:"bytes,2,opt,name=avatar_uri,json=avatarUri,proto3" json:"avatar_uri,omitempty"` // 用户头像 URI
	Avatar    *Image `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                        // 用户头像信息
	Episodes  int64  `protobuf:"varint,4,opt,name=episodes,proto3" json:"episodes,omitempty"`                   // 购买期数
	OpenId    string `protobuf:"bytes,5000,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`       // 用户的 Open ID
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) Reset() {
	*x = Product_ProductBasicInfo_RecentPurchasedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_RecentPurchasedUser) ProtoMessage() {}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_RecentPurchasedUser.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_RecentPurchasedUser) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 6}
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) GetAvatarUri() string {
	if x != nil {
		return x.AvatarUri
	}
	return ""
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) GetEpisodes() int64 {
	if x != nil {
		return x.Episodes
	}
	return 0
}

func (x *Product_ProductBasicInfo_RecentPurchasedUser) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// ViewButton 子消息定义
type Product_ProductBasicInfo_HeaderMedia_ViewButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                          // 按钮内容文本
	Icon       *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                // 按钮图标
	JumpSchema string `protobuf:"bytes,3,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`  // 跳转 Schema
	SchemaType int32  `protobuf:"varint,4,opt,name=schema_type,json=schemaType,proto3" json:"schema_type,omitempty"` // Schema 类型
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) Reset() {
	*x = Product_ProductBasicInfo_HeaderMedia_ViewButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductBasicInfo_HeaderMedia_ViewButton) ProtoMessage() {}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductBasicInfo_HeaderMedia_ViewButton.ProtoReflect.Descriptor instead.
func (*Product_ProductBasicInfo_HeaderMedia_ViewButton) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 0, 1, 0}
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_ProductBasicInfo_HeaderMedia_ViewButton) GetSchemaType() int32 {
	if x != nil {
		return x.SchemaType
	}
	return 0
}

// PayButton 子消息
type Product_PaymentArea_PayButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                       // 按钮文本内容
	Icon          *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                             // 按钮图标
	JumpSchema    string `protobuf:"bytes,3,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`               // 跳转链接
	Avilable      int32  `protobuf:"varint,4,opt,name=avilable,proto3" json:"avilable,omitempty"`                                    // 按钮可用状态（例如：0-不可用，1-可用）
	CopyWriting   string `protobuf:"bytes,5,opt,name=copy_writing,json=copyWriting,proto3" json:"copy_writing,omitempty"`            // 复制文案
	ClickType     int32  `protobuf:"varint,6,opt,name=click_type,json=clickType,proto3" json:"click_type,omitempty"`                 // 点击类型（例如跳转、触发事件等）
	IsNewEntTrade bool   `protobuf:"varint,7,opt,name=is_new_ent_trade,json=isNewEntTrade,proto3" json:"is_new_ent_trade,omitempty"` // 是否为新企业交易
}

func (x *Product_PaymentArea_PayButton) Reset() {
	*x = Product_PaymentArea_PayButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PaymentArea_PayButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PaymentArea_PayButton) ProtoMessage() {}

func (x *Product_PaymentArea_PayButton) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PaymentArea_PayButton.ProtoReflect.Descriptor instead.
func (*Product_PaymentArea_PayButton) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 5, 0}
}

func (x *Product_PaymentArea_PayButton) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Product_PaymentArea_PayButton) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_PaymentArea_PayButton) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_PaymentArea_PayButton) GetAvilable() int32 {
	if x != nil {
		return x.Avilable
	}
	return 0
}

func (x *Product_PaymentArea_PayButton) GetCopyWriting() string {
	if x != nil {
		return x.CopyWriting
	}
	return ""
}

func (x *Product_PaymentArea_PayButton) GetClickType() int32 {
	if x != nil {
		return x.ClickType
	}
	return 0
}

func (x *Product_PaymentArea_PayButton) GetIsNewEntTrade() bool {
	if x != nil {
		return x.IsNewEntTrade
	}
	return false
}

// AdditionalButton 子消息
type Product_PaymentArea_AdditionalButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                            // 按钮文本内容
	Icon        *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                  // 按钮图标
	JumpSchema  string `protobuf:"bytes,3,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`    // 跳转链接
	Avilable    int32  `protobuf:"varint,4,opt,name=avilable,proto3" json:"avilable,omitempty"`                         // 按钮可用状态
	CopyWriting string `protobuf:"bytes,5,opt,name=copy_writing,json=copyWriting,proto3" json:"copy_writing,omitempty"` // 复制文案
}

func (x *Product_PaymentArea_AdditionalButton) Reset() {
	*x = Product_PaymentArea_AdditionalButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PaymentArea_AdditionalButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PaymentArea_AdditionalButton) ProtoMessage() {}

func (x *Product_PaymentArea_AdditionalButton) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PaymentArea_AdditionalButton.ProtoReflect.Descriptor instead.
func (*Product_PaymentArea_AdditionalButton) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 5, 1}
}

func (x *Product_PaymentArea_AdditionalButton) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Product_PaymentArea_AdditionalButton) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_PaymentArea_AdditionalButton) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Product_PaymentArea_AdditionalButton) GetAvilable() int32 {
	if x != nil {
		return x.Avilable
	}
	return 0
}

func (x *Product_PaymentArea_AdditionalButton) GetCopyWriting() string {
	if x != nil {
		return x.CopyWriting
	}
	return ""
}

// ProductRichText 子消息
type Product_ProductPriceRichText_ProductRichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`   // 文本内容
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"` // 文本样式（例如颜色、字体等）
	Link  string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`   // 超链接地址（可选）
}

func (x *Product_ProductPriceRichText_ProductRichText) Reset() {
	*x = Product_ProductPriceRichText_ProductRichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductPriceRichText_ProductRichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductPriceRichText_ProductRichText) ProtoMessage() {}

func (x *Product_ProductPriceRichText_ProductRichText) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductPriceRichText_ProductRichText.ProtoReflect.Descriptor instead.
func (*Product_ProductPriceRichText_ProductRichText) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 6, 1}
}

func (x *Product_ProductPriceRichText_ProductRichText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Product_ProductPriceRichText_ProductRichText) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Product_ProductPriceRichText_ProductRichText) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// ProductComment 子消息
type Product_ProductComments_ProductComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`            // 用户名
	Comment   string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`      // 评论内容
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 评论时间（Unix 时间戳）
}

func (x *Product_ProductComments_ProductComment) Reset() {
	*x = Product_ProductComments_ProductComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductComments_ProductComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductComments_ProductComment) ProtoMessage() {}

func (x *Product_ProductComments_ProductComment) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductComments_ProductComment.ProtoReflect.Descriptor instead.
func (*Product_ProductComments_ProductComment) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 7, 0}
}

func (x *Product_ProductComments_ProductComment) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Product_ProductComments_ProductComment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Product_ProductComments_ProductComment) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// PrivilegeConfigure 子消息
type Product_PrivilegeTicket_PrivilegeConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon            *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                                 // 图标
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 // 权益名称
	EntityType      int32  `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`                  // 实体类型
	PrivilegeTabKey int64  `protobuf:"varint,4,opt,name=privilege_tab_key,json=privilegeTabKey,proto3" json:"privilege_tab_key,omitempty"` // 权益标签键
	PrivilegeType   int32  `protobuf:"varint,5,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type,omitempty"`         // 权益类型
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) Reset() {
	*x = Product_PrivilegeTicket_PrivilegeConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PrivilegeTicket_PrivilegeConfigure) ProtoMessage() {}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PrivilegeTicket_PrivilegeConfigure.ProtoReflect.Descriptor instead.
func (*Product_PrivilegeTicket_PrivilegeConfigure) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 9, 0}
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) GetEntityType() int32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) GetPrivilegeTabKey() int64 {
	if x != nil {
		return x.PrivilegeTabKey
	}
	return 0
}

func (x *Product_PrivilegeTicket_PrivilegeConfigure) GetPrivilegeType() int32 {
	if x != nil {
		return x.PrivilegeType
	}
	return 0
}

// BindSubProductData 主消息
type Product_Combined_BindSubProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId       string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                     // 产品 ID
	ParentProductId string `protobuf:"bytes,2,opt,name=parent_product_id,json=parentProductId,proto3" json:"parent_product_id,omitempty"` // 父产品 ID
	Title           string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                              // 标题
	LiveStatus      int32  `protobuf:"varint,4,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`                 // 直播状态
	TicketStatus    int32  `protobuf:"varint,5,opt,name=ticket_status,json=ticketStatus,proto3" json:"ticket_status,omitempty"`           // 票据状态
	Detail          string `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`                                            // 详情描述
	Vid             string `protobuf:"bytes,7,opt,name=vid,proto3" json:"vid,omitempty"`                                                  // 视频 ID
	RoomId          string `protobuf:"bytes,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                              // 房间 ID
	DeliveryStatus  int32  `protobuf:"varint,9,opt,name=delivery_status,json=deliveryStatus,proto3" json:"delivery_status,omitempty"`     // 交付状态
	LiveTime        int64  `protobuf:"varint,10,opt,name=live_time,json=liveTime,proto3" json:"live_time,omitempty"`                      // 直播时间（Unix 时间戳）
	EndTime         int64  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                         // 结束时间（Unix 时间戳）
	LiveStartTime   int64  `protobuf:"varint,12,opt,name=live_start_time,json=liveStartTime,proto3" json:"live_start_time,omitempty"`     // 直播开始时间（Unix 时间戳）
	LiveEndTime     int64  `protobuf:"varint,13,opt,name=live_end_time,json=liveEndTime,proto3" json:"live_end_time,omitempty"`           // 直播结束时间（Unix 时间戳）
	ViewRight       int64  `protobuf:"varint,14,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                   // 查看权限
	IsReplay        bool   `protobuf:"varint,15,opt,name=is_replay,json=isReplay,proto3" json:"is_replay,omitempty"`                      // 是否为重播
	ReplayId        int64  `protobuf:"varint,16,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`                      // 重播 ID
	ReplayIdStr     string `protobuf:"bytes,17,opt,name=replay_id_str,json=replayIdStr,proto3" json:"replay_id_str,omitempty"`            // 重播 ID 字符串形式
	DisableReason   int32  `protobuf:"varint,18,opt,name=disable_reason,json=disableReason,proto3" json:"disable_reason,omitempty"`       // 禁用原因
}

func (x *Product_Combined_BindSubProductData) Reset() {
	*x = Product_Combined_BindSubProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined_BindSubProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined_BindSubProductData) ProtoMessage() {}

func (x *Product_Combined_BindSubProductData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined_BindSubProductData.ProtoReflect.Descriptor instead.
func (*Product_Combined_BindSubProductData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10, 0}
}

func (x *Product_Combined_BindSubProductData) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetParentProductId() string {
	if x != nil {
		return x.ParentProductId
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetTicketStatus() int32 {
	if x != nil {
		return x.TicketStatus
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetDeliveryStatus() int32 {
	if x != nil {
		return x.DeliveryStatus
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetLiveTime() int64 {
	if x != nil {
		return x.LiveTime
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetLiveStartTime() int64 {
	if x != nil {
		return x.LiveStartTime
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetLiveEndTime() int64 {
	if x != nil {
		return x.LiveEndTime
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetViewRight() int64 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetIsReplay() bool {
	if x != nil {
		return x.IsReplay
	}
	return false
}

func (x *Product_Combined_BindSubProductData) GetReplayId() int64 {
	if x != nil {
		return x.ReplayId
	}
	return 0
}

func (x *Product_Combined_BindSubProductData) GetReplayIdStr() string {
	if x != nil {
		return x.ReplayIdStr
	}
	return ""
}

func (x *Product_Combined_BindSubProductData) GetDisableReason() int32 {
	if x != nil {
		return x.DisableReason
	}
	return 0
}

// ParentProductSimpleData 主消息
type Product_Combined_ParentProductSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId             string                                                         `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                           // 产品 ID
	Title                 string                                                         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                    // 标题
	SubTitle              string                                                         `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                              // 副标题
	Cover                 *Image                                                         `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`                                                                    // 封面图片
	Status                int32                                                          `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                                                 // 状态
	ViewRight             int64                                                          `protobuf:"varint,6,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                                          // 查看权限
	BindSubProductCount   int32                                                          `protobuf:"varint,7,opt,name=bind_sub_product_count,json=bindSubProductCount,proto3" json:"bind_sub_product_count,omitempty"`        // 绑定的子产品数量
	Data                  []*Product_Combined_ParentProductSimpleData_PurchaseSimpleData `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`                                                                      // 购买数据列表
	SubTitleTag           string                                                         `protobuf:"bytes,9,opt,name=sub_title_tag,json=subTitleTag,proto3" json:"sub_title_tag,omitempty"`                                   // 副标题标签
	CurrentShowNum        int32                                                          `protobuf:"varint,10,opt,name=current_show_num,json=currentShowNum,proto3" json:"current_show_num,omitempty"`                        // 当前展示数量
	RemainSubTicketsCount int32                                                          `protobuf:"varint,11,opt,name=remain_sub_tickets_count,json=remainSubTicketsCount,proto3" json:"remain_sub_tickets_count,omitempty"` // 剩余子票据数量
	LatestFinishTime      int64                                                          `protobuf:"varint,12,opt,name=latest_finish_time,json=latestFinishTime,proto3" json:"latest_finish_time,omitempty"`                  // 最新完成时间（Unix 时间戳）
}

func (x *Product_Combined_ParentProductSimpleData) Reset() {
	*x = Product_Combined_ParentProductSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined_ParentProductSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined_ParentProductSimpleData) ProtoMessage() {}

func (x *Product_Combined_ParentProductSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined_ParentProductSimpleData.ProtoReflect.Descriptor instead.
func (*Product_Combined_ParentProductSimpleData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10, 1}
}

func (x *Product_Combined_ParentProductSimpleData) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Product_Combined_ParentProductSimpleData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData) GetViewRight() int64 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData) GetBindSubProductCount() int32 {
	if x != nil {
		return x.BindSubProductCount
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData) GetData() []*Product_Combined_ParentProductSimpleData_PurchaseSimpleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Product_Combined_ParentProductSimpleData) GetSubTitleTag() string {
	if x != nil {
		return x.SubTitleTag
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData) GetCurrentShowNum() int32 {
	if x != nil {
		return x.CurrentShowNum
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData) GetRemainSubTicketsCount() int32 {
	if x != nil {
		return x.RemainSubTicketsCount
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData) GetLatestFinishTime() int64 {
	if x != nil {
		return x.LatestFinishTime
	}
	return 0
}

// PurchaseSimpleData 主消息
type Product_Combined_ParentProductSimpleData_PurchaseSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            int32                                                                           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                                // 购买类型
	Name            string                                                                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 // 名称
	Tags            []*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag       `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`                                                 // 标签列表
	StartSellTime   int64                                                                           `protobuf:"varint,4,opt,name=start_sell_time,json=startSellTime,proto3" json:"start_sell_time,omitempty"`       // 开始销售时间（Unix 时间戳）
	ClosingSellTime int64                                                                           `protobuf:"varint,5,opt,name=closing_sell_time,json=closingSellTime,proto3" json:"closing_sell_time,omitempty"` // 结束销售时间（Unix 时间戳）
	SellStatus      int32                                                                           `protobuf:"varint,6,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`                  // 销售状态
	PurchaseStatus  int32                                                                           `protobuf:"varint,7,opt,name=purchase_status,json=purchaseStatus,proto3" json:"purchase_status,omitempty"`      // 购买状态
	PriceInfo       *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct `protobuf:"bytes,8,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`                      // 价格信息
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) Reset() {
	*x = Product_Combined_ParentProductSimpleData_PurchaseSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData) ProtoMessage() {}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined_ParentProductSimpleData_PurchaseSimpleData.ProtoReflect.Descriptor instead.
func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10, 1, 0}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetTags() []*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetStartSellTime() int64 {
	if x != nil {
		return x.StartSellTime
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetClosingSellTime() int64 {
	if x != nil {
		return x.ClosingSellTime
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetSellStatus() int32 {
	if x != nil {
		return x.SellStatus
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetPurchaseStatus() int32 {
	if x != nil {
		return x.PurchaseStatus
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData) GetPriceInfo() *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

// ProductTag 主消息
type Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon    *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`       // 图标
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 标签内容
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) Reset() {
	*x = Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) ProtoMessage() {}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag.ProtoReflect.Descriptor instead.
func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10, 1, 0, 0}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// ProductPriceStruct 主消息
type Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount             string  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`                                                    // 价格金额
	Currency           string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                                                // 货币类型
	Pos                int64   `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`                                                         // 位置标识或排序优先级
	PayType            []int32 `protobuf:"varint,4,rep,packed,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`                           // 支付类型列表
	FullPrice          string  `protobuf:"bytes,5,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`                             // 完整价格（原价）
	CountdownTimestamp int64   `protobuf:"varint,6,opt,name=countdown_timestamp,json=countdownTimestamp,proto3" json:"countdown_timestamp,omitempty"` // 倒计时结束时间（Unix 时间戳）
	Start              string  `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`                                                      // 开始时间
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) Reset() {
	*x = Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) ProtoMessage() {
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct.ProtoReflect.Descriptor instead.
func (*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 10, 1, 0, 1}
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetPayType() []int32 {
	if x != nil {
		return x.PayType
	}
	return nil
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetFullPrice() string {
	if x != nil {
		return x.FullPrice
	}
	return ""
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetCountdownTimestamp() int64 {
	if x != nil {
		return x.CountdownTimestamp
	}
	return 0
}

func (x *Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

// TextInfo 子消息
type Product_Comments_TextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId       int64                               `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                     // 评论 ID
	UserInfo        *Product_Comments_TextInfo_UserInfo `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`                         // 用户信息
	Text            string                              `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                                                 // 评论内容
	DiggCount       int32                               `protobuf:"varint,4,opt,name=digg_count,json=diggCount,proto3" json:"digg_count,omitempty"`                     // 点赞数量
	CreateTimeStamp int64                               `protobuf:"varint,5,opt,name=create_time_stamp,json=createTimeStamp,proto3" json:"create_time_stamp,omitempty"` // 评论创建时间（Unix 时间戳）
	CommentIdStr    string                              `protobuf:"bytes,6,opt,name=comment_id_str,json=commentIdStr,proto3" json:"comment_id_str,omitempty"`           // 评论 ID 的字符串形式
}

func (x *Product_Comments_TextInfo) Reset() {
	*x = Product_Comments_TextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Comments_TextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Comments_TextInfo) ProtoMessage() {}

func (x *Product_Comments_TextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Comments_TextInfo.ProtoReflect.Descriptor instead.
func (*Product_Comments_TextInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 11, 0}
}

func (x *Product_Comments_TextInfo) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *Product_Comments_TextInfo) GetUserInfo() *Product_Comments_TextInfo_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Product_Comments_TextInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Product_Comments_TextInfo) GetDiggCount() int32 {
	if x != nil {
		return x.DiggCount
	}
	return 0
}

func (x *Product_Comments_TextInfo) GetCreateTimeStamp() int64 {
	if x != nil {
		return x.CreateTimeStamp
	}
	return 0
}

func (x *Product_Comments_TextInfo) GetCommentIdStr() string {
	if x != nil {
		return x.CommentIdStr
	}
	return ""
}

// UserInfo 子消息
type Product_Comments_TextInfo_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   // 用户 ID
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 用户名称
	Avatar *Image `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                  // 用户头像信息
	OpenId string `protobuf:"bytes,5000,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"` // 用户的 Open ID
}

func (x *Product_Comments_TextInfo_UserInfo) Reset() {
	*x = Product_Comments_TextInfo_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Comments_TextInfo_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Comments_TextInfo_UserInfo) ProtoMessage() {}

func (x *Product_Comments_TextInfo_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Comments_TextInfo_UserInfo.ProtoReflect.Descriptor instead.
func (*Product_Comments_TextInfo_UserInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 11, 0, 0}
}

func (x *Product_Comments_TextInfo_UserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Product_Comments_TextInfo_UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product_Comments_TextInfo_UserInfo) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Product_Comments_TextInfo_UserInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// AuthorBasicInfo 子消息
type Product_Author_AuthorBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`           // 作者名称
	Intorduce string `protobuf:"bytes,2,opt,name=intorduce,proto3" json:"intorduce,omitempty"` // 作者简介
	Cover     *Image `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`         // 作者封面图片
}

func (x *Product_Author_AuthorBasicInfo) Reset() {
	*x = Product_Author_AuthorBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Author_AuthorBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Author_AuthorBasicInfo) ProtoMessage() {}

func (x *Product_Author_AuthorBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Author_AuthorBasicInfo.ProtoReflect.Descriptor instead.
func (*Product_Author_AuthorBasicInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 14, 0}
}

func (x *Product_Author_AuthorBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product_Author_AuthorBasicInfo) GetIntorduce() string {
	if x != nil {
		return x.Intorduce
	}
	return ""
}

func (x *Product_Author_AuthorBasicInfo) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

// User 子消息（假设结构，用于引用 User 定义）
type Product_Author_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // 用户 ID
	NickName      string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                       // 用户昵称
	Avatar        string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                                           // 用户头像 URL
	UserIdStr     string `protobuf:"bytes,4,opt,name=user_id_str,json=userIdStr,proto3" json:"user_id_str,omitempty"`                  // 用户 ID 的字符串形式
	UserOpenId    string `protobuf:"bytes,5000,opt,name=user_open_id,json=userOpenId,proto3" json:"user_open_id,omitempty"`            // 用户 Open ID
	UserOpenIdStr string `protobuf:"bytes,5001,opt,name=user_open_id_str,json=userOpenIdStr,proto3" json:"user_open_id_str,omitempty"` // 用户 Open ID 的字符串形式
}

func (x *Product_Author_User) Reset() {
	*x = Product_Author_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Author_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Author_User) ProtoMessage() {}

func (x *Product_Author_User) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Author_User.ProtoReflect.Descriptor instead.
func (*Product_Author_User) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 14, 1}
}

func (x *Product_Author_User) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Product_Author_User) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Product_Author_User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Product_Author_User) GetUserIdStr() string {
	if x != nil {
		return x.UserIdStr
	}
	return ""
}

func (x *Product_Author_User) GetUserOpenId() string {
	if x != nil {
		return x.UserOpenId
	}
	return ""
}

func (x *Product_Author_User) GetUserOpenIdStr() string {
	if x != nil {
		return x.UserOpenIdStr
	}
	return ""
}

// 子消息 RelatedSkuSimpleInfo
type Product_SKU_RelatedSkuSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId     string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`             // SKU ID
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品 ID
}

func (x *Product_SKU_RelatedSkuSimpleInfo) Reset() {
	*x = Product_SKU_RelatedSkuSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU_RelatedSkuSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU_RelatedSkuSimpleInfo) ProtoMessage() {}

func (x *Product_SKU_RelatedSkuSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU_RelatedSkuSimpleInfo.ProtoReflect.Descriptor instead.
func (*Product_SKU_RelatedSkuSimpleInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16, 0}
}

func (x *Product_SKU_RelatedSkuSimpleInfo) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *Product_SKU_RelatedSkuSimpleInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 子消息 CameraInfo
type Product_SKU_CameraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId    int64  `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`           // 摄像机 ID
	CameraIdStr string `protobuf:"bytes,2,opt,name=camera_id_str,json=cameraIdStr,proto3" json:"camera_id_str,omitempty"` // 摄像机 ID 字符串
}

func (x *Product_SKU_CameraInfo) Reset() {
	*x = Product_SKU_CameraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU_CameraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU_CameraInfo) ProtoMessage() {}

func (x *Product_SKU_CameraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU_CameraInfo.ProtoReflect.Descriptor instead.
func (*Product_SKU_CameraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16, 1}
}

func (x *Product_SKU_CameraInfo) GetCameraId() int64 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *Product_SKU_CameraInfo) GetCameraIdStr() string {
	if x != nil {
		return x.CameraIdStr
	}
	return ""
}

// 子消息 EntityIDsMap
type Product_SKU_EntityIDsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType        int32   `protobuf:"varint,1,opt,name=entityType,proto3" json:"entityType,omitempty"`                                                  // 实体类型
	ReleatedEntityIds []int64 `protobuf:"varint,23,rep,packed,name=releated_entity_ids,json=releatedEntityIds,proto3" json:"releated_entity_ids,omitempty"` // 相关实体 ID 列表
}

func (x *Product_SKU_EntityIDsMap) Reset() {
	*x = Product_SKU_EntityIDsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU_EntityIDsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU_EntityIDsMap) ProtoMessage() {}

func (x *Product_SKU_EntityIDsMap) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU_EntityIDsMap.ProtoReflect.Descriptor instead.
func (*Product_SKU_EntityIDsMap) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16, 2}
}

func (x *Product_SKU_EntityIDsMap) GetEntityType() int32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *Product_SKU_EntityIDsMap) GetReleatedEntityIds() []int64 {
	if x != nil {
		return x.ReleatedEntityIds
	}
	return nil
}

// 子消息 LimitedFreeNotice
type Product_SKU_LimitedFreeNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUri string             `protobuf:"bytes,1,opt,name=icon_uri,json=iconUri,proto3" json:"icon_uri,omitempty"` // 图标 URI
	Icon    *Product_SKU_Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                      // 图标对象
	Content string             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                // 通知内容
}

func (x *Product_SKU_LimitedFreeNotice) Reset() {
	*x = Product_SKU_LimitedFreeNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU_LimitedFreeNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU_LimitedFreeNotice) ProtoMessage() {}

func (x *Product_SKU_LimitedFreeNotice) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU_LimitedFreeNotice.ProtoReflect.Descriptor instead.
func (*Product_SKU_LimitedFreeNotice) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16, 3}
}

func (x *Product_SKU_LimitedFreeNotice) GetIconUri() string {
	if x != nil {
		return x.IconUri
	}
	return ""
}

func (x *Product_SKU_LimitedFreeNotice) GetIcon() *Product_SKU_Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Product_SKU_LimitedFreeNotice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 子消息 Image
type Product_SKU_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *Product_SKU_Image) Reset() {
	*x = Product_SKU_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SKU_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SKU_Image) ProtoMessage() {}

func (x *Product_SKU_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SKU_Image.ProtoReflect.Descriptor instead.
func (*Product_SKU_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 16, 4}
}

func (x *Product_SKU_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Product_SKU_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Product_SKU_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ProductPriceStruct 主消息
type Product_SubscribeMember_ProductPriceStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount             string  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`                                                    // 金额
	Currency           string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                                                // 货币类型
	Pos                int64   `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`                                                         // 位置标识
	PayType            []int32 `protobuf:"varint,4,rep,packed,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`                           // 支付类型列表
	FullPrice          string  `protobuf:"bytes,5,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`                             // 原价
	CountdownTimestamp int64   `protobuf:"varint,6,opt,name=countdown_timestamp,json=countdownTimestamp,proto3" json:"countdown_timestamp,omitempty"` // 倒计时结束时间（Unix 时间戳）
	Start              string  `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`                                                      // 开始时间
}

func (x *Product_SubscribeMember_ProductPriceStruct) Reset() {
	*x = Product_SubscribeMember_ProductPriceStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_SubscribeMember_ProductPriceStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_SubscribeMember_ProductPriceStruct) ProtoMessage() {}

func (x *Product_SubscribeMember_ProductPriceStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_SubscribeMember_ProductPriceStruct.ProtoReflect.Descriptor instead.
func (*Product_SubscribeMember_ProductPriceStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{102, 17, 0}
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetPayType() []int32 {
	if x != nil {
		return x.PayType
	}
	return nil
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetFullPrice() string {
	if x != nil {
		return x.FullPrice
	}
	return ""
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetCountdownTimestamp() int64 {
	if x != nil {
		return x.CountdownTimestamp
	}
	return 0
}

func (x *Product_SubscribeMember_ProductPriceStruct) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

// PaidLiveItemInfo 主消息
type PrivilegeInfo_PaidLiveItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       // 项目 ID
	ItemType int32 `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"` // 项目类型
}

func (x *PrivilegeInfo_PaidLiveItemInfo) Reset() {
	*x = PrivilegeInfo_PaidLiveItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveItemInfo) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveItemInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveItemInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 0}
}

func (x *PrivilegeInfo_PaidLiveItemInfo) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveItemInfo) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

// PrivilegeBaseInfo 主消息
type PrivilegeInfo_PrivilegeBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaidLiveType int32 `protobuf:"varint,1,opt,name=paid_live_type,json=paidLiveType,proto3" json:"paid_live_type,omitempty"` // 付费直播类型
	ViewRight    int32 `protobuf:"varint,2,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`            // 观看权限
	Delivery     int32 `protobuf:"varint,3,opt,name=delivery,proto3" json:"delivery,omitempty"`                               // 交付方式
}

func (x *PrivilegeInfo_PrivilegeBaseInfo) Reset() {
	*x = PrivilegeInfo_PrivilegeBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PrivilegeBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PrivilegeBaseInfo) ProtoMessage() {}

func (x *PrivilegeInfo_PrivilegeBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PrivilegeBaseInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PrivilegeBaseInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 1}
}

func (x *PrivilegeInfo_PrivilegeBaseInfo) GetPaidLiveType() int32 {
	if x != nil {
		return x.PaidLiveType
	}
	return 0
}

func (x *PrivilegeInfo_PrivilegeBaseInfo) GetViewRight() int32 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *PrivilegeInfo_PrivilegeBaseInfo) GetDelivery() int32 {
	if x != nil {
		return x.Delivery
	}
	return 0
}

// PrivilegeUrl 主消息
type PrivilegeInfo_PrivilegeUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivilegePanelSchema string `protobuf:"bytes,1,opt,name=privilege_panel_schema,json=privilegePanelSchema,proto3" json:"privilege_panel_schema,omitempty"` // 权益面板链接或模式
	PrivilegeCardSchema  string `protobuf:"bytes,2,opt,name=privilege_card_schema,json=privilegeCardSchema,proto3" json:"privilege_card_schema,omitempty"`    // 权益卡片链接或模式
}

func (x *PrivilegeInfo_PrivilegeUrl) Reset() {
	*x = PrivilegeInfo_PrivilegeUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PrivilegeUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PrivilegeUrl) ProtoMessage() {}

func (x *PrivilegeInfo_PrivilegeUrl) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PrivilegeUrl.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PrivilegeUrl) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 2}
}

func (x *PrivilegeInfo_PrivilegeUrl) GetPrivilegePanelSchema() string {
	if x != nil {
		return x.PrivilegePanelSchema
	}
	return ""
}

func (x *PrivilegeInfo_PrivilegeUrl) GetPrivilegeCardSchema() string {
	if x != nil {
		return x.PrivilegeCardSchema
	}
	return ""
}

// PaidLiveUIBaseConfig 主消息
type PrivilegeInfo_PaidLiveUIBaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaidLiveType            int32                                     `protobuf:"varint,1,opt,name=paid_live_type,json=paidLiveType,proto3" json:"paid_live_type,omitempty"`                                      // 付费直播类型
	PaidLiveIcon            *PrivilegeInfo_PaidLiveUIBaseConfig_Image `protobuf:"bytes,2,opt,name=paid_live_icon,json=paidLiveIcon,proto3" json:"paid_live_icon,omitempty"`                                       // 付费直播图标
	PaidLiveIconTitle       string                                    `protobuf:"bytes,3,opt,name=paid_live_icon_title,json=paidLiveIconTitle,proto3" json:"paid_live_icon_title,omitempty"`                      // 图标标题
	Duration                int64                                     `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                                                                    // 付费直播时长
	NoRightEndTitle         string                                    `protobuf:"bytes,5,opt,name=no_right_end_title,json=noRightEndTitle,proto3" json:"no_right_end_title,omitempty"`                            // 无权限时的结束标题
	NoRightEndSubTitle      string                                    `protobuf:"bytes,6,opt,name=no_right_end_sub_title,json=noRightEndSubTitle,proto3" json:"no_right_end_sub_title,omitempty"`                 // 无权限时的结束副标题
	HasRightEndTitle        string                                    `protobuf:"bytes,7,opt,name=has_right_end_title,json=hasRightEndTitle,proto3" json:"has_right_end_title,omitempty"`                         // 有权限时的结束标题
	HasRightEndSubTitle     string                                    `protobuf:"bytes,8,opt,name=has_right_end_sub_title,json=hasRightEndSubTitle,proto3" json:"has_right_end_sub_title,omitempty"`              // 有权限时的结束副标题
	PaidConversionJumpUrl   string                                    `protobuf:"bytes,9,opt,name=paid_conversion_jump_url,json=paidConversionJumpUrl,proto3" json:"paid_conversion_jump_url,omitempty"`          // 付费转化跳转 URL
	PanelSixJumpUrl         string                                    `protobuf:"bytes,10,opt,name=panel_six_jump_url,json=panelSixJumpUrl,proto3" json:"panel_six_jump_url,omitempty"`                           // 六宫格跳转 URL
	FeedPagePurchaseBtnWord string                                    `protobuf:"bytes,11,opt,name=feed_page_purchase_btn_word,json=feedPagePurchaseBtnWord,proto3" json:"feed_page_purchase_btn_word,omitempty"` // 购买按钮文案（推荐页）
	PurchaseBtnWord         string                                    `protobuf:"bytes,12,opt,name=purchase_btn_word,json=purchaseBtnWord,proto3" json:"purchase_btn_word,omitempty"`                             // 购买按钮文案
	ImShareTopTitle         string                                    `protobuf:"bytes,13,opt,name=im_share_top_title,json=imShareTopTitle,proto3" json:"im_share_top_title,omitempty"`                           // IM 分享顶部标题
	ImShareBottomTitle      string                                    `protobuf:"bytes,14,opt,name=im_share_bottom_title,json=imShareBottomTitle,proto3" json:"im_share_bottom_title,omitempty"`                  // IM 分享底部标题
	SearchCardTopTitle      string                                    `protobuf:"bytes,15,opt,name=search_card_top_title,json=searchCardTopTitle,proto3" json:"search_card_top_title,omitempty"`                  // 搜索卡片顶部标题
	PanelFeedJumpUrl        string                                    `protobuf:"bytes,16,opt,name=panel_feed_jump_url,json=panelFeedJumpUrl,proto3" json:"panel_feed_jump_url,omitempty"`                        // 面板跳转 URL（推荐页）
	PanelImCardJumpUrl      string                                    `protobuf:"bytes,17,opt,name=panel_im_card_jump_url,json=panelImCardJumpUrl,proto3" json:"panel_im_card_jump_url,omitempty"`                // 面板跳转 URL（IM 卡片）
	PanelInRoomJumpUrl      string                                    `protobuf:"bytes,18,opt,name=panel_in_room_jump_url,json=panelInRoomJumpUrl,proto3" json:"panel_in_room_jump_url,omitempty"`                // 面板跳转 URL（直播间）
	PanelSearchCardJumpUrl  string                                    `protobuf:"bytes,19,opt,name=panel_search_card_jump_url,json=panelSearchCardJumpUrl,proto3" json:"panel_search_card_jump_url,omitempty"`    // 面板跳转 URL（搜索卡片）
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) Reset() {
	*x = PrivilegeInfo_PaidLiveUIBaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveUIBaseConfig) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveUIBaseConfig.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveUIBaseConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 3}
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPaidLiveType() int32 {
	if x != nil {
		return x.PaidLiveType
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPaidLiveIcon() *PrivilegeInfo_PaidLiveUIBaseConfig_Image {
	if x != nil {
		return x.PaidLiveIcon
	}
	return nil
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPaidLiveIconTitle() string {
	if x != nil {
		return x.PaidLiveIconTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetNoRightEndTitle() string {
	if x != nil {
		return x.NoRightEndTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetNoRightEndSubTitle() string {
	if x != nil {
		return x.NoRightEndSubTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetHasRightEndTitle() string {
	if x != nil {
		return x.HasRightEndTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetHasRightEndSubTitle() string {
	if x != nil {
		return x.HasRightEndSubTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPaidConversionJumpUrl() string {
	if x != nil {
		return x.PaidConversionJumpUrl
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPanelSixJumpUrl() string {
	if x != nil {
		return x.PanelSixJumpUrl
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetFeedPagePurchaseBtnWord() string {
	if x != nil {
		return x.FeedPagePurchaseBtnWord
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPurchaseBtnWord() string {
	if x != nil {
		return x.PurchaseBtnWord
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetImShareTopTitle() string {
	if x != nil {
		return x.ImShareTopTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetImShareBottomTitle() string {
	if x != nil {
		return x.ImShareBottomTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetSearchCardTopTitle() string {
	if x != nil {
		return x.SearchCardTopTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPanelFeedJumpUrl() string {
	if x != nil {
		return x.PanelFeedJumpUrl
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPanelImCardJumpUrl() string {
	if x != nil {
		return x.PanelImCardJumpUrl
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPanelInRoomJumpUrl() string {
	if x != nil {
		return x.PanelInRoomJumpUrl
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig) GetPanelSearchCardJumpUrl() string {
	if x != nil {
		return x.PanelSearchCardJumpUrl
	}
	return ""
}

// PaidLiveConfig 主消息
type PrivilegeInfo_PaidLiveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuId               int64                                     `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                               // SPU ID
	SpuIdStr            string                                    `protobuf:"bytes,2,opt,name=spu_id_str,json=spuIdStr,proto3" json:"spu_id_str,omitempty"`                                     // SPU ID 字符串
	SkuId               int64                                     `protobuf:"varint,3,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                               // SKU ID
	SkuIdStr            string                                    `protobuf:"bytes,4,opt,name=sku_id_str,json=skuIdStr,proto3" json:"sku_id_str,omitempty"`                                     // SKU ID 字符串
	Title               string                                    `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                             // 标题
	SubTitle            string                                    `protobuf:"bytes,6,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                                       // 副标题
	Tags                []string                                  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                                               // 标签列表
	Cover               *PrivilegeInfo_PaidLiveConfig_Image       `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover,omitempty"`                                                             // 封面图片
	SellStatus          int32                                     `protobuf:"varint,9,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`                                // 销售状态
	Status              int32                                     `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                                         // 状态
	IosPayPriceInfo     []*PrivilegeInfo_PaidLiveConfig_PriceInfo `protobuf:"bytes,11,rep,name=ios_pay_price_info,json=iosPayPriceInfo,proto3" json:"ios_pay_price_info,omitempty"`             // iOS 平台支付价格信息
	AndroidPayPriceInfo []*PrivilegeInfo_PaidLiveConfig_PriceInfo `protobuf:"bytes,12,rep,name=android_pay_price_info,json=androidPayPriceInfo,proto3" json:"android_pay_price_info,omitempty"` // Android 平台支付价格信息
	UserRight           *PrivilegeInfo_PaidLiveConfig_UserRight   `protobuf:"bytes,13,opt,name=user_right,json=userRight,proto3" json:"user_right,omitempty"`                                   // 用户权益信息
}

func (x *PrivilegeInfo_PaidLiveConfig) Reset() {
	*x = PrivilegeInfo_PaidLiveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveConfig) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveConfig.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 4}
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSpuIdStr() string {
	if x != nil {
		return x.SpuIdStr
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSkuIdStr() string {
	if x != nil {
		return x.SkuIdStr
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PrivilegeInfo_PaidLiveConfig) GetCover() *PrivilegeInfo_PaidLiveConfig_Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *PrivilegeInfo_PaidLiveConfig) GetSellStatus() int32 {
	if x != nil {
		return x.SellStatus
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig) GetIosPayPriceInfo() []*PrivilegeInfo_PaidLiveConfig_PriceInfo {
	if x != nil {
		return x.IosPayPriceInfo
	}
	return nil
}

func (x *PrivilegeInfo_PaidLiveConfig) GetAndroidPayPriceInfo() []*PrivilegeInfo_PaidLiveConfig_PriceInfo {
	if x != nil {
		return x.AndroidPayPriceInfo
	}
	return nil
}

func (x *PrivilegeInfo_PaidLiveConfig) GetUserRight() *PrivilegeInfo_PaidLiveConfig_UserRight {
	if x != nil {
		return x.UserRight
	}
	return nil
}

// 图片信息
type PrivilegeInfo_PaidLiveUIBaseConfig_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) Reset() {
	*x = PrivilegeInfo_PaidLiveUIBaseConfig_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveUIBaseConfig_Image) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveUIBaseConfig_Image.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveUIBaseConfig_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 3, 0}
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveUIBaseConfig_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 图片信息
type PrivilegeInfo_PaidLiveConfig_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *PrivilegeInfo_PaidLiveConfig_Image) Reset() {
	*x = PrivilegeInfo_PaidLiveConfig_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveConfig_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveConfig_Image) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveConfig_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveConfig_Image.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveConfig_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 4, 0}
}

func (x *PrivilegeInfo_PaidLiveConfig_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PrivilegeInfo_PaidLiveConfig_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 支付价格信息
type PrivilegeInfo_PaidLiveConfig_PriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayType       int32 `protobuf:"varint,1,opt,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`                   // 支付类型
	Price         int64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`                                      // 价格
	RightDuration int32 `protobuf:"varint,3,opt,name=right_duration,json=rightDuration,proto3" json:"right_duration,omitempty"` // 权益时长（单位：天）
}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) Reset() {
	*x = PrivilegeInfo_PaidLiveConfig_PriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveConfig_PriceInfo) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveConfig_PriceInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveConfig_PriceInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 4, 1}
}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) GetPayType() int32 {
	if x != nil {
		return x.PayType
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_PriceInfo) GetRightDuration() int32 {
	if x != nil {
		return x.RightDuration
	}
	return 0
}

// 用户权益信息
type PrivilegeInfo_PaidLiveConfig_UserRight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewRight          int32 `protobuf:"varint,1,opt,name=view_right,json=viewRight,proto3" json:"view_right,omitempty"`                              // 观看权限
	Duration           int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                                 // 权益持续时间
	Delivery           int32 `protobuf:"varint,6,opt,name=delivery,proto3" json:"delivery,omitempty"`                                                 // 交付方式
	NeedDeliveryNotice bool  `protobuf:"varint,7,opt,name=need_delivery_notice,json=needDeliveryNotice,proto3" json:"need_delivery_notice,omitempty"` // 是否需要交付通知
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) Reset() {
	*x = PrivilegeInfo_PaidLiveConfig_UserRight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeInfo_PaidLiveConfig_UserRight) ProtoMessage() {}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeInfo_PaidLiveConfig_UserRight.ProtoReflect.Descriptor instead.
func (*PrivilegeInfo_PaidLiveConfig_UserRight) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{103, 4, 2}
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) GetViewRight() int32 {
	if x != nil {
		return x.ViewRight
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) GetDelivery() int32 {
	if x != nil {
		return x.Delivery
	}
	return 0
}

func (x *PrivilegeInfo_PaidLiveConfig_UserRight) GetNeedDeliveryNotice() bool {
	if x != nil {
		return x.NeedDeliveryNotice
	}
	return false
}

// Question 子消息
type FeedbackCard_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionKey  string                         `protobuf:"bytes,1,opt,name=question_key,json=questionKey,proto3" json:"question_key,omitempty"`    // 问题的唯一标识
	QuestionText string                         `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"` // 问题内容
	Type         int64                          `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                    // 问题类型
	Options      []*FeedbackCard_Option         `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`                               // 问题选项列表
	QuestionId   int64                          `protobuf:"varint,5,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`      // 问题 ID
	RoomCards    []*FeedbackCard_RoomCardStruct `protobuf:"bytes,6,rep,name=room_cards,json=roomCards,proto3" json:"room_cards,omitempty"`          // 房间卡片列表
}

func (x *FeedbackCard_Question) Reset() {
	*x = FeedbackCard_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard_Question) ProtoMessage() {}

func (x *FeedbackCard_Question) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard_Question.ProtoReflect.Descriptor instead.
func (*FeedbackCard_Question) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106, 0}
}

func (x *FeedbackCard_Question) GetQuestionKey() string {
	if x != nil {
		return x.QuestionKey
	}
	return ""
}

func (x *FeedbackCard_Question) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *FeedbackCard_Question) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FeedbackCard_Question) GetOptions() []*FeedbackCard_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *FeedbackCard_Question) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *FeedbackCard_Question) GetRoomCards() []*FeedbackCard_RoomCardStruct {
	if x != nil {
		return x.RoomCards
	}
	return nil
}

// Option 子消息
type FeedbackCard_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                             // 选项的唯一标识
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                           // 选项内容
	SubQuestionId int64  `protobuf:"varint,3,opt,name=sub_question_id,json=subQuestionId,proto3" json:"sub_question_id,omitempty"` // 子问题 ID
	Negative      bool   `protobuf:"varint,4,opt,name=negative,proto3" json:"negative,omitempty"`                                  // 是否为否定选项
	ToastText     string `protobuf:"bytes,5,opt,name=toast_text,json=toastText,proto3" json:"toast_text,omitempty"`                // 提示文本
	Tendency      int32  `protobuf:"varint,6,opt,name=tendency,proto3" json:"tendency,omitempty"`                                  // 倾向性指标
}

func (x *FeedbackCard_Option) Reset() {
	*x = FeedbackCard_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard_Option) ProtoMessage() {}

func (x *FeedbackCard_Option) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard_Option.ProtoReflect.Descriptor instead.
func (*FeedbackCard_Option) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106, 1}
}

func (x *FeedbackCard_Option) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FeedbackCard_Option) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FeedbackCard_Option) GetSubQuestionId() int64 {
	if x != nil {
		return x.SubQuestionId
	}
	return 0
}

func (x *FeedbackCard_Option) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *FeedbackCard_Option) GetToastText() string {
	if x != nil {
		return x.ToastText
	}
	return ""
}

func (x *FeedbackCard_Option) GetTendency() int32 {
	if x != nil {
		return x.Tendency
	}
	return 0
}

// RoomCardStruct 子消息
type FeedbackCard_RoomCardStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *Room  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                         // 房间数据
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                       // 卡片标题
	SubTitle string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"` // 卡片副标题
}

func (x *FeedbackCard_RoomCardStruct) Reset() {
	*x = FeedbackCard_RoomCardStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard_RoomCardStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard_RoomCardStruct) ProtoMessage() {}

func (x *FeedbackCard_RoomCardStruct) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard_RoomCardStruct.ProtoReflect.Descriptor instead.
func (*FeedbackCard_RoomCardStruct) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106, 2}
}

func (x *FeedbackCard_RoomCardStruct) GetData() *Room {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FeedbackCard_RoomCardStruct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeedbackCard_RoomCardStruct) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

// Condition 子消息
type FeedbackCard_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTime          int64                          `protobuf:"varint,1,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`                              // 开始时间戳
	ToTime            int64                          `protobuf:"varint,2,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`                                    // 结束时间戳
	ActionIds         []int64                        `protobuf:"varint,3,rep,packed,name=action_ids,json=actionIds,proto3" json:"action_ids,omitempty"`                    // 动作 ID 列表
	ActionType        int64                          `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`                        // 动作类型
	PreviewTime       int64                          `protobuf:"varint,5,opt,name=preview_time,json=previewTime,proto3" json:"preview_time,omitempty"`                     // 预览时间
	PcuLowerThreshold int64                          `protobuf:"varint,6,opt,name=pcu_lower_threshold,json=pcuLowerThreshold,proto3" json:"pcu_lower_threshold,omitempty"` // 最低并发用户阈值
	ClientImpression  *FeedbackCard_ClientImpression `protobuf:"bytes,7,opt,name=client_impression,json=clientImpression,proto3" json:"client_impression,omitempty"`       // 客户端印象
}

func (x *FeedbackCard_Condition) Reset() {
	*x = FeedbackCard_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard_Condition) ProtoMessage() {}

func (x *FeedbackCard_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard_Condition.ProtoReflect.Descriptor instead.
func (*FeedbackCard_Condition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106, 3}
}

func (x *FeedbackCard_Condition) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *FeedbackCard_Condition) GetToTime() int64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

func (x *FeedbackCard_Condition) GetActionIds() []int64 {
	if x != nil {
		return x.ActionIds
	}
	return nil
}

func (x *FeedbackCard_Condition) GetActionType() int64 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *FeedbackCard_Condition) GetPreviewTime() int64 {
	if x != nil {
		return x.PreviewTime
	}
	return 0
}

func (x *FeedbackCard_Condition) GetPcuLowerThreshold() int64 {
	if x != nil {
		return x.PcuLowerThreshold
	}
	return 0
}

func (x *FeedbackCard_Condition) GetClientImpression() *FeedbackCard_ClientImpression {
	if x != nil {
		return x.ClientImpression
	}
	return nil
}

// ClientImpression 子消息
type FeedbackCard_ClientImpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreSubmitCounts       int64 `protobuf:"varint,1,opt,name=ignore_submit_counts,json=ignoreSubmitCounts,proto3" json:"ignore_submit_counts,omitempty"`                     // 忽略提交次数
	IgnoreSubmitShowInterval int64 `protobuf:"varint,2,opt,name=ignore_submit_show_interval,json=ignoreSubmitShowInterval,proto3" json:"ignore_submit_show_interval,omitempty"` // 忽略提交显示间隔
	EndingPageShowDuration   int64 `protobuf:"varint,3,opt,name=ending_page_show_duration,json=endingPageShowDuration,proto3" json:"ending_page_show_duration,omitempty"`       // 结束页显示时长
}

func (x *FeedbackCard_ClientImpression) Reset() {
	*x = FeedbackCard_ClientImpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackCard_ClientImpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCard_ClientImpression) ProtoMessage() {}

func (x *FeedbackCard_ClientImpression) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCard_ClientImpression.ProtoReflect.Descriptor instead.
func (*FeedbackCard_ClientImpression) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{106, 4}
}

func (x *FeedbackCard_ClientImpression) GetIgnoreSubmitCounts() int64 {
	if x != nil {
		return x.IgnoreSubmitCounts
	}
	return 0
}

func (x *FeedbackCard_ClientImpression) GetIgnoreSubmitShowInterval() int64 {
	if x != nil {
		return x.IgnoreSubmitShowInterval
	}
	return 0
}

func (x *FeedbackCard_ClientImpression) GetEndingPageShowDuration() int64 {
	if x != nil {
		return x.EndingPageShowDuration
	}
	return 0
}

// GuestAnchor 子消息
type UnionLiveInfo_GuestAnchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`      // 用户信息
	Tag    string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`        // 主播标签
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // 主播状态
}

func (x *UnionLiveInfo_GuestAnchor) Reset() {
	*x = UnionLiveInfo_GuestAnchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionLiveInfo_GuestAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionLiveInfo_GuestAnchor) ProtoMessage() {}

func (x *UnionLiveInfo_GuestAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionLiveInfo_GuestAnchor.ProtoReflect.Descriptor instead.
func (*UnionLiveInfo_GuestAnchor) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{113, 0}
}

func (x *UnionLiveInfo_GuestAnchor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UnionLiveInfo_GuestAnchor) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UnionLiveInfo_GuestAnchor) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// HighLightInfo 子消息
type RelevantRecommendation_HighLightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainUrl string `protobuf:"bytes,1,opt,name=main_url,json=mainUrl,proto3" json:"main_url,omitempty"` // 主高亮 URL
	BakUrl  string `protobuf:"bytes,2,opt,name=bak_url,json=bakUrl,proto3" json:"bak_url,omitempty"`    // 备用高亮 URL
}

func (x *RelevantRecommendation_HighLightInfo) Reset() {
	*x = RelevantRecommendation_HighLightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation_HighLightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation_HighLightInfo) ProtoMessage() {}

func (x *RelevantRecommendation_HighLightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation_HighLightInfo.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation_HighLightInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120, 0}
}

func (x *RelevantRecommendation_HighLightInfo) GetMainUrl() string {
	if x != nil {
		return x.MainUrl
	}
	return ""
}

func (x *RelevantRecommendation_HighLightInfo) GetBakUrl() string {
	if x != nil {
		return x.BakUrl
	}
	return ""
}

// EcomInfo 子消息
type RelevantRecommendation_EcomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   int64  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`      // 商品 ID
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"` // 商品名称
}

func (x *RelevantRecommendation_EcomInfo) Reset() {
	*x = RelevantRecommendation_EcomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation_EcomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation_EcomInfo) ProtoMessage() {}

func (x *RelevantRecommendation_EcomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation_EcomInfo.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation_EcomInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120, 1}
}

func (x *RelevantRecommendation_EcomInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *RelevantRecommendation_EcomInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

// VsInfo 子消息
type RelevantRecommendation_VsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Episodes []*RelevantRecommendation_VsInfo_Episode `protobuf:"bytes,1,rep,name=episodes,proto3" json:"episodes,omitempty"` // 比赛信息的剧集列表
}

func (x *RelevantRecommendation_VsInfo) Reset() {
	*x = RelevantRecommendation_VsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation_VsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation_VsInfo) ProtoMessage() {}

func (x *RelevantRecommendation_VsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation_VsInfo.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation_VsInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120, 2}
}

func (x *RelevantRecommendation_VsInfo) GetEpisodes() []*RelevantRecommendation_VsInfo_Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

// WhiteCategoryInfo 子消息
type RelevantRecommendation_WhiteCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstLevelTagId int64 `protobuf:"varint,1,opt,name=first_level_tag_id,json=firstLevelTagId,proto3" json:"first_level_tag_id,omitempty"` // 一级分类标签 ID
}

func (x *RelevantRecommendation_WhiteCategoryInfo) Reset() {
	*x = RelevantRecommendation_WhiteCategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation_WhiteCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation_WhiteCategoryInfo) ProtoMessage() {}

func (x *RelevantRecommendation_WhiteCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation_WhiteCategoryInfo.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation_WhiteCategoryInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120, 3}
}

func (x *RelevantRecommendation_WhiteCategoryInfo) GetFirstLevelTagId() int64 {
	if x != nil {
		return x.FirstLevelTagId
	}
	return 0
}

// Episode 子消息
type RelevantRecommendation_VsInfo_Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId     int64  `protobuf:"varint,1,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`            // 剧集 ID
	EpisodeName   string `protobuf:"bytes,2,opt,name=episode_name,json=episodeName,proto3" json:"episode_name,omitempty"`       // 剧集名称
	EpisodeCover  *Image `protobuf:"bytes,3,opt,name=episode_cover,json=episodeCover,proto3" json:"episode_cover,omitempty"`    // 剧集封面
	CurrentPeriod string `protobuf:"bytes,4,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"` // 当前周期
	SeasonId      int64  `protobuf:"varint,5,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`               // 季度 ID
	ItemId        string `protobuf:"bytes,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                      // 项目 ID
}

func (x *RelevantRecommendation_VsInfo_Episode) Reset() {
	*x = RelevantRecommendation_VsInfo_Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantRecommendation_VsInfo_Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantRecommendation_VsInfo_Episode) ProtoMessage() {}

func (x *RelevantRecommendation_VsInfo_Episode) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantRecommendation_VsInfo_Episode.ProtoReflect.Descriptor instead.
func (*RelevantRecommendation_VsInfo_Episode) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{120, 2, 0}
}

func (x *RelevantRecommendation_VsInfo_Episode) GetEpisodeId() int64 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *RelevantRecommendation_VsInfo_Episode) GetEpisodeName() string {
	if x != nil {
		return x.EpisodeName
	}
	return ""
}

func (x *RelevantRecommendation_VsInfo_Episode) GetEpisodeCover() *Image {
	if x != nil {
		return x.EpisodeCover
	}
	return nil
}

func (x *RelevantRecommendation_VsInfo_Episode) GetCurrentPeriod() string {
	if x != nil {
		return x.CurrentPeriod
	}
	return ""
}

func (x *RelevantRecommendation_VsInfo_Episode) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RelevantRecommendation_VsInfo_Episode) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

// ConsultInfo 子消息定义
type IndustryServiceInfo_ConsultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizInfo     string `protobuf:"bytes,1,opt,name=biz_info,json=bizInfo,proto3" json:"biz_info,omitempty"`              // 业务信息
	ConsultRole int32  `protobuf:"varint,2,opt,name=consult_role,json=consultRole,proto3" json:"consult_role,omitempty"` // 咨询角色（角色类型）
}

func (x *IndustryServiceInfo_ConsultInfo) Reset() {
	*x = IndustryServiceInfo_ConsultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndustryServiceInfo_ConsultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustryServiceInfo_ConsultInfo) ProtoMessage() {}

func (x *IndustryServiceInfo_ConsultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustryServiceInfo_ConsultInfo.ProtoReflect.Descriptor instead.
func (*IndustryServiceInfo_ConsultInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{121, 0}
}

func (x *IndustryServiceInfo_ConsultInfo) GetBizInfo() string {
	if x != nil {
		return x.BizInfo
	}
	return ""
}

func (x *IndustryServiceInfo_ConsultInfo) GetConsultRole() int32 {
	if x != nil {
		return x.ConsultRole
	}
	return 0
}

type PreviewExposeData_PreviewGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon             *Image            `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                                               // 图标
	Tip              string            `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`                                                                                                                 // 提示
	Type             int64             `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                                              // 类型
	RollTips         []string          `protobuf:"bytes,4,rep,name=roll_tips,json=rollTips,proto3" json:"roll_tips,omitempty"`                                                                                       // 滚动提示
	CouponMateId     int64             `protobuf:"varint,5,opt,name=coupon_mate_id,json=couponMateId,proto3" json:"coupon_mate_id,omitempty"`                                                                        // 优惠券 ID
	UserTagGetCoin   int64             `protobuf:"varint,6,opt,name=user_tag_get_coin,json=userTagGetCoin,proto3" json:"user_tag_get_coin,omitempty"`                                                                // 用户标签获取硬币
	LiveMessionStyle int64             `protobuf:"varint,7,opt,name=live_mession_style,json=liveMessionStyle,proto3" json:"live_mession_style,omitempty"`                                                            // 直播任务样式
	EtType           string            `protobuf:"bytes,8,opt,name=et_type,json=etType,proto3" json:"et_type,omitempty"`                                                                                             // ET 类型
	Extra            string            `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                             // 额外信息
	EtExtra          map[string]string `protobuf:"bytes,10,rep,name=et_extra,json=etExtra,proto3" json:"et_extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // ET 额外信息
	EnterTip         string            `protobuf:"bytes,11,opt,name=enter_tip,json=enterTip,proto3" json:"enter_tip,omitempty"`                                                                                      // 进入提示
	EnterRollTips    []string          `protobuf:"bytes,12,rep,name=enter_roll_tips,json=enterRollTips,proto3" json:"enter_roll_tips,omitempty"`                                                                     // 进入滚动提示
}

func (x *PreviewExposeData_PreviewGuide) Reset() {
	*x = PreviewExposeData_PreviewGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewGuide) ProtoMessage() {}

func (x *PreviewExposeData_PreviewGuide) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewGuide.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewGuide) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 0}
}

func (x *PreviewExposeData_PreviewGuide) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PreviewExposeData_PreviewGuide) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *PreviewExposeData_PreviewGuide) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PreviewExposeData_PreviewGuide) GetRollTips() []string {
	if x != nil {
		return x.RollTips
	}
	return nil
}

func (x *PreviewExposeData_PreviewGuide) GetCouponMateId() int64 {
	if x != nil {
		return x.CouponMateId
	}
	return 0
}

func (x *PreviewExposeData_PreviewGuide) GetUserTagGetCoin() int64 {
	if x != nil {
		return x.UserTagGetCoin
	}
	return 0
}

func (x *PreviewExposeData_PreviewGuide) GetLiveMessionStyle() int64 {
	if x != nil {
		return x.LiveMessionStyle
	}
	return 0
}

func (x *PreviewExposeData_PreviewGuide) GetEtType() string {
	if x != nil {
		return x.EtType
	}
	return ""
}

func (x *PreviewExposeData_PreviewGuide) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PreviewExposeData_PreviewGuide) GetEtExtra() map[string]string {
	if x != nil {
		return x.EtExtra
	}
	return nil
}

func (x *PreviewExposeData_PreviewGuide) GetEnterTip() string {
	if x != nil {
		return x.EnterTip
	}
	return ""
}

func (x *PreviewExposeData_PreviewGuide) GetEnterRollTips() []string {
	if x != nil {
		return x.EnterRollTips
	}
	return nil
}

type PreviewExposeData_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32                        `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`      // 类型
	Host    *PreviewExposeData_Meta_Host `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`       // 主机信息
	Content string                       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // 内容
}

func (x *PreviewExposeData_Meta) Reset() {
	*x = PreviewExposeData_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_Meta) ProtoMessage() {}

func (x *PreviewExposeData_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_Meta.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_Meta) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 1}
}

func (x *PreviewExposeData_Meta) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PreviewExposeData_Meta) GetHost() *PreviewExposeData_Meta_Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *PreviewExposeData_Meta) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type PreviewExposeData_ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName      string `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                  // 昵称
	NickNameColor string `protobuf:"bytes,2,opt,name=nick_name_color,json=nickNameColor,proto3" json:"nick_name_color,omitempty"` // 昵称颜色
	Content       string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                    // 内容
}

func (x *PreviewExposeData_ChatMessage) Reset() {
	*x = PreviewExposeData_ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_ChatMessage) ProtoMessage() {}

func (x *PreviewExposeData_ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_ChatMessage.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_ChatMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 2}
}

func (x *PreviewExposeData_ChatMessage) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *PreviewExposeData_ChatMessage) GetNickNameColor() string {
	if x != nil {
		return x.NickNameColor
	}
	return ""
}

func (x *PreviewExposeData_ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type PreviewExposeData_PreviewExtendArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtendIcon              *Image                                            `protobuf:"bytes,1,opt,name=extend_icon,json=extendIcon,proto3" json:"extend_icon,omitempty"`                                                                                                        // 扩展图标
	ExtendPreText           string                                            `protobuf:"bytes,2,opt,name=extend_pre_text,json=extendPreText,proto3" json:"extend_pre_text,omitempty"`                                                                                             // 扩展前文本
	ExtendText              string                                            `protobuf:"bytes,3,opt,name=extend_text,json=extendText,proto3" json:"extend_text,omitempty"`                                                                                                        // 扩展文本
	ExtendType              int32                                             `protobuf:"varint,4,opt,name=extend_type,json=extendType,proto3" json:"extend_type,omitempty"`                                                                                                       // 扩展类型
	Extra                   string                                            `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                                                                                                                    // 额外信息
	UseMarquee              int32                                             `protobuf:"varint,6,opt,name=use_marquee,json=useMarquee,proto3" json:"use_marquee,omitempty"`                                                                                                       // 使用跑马灯
	IconType                int32                                             `protobuf:"varint,7,opt,name=icon_type,json=iconType,proto3" json:"icon_type,omitempty"`                                                                                                             // 图标类型
	RightPart               []*PreviewExposeData_PreviewExtendArea_Part       `protobuf:"bytes,8,rep,name=right_part,json=rightPart,proto3" json:"right_part,omitempty"`                                                                                                           // 右侧部分
	ButtonPart              string                                            `protobuf:"bytes,9,opt,name=button_part,json=buttonPart,proto3" json:"button_part,omitempty"`                                                                                                        // 按钮部分
	MidPart                 []*PreviewExposeData_PreviewExtendArea_Part       `protobuf:"bytes,10,rep,name=mid_part,json=midPart,proto3" json:"mid_part,omitempty"`                                                                                                                // 中间部分
	NeedDelimiter           bool                                              `protobuf:"varint,11,opt,name=need_delimiter,json=needDelimiter,proto3" json:"need_delimiter,omitempty"`                                                                                             // 是否需要分隔符
	BottomPart              []*PreviewExposeData_PreviewExtendArea_Part       `protobuf:"bytes,12,rep,name=bottom_part,json=bottomPart,proto3" json:"bottom_part,omitempty"`                                                                                                       // 底部部分
	UiType                  int32                                             `protobuf:"varint,13,opt,name=ui_type,json=uiType,proto3" json:"ui_type,omitempty"`                                                                                                                  // UI 类型
	Version                 int32                                             `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`                                                                                                                              // 版本
	ActionCfg               *PreviewExposeData_PreviewExtendArea_ActionConfig `protobuf:"bytes,17,opt,name=action_cfg,json=actionCfg,proto3" json:"action_cfg,omitempty"`                                                                                                          // 动作配置
	UsePassThroughExtraJson bool                                              `protobuf:"varint,18,opt,name=use_pass_through_extra_json,json=usePassThroughExtraJson,proto3" json:"use_pass_through_extra_json,omitempty"`                                                         // 使用透传额外 JSON
	PassThroughExtraJson    string                                            `protobuf:"bytes,19,opt,name=pass_through_extra_json,json=passThroughExtraJson,proto3" json:"pass_through_extra_json,omitempty"`                                                                     // 透传额外 JSON
	ExtraEnterRoom          map[string]string                                 `protobuf:"bytes,20,rep,name=extra_enter_room,json=extraEnterRoom,proto3" json:"extra_enter_room,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外进入房间信息
	ExtraBusiness           string                                            `protobuf:"bytes,21,opt,name=extra_business,json=extraBusiness,proto3" json:"extra_business,omitempty"`                                                                                              // 额外业务
	NoNeedPoll              bool                                              `protobuf:"varint,22,opt,name=no_need_poll,json=noNeedPoll,proto3" json:"no_need_poll,omitempty"`                                                                                                    // 不需要轮询
	EtExtra                 map[string]string                                 `protobuf:"bytes,23,rep,name=et_extra,json=etExtra,proto3" json:"et_extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                        // ET 额外信息
	ClickableArea           int32                                             `protobuf:"varint,24,opt,name=clickable_area,json=clickableArea,proto3" json:"clickable_area,omitempty"`                                                                                             // 可点击区域
}

func (x *PreviewExposeData_PreviewExtendArea) Reset() {
	*x = PreviewExposeData_PreviewExtendArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewExtendArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewExtendArea) ProtoMessage() {}

func (x *PreviewExposeData_PreviewExtendArea) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewExtendArea.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewExtendArea) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 3}
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtendIcon() *Image {
	if x != nil {
		return x.ExtendIcon
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtendPreText() string {
	if x != nil {
		return x.ExtendPreText
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtendText() string {
	if x != nil {
		return x.ExtendText
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtendType() int32 {
	if x != nil {
		return x.ExtendType
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetUseMarquee() int32 {
	if x != nil {
		return x.UseMarquee
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea) GetIconType() int32 {
	if x != nil {
		return x.IconType
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea) GetRightPart() []*PreviewExposeData_PreviewExtendArea_Part {
	if x != nil {
		return x.RightPart
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetButtonPart() string {
	if x != nil {
		return x.ButtonPart
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetMidPart() []*PreviewExposeData_PreviewExtendArea_Part {
	if x != nil {
		return x.MidPart
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetNeedDelimiter() bool {
	if x != nil {
		return x.NeedDelimiter
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea) GetBottomPart() []*PreviewExposeData_PreviewExtendArea_Part {
	if x != nil {
		return x.BottomPart
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetUiType() int32 {
	if x != nil {
		return x.UiType
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea) GetActionCfg() *PreviewExposeData_PreviewExtendArea_ActionConfig {
	if x != nil {
		return x.ActionCfg
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetUsePassThroughExtraJson() bool {
	if x != nil {
		return x.UsePassThroughExtraJson
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea) GetPassThroughExtraJson() string {
	if x != nil {
		return x.PassThroughExtraJson
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtraEnterRoom() map[string]string {
	if x != nil {
		return x.ExtraEnterRoom
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetExtraBusiness() string {
	if x != nil {
		return x.ExtraBusiness
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea) GetNoNeedPoll() bool {
	if x != nil {
		return x.NoNeedPoll
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea) GetEtExtra() map[string]string {
	if x != nil {
		return x.EtExtra
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea) GetClickableArea() int32 {
	if x != nil {
		return x.ClickableArea
	}
	return 0
}

type PreviewExposeData_PreviewSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        int32 `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`                                   // 标题
	PreviewGuide int32 `protobuf:"varint,2,opt,name=preview_guide,json=previewGuide,proto3" json:"preview_guide,omitempty"` // 预览指南
	DynamicLabel int32 `protobuf:"varint,3,opt,name=dynamic_label,json=dynamicLabel,proto3" json:"dynamic_label,omitempty"` // 动态标签
	AssistLabel  int32 `protobuf:"varint,4,opt,name=assist_label,json=assistLabel,proto3" json:"assist_label,omitempty"`    // 辅助标签
	ExtendArea   int32 `protobuf:"varint,5,opt,name=extend_area,json=extendArea,proto3" json:"extend_area,omitempty"`       // 扩展区域
}

func (x *PreviewExposeData_PreviewSwitch) Reset() {
	*x = PreviewExposeData_PreviewSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewSwitch) ProtoMessage() {}

func (x *PreviewExposeData_PreviewSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewSwitch.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewSwitch) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 4}
}

func (x *PreviewExposeData_PreviewSwitch) GetTitle() int32 {
	if x != nil {
		return x.Title
	}
	return 0
}

func (x *PreviewExposeData_PreviewSwitch) GetPreviewGuide() int32 {
	if x != nil {
		return x.PreviewGuide
	}
	return 0
}

func (x *PreviewExposeData_PreviewSwitch) GetDynamicLabel() int32 {
	if x != nil {
		return x.DynamicLabel
	}
	return 0
}

func (x *PreviewExposeData_PreviewSwitch) GetAssistLabel() int32 {
	if x != nil {
		return x.AssistLabel
	}
	return 0
}

func (x *PreviewExposeData_PreviewSwitch) GetExtendArea() int32 {
	if x != nil {
		return x.ExtendArea
	}
	return 0
}

type PreviewExposeData_PreviewPromotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarIcons       []*Image                                          `protobuf:"bytes,1,rep,name=avatar_icons,json=avatarIcons,proto3" json:"avatar_icons,omitempty"`                     // 头像图标
	Text              string                                            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                                      // 文本
	FastComments      []string                                          `protobuf:"bytes,3,rep,name=fast_comments,json=fastComments,proto3" json:"fast_comments,omitempty"`                  // 快速评论
	FastCommentsEmoji []*PreviewExposeData_PreviewPromotion_EmojiDetail `protobuf:"bytes,4,rep,name=fast_comments_emoji,json=fastCommentsEmoji,proto3" json:"fast_comments_emoji,omitempty"` // 快速评论表情
}

func (x *PreviewExposeData_PreviewPromotion) Reset() {
	*x = PreviewExposeData_PreviewPromotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewPromotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewPromotion) ProtoMessage() {}

func (x *PreviewExposeData_PreviewPromotion) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewPromotion.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewPromotion) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 5}
}

func (x *PreviewExposeData_PreviewPromotion) GetAvatarIcons() []*Image {
	if x != nil {
		return x.AvatarIcons
	}
	return nil
}

func (x *PreviewExposeData_PreviewPromotion) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PreviewExposeData_PreviewPromotion) GetFastComments() []string {
	if x != nil {
		return x.FastComments
	}
	return nil
}

func (x *PreviewExposeData_PreviewPromotion) GetFastCommentsEmoji() []*PreviewExposeData_PreviewPromotion_EmojiDetail {
	if x != nil {
		return x.FastCommentsEmoji
	}
	return nil
}

type PreviewExposeData_PreviewIMExtend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImExtendType int64  `protobuf:"varint,1,opt,name=im_extend_type,json=imExtendType,proto3" json:"im_extend_type,omitempty"` // IM 扩展类型
	Icon         *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                        // 图标
	MainTitle    string `protobuf:"bytes,3,opt,name=main_title,json=mainTitle,proto3" json:"main_title,omitempty"`             // 主标题
	SubTitle     string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                // 副标题
	Extra        string `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                      // 额外信息
}

func (x *PreviewExposeData_PreviewIMExtend) Reset() {
	*x = PreviewExposeData_PreviewIMExtend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewIMExtend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewIMExtend) ProtoMessage() {}

func (x *PreviewExposeData_PreviewIMExtend) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewIMExtend.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewIMExtend) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 6}
}

func (x *PreviewExposeData_PreviewIMExtend) GetImExtendType() int64 {
	if x != nil {
		return x.ImExtendType
	}
	return 0
}

func (x *PreviewExposeData_PreviewIMExtend) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PreviewExposeData_PreviewIMExtend) GetMainTitle() string {
	if x != nil {
		return x.MainTitle
	}
	return ""
}

func (x *PreviewExposeData_PreviewIMExtend) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *PreviewExposeData_PreviewIMExtend) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type PreviewExposeData_EtData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeEnterRoom           string `protobuf:"bytes,1,opt,name=type_enter_room,json=typeEnterRoom,proto3" json:"type_enter_room,omitempty"`                                   // 进入房间类型
	TypeMobParams           string `protobuf:"bytes,2,opt,name=type_mob_params,json=typeMobParams,proto3" json:"type_mob_params,omitempty"`                                   // 移动参数类型
	TypeParams              string `protobuf:"bytes,3,opt,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`                                              // 参数类型
	TypeFirstRoomParams     string `protobuf:"bytes,4,opt,name=type_first_room_params,json=typeFirstRoomParams,proto3" json:"type_first_room_params,omitempty"`               // 第一个房间参数类型
	TypeFirstRoomMobParams  string `protobuf:"bytes,5,opt,name=type_first_room_mob_params,json=typeFirstRoomMobParams,proto3" json:"type_first_room_mob_params,omitempty"`    // 第一个房间移动参数类型
	TypeFirstShowRoomParams string `protobuf:"bytes,6,opt,name=type_first_show_room_params,json=typeFirstShowRoomParams,proto3" json:"type_first_show_room_params,omitempty"` // 第一次显示房间参数类型
	TypeFirstShowMobParams  string `protobuf:"bytes,7,opt,name=type_first_show_mob_params,json=typeFirstShowMobParams,proto3" json:"type_first_show_mob_params,omitempty"`    // 第一次显示移动参数类型
}

func (x *PreviewExposeData_EtData) Reset() {
	*x = PreviewExposeData_EtData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_EtData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_EtData) ProtoMessage() {}

func (x *PreviewExposeData_EtData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_EtData.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_EtData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 7}
}

func (x *PreviewExposeData_EtData) GetTypeEnterRoom() string {
	if x != nil {
		return x.TypeEnterRoom
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeMobParams() string {
	if x != nil {
		return x.TypeMobParams
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeParams() string {
	if x != nil {
		return x.TypeParams
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeFirstRoomParams() string {
	if x != nil {
		return x.TypeFirstRoomParams
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeFirstRoomMobParams() string {
	if x != nil {
		return x.TypeFirstRoomMobParams
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeFirstShowRoomParams() string {
	if x != nil {
		return x.TypeFirstShowRoomParams
	}
	return ""
}

func (x *PreviewExposeData_EtData) GetTypeFirstShowMobParams() string {
	if x != nil {
		return x.TypeFirstShowMobParams
	}
	return ""
}

type PreviewExposeData_GrowthTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey  string            `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`                                                                      // 任务键
	MainText string            `protobuf:"bytes,2,opt,name=main_text,json=mainText,proto3" json:"main_text,omitempty"`                                                                   // 主文本
	SubText  string            `protobuf:"bytes,3,opt,name=sub_text,json=subText,proto3" json:"sub_text,omitempty"`                                                                      // 副文本
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
}

func (x *PreviewExposeData_GrowthTask) Reset() {
	*x = PreviewExposeData_GrowthTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_GrowthTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_GrowthTask) ProtoMessage() {}

func (x *PreviewExposeData_GrowthTask) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_GrowthTask.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_GrowthTask) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 8}
}

func (x *PreviewExposeData_GrowthTask) GetTaskKey() string {
	if x != nil {
		return x.TaskKey
	}
	return ""
}

func (x *PreviewExposeData_GrowthTask) GetMainText() string {
	if x != nil {
		return x.MainText
	}
	return ""
}

func (x *PreviewExposeData_GrowthTask) GetSubText() string {
	if x != nil {
		return x.SubText
	}
	return ""
}

func (x *PreviewExposeData_GrowthTask) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PreviewExposeData_PreviewPromotionSyncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon       *Image                                                 `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                               // 图标
	Text       string                                                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                               // 文本
	LuckyBag   *PreviewExposeData_PreviewPromotionSyncData_LuckyBag   `protobuf:"bytes,3,opt,name=lucky_bag,json=luckyBag,proto3" json:"lucky_bag,omitempty"`       // 幸运袋
	Type       int64                                                  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`                              // 类型
	LuckyMoney *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney `protobuf:"bytes,5,opt,name=lucky_money,json=luckyMoney,proto3" json:"lucky_money,omitempty"` // 幸运钱
}

func (x *PreviewExposeData_PreviewPromotionSyncData) Reset() {
	*x = PreviewExposeData_PreviewPromotionSyncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewPromotionSyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewPromotionSyncData) ProtoMessage() {}

func (x *PreviewExposeData_PreviewPromotionSyncData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewPromotionSyncData.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewPromotionSyncData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 9}
}

func (x *PreviewExposeData_PreviewPromotionSyncData) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PreviewExposeData_PreviewPromotionSyncData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PreviewExposeData_PreviewPromotionSyncData) GetLuckyBag() *PreviewExposeData_PreviewPromotionSyncData_LuckyBag {
	if x != nil {
		return x.LuckyBag
	}
	return nil
}

func (x *PreviewExposeData_PreviewPromotionSyncData) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData) GetLuckyMoney() *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney {
	if x != nil {
		return x.LuckyMoney
	}
	return nil
}

type PreviewExposeData_PreviewExitGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon             *Image                                     `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                                    // 图标
	MainText         string                                     `protobuf:"bytes,2,opt,name=main_text,json=mainText,proto3" json:"main_text,omitempty"`                            // 主文本
	SubText          string                                     `protobuf:"bytes,3,opt,name=sub_text,json=subText,proto3" json:"sub_text,omitempty"`                               // 副文本
	SchemaUrl        string                                     `protobuf:"bytes,4,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`                         // 模式 URL
	Type             int32                                      `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                                   // 类型
	ButtonText       string                                     `protobuf:"bytes,6,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`                      // 按钮文本
	LatestLiveRecord int64                                      `protobuf:"varint,7,opt,name=latest_live_record,json=latestLiveRecord,proto3" json:"latest_live_record,omitempty"` // 最新直播记录
	UserList         []*PreviewExposeData_PreviewExitGuide_User `protobuf:"bytes,8,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`                            // 用户列表
	Tag              string                                     `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`                                                      // 标签
}

func (x *PreviewExposeData_PreviewExitGuide) Reset() {
	*x = PreviewExposeData_PreviewExitGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewExitGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewExitGuide) ProtoMessage() {}

func (x *PreviewExposeData_PreviewExitGuide) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewExitGuide.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewExitGuide) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 10}
}

func (x *PreviewExposeData_PreviewExitGuide) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PreviewExposeData_PreviewExitGuide) GetMainText() string {
	if x != nil {
		return x.MainText
	}
	return ""
}

func (x *PreviewExposeData_PreviewExitGuide) GetSubText() string {
	if x != nil {
		return x.SubText
	}
	return ""
}

func (x *PreviewExposeData_PreviewExitGuide) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *PreviewExposeData_PreviewExitGuide) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PreviewExposeData_PreviewExitGuide) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *PreviewExposeData_PreviewExitGuide) GetLatestLiveRecord() int64 {
	if x != nil {
		return x.LatestLiveRecord
	}
	return 0
}

func (x *PreviewExposeData_PreviewExitGuide) GetUserList() []*PreviewExposeData_PreviewExitGuide_User {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *PreviewExposeData_PreviewExitGuide) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// EnterPublicAreaAnimation 消息定义
type PreviewExposeData_EnterPublicAreaAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicAreaEffectUrl string `protobuf:"bytes,1,opt,name=public_area_effect_url,json=publicAreaEffectUrl,proto3" json:"public_area_effect_url,omitempty"` // 公共区域效果的 URL
}

func (x *PreviewExposeData_EnterPublicAreaAnimation) Reset() {
	*x = PreviewExposeData_EnterPublicAreaAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_EnterPublicAreaAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_EnterPublicAreaAnimation) ProtoMessage() {}

func (x *PreviewExposeData_EnterPublicAreaAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_EnterPublicAreaAnimation.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_EnterPublicAreaAnimation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 11}
}

func (x *PreviewExposeData_EnterPublicAreaAnimation) GetPublicAreaEffectUrl() string {
	if x != nil {
		return x.PublicAreaEffectUrl
	}
	return ""
}

// ClientComponent 消息定义
type PreviewExposeData_ClientComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitComponentMap       map[string]*PreviewExposeData_ClientComponentInfo `protobuf:"bytes,1,rep,name=portrait_component_map,json=portraitComponentMap,proto3" json:"portrait_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                     // 竖屏组件映射
	LandscapeComponentMap      map[string]*PreviewExposeData_ClientComponentInfo `protobuf:"bytes,2,rep,name=landscape_component_map,json=landscapeComponentMap,proto3" json:"landscape_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                  // 横屏组件映射
	IsOpen                     bool                                              `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                                                                                                                                                        // 是否开启
	TemplateId                 int64                                             `protobuf:"varint,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`                                                                                                                                            // 模板 ID
	PreviewDefaultComponentMap map[string]*PreviewExposeData_ClientComponentInfo `protobuf:"bytes,5,rep,name=preview_default_component_map,json=previewDefaultComponentMap,proto3" json:"preview_default_component_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 预览默认组件映射
}

func (x *PreviewExposeData_ClientComponent) Reset() {
	*x = PreviewExposeData_ClientComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_ClientComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_ClientComponent) ProtoMessage() {}

func (x *PreviewExposeData_ClientComponent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_ClientComponent.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_ClientComponent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 12}
}

func (x *PreviewExposeData_ClientComponent) GetPortraitComponentMap() map[string]*PreviewExposeData_ClientComponentInfo {
	if x != nil {
		return x.PortraitComponentMap
	}
	return nil
}

func (x *PreviewExposeData_ClientComponent) GetLandscapeComponentMap() map[string]*PreviewExposeData_ClientComponentInfo {
	if x != nil {
		return x.LandscapeComponentMap
	}
	return nil
}

func (x *PreviewExposeData_ClientComponent) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PreviewExposeData_ClientComponent) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *PreviewExposeData_ClientComponent) GetPreviewDefaultComponentMap() map[string]*PreviewExposeData_ClientComponentInfo {
	if x != nil {
		return x.PreviewDefaultComponentMap
	}
	return nil
}

// ClientComponentInfo 消息定义
type PreviewExposeData_ClientComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName string `protobuf:"bytes,1,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"` // 组件名称
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                  // 版本
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                          // 描述
}

func (x *PreviewExposeData_ClientComponentInfo) Reset() {
	*x = PreviewExposeData_ClientComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_ClientComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_ClientComponentInfo) ProtoMessage() {}

func (x *PreviewExposeData_ClientComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_ClientComponentInfo.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_ClientComponentInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 13}
}

func (x *PreviewExposeData_ClientComponentInfo) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *PreviewExposeData_ClientComponentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PreviewExposeData_ClientComponentInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// IOSClientComponent 消息定义
type PreviewExposeData_IOSClientComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fragments       []*PreviewExposeData_IOSFragment        `protobuf:"bytes,1,rep,name=fragments,proto3" json:"fragments,omitempty"`                                    // 碎片列表
	LandscapeLayout []*PreviewExposeData_IOSContainerLayout `protobuf:"bytes,2,rep,name=landscape_layout,json=landscapeLayout,proto3" json:"landscape_layout,omitempty"` // 横屏布局
	PortraitLayout  []*PreviewExposeData_IOSContainerLayout `protobuf:"bytes,3,rep,name=portrait_layout,json=portraitLayout,proto3" json:"portrait_layout,omitempty"`    // 竖屏布局
	IsOpen          bool                                    `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                           // 是否开启
	TemplateId      int64                                   `protobuf:"varint,5,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`               // 模板 ID
	Elements        []*PreviewExposeData_IOSFragment        `protobuf:"bytes,6,rep,name=elements,proto3" json:"elements,omitempty"`                                      // 元素列表
}

func (x *PreviewExposeData_IOSClientComponent) Reset() {
	*x = PreviewExposeData_IOSClientComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_IOSClientComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_IOSClientComponent) ProtoMessage() {}

func (x *PreviewExposeData_IOSClientComponent) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_IOSClientComponent.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_IOSClientComponent) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 14}
}

func (x *PreviewExposeData_IOSClientComponent) GetFragments() []*PreviewExposeData_IOSFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *PreviewExposeData_IOSClientComponent) GetLandscapeLayout() []*PreviewExposeData_IOSContainerLayout {
	if x != nil {
		return x.LandscapeLayout
	}
	return nil
}

func (x *PreviewExposeData_IOSClientComponent) GetPortraitLayout() []*PreviewExposeData_IOSContainerLayout {
	if x != nil {
		return x.PortraitLayout
	}
	return nil
}

func (x *PreviewExposeData_IOSClientComponent) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PreviewExposeData_IOSClientComponent) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *PreviewExposeData_IOSClientComponent) GetElements() []*PreviewExposeData_IOSFragment {
	if x != nil {
		return x.Elements
	}
	return nil
}

// IOSFragment 消息定义
type PreviewExposeData_IOSFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FragmentId  string `protobuf:"bytes,1,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"` // 碎片 ID
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // 名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                 // 描述
}

func (x *PreviewExposeData_IOSFragment) Reset() {
	*x = PreviewExposeData_IOSFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_IOSFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_IOSFragment) ProtoMessage() {}

func (x *PreviewExposeData_IOSFragment) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_IOSFragment.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_IOSFragment) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 15}
}

func (x *PreviewExposeData_IOSFragment) GetFragmentId() string {
	if x != nil {
		return x.FragmentId
	}
	return ""
}

func (x *PreviewExposeData_IOSFragment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreviewExposeData_IOSFragment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// IOSContainerLayout 消息定义
type PreviewExposeData_IOSContainerLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutId     string   `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`             // 布局 ID
	Type         string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                     // 类型
	ComponentIds []string `protobuf:"bytes,3,rep,name=component_ids,json=componentIds,proto3" json:"component_ids,omitempty"` // 组件 ID 列表
}

func (x *PreviewExposeData_IOSContainerLayout) Reset() {
	*x = PreviewExposeData_IOSContainerLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_IOSContainerLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_IOSContainerLayout) ProtoMessage() {}

func (x *PreviewExposeData_IOSContainerLayout) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_IOSContainerLayout.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_IOSContainerLayout) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 16}
}

func (x *PreviewExposeData_IOSContainerLayout) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *PreviewExposeData_IOSContainerLayout) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PreviewExposeData_IOSContainerLayout) GetComponentIds() []string {
	if x != nil {
		return x.ComponentIds
	}
	return nil
}

type PreviewExposeData_Meta_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon  *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`   // 图标
	Tip   string `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`     // 提示
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"` // 颜色
}

func (x *PreviewExposeData_Meta_Host) Reset() {
	*x = PreviewExposeData_Meta_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_Meta_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_Meta_Host) ProtoMessage() {}

func (x *PreviewExposeData_Meta_Host) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_Meta_Host.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_Meta_Host) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 1, 0}
}

func (x *PreviewExposeData_Meta_Host) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PreviewExposeData_Meta_Host) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *PreviewExposeData_Meta_Host) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type PreviewExposeData_PreviewExtendArea_Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FontSize        int32  `protobuf:"varint,1,opt,name=fontSize,proto3" json:"fontSize,omitempty"`                                      // 字体大小
	Interval        int32  `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`                                      // 间隔
	Text            string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                                               // 文本
	Cuttable        bool   `protobuf:"varint,4,opt,name=cuttable,proto3" json:"cuttable,omitempty"`                                      // 可裁剪
	Deleted         bool   `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`                                        // 已删除
	FontColor       string `protobuf:"bytes,6,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`                    // 字体颜色
	Bold            bool   `protobuf:"varint,7,opt,name=bold,proto3" json:"bold,omitempty"`                                              // 加粗
	PartType        int32  `protobuf:"varint,8,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`                      // 部分类型
	Image           *Image `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`                                             // 图片
	BackgroundColor string `protobuf:"bytes,10,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"` // 背景颜色
	LeftImage       *Image `protobuf:"bytes,11,opt,name=left_image,json=leftImage,proto3" json:"left_image,omitempty"`                   // 左侧图片
}

func (x *PreviewExposeData_PreviewExtendArea_Part) Reset() {
	*x = PreviewExposeData_PreviewExtendArea_Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewExtendArea_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewExtendArea_Part) ProtoMessage() {}

func (x *PreviewExposeData_PreviewExtendArea_Part) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewExtendArea_Part.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewExtendArea_Part) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 3, 2}
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetCuttable() bool {
	if x != nil {
		return x.Cuttable
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetPartType() int32 {
	if x != nil {
		return x.PartType
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *PreviewExposeData_PreviewExtendArea_Part) GetLeftImage() *Image {
	if x != nil {
		return x.LeftImage
	}
	return nil
}

type PreviewExposeData_PreviewExtendArea_ActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaAction  int32             `protobuf:"varint,1,opt,name=areaAction,proto3" json:"areaAction,omitempty"`                                                                                          // 区域动作
	ActionPrams map[string]string `protobuf:"bytes,2,rep,name=actionPrams,proto3" json:"actionPrams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 动作参数
}

func (x *PreviewExposeData_PreviewExtendArea_ActionConfig) Reset() {
	*x = PreviewExposeData_PreviewExtendArea_ActionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewExtendArea_ActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewExtendArea_ActionConfig) ProtoMessage() {}

func (x *PreviewExposeData_PreviewExtendArea_ActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewExtendArea_ActionConfig.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewExtendArea_ActionConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 3, 3}
}

func (x *PreviewExposeData_PreviewExtendArea_ActionConfig) GetAreaAction() int32 {
	if x != nil {
		return x.AreaAction
	}
	return 0
}

func (x *PreviewExposeData_PreviewExtendArea_ActionConfig) GetActionPrams() map[string]string {
	if x != nil {
		return x.ActionPrams
	}
	return nil
}

type PreviewExposeData_PreviewPromotion_EmojiDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emoji       string `protobuf:"bytes,1,opt,name=emoji,proto3" json:"emoji,omitempty"`             // 表情
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 描述
}

func (x *PreviewExposeData_PreviewPromotion_EmojiDetail) Reset() {
	*x = PreviewExposeData_PreviewPromotion_EmojiDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewPromotion_EmojiDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewPromotion_EmojiDetail) ProtoMessage() {}

func (x *PreviewExposeData_PreviewPromotion_EmojiDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewPromotion_EmojiDetail.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewPromotion_EmojiDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 5, 0}
}

func (x *PreviewExposeData_PreviewPromotion_EmojiDetail) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

func (x *PreviewExposeData_PreviewPromotion_EmojiDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PreviewExposeData_PreviewPromotionSyncData_LuckyBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryId int64 `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,proto3" json:"lottery_id,omitempty"` // 彩票 ID
	StartAt   int64 `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`       // 开始时间
	DrawAt    int64 `protobuf:"varint,3,opt,name=draw_at,json=drawAt,proto3" json:"draw_at,omitempty"`          // 抽奖时间
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) Reset() {
	*x = PreviewExposeData_PreviewPromotionSyncData_LuckyBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewPromotionSyncData_LuckyBag) ProtoMessage() {}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewPromotionSyncData_LuckyBag.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewPromotionSyncData_LuckyBag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 9, 0}
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyBag) GetDrawAt() int64 {
	if x != nil {
		return x.DrawAt
	}
	return 0
}

type PreviewExposeData_PreviewPromotionSyncData_LuckyMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId        int64  `protobuf:"varint,1,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`                        // 盒子 ID
	StartAt      int64  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`                  // 开始时间
	DelaySeconds int64  `protobuf:"varint,3,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds,omitempty"`   // 延迟秒数
	DisplayEndAt int64  `protobuf:"varint,4,opt,name=display_end_at,json=displayEndAt,proto3" json:"display_end_at,omitempty"` // 显示结束时间
	Status       int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                   // 状态
	Text         string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`                                        // 文本
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) Reset() {
	*x = PreviewExposeData_PreviewPromotionSyncData_LuckyMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) ProtoMessage() {}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewPromotionSyncData_LuckyMoney.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 9, 1}
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetDelaySeconds() int64 {
	if x != nil {
		return x.DelaySeconds
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetDisplayEndAt() int64 {
	if x != nil {
		return x.DisplayEndAt
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PreviewExposeData_PreviewPromotionSyncData_LuckyMoney) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PreviewExposeData_PreviewExitGuide_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户 ID
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` // 用户名
}

func (x *PreviewExposeData_PreviewExitGuide_User) Reset() {
	*x = PreviewExposeData_PreviewExitGuide_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewExposeData_PreviewExitGuide_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewExposeData_PreviewExitGuide_User) ProtoMessage() {}

func (x *PreviewExposeData_PreviewExitGuide_User) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewExposeData_PreviewExitGuide_User.ProtoReflect.Descriptor instead.
func (*PreviewExposeData_PreviewExitGuide_User) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{150, 10, 0}
}

func (x *PreviewExposeData_PreviewExitGuide_User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PreviewExposeData_PreviewExitGuide_User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// Bubble 嵌套消息定义
type Appearance_Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                       // 类型
	RollTips     []string `protobuf:"bytes,2,rep,name=roll_tips,json=rollTips,proto3" json:"roll_tips,omitempty"`                // 滚动提示
	Icon         *Image   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                        // 图标
	RollAfterMs  int32    `protobuf:"varint,4,opt,name=roll_after_ms,json=rollAfterMs,proto3" json:"roll_after_ms,omitempty"`    // 滚动开始时间（毫秒）
	CouponMateId int64    `protobuf:"varint,5,opt,name=coupon_mate_id,json=couponMateId,proto3" json:"coupon_mate_id,omitempty"` // 优惠券 ID
	EtType       string   `protobuf:"bytes,6,opt,name=et_type,json=etType,proto3" json:"et_type,omitempty"`                      // 扩展类型
	Extra        string   `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`                                      // 额外信息
}

func (x *Appearance_Bubble) Reset() {
	*x = Appearance_Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_Bubble) ProtoMessage() {}

func (x *Appearance_Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_Bubble.ProtoReflect.Descriptor instead.
func (*Appearance_Bubble) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 0}
}

func (x *Appearance_Bubble) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Appearance_Bubble) GetRollTips() []string {
	if x != nil {
		return x.RollTips
	}
	return nil
}

func (x *Appearance_Bubble) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Appearance_Bubble) GetRollAfterMs() int32 {
	if x != nil {
		return x.RollAfterMs
	}
	return 0
}

func (x *Appearance_Bubble) GetCouponMateId() int64 {
	if x != nil {
		return x.CouponMateId
	}
	return 0
}

func (x *Appearance_Bubble) GetEtType() string {
	if x != nil {
		return x.EtType
	}
	return ""
}

func (x *Appearance_Bubble) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// ContentTag 嵌套消息定义
type Appearance_ContentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // 标签文本
}

func (x *Appearance_ContentTag) Reset() {
	*x = Appearance_ContentTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_ContentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_ContentTag) ProtoMessage() {}

func (x *Appearance_ContentTag) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_ContentTag.ProtoReflect.Descriptor instead.
func (*Appearance_ContentTag) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 1}
}

func (x *Appearance_ContentTag) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// WideCover 嵌套消息定义
type Appearance_WideCover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cover     *Image `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`                           // 封面图片
	CoverType int64  `protobuf:"varint,2,opt,name=cover_type,json=coverType,proto3" json:"cover_type,omitempty"` // 封面类型
}

func (x *Appearance_WideCover) Reset() {
	*x = Appearance_WideCover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_WideCover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_WideCover) ProtoMessage() {}

func (x *Appearance_WideCover) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_WideCover.ProtoReflect.Descriptor instead.
func (*Appearance_WideCover) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 2}
}

func (x *Appearance_WideCover) GetCover() *Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Appearance_WideCover) GetCoverType() int64 {
	if x != nil {
		return x.CoverType
	}
	return 0
}

// MoreEntrance 消息定义
type Appearance_MoreEntrance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"` // 入口标题
	Type  int64  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`  // 入口类型
}

func (x *Appearance_MoreEntrance) Reset() {
	*x = Appearance_MoreEntrance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_MoreEntrance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_MoreEntrance) ProtoMessage() {}

func (x *Appearance_MoreEntrance) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_MoreEntrance.ProtoReflect.Descriptor instead.
func (*Appearance_MoreEntrance) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 3}
}

func (x *Appearance_MoreEntrance) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Appearance_MoreEntrance) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

// ToolbarItemConfig 消息定义
type Appearance_ToolbarItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolbarType       int32                                 `protobuf:"varint,1,opt,name=toolbar_type,json=toolbarType,proto3" json:"toolbar_type,omitempty"`                    // 工具栏类型
	Icon              *Image                                `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                                      // 图标
	JumpSchema        string                                `protobuf:"bytes,3,opt,name=jump_schema,json=jumpSchema,proto3" json:"jump_schema,omitempty"`                        // 跳转链接
	DisplayType       int32                                 `protobuf:"varint,4,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`                    // 显示类型
	DynamicIcon       *Image                                `protobuf:"bytes,5,opt,name=dynamic_icon,json=dynamicIcon,proto3" json:"dynamic_icon,omitempty"`                     // 动态图标
	IconVertical      *Image                                `protobuf:"bytes,6,opt,name=icon_vertical,json=iconVertical,proto3" json:"icon_vertical,omitempty"`                  // 垂直图标
	DynamicBottomIcon *Image                                `protobuf:"bytes,7,opt,name=dynamic_bottom_icon,json=dynamicBottomIcon,proto3" json:"dynamic_bottom_icon,omitempty"` // 动态底部图标
	BottomIcon        *Image                                `protobuf:"bytes,8,opt,name=bottom_icon,json=bottomIcon,proto3" json:"bottom_icon,omitempty"`                        // 底部图标
	ToastList         []*Appearance_ToolbarItemConfig_Toast `protobuf:"bytes,9,rep,name=toast_list,json=toastList,proto3" json:"toast_list,omitempty"`                           // 提示列表
	Extra             string                                `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                                                   // 额外信息
}

func (x *Appearance_ToolbarItemConfig) Reset() {
	*x = Appearance_ToolbarItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_ToolbarItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_ToolbarItemConfig) ProtoMessage() {}

func (x *Appearance_ToolbarItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_ToolbarItemConfig.ProtoReflect.Descriptor instead.
func (*Appearance_ToolbarItemConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 4}
}

func (x *Appearance_ToolbarItemConfig) GetToolbarType() int32 {
	if x != nil {
		return x.ToolbarType
	}
	return 0
}

func (x *Appearance_ToolbarItemConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetJumpSchema() string {
	if x != nil {
		return x.JumpSchema
	}
	return ""
}

func (x *Appearance_ToolbarItemConfig) GetDisplayType() int32 {
	if x != nil {
		return x.DisplayType
	}
	return 0
}

func (x *Appearance_ToolbarItemConfig) GetDynamicIcon() *Image {
	if x != nil {
		return x.DynamicIcon
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetIconVertical() *Image {
	if x != nil {
		return x.IconVertical
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetDynamicBottomIcon() *Image {
	if x != nil {
		return x.DynamicBottomIcon
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetBottomIcon() *Image {
	if x != nil {
		return x.BottomIcon
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetToastList() []*Appearance_ToolbarItemConfig_Toast {
	if x != nil {
		return x.ToastList
	}
	return nil
}

func (x *Appearance_ToolbarItemConfig) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// PreviewLabel 消息定义
type Appearance_PreviewLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                              // 标签类型
	LabelTips  []string `protobuf:"bytes,2,rep,name=label_tips,json=labelTips,proto3" json:"label_tips,omitempty"`    // 标签提示列表
	LabelType  int32    `protobuf:"varint,3,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`   // 标签的详细类型
	LabelImage *Image   `protobuf:"bytes,4,opt,name=label_image,json=labelImage,proto3" json:"label_image,omitempty"` // 标签的图片
	HitTest    bool     `protobuf:"varint,5,opt,name=hit_test,json=hitTest,proto3" json:"hit_test,omitempty"`         // 是否启用点击测试
}

func (x *Appearance_PreviewLabel) Reset() {
	*x = Appearance_PreviewLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_PreviewLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_PreviewLabel) ProtoMessage() {}

func (x *Appearance_PreviewLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_PreviewLabel.ProtoReflect.Descriptor instead.
func (*Appearance_PreviewLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 5}
}

func (x *Appearance_PreviewLabel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Appearance_PreviewLabel) GetLabelTips() []string {
	if x != nil {
		return x.LabelTips
	}
	return nil
}

func (x *Appearance_PreviewLabel) GetLabelType() int32 {
	if x != nil {
		return x.LabelType
	}
	return 0
}

func (x *Appearance_PreviewLabel) GetLabelImage() *Image {
	if x != nil {
		return x.LabelImage
	}
	return nil
}

func (x *Appearance_PreviewLabel) GetHitTest() bool {
	if x != nil {
		return x.HitTest
	}
	return false
}

// Toast 嵌套消息定义
type Appearance_ToolbarItemConfig_Toast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                          // 提示消息
	DurationMs int32  `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"` // 提示显示时长（毫秒）
}

func (x *Appearance_ToolbarItemConfig_Toast) Reset() {
	*x = Appearance_ToolbarItemConfig_Toast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance_ToolbarItemConfig_Toast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance_ToolbarItemConfig_Toast) ProtoMessage() {}

func (x *Appearance_ToolbarItemConfig_Toast) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance_ToolbarItemConfig_Toast.ProtoReflect.Descriptor instead.
func (*Appearance_ToolbarItemConfig_Toast) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{151, 4, 0}
}

func (x *Appearance_ToolbarItemConfig_Toast) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Appearance_ToolbarItemConfig_Toast) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// ClientComponentInfo 嵌套消息定义
type ClientComponent_ClientComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentId   string            `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`                                                            // 组件 ID
	ComponentName string            `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`                                                      // 组件名称
	ComponentType string            `protobuf:"bytes,3,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`                                                      // 组件类型
	Config        map[string]string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 配置信息
}

func (x *ClientComponent_ClientComponentInfo) Reset() {
	*x = ClientComponent_ClientComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientComponent_ClientComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientComponent_ClientComponentInfo) ProtoMessage() {}

func (x *ClientComponent_ClientComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientComponent_ClientComponentInfo.ProtoReflect.Descriptor instead.
func (*ClientComponent_ClientComponentInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{155, 3}
}

func (x *ClientComponent_ClientComponentInfo) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ClientComponent_ClientComponentInfo) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ClientComponent_ClientComponentInfo) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ClientComponent_ClientComponentInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

// RoomChannelInfo 嵌套消息定义
type RoomChannelData_RoomChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`       // 频道 ID
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"` // 频道名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                    // 频道描述
}

func (x *RoomChannelData_RoomChannelInfo) Reset() {
	*x = RoomChannelData_RoomChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomChannelData_RoomChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomChannelData_RoomChannelInfo) ProtoMessage() {}

func (x *RoomChannelData_RoomChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomChannelData_RoomChannelInfo.ProtoReflect.Descriptor instead.
func (*RoomChannelData_RoomChannelInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{156, 0}
}

func (x *RoomChannelData_RoomChannelInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *RoomChannelData_RoomChannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *RoomChannelData_RoomChannelInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Image 嵌套消息定义
type RoomChannelData_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *RoomChannelData_Image) Reset() {
	*x = RoomChannelData_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomChannelData_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomChannelData_Image) ProtoMessage() {}

func (x *RoomChannelData_Image) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomChannelData_Image.ProtoReflect.Descriptor instead.
func (*RoomChannelData_Image) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{156, 1}
}

func (x *RoomChannelData_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RoomChannelData_Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RoomChannelData_Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// OpenActivityData 嵌套消息定义
type OpenContentData_OpenActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   string            `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                                                                   // 活动 ID
	ActivityName string            `protobuf:"bytes,2,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                             // 活动名称
	StartTime    string            `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // 活动开始时间
	EndTime      string            `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // 活动结束时间
	Participants []string          `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`                                                                                 // 活动参与者列表
	Metadata     map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 活动的元数据键值对
}

func (x *OpenContentData_OpenActivityData) Reset() {
	*x = OpenContentData_OpenActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenContentData_OpenActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContentData_OpenActivityData) ProtoMessage() {}

func (x *OpenContentData_OpenActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContentData_OpenActivityData.ProtoReflect.Descriptor instead.
func (*OpenContentData_OpenActivityData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{157, 0}
}

func (x *OpenContentData_OpenActivityData) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *OpenContentData_OpenActivityData) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *OpenContentData_OpenActivityData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *OpenContentData_OpenActivityData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *OpenContentData_OpenActivityData) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *OpenContentData_OpenActivityData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// SpliceLabel 嵌套消息定义
type LabelInfo_SpliceLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`   // 标签文本
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"` // 标签颜色
}

func (x *LabelInfo_SpliceLabel) Reset() {
	*x = LabelInfo_SpliceLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInfo_SpliceLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInfo_SpliceLabel) ProtoMessage() {}

func (x *LabelInfo_SpliceLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInfo_SpliceLabel.ProtoReflect.Descriptor instead.
func (*LabelInfo_SpliceLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{158, 1}
}

func (x *LabelInfo_SpliceLabel) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LabelInfo_SpliceLabel) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// ProfilePicSpliceLabel 嵌套消息定义
type LabelInfo_ProfilePicSpliceLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // 图片 URL
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *LabelInfo_ProfilePicSpliceLabel) Reset() {
	*x = LabelInfo_ProfilePicSpliceLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInfo_ProfilePicSpliceLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInfo_ProfilePicSpliceLabel) ProtoMessage() {}

func (x *LabelInfo_ProfilePicSpliceLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInfo_ProfilePicSpliceLabel.ProtoReflect.Descriptor instead.
func (*LabelInfo_ProfilePicSpliceLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{158, 2}
}

func (x *LabelInfo_ProfilePicSpliceLabel) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LabelInfo_ProfilePicSpliceLabel) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *LabelInfo_ProfilePicSpliceLabel) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// StreamCutPosition 嵌套消息定义
type RoomFeedData_StreamCutPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1           float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`                                        // 左上角 X 坐标
	Y1           float64 `protobuf:"fixed64,2,opt,name=y1,proto3" json:"y1,omitempty"`                                        // 左上角 Y 坐标
	X2           float64 `protobuf:"fixed64,3,opt,name=x2,proto3" json:"x2,omitempty"`                                        // 右下角 X 坐标
	Y2           float64 `protobuf:"fixed64,4,opt,name=y2,proto3" json:"y2,omitempty"`                                        // 右下角 Y 坐标
	SourceWidth  int32   `protobuf:"varint,5,opt,name=source_width,json=sourceWidth,proto3" json:"source_width,omitempty"`    // 源宽度
	SourceHeight int32   `protobuf:"varint,6,opt,name=source_height,json=sourceHeight,proto3" json:"source_height,omitempty"` // 源高度
}

func (x *RoomFeedData_StreamCutPosition) Reset() {
	*x = RoomFeedData_StreamCutPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_StreamCutPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_StreamCutPosition) ProtoMessage() {}

func (x *RoomFeedData_StreamCutPosition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_StreamCutPosition.ProtoReflect.Descriptor instead.
func (*RoomFeedData_StreamCutPosition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 0}
}

func (x *RoomFeedData_StreamCutPosition) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *RoomFeedData_StreamCutPosition) GetY1() float64 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *RoomFeedData_StreamCutPosition) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *RoomFeedData_StreamCutPosition) GetY2() float64 {
	if x != nil {
		return x.Y2
	}
	return 0
}

func (x *RoomFeedData_StreamCutPosition) GetSourceWidth() int32 {
	if x != nil {
		return x.SourceWidth
	}
	return 0
}

func (x *RoomFeedData_StreamCutPosition) GetSourceHeight() int32 {
	if x != nil {
		return x.SourceHeight
	}
	return 0
}

// FollowTopAppearance 嵌套消息定义
type RoomFeedData_FollowTopAppearance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style       int32                           `protobuf:"varint,1,opt,name=style,proto3" json:"style,omitempty"`                               // 展示样式
	CutPosition *RoomFeedData_StreamCutPosition `protobuf:"bytes,2,opt,name=cut_position,json=cutPosition,proto3" json:"cut_position,omitempty"` // 切割位置
	Image       *Image                          `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`                                // 图片信息
}

func (x *RoomFeedData_FollowTopAppearance) Reset() {
	*x = RoomFeedData_FollowTopAppearance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_FollowTopAppearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_FollowTopAppearance) ProtoMessage() {}

func (x *RoomFeedData_FollowTopAppearance) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_FollowTopAppearance.ProtoReflect.Descriptor instead.
func (*RoomFeedData_FollowTopAppearance) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 1}
}

func (x *RoomFeedData_FollowTopAppearance) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *RoomFeedData_FollowTopAppearance) GetCutPosition() *RoomFeedData_StreamCutPosition {
	if x != nil {
		return x.CutPosition
	}
	return nil
}

func (x *RoomFeedData_FollowTopAppearance) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

// DrawerConfig 嵌套消息定义
type RoomFeedData_DrawerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarArea     *RoomFeedData_DrawerConfig_AvatarArea     `protobuf:"bytes,1,opt,name=avatar_area,json=avatarArea,proto3" json:"avatar_area,omitempty"`             // 头像区域信息
	EntranceIcon   *RoomFeedData_DrawerConfig_EntranceIcon   `protobuf:"bytes,2,opt,name=entrance_icon,json=entranceIcon,proto3" json:"entrance_icon,omitempty"`       // 入口图标
	EntraceTitle   *RoomFeedData_DrawerConfig_EntranceTitle  `protobuf:"bytes,3,opt,name=entrace_title,json=entraceTitle,proto3" json:"entrace_title,omitempty"`       // 入口标题
	ArrowView      *RoomFeedData_DrawerConfig_ArrowView      `protobuf:"bytes,4,opt,name=arrow_view,json=arrowView,proto3" json:"arrow_view,omitempty"`                // 箭头视图
	EntranceLayout *RoomFeedData_DrawerConfig_EntranceLayout `protobuf:"bytes,5,opt,name=entrance_layout,json=entranceLayout,proto3" json:"entrance_layout,omitempty"` // 入口布局
	SpecialConfig  *RoomFeedData_DrawerConfig_SpecialConfig  `protobuf:"bytes,6,opt,name=special_config,json=specialConfig,proto3" json:"special_config,omitempty"`    // 特殊配置
}

func (x *RoomFeedData_DrawerConfig) Reset() {
	*x = RoomFeedData_DrawerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2}
}

func (x *RoomFeedData_DrawerConfig) GetAvatarArea() *RoomFeedData_DrawerConfig_AvatarArea {
	if x != nil {
		return x.AvatarArea
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig) GetEntranceIcon() *RoomFeedData_DrawerConfig_EntranceIcon {
	if x != nil {
		return x.EntranceIcon
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig) GetEntraceTitle() *RoomFeedData_DrawerConfig_EntranceTitle {
	if x != nil {
		return x.EntraceTitle
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig) GetArrowView() *RoomFeedData_DrawerConfig_ArrowView {
	if x != nil {
		return x.ArrowView
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig) GetEntranceLayout() *RoomFeedData_DrawerConfig_EntranceLayout {
	if x != nil {
		return x.EntranceLayout
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig) GetSpecialConfig() *RoomFeedData_DrawerConfig_SpecialConfig {
	if x != nil {
		return x.SpecialConfig
	}
	return nil
}

// AvatarArea 嵌套消息定义
type RoomFeedData_DrawerConfig_AvatarArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanShowFollow int32 `protobuf:"varint,1,opt,name=can_show_follow,json=canShowFollow,proto3" json:"can_show_follow,omitempty"` // 是否显示关注
}

func (x *RoomFeedData_DrawerConfig_AvatarArea) Reset() {
	*x = RoomFeedData_DrawerConfig_AvatarArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_AvatarArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_AvatarArea) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_AvatarArea) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_AvatarArea.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_AvatarArea) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 0}
}

func (x *RoomFeedData_DrawerConfig_AvatarArea) GetCanShowFollow() int32 {
	if x != nil {
		return x.CanShowFollow
	}
	return 0
}

// EntranceIcon 嵌套消息定义
type RoomFeedData_DrawerConfig_EntranceIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image          *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                                            // 图片信息
	AnimShowMethod int32  `protobuf:"varint,2,opt,name=anim_show_method,json=animShowMethod,proto3" json:"anim_show_method,omitempty"` // 动画显示方式
	AnimStopMethod int32  `protobuf:"varint,3,opt,name=anim_stop_method,json=animStopMethod,proto3" json:"anim_stop_method,omitempty"` // 动画停止方式
	Height         string `protobuf:"bytes,4,opt,name=height,proto3" json:"height,omitempty"`                                          // 高度
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) Reset() {
	*x = RoomFeedData_DrawerConfig_EntranceIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_EntranceIcon) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_EntranceIcon.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_EntranceIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 1}
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) GetAnimShowMethod() int32 {
	if x != nil {
		return x.AnimShowMethod
	}
	return 0
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) GetAnimStopMethod() int32 {
	if x != nil {
		return x.AnimStopMethod
	}
	return 0
}

func (x *RoomFeedData_DrawerConfig_EntranceIcon) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

// EntranceTitle 嵌套消息定义
type RoomFeedData_DrawerConfig_EntranceTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // 标题文本
}

func (x *RoomFeedData_DrawerConfig_EntranceTitle) Reset() {
	*x = RoomFeedData_DrawerConfig_EntranceTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_EntranceTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_EntranceTitle) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_EntranceTitle) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_EntranceTitle.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_EntranceTitle) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 2}
}

func (x *RoomFeedData_DrawerConfig_EntranceTitle) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// ArrowView 嵌套消息定义
type RoomFeedData_DrawerConfig_ArrowView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visibility int32 `protobuf:"varint,1,opt,name=visibility,proto3" json:"visibility,omitempty"` // 可见性
}

func (x *RoomFeedData_DrawerConfig_ArrowView) Reset() {
	*x = RoomFeedData_DrawerConfig_ArrowView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_ArrowView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_ArrowView) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_ArrowView) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_ArrowView.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_ArrowView) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 3}
}

func (x *RoomFeedData_DrawerConfig_ArrowView) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

// EntranceLayout 嵌套消息定义
type RoomFeedData_DrawerConfig_EntranceLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutParams int32 `protobuf:"varint,1,opt,name=layout_params,json=layoutParams,proto3" json:"layout_params,omitempty"` // 布局参数
}

func (x *RoomFeedData_DrawerConfig_EntranceLayout) Reset() {
	*x = RoomFeedData_DrawerConfig_EntranceLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_EntranceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_EntranceLayout) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_EntranceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_EntranceLayout.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_EntranceLayout) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 4}
}

func (x *RoomFeedData_DrawerConfig_EntranceLayout) GetLayoutParams() int32 {
	if x != nil {
		return x.LayoutParams
	}
	return 0
}

// SpecialConfig 嵌套消息定义
type RoomFeedData_DrawerConfig_SpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntraceTitle     *RoomFeedData_DrawerConfig_EntranceTitle          `protobuf:"bytes,1,opt,name=entrace_title,json=entraceTitle,proto3" json:"entrace_title,omitempty"`                // 入口标题
	MoreLiveTab      int32                                             `protobuf:"varint,2,opt,name=more_live_tab,json=moreLiveTab,proto3" json:"more_live_tab,omitempty"`                // 更多直播标签
	InsertRoomReason int32                                             `protobuf:"varint,3,opt,name=insert_room_reason,json=insertRoomReason,proto3" json:"insert_room_reason,omitempty"` // 插入房间原因
	FreqInfo         *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo `protobuf:"bytes,4,opt,name=freq_info,json=freqInfo,proto3" json:"freq_info,omitempty"`                            // 频率信息
	CurrentTalent    string                                            `protobuf:"bytes,5,opt,name=current_talent,json=currentTalent,proto3" json:"current_talent,omitempty"`             // 当前才艺
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) Reset() {
	*x = RoomFeedData_DrawerConfig_SpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_SpecialConfig) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_SpecialConfig.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_SpecialConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 5}
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) GetEntraceTitle() *RoomFeedData_DrawerConfig_EntranceTitle {
	if x != nil {
		return x.EntraceTitle
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) GetMoreLiveTab() int32 {
	if x != nil {
		return x.MoreLiveTab
	}
	return 0
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) GetInsertRoomReason() int32 {
	if x != nil {
		return x.InsertRoomReason
	}
	return 0
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) GetFreqInfo() *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo {
	if x != nil {
		return x.FreqInfo
	}
	return nil
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig) GetCurrentTalent() string {
	if x != nil {
		return x.CurrentTalent
	}
	return ""
}

// FreqInfo 嵌套消息定义
type RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDuration int32  `protobuf:"varint,1,opt,name=show_duration,json=showDuration,proto3" json:"show_duration,omitempty"` // 显示时长
	FreqKey      string `protobuf:"bytes,2,opt,name=freq_key,json=freqKey,proto3" json:"freq_key,omitempty"`                 // 频率键
	FreqDuration int32  `protobuf:"varint,3,opt,name=freq_duration,json=freqDuration,proto3" json:"freq_duration,omitempty"` // 频率持续时间
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) Reset() {
	*x = RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) ProtoMessage() {}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo.ProtoReflect.Descriptor instead.
func (*RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{159, 2, 5, 0}
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) GetShowDuration() int32 {
	if x != nil {
		return x.ShowDuration
	}
	return 0
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) GetFreqKey() string {
	if x != nil {
		return x.FreqKey
	}
	return ""
}

func (x *RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo) GetFreqDuration() int32 {
	if x != nil {
		return x.FreqDuration
	}
	return 0
}

// RoomGameDataChannelConfig 嵌套消息定义
type RoomGameData_RoomGameDataChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`       // 通道 ID
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"` // 通道名称
}

func (x *RoomGameData_RoomGameDataChannelConfig) Reset() {
	*x = RoomGameData_RoomGameDataChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomGameData_RoomGameDataChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomGameData_RoomGameDataChannelConfig) ProtoMessage() {}

func (x *RoomGameData_RoomGameDataChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomGameData_RoomGameDataChannelConfig.ProtoReflect.Descriptor instead.
func (*RoomGameData_RoomGameDataChannelConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{160, 0}
}

func (x *RoomGameData_RoomGameDataChannelConfig) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *RoomGameData_RoomGameDataChannelConfig) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

// GameTagInfo 嵌套消息定义
type RoomGameData_GameTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`       // 标签 ID
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名称
}

func (x *RoomGameData_GameTagInfo) Reset() {
	*x = RoomGameData_GameTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomGameData_GameTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomGameData_GameTagInfo) ProtoMessage() {}

func (x *RoomGameData_GameTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomGameData_GameTagInfo.ProtoReflect.Descriptor instead.
func (*RoomGameData_GameTagInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{160, 1}
}

func (x *RoomGameData_GameTagInfo) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *RoomGameData_GameTagInfo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

// SandwichBorderInfo 嵌套消息定义
type RoomGameData_SandwichBorderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorderId          string `protobuf:"bytes,1,opt,name=border_id,json=borderId,proto3" json:"border_id,omitempty"`                            // 边框 ID
	BorderDescription string `protobuf:"bytes,2,opt,name=border_description,json=borderDescription,proto3" json:"border_description,omitempty"` // 边框描述
}

func (x *RoomGameData_SandwichBorderInfo) Reset() {
	*x = RoomGameData_SandwichBorderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomGameData_SandwichBorderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomGameData_SandwichBorderInfo) ProtoMessage() {}

func (x *RoomGameData_SandwichBorderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomGameData_SandwichBorderInfo.ProtoReflect.Descriptor instead.
func (*RoomGameData_SandwichBorderInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{160, 2}
}

func (x *RoomGameData_SandwichBorderInfo) GetBorderId() string {
	if x != nil {
		return x.BorderId
	}
	return ""
}

func (x *RoomGameData_SandwichBorderInfo) GetBorderDescription() string {
	if x != nil {
		return x.BorderDescription
	}
	return ""
}

// VirtualLiveBgImages 嵌套消息定义
type PicoInfo_VirtualLiveBgImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalImage   *Image                                         `protobuf:"bytes,1,opt,name=original_image,json=originalImage,proto3" json:"original_image,omitempty"`       // 原始图片
	OriginalDigest  string                                         `protobuf:"bytes,2,opt,name=original_digest,json=originalDigest,proto3" json:"original_digest,omitempty"`    // 原始图片摘要
	IsUpright       bool                                           `protobuf:"varint,3,opt,name=is_upright,json=isUpright,proto3" json:"is_upright,omitempty"`                  // 是否直立
	ConvertedImages []*Image                                       `protobuf:"bytes,4,rep,name=converted_images,json=convertedImages,proto3" json:"converted_images,omitempty"` // 转换后的图片列表
	ConvertedList   []*PicoInfo_VirtualLiveBgImages_ConvertedImage `protobuf:"bytes,5,rep,name=converted_list,json=convertedList,proto3" json:"converted_list,omitempty"`       // 转换后的图片信息列表
}

func (x *PicoInfo_VirtualLiveBgImages) Reset() {
	*x = PicoInfo_VirtualLiveBgImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicoInfo_VirtualLiveBgImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicoInfo_VirtualLiveBgImages) ProtoMessage() {}

func (x *PicoInfo_VirtualLiveBgImages) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicoInfo_VirtualLiveBgImages.ProtoReflect.Descriptor instead.
func (*PicoInfo_VirtualLiveBgImages) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{161, 1}
}

func (x *PicoInfo_VirtualLiveBgImages) GetOriginalImage() *Image {
	if x != nil {
		return x.OriginalImage
	}
	return nil
}

func (x *PicoInfo_VirtualLiveBgImages) GetOriginalDigest() string {
	if x != nil {
		return x.OriginalDigest
	}
	return ""
}

func (x *PicoInfo_VirtualLiveBgImages) GetIsUpright() bool {
	if x != nil {
		return x.IsUpright
	}
	return false
}

func (x *PicoInfo_VirtualLiveBgImages) GetConvertedImages() []*Image {
	if x != nil {
		return x.ConvertedImages
	}
	return nil
}

func (x *PicoInfo_VirtualLiveBgImages) GetConvertedList() []*PicoInfo_VirtualLiveBgImages_ConvertedImage {
	if x != nil {
		return x.ConvertedList
	}
	return nil
}

// ConvertedImage 嵌套消息定义
type PicoInfo_VirtualLiveBgImages_ConvertedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality int64  `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"` // 图片质量
	Image   *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`      // 图片信息
	Digest  string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`    // 图片摘要
}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) Reset() {
	*x = PicoInfo_VirtualLiveBgImages_ConvertedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicoInfo_VirtualLiveBgImages_ConvertedImage) ProtoMessage() {}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicoInfo_VirtualLiveBgImages_ConvertedImage.ProtoReflect.Descriptor instead.
func (*PicoInfo_VirtualLiveBgImages_ConvertedImage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{161, 1, 0}
}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) GetQuality() int64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PicoInfo_VirtualLiveBgImages_ConvertedImage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// DecotationDetail 嵌套消息定义
type RoomOthersData_DecotationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId    string `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"` // 细节 ID
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`           // 描述
}

func (x *RoomOthersData_DecotationDetail) Reset() {
	*x = RoomOthersData_DecotationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_DecotationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_DecotationDetail) ProtoMessage() {}

func (x *RoomOthersData_DecotationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_DecotationDetail.ProtoReflect.Descriptor instead.
func (*RoomOthersData_DecotationDetail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 0}
}

func (x *RoomOthersData_DecotationDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *RoomOthersData_DecotationDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// MorePanelData 嵌套消息定义
type RoomOthersData_MorePanelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelItems []string `protobuf:"bytes,1,rep,name=panel_items,json=panelItems,proto3" json:"panel_items,omitempty"` // 面板项目列表
}

func (x *RoomOthersData_MorePanelData) Reset() {
	*x = RoomOthersData_MorePanelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_MorePanelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_MorePanelData) ProtoMessage() {}

func (x *RoomOthersData_MorePanelData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_MorePanelData.ProtoReflect.Descriptor instead.
func (*RoomOthersData_MorePanelData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 1}
}

func (x *RoomOthersData_MorePanelData) GetPanelItems() []string {
	if x != nil {
		return x.PanelItems
	}
	return nil
}

// AppointmentData 嵌套消息定义
type RoomOthersData_AppointmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppointmentId   string `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`       // 预约 ID
	AppointmentTime string `protobuf:"bytes,2,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time,omitempty"` // 预约时间
}

func (x *RoomOthersData_AppointmentData) Reset() {
	*x = RoomOthersData_AppointmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_AppointmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_AppointmentData) ProtoMessage() {}

func (x *RoomOthersData_AppointmentData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_AppointmentData.ProtoReflect.Descriptor instead.
func (*RoomOthersData_AppointmentData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 2}
}

func (x *RoomOthersData_AppointmentData) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *RoomOthersData_AppointmentData) GetAppointmentTime() string {
	if x != nil {
		return x.AppointmentTime
	}
	return ""
}

// WebSkinData 嵌套消息定义
type RoomOthersData_WebSkinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId   string `protobuf:"bytes,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`       // 皮肤 ID
	SkinName string `protobuf:"bytes,2,opt,name=skin_name,json=skinName,proto3" json:"skin_name,omitempty"` // 皮肤名称
}

func (x *RoomOthersData_WebSkinData) Reset() {
	*x = RoomOthersData_WebSkinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_WebSkinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_WebSkinData) ProtoMessage() {}

func (x *RoomOthersData_WebSkinData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_WebSkinData.ProtoReflect.Descriptor instead.
func (*RoomOthersData_WebSkinData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 3}
}

func (x *RoomOthersData_WebSkinData) GetSkinId() string {
	if x != nil {
		return x.SkinId
	}
	return ""
}

func (x *RoomOthersData_WebSkinData) GetSkinName() string {
	if x != nil {
		return x.SkinName
	}
	return ""
}

// WebProgramme 嵌套消息定义
type RoomOthersData_WebProgramme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgrammeId   string `protobuf:"bytes,1,opt,name=programme_id,json=programmeId,proto3" json:"programme_id,omitempty"`       // 节目 ID
	ProgrammeName string `protobuf:"bytes,2,opt,name=programme_name,json=programmeName,proto3" json:"programme_name,omitempty"` // 节目名称
}

func (x *RoomOthersData_WebProgramme) Reset() {
	*x = RoomOthersData_WebProgramme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_WebProgramme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_WebProgramme) ProtoMessage() {}

func (x *RoomOthersData_WebProgramme) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_WebProgramme.ProtoReflect.Descriptor instead.
func (*RoomOthersData_WebProgramme) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 4}
}

func (x *RoomOthersData_WebProgramme) GetProgrammeId() string {
	if x != nil {
		return x.ProgrammeId
	}
	return ""
}

func (x *RoomOthersData_WebProgramme) GetProgrammeName() string {
	if x != nil {
		return x.ProgrammeName
	}
	return ""
}

// LiveMatrixInfo 嵌套消息定义
type RoomOthersData_LiveMatrixInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatrixId   string `protobuf:"bytes,1,opt,name=matrix_id,json=matrixId,proto3" json:"matrix_id,omitempty"`       // 矩阵 ID
	MatrixName string `protobuf:"bytes,2,opt,name=matrix_name,json=matrixName,proto3" json:"matrix_name,omitempty"` // 矩阵名称
}

func (x *RoomOthersData_LiveMatrixInfo) Reset() {
	*x = RoomOthersData_LiveMatrixInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_LiveMatrixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_LiveMatrixInfo) ProtoMessage() {}

func (x *RoomOthersData_LiveMatrixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_LiveMatrixInfo.ProtoReflect.Descriptor instead.
func (*RoomOthersData_LiveMatrixInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 5}
}

func (x *RoomOthersData_LiveMatrixInfo) GetMatrixId() string {
	if x != nil {
		return x.MatrixId
	}
	return ""
}

func (x *RoomOthersData_LiveMatrixInfo) GetMatrixName() string {
	if x != nil {
		return x.MatrixName
	}
	return ""
}

// WebLivePortOptimization 嵌套消息定义
type RoomOthersData_WebLivePortOptimization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptimizationId          string `protobuf:"bytes,1,opt,name=optimization_id,json=optimizationId,proto3" json:"optimization_id,omitempty"`                            // 优化 ID
	OptimizationDescription string `protobuf:"bytes,2,opt,name=optimization_description,json=optimizationDescription,proto3" json:"optimization_description,omitempty"` // 优化描述
}

func (x *RoomOthersData_WebLivePortOptimization) Reset() {
	*x = RoomOthersData_WebLivePortOptimization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_WebLivePortOptimization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_WebLivePortOptimization) ProtoMessage() {}

func (x *RoomOthersData_WebLivePortOptimization) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_WebLivePortOptimization.ProtoReflect.Descriptor instead.
func (*RoomOthersData_WebLivePortOptimization) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 6}
}

func (x *RoomOthersData_WebLivePortOptimization) GetOptimizationId() string {
	if x != nil {
		return x.OptimizationId
	}
	return ""
}

func (x *RoomOthersData_WebLivePortOptimization) GetOptimizationDescription() string {
	if x != nil {
		return x.OptimizationDescription
	}
	return ""
}

// GiftPanelTopperTray 嵌套消息定义
type RoomOthersData_GiftPanelTopperTray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftItems []string `protobuf:"bytes,1,rep,name=gift_items,json=giftItems,proto3" json:"gift_items,omitempty"` // 礼物项目列表
}

func (x *RoomOthersData_GiftPanelTopperTray) Reset() {
	*x = RoomOthersData_GiftPanelTopperTray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_GiftPanelTopperTray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_GiftPanelTopperTray) ProtoMessage() {}

func (x *RoomOthersData_GiftPanelTopperTray) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_GiftPanelTopperTray.ProtoReflect.Descriptor instead.
func (*RoomOthersData_GiftPanelTopperTray) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 7}
}

func (x *RoomOthersData_GiftPanelTopperTray) GetGiftItems() []string {
	if x != nil {
		return x.GiftItems
	}
	return nil
}

// EnterGiftAnimation 嵌套消息定义
type RoomOthersData_EnterGiftAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationId  string `protobuf:"bytes,1,opt,name=animation_id,json=animationId,proto3" json:"animation_id,omitempty"`    // 动画 ID
	AnimationUrl string `protobuf:"bytes,2,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"` // 动画 URL
}

func (x *RoomOthersData_EnterGiftAnimation) Reset() {
	*x = RoomOthersData_EnterGiftAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[620]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_EnterGiftAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_EnterGiftAnimation) ProtoMessage() {}

func (x *RoomOthersData_EnterGiftAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[620]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_EnterGiftAnimation.ProtoReflect.Descriptor instead.
func (*RoomOthersData_EnterGiftAnimation) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 8}
}

func (x *RoomOthersData_EnterGiftAnimation) GetAnimationId() string {
	if x != nil {
		return x.AnimationId
	}
	return ""
}

func (x *RoomOthersData_EnterGiftAnimation) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

// PaidLiveSubscribe 嵌套消息定义
type RoomOthersData_PaidLiveSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeId     string `protobuf:"bytes,1,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`             // 订阅 ID
	SubscribeStatus string `protobuf:"bytes,2,opt,name=subscribe_status,json=subscribeStatus,proto3" json:"subscribe_status,omitempty"` // 订阅状态
}

func (x *RoomOthersData_PaidLiveSubscribe) Reset() {
	*x = RoomOthersData_PaidLiveSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[621]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_PaidLiveSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_PaidLiveSubscribe) ProtoMessage() {}

func (x *RoomOthersData_PaidLiveSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[621]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_PaidLiveSubscribe.ProtoReflect.Descriptor instead.
func (*RoomOthersData_PaidLiveSubscribe) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 9}
}

func (x *RoomOthersData_PaidLiveSubscribe) GetSubscribeId() string {
	if x != nil {
		return x.SubscribeId
	}
	return ""
}

func (x *RoomOthersData_PaidLiveSubscribe) GetSubscribeStatus() string {
	if x != nil {
		return x.SubscribeStatus
	}
	return ""
}

// GroupLiveData 嵌套消息定义
type RoomOthersData_GroupLiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`       // 群组 ID
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"` // 群组名称
}

func (x *RoomOthersData_GroupLiveData) Reset() {
	*x = RoomOthersData_GroupLiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_GroupLiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_GroupLiveData) ProtoMessage() {}

func (x *RoomOthersData_GroupLiveData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_GroupLiveData.ProtoReflect.Descriptor instead.
func (*RoomOthersData_GroupLiveData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 10}
}

func (x *RoomOthersData_GroupLiveData) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RoomOthersData_GroupLiveData) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

// WebEnterBenefitPointData 嵌套消息定义
type RoomOthersData_WebEnterBenefitPointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenefitId          string `protobuf:"bytes,1,opt,name=benefit_id,json=benefitId,proto3" json:"benefit_id,omitempty"`                            // 福利点 ID
	BenefitDescription string `protobuf:"bytes,2,opt,name=benefit_description,json=benefitDescription,proto3" json:"benefit_description,omitempty"` // 福利描述
}

func (x *RoomOthersData_WebEnterBenefitPointData) Reset() {
	*x = RoomOthersData_WebEnterBenefitPointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[623]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_WebEnterBenefitPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_WebEnterBenefitPointData) ProtoMessage() {}

func (x *RoomOthersData_WebEnterBenefitPointData) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[623]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_WebEnterBenefitPointData.ProtoReflect.Descriptor instead.
func (*RoomOthersData_WebEnterBenefitPointData) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 11}
}

func (x *RoomOthersData_WebEnterBenefitPointData) GetBenefitId() string {
	if x != nil {
		return x.BenefitId
	}
	return ""
}

func (x *RoomOthersData_WebEnterBenefitPointData) GetBenefitDescription() string {
	if x != nil {
		return x.BenefitDescription
	}
	return ""
}

// StreamRecognitionContainers 嵌套消息定义
type RoomOthersData_StreamRecognitionContainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerIds []string `protobuf:"bytes,1,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"` // 容器 ID 列表
}

func (x *RoomOthersData_StreamRecognitionContainers) Reset() {
	*x = RoomOthersData_StreamRecognitionContainers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[624]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_StreamRecognitionContainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_StreamRecognitionContainers) ProtoMessage() {}

func (x *RoomOthersData_StreamRecognitionContainers) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[624]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_StreamRecognitionContainers.ProtoReflect.Descriptor instead.
func (*RoomOthersData_StreamRecognitionContainers) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 12}
}

func (x *RoomOthersData_StreamRecognitionContainers) GetContainerIds() []string {
	if x != nil {
		return x.ContainerIds
	}
	return nil
}

// AnchorBottomToolBar 嵌套消息定义
type RoomOthersData_AnchorBottomToolBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolItems []string `protobuf:"bytes,1,rep,name=tool_items,json=toolItems,proto3" json:"tool_items,omitempty"` // 工具项目列表
}

func (x *RoomOthersData_AnchorBottomToolBar) Reset() {
	*x = RoomOthersData_AnchorBottomToolBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[625]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_AnchorBottomToolBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_AnchorBottomToolBar) ProtoMessage() {}

func (x *RoomOthersData_AnchorBottomToolBar) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[625]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_AnchorBottomToolBar.ProtoReflect.Descriptor instead.
func (*RoomOthersData_AnchorBottomToolBar) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 13}
}

func (x *RoomOthersData_AnchorBottomToolBar) GetToolItems() []string {
	if x != nil {
		return x.ToolItems
	}
	return nil
}

// AnchorTogetherLive 嵌套消息定义
type RoomOthersData_AnchorTogetherLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId     string `protobuf:"bytes,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`             // 联合直播 ID
	LiveStatus string `protobuf:"bytes,2,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"` // 联合直播状态
}

func (x *RoomOthersData_AnchorTogetherLive) Reset() {
	*x = RoomOthersData_AnchorTogetherLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[626]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOthersData_AnchorTogetherLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOthersData_AnchorTogetherLive) ProtoMessage() {}

func (x *RoomOthersData_AnchorTogetherLive) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[626]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOthersData_AnchorTogetherLive.ProtoReflect.Descriptor instead.
func (*RoomOthersData_AnchorTogetherLive) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{162, 14}
}

func (x *RoomOthersData_AnchorTogetherLive) GetLiveId() string {
	if x != nil {
		return x.LiveId
	}
	return ""
}

func (x *RoomOthersData_AnchorTogetherLive) GetLiveStatus() string {
	if x != nil {
		return x.LiveStatus
	}
	return ""
}

// OpenGame 嵌套消息定义
type RoomRevenueData_OpenGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`       // 游戏 ID
	GameName string `protobuf:"bytes,2,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"` // 游戏名称
}

func (x *RoomRevenueData_OpenGame) Reset() {
	*x = RoomRevenueData_OpenGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[627]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRevenueData_OpenGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRevenueData_OpenGame) ProtoMessage() {}

func (x *RoomRevenueData_OpenGame) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[627]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRevenueData_OpenGame.ProtoReflect.Descriptor instead.
func (*RoomRevenueData_OpenGame) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{163, 0}
}

func (x *RoomRevenueData_OpenGame) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *RoomRevenueData_OpenGame) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

// AnchorLinkmic 嵌套消息定义
type RoomRevenueData_AnchorLinkmic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkmicId string `protobuf:"bytes,1,opt,name=linkmic_id,json=linkmicId,proto3" json:"linkmic_id,omitempty"` // 连麦 ID
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                        // 连麦状态
}

func (x *RoomRevenueData_AnchorLinkmic) Reset() {
	*x = RoomRevenueData_AnchorLinkmic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[628]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRevenueData_AnchorLinkmic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRevenueData_AnchorLinkmic) ProtoMessage() {}

func (x *RoomRevenueData_AnchorLinkmic) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[628]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRevenueData_AnchorLinkmic.ProtoReflect.Descriptor instead.
func (*RoomRevenueData_AnchorLinkmic) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{163, 1}
}

func (x *RoomRevenueData_AnchorLinkmic) GetLinkmicId() string {
	if x != nil {
		return x.LinkmicId
	}
	return ""
}

func (x *RoomRevenueData_AnchorLinkmic) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// GameAnchorInfo 嵌套消息定义
type RoomAnchorData_GameAnchorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorId   string `protobuf:"bytes,1,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`       // 主播 ID
	AnchorName string `protobuf:"bytes,2,opt,name=anchor_name,json=anchorName,proto3" json:"anchor_name,omitempty"` // 主播名称
}

func (x *RoomAnchorData_GameAnchorInfo) Reset() {
	*x = RoomAnchorData_GameAnchorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[629]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAnchorData_GameAnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAnchorData_GameAnchorInfo) ProtoMessage() {}

func (x *RoomAnchorData_GameAnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[629]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAnchorData_GameAnchorInfo.ProtoReflect.Descriptor instead.
func (*RoomAnchorData_GameAnchorInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{165, 0}
}

func (x *RoomAnchorData_GameAnchorInfo) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

func (x *RoomAnchorData_GameAnchorInfo) GetAnchorName() string {
	if x != nil {
		return x.AnchorName
	}
	return ""
}

// EpisodeExtraInfo 嵌套消息定义
type RoomInteractData_EpisodeExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraData string `protobuf:"bytes,1,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"` // 额外信息（可能是 JSON 或自定义字符串）
}

func (x *RoomInteractData_EpisodeExtraInfo) Reset() {
	*x = RoomInteractData_EpisodeExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[630]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInteractData_EpisodeExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInteractData_EpisodeExtraInfo) ProtoMessage() {}

func (x *RoomInteractData_EpisodeExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[630]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInteractData_EpisodeExtraInfo.ProtoReflect.Descriptor instead.
func (*RoomInteractData_EpisodeExtraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{166, 0}
}

func (x *RoomInteractData_EpisodeExtraInfo) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

// FeaturedPublicScreenConf 嵌套消息定义
type RoomInteractData_FeaturedPublicScreenConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlights []string `protobuf:"bytes,1,rep,name=highlights,proto3" json:"highlights,omitempty"` // 公共屏幕的亮点内容列表
}

func (x *RoomInteractData_FeaturedPublicScreenConf) Reset() {
	*x = RoomInteractData_FeaturedPublicScreenConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[631]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInteractData_FeaturedPublicScreenConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInteractData_FeaturedPublicScreenConf) ProtoMessage() {}

func (x *RoomInteractData_FeaturedPublicScreenConf) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[631]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInteractData_FeaturedPublicScreenConf.ProtoReflect.Descriptor instead.
func (*RoomInteractData_FeaturedPublicScreenConf) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{166, 1}
}

func (x *RoomInteractData_FeaturedPublicScreenConf) GetHighlights() []string {
	if x != nil {
		return x.Highlights
	}
	return nil
}

// PublicScreenSpeedConf 嵌套消息定义
type RoomInteractData_PublicScreenSpeedConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSpeed int64 `protobuf:"varint,1,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"` // 公共屏幕最大滚动速度
	MinSpeed int64 `protobuf:"varint,2,opt,name=min_speed,json=minSpeed,proto3" json:"min_speed,omitempty"` // 公共屏幕最小滚动速度
}

func (x *RoomInteractData_PublicScreenSpeedConf) Reset() {
	*x = RoomInteractData_PublicScreenSpeedConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[632]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInteractData_PublicScreenSpeedConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInteractData_PublicScreenSpeedConf) ProtoMessage() {}

func (x *RoomInteractData_PublicScreenSpeedConf) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[632]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInteractData_PublicScreenSpeedConf.ProtoReflect.Descriptor instead.
func (*RoomInteractData_PublicScreenSpeedConf) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{166, 2}
}

func (x *RoomInteractData_PublicScreenSpeedConf) GetMaxSpeed() int64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *RoomInteractData_PublicScreenSpeedConf) GetMinSpeed() int64 {
	if x != nil {
		return x.MinSpeed
	}
	return 0
}

// RoomIntroLabel 嵌套消息定义
type RoomInteractData_RoomIntroLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelText    string `protobuf:"bytes,1,opt,name=label_text,json=labelText,proto3" json:"label_text,omitempty"`            // 标签文本
	LabelColor   string `protobuf:"bytes,2,opt,name=label_color,json=labelColor,proto3" json:"label_color,omitempty"`         // 标签颜色
	LabelIconUrl string `protobuf:"bytes,3,opt,name=label_icon_url,json=labelIconUrl,proto3" json:"label_icon_url,omitempty"` // 标签图标 URL
}

func (x *RoomInteractData_RoomIntroLabel) Reset() {
	*x = RoomInteractData_RoomIntroLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[633]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInteractData_RoomIntroLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInteractData_RoomIntroLabel) ProtoMessage() {}

func (x *RoomInteractData_RoomIntroLabel) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[633]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInteractData_RoomIntroLabel.ProtoReflect.Descriptor instead.
func (*RoomInteractData_RoomIntroLabel) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{166, 3}
}

func (x *RoomInteractData_RoomIntroLabel) GetLabelText() string {
	if x != nil {
		return x.LabelText
	}
	return ""
}

func (x *RoomInteractData_RoomIntroLabel) GetLabelColor() string {
	if x != nil {
		return x.LabelColor
	}
	return ""
}

func (x *RoomInteractData_RoomIntroLabel) GetLabelIconUrl() string {
	if x != nil {
		return x.LabelIconUrl
	}
	return ""
}

// BonusAuthor 嵌套消息定义
type Bonus_BonusAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 作者的用户 ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // 作者名称
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // 作者头像 URL
}

func (x *Bonus_BonusAuthor) Reset() {
	*x = Bonus_BonusAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[634]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus_BonusAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus_BonusAuthor) ProtoMessage() {}

func (x *Bonus_BonusAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[634]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus_BonusAuthor.ProtoReflect.Descriptor instead.
func (*Bonus_BonusAuthor) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{169, 0}
}

func (x *Bonus_BonusAuthor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Bonus_BonusAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bonus_BonusAuthor) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

// BonusCommerce 嵌套消息定义
type Bonus_BonusCommerce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommerceId   string `protobuf:"bytes,1,opt,name=commerce_id,json=commerceId,proto3" json:"commerce_id,omitempty"`       // 商业信息 ID
	CommerceName string `protobuf:"bytes,2,opt,name=commerce_name,json=commerceName,proto3" json:"commerce_name,omitempty"` // 商业信息名称
	ProductUrl   string `protobuf:"bytes,3,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`       // 产品链接
}

func (x *Bonus_BonusCommerce) Reset() {
	*x = Bonus_BonusCommerce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[635]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus_BonusCommerce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus_BonusCommerce) ProtoMessage() {}

func (x *Bonus_BonusCommerce) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[635]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus_BonusCommerce.ProtoReflect.Descriptor instead.
func (*Bonus_BonusCommerce) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{169, 1}
}

func (x *Bonus_BonusCommerce) GetCommerceId() string {
	if x != nil {
		return x.CommerceId
	}
	return ""
}

func (x *Bonus_BonusCommerce) GetCommerceName() string {
	if x != nil {
		return x.CommerceName
	}
	return ""
}

func (x *Bonus_BonusCommerce) GetProductUrl() string {
	if x != nil {
		return x.ProductUrl
	}
	return ""
}

// BottomCard 嵌套消息定义
type PublicScreenBottomInfo_BottomCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // 卡片名称
	Priority  int64  `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`                   // 卡片优先级
	Duration  int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                   // 显示时长（毫秒）
	BizParams string `protobuf:"bytes,4,opt,name=biz_params,json=bizParams,proto3" json:"biz_params,omitempty"` // 业务参数（JSON 格式或自定义字符串）
}

func (x *PublicScreenBottomInfo_BottomCard) Reset() {
	*x = PublicScreenBottomInfo_BottomCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[636]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicScreenBottomInfo_BottomCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicScreenBottomInfo_BottomCard) ProtoMessage() {}

func (x *PublicScreenBottomInfo_BottomCard) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[636]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicScreenBottomInfo_BottomCard.ProtoReflect.Descriptor instead.
func (*PublicScreenBottomInfo_BottomCard) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{171, 0}
}

func (x *PublicScreenBottomInfo_BottomCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicScreenBottomInfo_BottomCard) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PublicScreenBottomInfo_BottomCard) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PublicScreenBottomInfo_BottomCard) GetBizParams() string {
	if x != nil {
		return x.BizParams
	}
	return ""
}

// CastOttPermission 嵌套消息定义
type CastScreenData_CastOttPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanCast           bool   `protobuf:"varint,1,opt,name=can_cast,json=canCast,proto3" json:"can_cast,omitempty"`                              // 是否允许投屏
	RestrictionReason string `protobuf:"bytes,2,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"` // 限制投屏的原因
}

func (x *CastScreenData_CastOttPermission) Reset() {
	*x = CastScreenData_CastOttPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[638]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CastScreenData_CastOttPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastScreenData_CastOttPermission) ProtoMessage() {}

func (x *CastScreenData_CastOttPermission) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[638]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastScreenData_CastOttPermission.ProtoReflect.Descriptor instead.
func (*CastScreenData_CastOttPermission) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{173, 0}
}

func (x *CastScreenData_CastOttPermission) GetCanCast() bool {
	if x != nil {
		return x.CanCast
	}
	return false
}

func (x *CastScreenData_CastOttPermission) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

// EpisodeInfo 嵌套消息定义
type ActivityLiveRecommendConfig_EpisodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType int32  `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 内容类型
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                             // 内容
}

func (x *ActivityLiveRecommendConfig_EpisodeInfo) Reset() {
	*x = ActivityLiveRecommendConfig_EpisodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[641]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLiveRecommendConfig_EpisodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLiveRecommendConfig_EpisodeInfo) ProtoMessage() {}

func (x *ActivityLiveRecommendConfig_EpisodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[641]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLiveRecommendConfig_EpisodeInfo.ProtoReflect.Descriptor instead.
func (*ActivityLiveRecommendConfig_EpisodeInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{179, 0}
}

func (x *ActivityLiveRecommendConfig_EpisodeInfo) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *ActivityLiveRecommendConfig_EpisodeInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// TitleIcon 消息定义
type RoomTitle_TitleIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RoomTitle_TitleIcon) Reset() {
	*x = RoomTitle_TitleIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[642]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTitle_TitleIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTitle_TitleIcon) ProtoMessage() {}

func (x *RoomTitle_TitleIcon) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[642]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTitle_TitleIcon.ProtoReflect.Descriptor instead.
func (*RoomTitle_TitleIcon) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{193, 0}
}

// ExtraInfo 嵌套消息定义
type DSLDetail_ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"` // 高度
	Width  int64 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 宽度
}

func (x *DSLDetail_ExtraInfo) Reset() {
	*x = DSLDetail_ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[644]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSLDetail_ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSLDetail_ExtraInfo) ProtoMessage() {}

func (x *DSLDetail_ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[644]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSLDetail_ExtraInfo.ProtoReflect.Descriptor instead.
func (*DSLDetail_ExtraInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{196, 0}
}

func (x *DSLDetail_ExtraInfo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DSLDetail_ExtraInfo) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

// UserCountComposition 消息定义
type RoomStats_UserCountComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City        float64 `protobuf:"fixed64,1,opt,name=city,proto3" json:"city,omitempty"`                                  // 城市用户比例
	VideoDetail float64 `protobuf:"fixed64,2,opt,name=video_detail,json=videoDetail,proto3" json:"video_detail,omitempty"` // 视频详情用户比例
	MyFollow    float64 `protobuf:"fixed64,3,opt,name=my_follow,json=myFollow,proto3" json:"my_follow,omitempty"`          // 我的关注用户比例
	Other       float64 `protobuf:"fixed64,4,opt,name=other,proto3" json:"other,omitempty"`                                // 其他用户比例
}

func (x *RoomStats_UserCountComposition) Reset() {
	*x = RoomStats_UserCountComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[645]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStats_UserCountComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStats_UserCountComposition) ProtoMessage() {}

func (x *RoomStats_UserCountComposition) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[645]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStats_UserCountComposition.ProtoReflect.Descriptor instead.
func (*RoomStats_UserCountComposition) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{198, 0}
}

func (x *RoomStats_UserCountComposition) GetCity() float64 {
	if x != nil {
		return x.City
	}
	return 0
}

func (x *RoomStats_UserCountComposition) GetVideoDetail() float64 {
	if x != nil {
		return x.VideoDetail
	}
	return 0
}

func (x *RoomStats_UserCountComposition) GetMyFollow() float64 {
	if x != nil {
		return x.MyFollow
	}
	return 0
}

func (x *RoomStats_UserCountComposition) GetOther() float64 {
	if x != nil {
		return x.Other
	}
	return 0
}

// LinkMicChannelInfo 消息定义
type LinkMic_LinkMicChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout    int64 `protobuf:"varint,1,opt,name=layout,proto3" json:"layout,omitempty"`       // 布局
	Vendor    int64 `protobuf:"varint,2,opt,name=vendor,proto3" json:"vendor,omitempty"`       // 供应商
	Dimension int64 `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"` // 维度
}

func (x *LinkMic_LinkMicChannelInfo) Reset() {
	*x = LinkMic_LinkMicChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[646]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMic_LinkMicChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMic_LinkMicChannelInfo) ProtoMessage() {}

func (x *LinkMic_LinkMicChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[646]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMic_LinkMicChannelInfo.ProtoReflect.Descriptor instead.
func (*LinkMic_LinkMicChannelInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{205, 0}
}

func (x *LinkMic_LinkMicChannelInfo) GetLayout() int64 {
	if x != nil {
		return x.Layout
	}
	return 0
}

func (x *LinkMic_LinkMicChannelInfo) GetVendor() int64 {
	if x != nil {
		return x.Vendor
	}
	return 0
}

func (x *LinkMic_LinkMicChannelInfo) GetDimension() int64 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

// LinkMicBattleScore 消息定义
type LinkMic_LinkMicBattleScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   // 用户 ID
	Score  int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                   // 分数
	OpenId string `protobuf:"bytes,5000,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"` // 用户开放 ID
}

func (x *LinkMic_LinkMicBattleScore) Reset() {
	*x = LinkMic_LinkMicBattleScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[647]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMic_LinkMicBattleScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMic_LinkMicBattleScore) ProtoMessage() {}

func (x *LinkMic_LinkMicBattleScore) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[647]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMic_LinkMicBattleScore.ProtoReflect.Descriptor instead.
func (*LinkMic_LinkMicBattleScore) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{205, 1}
}

func (x *LinkMic_LinkMicBattleScore) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkMic_LinkMicBattleScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LinkMic_LinkMicBattleScore) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// LinkMicBattleSetting 消息定义
type LinkMic_LinkMicBattleSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int64  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`           // 频道 ID
	Duration     int64  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                              // 持续时间
	StartTime    int64  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`           // 开始时间（秒）
	StartTimeMs  int64  `protobuf:"varint,4,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`   // 开始时间（毫秒）
	Theme        string `protobuf:"bytes,5,opt,name=theme,proto3" json:"theme,omitempty"`                                     // 主题
	Finished     int64  `protobuf:"varint,6,opt,name=finished,proto3" json:"finished,omitempty"`                              // 是否结束
	BattleId     int64  `protobuf:"varint,7,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`              // 对战 ID
	MatchType    int64  `protobuf:"varint,8,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`           // 匹配类型
	PlayMode     int64  `protobuf:"varint,9,opt,name=play_mode,json=playMode,proto3" json:"play_mode,omitempty"`              // 播放模式
	TeamMode     int64  `protobuf:"varint,10,opt,name=team_mode,json=teamMode,proto3" json:"team_mode,omitempty"`             // 团队模式
	ActivityMode int64  `protobuf:"varint,11,opt,name=activity_mode,json=activityMode,proto3" json:"activity_mode,omitempty"` // 活动模式
}

func (x *LinkMic_LinkMicBattleSetting) Reset() {
	*x = LinkMic_LinkMicBattleSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[648]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMic_LinkMicBattleSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMic_LinkMicBattleSetting) ProtoMessage() {}

func (x *LinkMic_LinkMicBattleSetting) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[648]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMic_LinkMicBattleSetting.ProtoReflect.Descriptor instead.
func (*LinkMic_LinkMicBattleSetting) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{205, 2}
}

func (x *LinkMic_LinkMicBattleSetting) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetStartTimeMs() int64 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *LinkMic_LinkMicBattleSetting) GetFinished() int64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetBattleId() int64 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetMatchType() int64 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetPlayMode() int64 {
	if x != nil {
		return x.PlayMode
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetTeamMode() int64 {
	if x != nil {
		return x.TeamMode
	}
	return 0
}

func (x *LinkMic_LinkMicBattleSetting) GetActivityMode() int64 {
	if x != nil {
		return x.ActivityMode
	}
	return 0
}

type Rsp_F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q1 uint64 `protobuf:"varint,1,opt,name=q1,proto3" json:"q1,omitempty"`
	Q3 uint64 `protobuf:"varint,3,opt,name=q3,proto3" json:"q3,omitempty"`
	Q4 string `protobuf:"bytes,4,opt,name=q4,proto3" json:"q4,omitempty"`
	Q5 uint64 `protobuf:"varint,5,opt,name=q5,proto3" json:"q5,omitempty"`
}

func (x *Rsp_F) Reset() {
	*x = Rsp_F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[651]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp_F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp_F) ProtoMessage() {}

func (x *Rsp_F) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[651]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp_F.ProtoReflect.Descriptor instead.
func (*Rsp_F) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{220, 0}
}

func (x *Rsp_F) GetQ1() uint64 {
	if x != nil {
		return x.Q1
	}
	return 0
}

func (x *Rsp_F) GetQ3() uint64 {
	if x != nil {
		return x.Q3
	}
	return 0
}

func (x *Rsp_F) GetQ4() string {
	if x != nil {
		return x.Q4
	}
	return ""
}

func (x *Rsp_F) GetQ5() uint64 {
	if x != nil {
		return x.Q5
	}
	return 0
}

type RoomRankMessage_RoomRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User          *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ScoreStr      string `protobuf:"bytes,2,opt,name=scoreStr,proto3" json:"scoreStr,omitempty"`
	ProfileHidden bool   `protobuf:"varint,3,opt,name=profileHidden,proto3" json:"profileHidden,omitempty"`
}

func (x *RoomRankMessage_RoomRank) Reset() {
	*x = RoomRankMessage_RoomRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[652]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRankMessage_RoomRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRankMessage_RoomRank) ProtoMessage() {}

func (x *RoomRankMessage_RoomRank) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[652]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRankMessage_RoomRank.ProtoReflect.Descriptor instead.
func (*RoomRankMessage_RoomRank) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{229, 0}
}

func (x *RoomRankMessage_RoomRank) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RoomRankMessage_RoomRank) GetScoreStr() string {
	if x != nil {
		return x.ScoreStr
	}
	return ""
}

func (x *RoomRankMessage_RoomRank) GetProfileHidden() bool {
	if x != nil {
		return x.ProfileHidden
	}
	return false
}

// Info 消息
type RanklistHourEntrance_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*RanklistHourEntrance_Detail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"` // 详情列表
}

func (x *RanklistHourEntrance_Info) Reset() {
	*x = RanklistHourEntrance_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[654]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistHourEntrance_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistHourEntrance_Info) ProtoMessage() {}

func (x *RanklistHourEntrance_Info) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[654]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistHourEntrance_Info.ProtoReflect.Descriptor instead.
func (*RanklistHourEntrance_Info) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{232, 0}
}

func (x *RanklistHourEntrance_Info) GetDetails() []*RanklistHourEntrance_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

// Detail 消息
type RanklistHourEntrance_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages         []*RanklistHourEntrance_Page `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`                                      // 页面列表
	RanklistType  int32                        `protobuf:"varint,2,opt,name=ranklist_type,json=ranklistType,proto3" json:"ranklist_type,omitempty"`   // 排行榜类型
	Title         string                       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                      // 排行榜标题
	RanklistExtra string                       `protobuf:"bytes,4,opt,name=ranklist_extra,json=ranklistExtra,proto3" json:"ranklist_extra,omitempty"` // 排行榜附加信息
	EntranceExtra string                       `protobuf:"bytes,5,opt,name=entrance_extra,json=entranceExtra,proto3" json:"entrance_extra,omitempty"` // 入口附加信息
	Schema        string                       `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`                                    // 跳转 schema
	IconUrl       string                       `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`                   // 图标 URL
}

func (x *RanklistHourEntrance_Detail) Reset() {
	*x = RanklistHourEntrance_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[655]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistHourEntrance_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistHourEntrance_Detail) ProtoMessage() {}

func (x *RanklistHourEntrance_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[655]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistHourEntrance_Detail.ProtoReflect.Descriptor instead.
func (*RanklistHourEntrance_Detail) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{232, 1}
}

func (x *RanklistHourEntrance_Detail) GetPages() []*RanklistHourEntrance_Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *RanklistHourEntrance_Detail) GetRanklistType() int32 {
	if x != nil {
		return x.RanklistType
	}
	return 0
}

func (x *RanklistHourEntrance_Detail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RanklistHourEntrance_Detail) GetRanklistExtra() string {
	if x != nil {
		return x.RanklistExtra
	}
	return ""
}

func (x *RanklistHourEntrance_Detail) GetEntranceExtra() string {
	if x != nil {
		return x.EntranceExtra
	}
	return ""
}

func (x *RanklistHourEntrance_Detail) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *RanklistHourEntrance_Detail) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

// Page 消息
type RanklistHourEntrance_Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content         string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                        // 内容
	BackgroundColor string `protobuf:"bytes,2,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"` // 背景颜色
	ShowTimes       int64  `protobuf:"varint,3,opt,name=show_times,json=showTimes,proto3" json:"show_times,omitempty"`                  // 显示时间
	ContentType     int32  `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`            // 内容类型
}

func (x *RanklistHourEntrance_Page) Reset() {
	*x = RanklistHourEntrance_Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[656]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistHourEntrance_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistHourEntrance_Page) ProtoMessage() {}

func (x *RanklistHourEntrance_Page) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[656]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistHourEntrance_Page.ProtoReflect.Descriptor instead.
func (*RanklistHourEntrance_Page) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{232, 2}
}

func (x *RanklistHourEntrance_Page) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RanklistHourEntrance_Page) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *RanklistHourEntrance_Page) GetShowTimes() int64 {
	if x != nil {
		return x.ShowTimes
	}
	return 0
}

func (x *RanklistHourEntrance_Page) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

type LinkMicAudienceKtvMessage_SongUniqueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// song_id 字段，整型字符串（int64String）
	SongId uint64 `protobuf:"varint,1,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	// user_id 字段，整型字符串（int64String）
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// song_type 字段，整型字符串（int64String）
	SongType uint64 `protobuf:"varint,3,opt,name=song_type,json=songType,proto3" json:"song_type,omitempty"`
	// is_public 字段，布尔类型
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) Reset() {
	*x = LinkMicAudienceKtvMessage_SongUniqueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[657]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMicAudienceKtvMessage_SongUniqueInfo) ProtoMessage() {}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[657]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMicAudienceKtvMessage_SongUniqueInfo.ProtoReflect.Descriptor instead.
func (*LinkMicAudienceKtvMessage_SongUniqueInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{242, 0}
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) GetSongId() uint64 {
	if x != nil {
		return x.SongId
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) GetSongType() uint64 {
	if x != nil {
		return x.SongType
	}
	return 0
}

func (x *LinkMicAudienceKtvMessage_SongUniqueInfo) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type KtvSongStruct_AudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url 字段，字符串类型
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// song_patten 字段，整型字符串（int64String）
	SongPatten uint64 `protobuf:"varint,2,opt,name=song_patten,json=songPatten,proto3" json:"song_patten,omitempty"`
	// audio_id 字段，整型字符串（int64String）
	AudioId uint64 `protobuf:"varint,3,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
	// volume_lufs 字段，双精度浮点数
	VolumeLufs float64 `protobuf:"fixed64,4,opt,name=volume_lufs,json=volumeLufs,proto3" json:"volume_lufs,omitempty"`
	// volume_peak 字段，双精度浮点数
	VolumePeak float64 `protobuf:"fixed64,5,opt,name=volume_peak,json=volumePeak,proto3" json:"volume_peak,omitempty"`
	// bpm 字段，双精度浮点数
	Bpm float64 `protobuf:"fixed64,6,opt,name=bpm,proto3" json:"bpm,omitempty"`
	// beats_point_url 字段，字符串类型
	BeatsPointUrl string `protobuf:"bytes,7,opt,name=beats_point_url,json=beatsPointUrl,proto3" json:"beats_point_url,omitempty"`
	// create_time 字段，整型字符串（int64String）
	CreateTime uint64 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// file_hash 字段，字符串类型
	FileHash string `protobuf:"bytes,9,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *KtvSongStruct_AudioInfo) Reset() {
	*x = KtvSongStruct_AudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[659]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KtvSongStruct_AudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KtvSongStruct_AudioInfo) ProtoMessage() {}

func (x *KtvSongStruct_AudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[659]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KtvSongStruct_AudioInfo.ProtoReflect.Descriptor instead.
func (*KtvSongStruct_AudioInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{244, 1}
}

func (x *KtvSongStruct_AudioInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *KtvSongStruct_AudioInfo) GetSongPatten() uint64 {
	if x != nil {
		return x.SongPatten
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetAudioId() uint64 {
	if x != nil {
		return x.AudioId
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetVolumeLufs() float64 {
	if x != nil {
		return x.VolumeLufs
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetVolumePeak() float64 {
	if x != nil {
		return x.VolumePeak
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetBpm() float64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetBeatsPointUrl() string {
	if x != nil {
		return x.BeatsPointUrl
	}
	return ""
}

func (x *KtvSongStruct_AudioInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *KtvSongStruct_AudioInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type KtvSongStruct_OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// top_user 字段，是一个 UserInfo 消息类型
	TopUser *UserInfo `protobuf:"bytes,1,opt,name=top_user,json=topUser,proto3" json:"top_user,omitempty"`
	// score 字段，整型字符串（int64String）
	Score uint64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	// order_count 字段，整型字符串（int64String）
	OrderCount uint64 `protobuf:"varint,3,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	// has_added 字段，布尔类型
	HasAdded bool `protobuf:"varint,4,opt,name=has_added,json=hasAdded,proto3" json:"has_added,omitempty"`
}

func (x *KtvSongStruct_OrderInfo) Reset() {
	*x = KtvSongStruct_OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[660]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KtvSongStruct_OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KtvSongStruct_OrderInfo) ProtoMessage() {}

func (x *KtvSongStruct_OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[660]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KtvSongStruct_OrderInfo.ProtoReflect.Descriptor instead.
func (*KtvSongStruct_OrderInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{244, 2}
}

func (x *KtvSongStruct_OrderInfo) GetTopUser() *UserInfo {
	if x != nil {
		return x.TopUser
	}
	return nil
}

func (x *KtvSongStruct_OrderInfo) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *KtvSongStruct_OrderInfo) GetOrderCount() uint64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *KtvSongStruct_OrderInfo) GetHasAdded() bool {
	if x != nil {
		return x.HasAdded
	}
	return false
}

type KtvSongStruct_ChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ktv_challenge_type 字段，整型（int32）
	KtvChallengeType int32 `protobuf:"varint,1,opt,name=ktv_challenge_type,json=ktvChallengeType,proto3" json:"ktv_challenge_type,omitempty"`
	// is_success 字段，布尔类型（bool）
	IsSuccess bool `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	// score 字段，双精度浮点数（double）
	Score float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *KtvSongStruct_ChallengeInfo) Reset() {
	*x = KtvSongStruct_ChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[661]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KtvSongStruct_ChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KtvSongStruct_ChallengeInfo) ProtoMessage() {}

func (x *KtvSongStruct_ChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[661]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KtvSongStruct_ChallengeInfo.ProtoReflect.Descriptor instead.
func (*KtvSongStruct_ChallengeInfo) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{244, 3}
}

func (x *KtvSongStruct_ChallengeInfo) GetKtvChallengeType() int32 {
	if x != nil {
		return x.KtvChallengeType
	}
	return 0
}

func (x *KtvSongStruct_ChallengeInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *KtvSongStruct_ChallengeInfo) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type NotifyMessage_Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// duration field, an int64 string
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// background field, assuming it's a Background message
	Background *NotifyMessage_Background `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`
	// content_list field, assuming it's a ContentList message
	ContentList *NotifyMessage_ContentList `protobuf:"bytes,3,opt,name=content_list,json=contentList,proto3" json:"content_list,omitempty"`
	// need_gift_frequency field, a boolean
	NeedGiftFrequency bool `protobuf:"varint,6,opt,name=need_gift_frequency,json=needGiftFrequency,proto3" json:"need_gift_frequency,omitempty"`
	// params map field
	Params map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NotifyMessage_Extra) Reset() {
	*x = NotifyMessage_Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[663]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMessage_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMessage_Extra) ProtoMessage() {}

func (x *NotifyMessage_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[663]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMessage_Extra.ProtoReflect.Descriptor instead.
func (*NotifyMessage_Extra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{258, 0}
}

func (x *NotifyMessage_Extra) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *NotifyMessage_Extra) GetBackground() *NotifyMessage_Background {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *NotifyMessage_Extra) GetContentList() *NotifyMessage_ContentList {
	if x != nil {
		return x.ContentList
	}
	return nil
}

func (x *NotifyMessage_Extra) GetNeedGiftFrequency() bool {
	if x != nil {
		return x.NeedGiftFrequency
	}
	return false
}

func (x *NotifyMessage_Extra) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type NotifyMessage_Background struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// width field, an int32
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// height field, an int32
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// url_list field, a repeated string
	UrlList []string `protobuf:"bytes,3,rep,name=url_list,json=urlList,proto3" json:"url_list,omitempty"`
	// uri field, a string
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *NotifyMessage_Background) Reset() {
	*x = NotifyMessage_Background{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[664]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMessage_Background) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMessage_Background) ProtoMessage() {}

func (x *NotifyMessage_Background) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[664]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMessage_Background.ProtoReflect.Descriptor instead.
func (*NotifyMessage_Background) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{258, 1}
}

func (x *NotifyMessage_Background) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *NotifyMessage_Background) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NotifyMessage_Background) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *NotifyMessage_Background) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type NotifyMessage_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 假设Content有id和text两个字段
	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	NeedHighLight bool   `protobuf:"varint,2,opt,name=need_high_light,json=needHighLight,proto3" json:"need_high_light,omitempty"`
}

func (x *NotifyMessage_Content) Reset() {
	*x = NotifyMessage_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[665]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMessage_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMessage_Content) ProtoMessage() {}

func (x *NotifyMessage_Content) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[665]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMessage_Content.ProtoReflect.Descriptor instead.
func (*NotifyMessage_Content) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{258, 2}
}

func (x *NotifyMessage_Content) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NotifyMessage_Content) GetNeedHighLight() bool {
	if x != nil {
		return x.NeedHighLight
	}
	return false
}

type NotifyMessage_ContentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents       []*NotifyMessage_Content `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
	HighLightColor string                   `protobuf:"bytes,2,opt,name=high_light_color,json=highLightColor,proto3" json:"high_light_color,omitempty"`
}

func (x *NotifyMessage_ContentList) Reset() {
	*x = NotifyMessage_ContentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[666]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMessage_ContentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMessage_ContentList) ProtoMessage() {}

func (x *NotifyMessage_ContentList) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[666]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMessage_ContentList.ProtoReflect.Descriptor instead.
func (*NotifyMessage_ContentList) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{258, 3}
}

func (x *NotifyMessage_ContentList) GetContents() []*NotifyMessage_Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *NotifyMessage_ContentList) GetHighLightColor() string {
	if x != nil {
		return x.HighLightColor
	}
	return ""
}

type LuckyBoxMessage_ImgText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"` // 使用webcast.data包中的Image消息类型
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LuckyBoxMessage_ImgText) Reset() {
	*x = LuckyBoxMessage_ImgText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[668]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage_ImgText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage_ImgText) ProtoMessage() {}

func (x *LuckyBoxMessage_ImgText) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[668]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage_ImgText.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage_ImgText) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259, 0}
}

func (x *LuckyBoxMessage_ImgText) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *LuckyBoxMessage_ImgText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type LuckyBoxMessage_BoxMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleDesc         string `protobuf:"bytes,1,opt,name=title_desc,json=titleDesc,proto3" json:"title_desc,omitempty"`                           // 标题描述
	ContentCountDesc  string `protobuf:"bytes,2,opt,name=content_count_desc,json=contentCountDesc,proto3" json:"content_count_desc,omitempty"`    // 内容数量描述
	ContentAmountDesc string `protobuf:"bytes,3,opt,name=content_amount_desc,json=contentAmountDesc,proto3" json:"content_amount_desc,omitempty"` // 内容金额描述
	AnimationDesc     string `protobuf:"bytes,4,opt,name=animation_desc,json=animationDesc,proto3" json:"animation_desc,omitempty"`               // 动画描述
	BeforeUnpackDesc  string `protobuf:"bytes,5,opt,name=before_unpack_desc,json=beforeUnpackDesc,proto3" json:"before_unpack_desc,omitempty"`    // 解包前的描述
	SuccessUnpackDesc string `protobuf:"bytes,6,opt,name=success_unpack_desc,json=successUnpackDesc,proto3" json:"success_unpack_desc,omitempty"` // 成功解包的描述
	FailUnpackDesc    string `protobuf:"bytes,7,opt,name=fail_unpack_desc,json=failUnpackDesc,proto3" json:"fail_unpack_desc,omitempty"`          // 解包失败的描述
	AdImage           *Image `protobuf:"bytes,8,opt,name=ad_image,json=adImage,proto3" json:"ad_image,omitempty"`                                 // 广告图像
	ImDesc            string `protobuf:"bytes,9,opt,name=im_desc,json=imDesc,proto3" json:"im_desc,omitempty"`                                    // IM描述
}

func (x *LuckyBoxMessage_BoxMeta) Reset() {
	*x = LuckyBoxMessage_BoxMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[669]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage_BoxMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage_BoxMeta) ProtoMessage() {}

func (x *LuckyBoxMessage_BoxMeta) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[669]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage_BoxMeta.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage_BoxMeta) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259, 1}
}

func (x *LuckyBoxMessage_BoxMeta) GetTitleDesc() string {
	if x != nil {
		return x.TitleDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetContentCountDesc() string {
	if x != nil {
		return x.ContentCountDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetContentAmountDesc() string {
	if x != nil {
		return x.ContentAmountDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetAnimationDesc() string {
	if x != nil {
		return x.AnimationDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetBeforeUnpackDesc() string {
	if x != nil {
		return x.BeforeUnpackDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetSuccessUnpackDesc() string {
	if x != nil {
		return x.SuccessUnpackDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetFailUnpackDesc() string {
	if x != nil {
		return x.FailUnpackDesc
	}
	return ""
}

func (x *LuckyBoxMessage_BoxMeta) GetAdImage() *Image {
	if x != nil {
		return x.AdImage
	}
	return nil
}

func (x *LuckyBoxMessage_BoxMeta) GetImDesc() string {
	if x != nil {
		return x.ImDesc
	}
	return ""
}

type LuckyBoxMessage_Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRound int32             `protobuf:"varint,3,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`                                                                            // 当前轮次
	Pct          int32             `protobuf:"varint,4,opt,name=pct,proto3" json:"pct,omitempty"`                                                                                                                  // 百分比
	RoundTarget  int64             `protobuf:"varint,5,opt,name=round_target,json=roundTarget,proto3" json:"round_target,omitempty"`                                                                               // 轮次目标
	AllDesc      map[string]string `protobuf:"bytes,1,rep,name=all_desc,json=allDesc,proto3" json:"all_desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`    // 所有描述的键值对映射
	AllImage     map[string]*Image `protobuf:"bytes,2,rep,name=all_image,json=allImage,proto3" json:"all_image,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 所有图像的键值对映射
}

func (x *LuckyBoxMessage_Extra) Reset() {
	*x = LuckyBoxMessage_Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[670]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage_Extra) ProtoMessage() {}

func (x *LuckyBoxMessage_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[670]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage_Extra.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage_Extra) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259, 2}
}

func (x *LuckyBoxMessage_Extra) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *LuckyBoxMessage_Extra) GetPct() int32 {
	if x != nil {
		return x.Pct
	}
	return 0
}

func (x *LuckyBoxMessage_Extra) GetRoundTarget() int64 {
	if x != nil {
		return x.RoundTarget
	}
	return 0
}

func (x *LuckyBoxMessage_Extra) GetAllDesc() map[string]string {
	if x != nil {
		return x.AllDesc
	}
	return nil
}

func (x *LuckyBoxMessage_Extra) GetAllImage() map[string]*Image {
	if x != nil {
		return x.AllImage
	}
	return nil
}

// BottomCommentMsg消息类型，包含底部评论消息的内容
type LuckyBoxMessage_BottomCommentMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       *Text  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                            // 文本内容
	Background *Image `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`                // 背景图像
	LeftIcon   *Image `protobuf:"bytes,3,opt,name=left_icon,json=leftIcon,proto3" json:"left_icon,omitempty"`    // 左侧图标
	RightIcon  *Image `protobuf:"bytes,4,opt,name=right_icon,json=rightIcon,proto3" json:"right_icon,omitempty"` // 右侧图标
}

func (x *LuckyBoxMessage_BottomCommentMsg) Reset() {
	*x = LuckyBoxMessage_BottomCommentMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[671]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage_BottomCommentMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage_BottomCommentMsg) ProtoMessage() {}

func (x *LuckyBoxMessage_BottomCommentMsg) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[671]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage_BottomCommentMsg.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage_BottomCommentMsg) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259, 3}
}

func (x *LuckyBoxMessage_BottomCommentMsg) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *LuckyBoxMessage_BottomCommentMsg) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *LuckyBoxMessage_BottomCommentMsg) GetLeftIcon() *Image {
	if x != nil {
		return x.LeftIcon
	}
	return nil
}

func (x *LuckyBoxMessage_BottomCommentMsg) GetRightIcon() *Image {
	if x != nil {
		return x.RightIcon
	}
	return nil
}

type LuckyBoxMessage_Dress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DressId          string `protobuf:"bytes,1,opt,name=dress_id,json=dressId,proto3" json:"dress_id,omitempty"`                              // 装扮ID
	DressOfflineTime string `protobuf:"bytes,2,opt,name=dress_offline_time,json=dressOfflineTime,proto3" json:"dress_offline_time,omitempty"` // 装扮下线时间（int64字符串表示）
	JumpText         string `protobuf:"bytes,3,opt,name=jump_text,json=jumpText,proto3" json:"jump_text,omitempty"`                           // 跳转文本
	// 嵌套的映射类型，键为int64，值为字符串
	JumpSchemaToBox   map[int64]string `protobuf:"bytes,4,rep,name=jump_schema_to_box,json=jumpSchemaToBox,proto3" json:"jump_schema_to_box,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JumpSchemaToDress map[int64]string `protobuf:"bytes,5,rep,name=jump_schema_to_dress,json=jumpSchemaToDress,proto3" json:"jump_schema_to_dress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LuckyBoxMessage_Dress) Reset() {
	*x = LuckyBoxMessage_Dress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[672]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBoxMessage_Dress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBoxMessage_Dress) ProtoMessage() {}

func (x *LuckyBoxMessage_Dress) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[672]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBoxMessage_Dress.ProtoReflect.Descriptor instead.
func (*LuckyBoxMessage_Dress) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{259, 4}
}

func (x *LuckyBoxMessage_Dress) GetDressId() string {
	if x != nil {
		return x.DressId
	}
	return ""
}

func (x *LuckyBoxMessage_Dress) GetDressOfflineTime() string {
	if x != nil {
		return x.DressOfflineTime
	}
	return ""
}

func (x *LuckyBoxMessage_Dress) GetJumpText() string {
	if x != nil {
		return x.JumpText
	}
	return ""
}

func (x *LuckyBoxMessage_Dress) GetJumpSchemaToBox() map[int64]string {
	if x != nil {
		return x.JumpSchemaToBox
	}
	return nil
}

func (x *LuckyBoxMessage_Dress) GetJumpSchemaToDress() map[int64]string {
	if x != nil {
		return x.JumpSchemaToDress
	}
	return nil
}

type ScreenChatMessage_OfficialCommentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Official bool `protobuf:"varint,1,opt,name=official,proto3" json:"official,omitempty"` // 是否官方评论
}

func (x *ScreenChatMessage_OfficialCommentConfig) Reset() {
	*x = ScreenChatMessage_OfficialCommentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[677]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenChatMessage_OfficialCommentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenChatMessage_OfficialCommentConfig) ProtoMessage() {}

func (x *ScreenChatMessage_OfficialCommentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[677]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenChatMessage_OfficialCommentConfig.ProtoReflect.Descriptor instead.
func (*ScreenChatMessage_OfficialCommentConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{261, 0}
}

func (x *ScreenChatMessage_OfficialCommentConfig) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

// Background嵌套消息类型
type NotifyEffectMessage_Background struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundImage  *Image `protobuf:"bytes,1,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	BackgroundColor  string `protobuf:"bytes,10,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	BackgroundEffect *Image `protobuf:"bytes,11,opt,name=background_effect,json=backgroundEffect,proto3" json:"background_effect,omitempty"`
}

func (x *NotifyEffectMessage_Background) Reset() {
	*x = NotifyEffectMessage_Background{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[679]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEffectMessage_Background) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEffectMessage_Background) ProtoMessage() {}

func (x *NotifyEffectMessage_Background) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[679]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEffectMessage_Background.ProtoReflect.Descriptor instead.
func (*NotifyEffectMessage_Background) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{265, 1}
}

func (x *NotifyEffectMessage_Background) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *NotifyEffectMessage_Background) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *NotifyEffectMessage_Background) GetBackgroundEffect() *Image {
	if x != nil {
		return x.BackgroundEffect
	}
	return nil
}

// DynamicConfig嵌套消息类型
type NotifyEffectMessage_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StayTime          int32 `protobuf:"varint,1,opt,name=stay_time,json=stayTime,proto3" json:"stay_time,omitempty"`
	MaxStayTime       int32 `protobuf:"varint,2,opt,name=max_stay_time,json=maxStayTime,proto3" json:"max_stay_time,omitempty"`
	DisplayEffectType int32 `protobuf:"varint,3,opt,name=display_effect_type,json=displayEffectType,proto3" json:"display_effect_type,omitempty"`
}

func (x *NotifyEffectMessage_DynamicConfig) Reset() {
	*x = NotifyEffectMessage_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[680]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEffectMessage_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEffectMessage_DynamicConfig) ProtoMessage() {}

func (x *NotifyEffectMessage_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[680]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEffectMessage_DynamicConfig.ProtoReflect.Descriptor instead.
func (*NotifyEffectMessage_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{265, 2}
}

func (x *NotifyEffectMessage_DynamicConfig) GetStayTime() int32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *NotifyEffectMessage_DynamicConfig) GetMaxStayTime() int32 {
	if x != nil {
		return x.MaxStayTime
	}
	return 0
}

func (x *NotifyEffectMessage_DynamicConfig) GetDisplayEffectType() int32 {
	if x != nil {
		return x.DisplayEffectType
	}
	return 0
}

type NotifyEffectMessage_BindingGiftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    *GiftMessage `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`       // 嵌套类型字段
	Common *Common      `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"` // 嵌套类型字段
}

func (x *NotifyEffectMessage_BindingGiftMessage) Reset() {
	*x = NotifyEffectMessage_BindingGiftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[681]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEffectMessage_BindingGiftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEffectMessage_BindingGiftMessage) ProtoMessage() {}

func (x *NotifyEffectMessage_BindingGiftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[681]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEffectMessage_BindingGiftMessage.ProtoReflect.Descriptor instead.
func (*NotifyEffectMessage_BindingGiftMessage) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{265, 3}
}

func (x *NotifyEffectMessage_BindingGiftMessage) GetMsg() *GiftMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *NotifyEffectMessage_BindingGiftMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

// SceneConfig嵌套消息类型
type NotifyEffectMessage_SceneConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene         string `protobuf:"bytes,1,opt,name=scene,proto3" json:"scene,omitempty"`
	Priority      string `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"` // 假设优先级为string类型，如int64字符串表示
	NeedAggregate bool   `protobuf:"varint,3,opt,name=need_aggregate,json=needAggregate,proto3" json:"need_aggregate,omitempty"`
	AggregateNum  string `protobuf:"bytes,4,opt,name=aggregate_num,json=aggregateNum,proto3" json:"aggregate_num,omitempty"`    // 假设聚合数为string类型，如int64字符串表示
	AggregateText *Text  `protobuf:"bytes,5,opt,name=aggregate_text,json=aggregateText,proto3" json:"aggregate_text,omitempty"` // 假设Text也在相应的.proto文件中定义
	SubScene      string `protobuf:"bytes,6,opt,name=sub_scene,json=subScene,proto3" json:"sub_scene,omitempty"`
	MaxWaitTime   string `protobuf:"bytes,7,opt,name=max_wait_time,json=maxWaitTime,proto3" json:"max_wait_time,omitempty"` // 假设最大等待时间为string类型，如int64字符串表示
}

func (x *NotifyEffectMessage_SceneConfig) Reset() {
	*x = NotifyEffectMessage_SceneConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[682]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEffectMessage_SceneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEffectMessage_SceneConfig) ProtoMessage() {}

func (x *NotifyEffectMessage_SceneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[682]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEffectMessage_SceneConfig.ProtoReflect.Descriptor instead.
func (*NotifyEffectMessage_SceneConfig) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{265, 4}
}

func (x *NotifyEffectMessage_SceneConfig) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *NotifyEffectMessage_SceneConfig) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *NotifyEffectMessage_SceneConfig) GetNeedAggregate() bool {
	if x != nil {
		return x.NeedAggregate
	}
	return false
}

func (x *NotifyEffectMessage_SceneConfig) GetAggregateNum() string {
	if x != nil {
		return x.AggregateNum
	}
	return ""
}

func (x *NotifyEffectMessage_SceneConfig) GetAggregateText() *Text {
	if x != nil {
		return x.AggregateText
	}
	return nil
}

func (x *NotifyEffectMessage_SceneConfig) GetSubScene() string {
	if x != nil {
		return x.SubScene
	}
	return ""
}

func (x *NotifyEffectMessage_SceneConfig) GetMaxWaitTime() string {
	if x != nil {
		return x.MaxWaitTime
	}
	return ""
}

type TempStateAreaReachMessage_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon        string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Extra       string `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TempStateAreaReachMessage_Resource) Reset() {
	*x = TempStateAreaReachMessage_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[683]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempStateAreaReachMessage_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempStateAreaReachMessage_Resource) ProtoMessage() {}

func (x *TempStateAreaReachMessage_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[683]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempStateAreaReachMessage_Resource.ProtoReflect.Descriptor instead.
func (*TempStateAreaReachMessage_Resource) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{273, 0}
}

func (x *TempStateAreaReachMessage_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TempStateAreaReachMessage_Resource) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TempStateAreaReachMessage_Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TempStateAreaReachMessage_Resource) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type GrowthTaskMessage_CurrentContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                                                                                                                      // 关联User消息类型
	DeltaInfo map[int64]int64 `protobuf:"bytes,2,rep,name=delta_info,json=deltaInfo,proto3" json:"delta_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 映射类型字段，存储贡献变化
}

func (x *GrowthTaskMessage_CurrentContribution) Reset() {
	*x = GrowthTaskMessage_CurrentContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_douyin_proto_msgTypes[684]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthTaskMessage_CurrentContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthTaskMessage_CurrentContribution) ProtoMessage() {}

func (x *GrowthTaskMessage_CurrentContribution) ProtoReflect() protoreflect.Message {
	mi := &file_douyin_proto_msgTypes[684]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthTaskMessage_CurrentContribution.ProtoReflect.Descriptor instead.
func (*GrowthTaskMessage_CurrentContribution) Descriptor() ([]byte, []int) {
	return file_douyin_proto_rawDescGZIP(), []int{280, 0}
}

func (x *GrowthTaskMessage_CurrentContribution) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GrowthTaskMessage_CurrentContribution) GetDeltaInfo() map[int64]int64 {
	if x != nil {
		return x.DeltaInfo
	}
	return nil
}

var File_douyin_proto protoreflect.FileDescriptor

var file_douyin_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4,
	0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x63, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x65, 0x65, 0x64, 0x57, 0x72, 0x64, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x57, 0x72, 0x64, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x64, 0x73, 0x53, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x72, 0x64, 0x73, 0x53, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x48,
	0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x12, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xa7, 0x06, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x75, 0x6c,
	0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x56, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x67, 0x72, 0x65, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x46, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0a, 0x72, 0x74, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x72, 0x74, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x9f, 0x04, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x70, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x70,
	0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x12,
	0x30, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x76, 0x46, 0x6f, 0x72, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x76, 0x46, 0x6f, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x70, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x70, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x65, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1d, 0x52, 0x6f, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xff, 0x0c, 0x0a, 0x0b, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x67, 0x69, 0x66, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x67, 0x69, 0x66, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x47, 0x69, 0x66, 0x74, 0x49, 0x4d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x67, 0x69, 0x66, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x69, 0x66,
	0x74, 0x54, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x72, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4d, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x69, 0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x47,
	0x69, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x47, 0x69, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x69, 0x66, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xcb, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x69,
	0x66, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x46, 0x0a, 0x15, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x69, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x22,
	0x86, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x48, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x72, 0x65, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67,
	0x69, 0x66, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4b, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x58, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x5e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x69, 0x78, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69,
	0x78, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4d, 0x69, 0x78, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x4b, 0x0a, 0x0e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x15, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x79, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x44, 0x69, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x22, 0x56, 0x0a, 0x12,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x78, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x09, 0x6d, 0x69, 0x78, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x78, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x82, 0x07, 0x0a, 0x0c, 0x47, 0x69, 0x66, 0x74, 0x54, 0x72, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x67, 0x12, 0x2a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x12, 0x2c, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x79, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x6d,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6d, 0x67, 0x56, 0x32, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x79, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6d, 0x67, 0x56, 0x32, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x61, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x72, 0x61, 0x79, 0x50, 0x72, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x50, 0x72, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x39, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65, 0x57, 0x65, 0x62, 0x70, 0x49, 0x6d,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x72, 0x61, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x40, 0x0a, 0x12,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92,
	0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x79, 0x50, 0x72, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x79, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0xd8, 0x04, 0x0a, 0x0a, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6f, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x6f, 0x6f, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x46,
	0x61, 0x6e, 0x73, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x4d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c,
	0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x6c, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x22, 0xb7, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x44, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x44, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x44,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x44,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb2, 0x16, 0x0a, 0x0d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x74, 0x54,
	0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x12,
	0x4b, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x35, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x11, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3f,
	0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58,
	0x0a, 0x18, 0x70, 0x69, 0x63, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x69, 0x63, 0x6f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x15, 0x70, 0x69, 0x63, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x42,
	0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x1c, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd1, 0x08, 0x0a, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x23, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x10, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x32, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x77, 0x65, 0x65,
	0x70, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68,
	0x61, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x29, 0x0a, 0x11, 0x6d, 0x70, 0x34, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x70, 0x34, 0x41,
	0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x69, 0x65, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x10,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x85, 0x03, 0x0a, 0x10, 0x50, 0x69, 0x63,
	0x6f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6f, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc2, 0x06, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x39, 0x0a,
	0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x63, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6e, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x6d, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x69, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x4b, 0x0a, 0x1d, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0a, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x55, 0x69, 0x64, 0x22, 0x85, 0x07, 0x0a, 0x0c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x14, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x63, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x0d, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x53, 0x77, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x18, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61,
	0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x70, 0x34, 0x41, 0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x70, 0x34, 0x41, 0x6e, 0x69, 0x6d, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x70,
	0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x4b, 0x0a, 0x10, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x67, 0x69, 0x66, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52,
	0x09, 0x67, 0x69, 0x66, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x72, 0x65, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x72, 0x65, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x0e, 0x54,
	0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a,
	0x13, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x26,
	0x0a, 0x0e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x22, 0x46, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x99,
	0x02, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x18, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x0a, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x72, 0x22, 0x9f,
	0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x10, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x43, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6f, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x50, 0x69, 0x63, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x70, 0x69, 0x63, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x84, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x24, 0x0a, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x54, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x10,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x4e, 0x0a, 0x12, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x67, 0x69, 0x66,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x72, 0x65, 0x65, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x07,
	0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x52, 0x07, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x07, 0x41, 0x67, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x69, 0x66, 0x66, 0x53, 0x65, 0x69, 0x32, 0x61, 0x62, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x66, 0x66, 0x53, 0x65, 0x69,
	0x32, 0x61, 0x62, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x22, 0xd8, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x73, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x12, 0x19, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x32, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74,
	0x5f, 0x73, 0x65, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x53, 0x65, 0x69,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x69,
	0x32, 0x61, 0x62, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x64, 0x69, 0x66, 0x66, 0x53, 0x65, 0x69, 0x32, 0x61, 0x62, 0x73, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x65, 0x0a,
	0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6e, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xbe, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x6d, 0x70,
	0x50, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x74, 0x6d, 0x70, 0x5f,
	0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x66,
	0x6c, 0x76, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x2e, 0x46, 0x6c,
	0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66,
	0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x2d,
	0x0a, 0x13, 0x68, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6c, 0x73,
	0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x74, 0x6d,
	0x70, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4f,
	0x0a, 0x13, 0x66, 0x6c, 0x76, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x2e, 0x46, 0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55,
	0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66,
	0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x12, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x6c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x64, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x10,
	0x68, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6c, 0x2e, 0x48, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x75, 0x73,
	0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x75, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x46, 0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x46,
	0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x48, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x50,
	0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x08, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x32, 0x36, 0x35, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x32, 0x36,
	0x35, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x6f, 0x70, 0x53, 0x65, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x77, 0x5f, 0x72, 0x6f,
	0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x77, 0x52, 0x6f, 0x69, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x76, 0x63, 0x31, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x76, 0x63, 0x31, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x69, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x69, 0x6e, 0x67, 0x1a, 0x33, 0x0a, 0x10, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x40, 0x0a, 0x0c, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xec, 0x16, 0x0a, 0x0f, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x75,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x1a, 0xcf, 0x10, 0x0a, 0x08, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x14, 0x68, 0x6c, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x48, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x68, 0x6c, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x41, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44,
	0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x48, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x48, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x03, 0x46, 0x6c, 0x76,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x46, 0x6c, 0x76, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x45, 0x0a, 0x17, 0x48, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcc, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x70, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x1a, 0xfe, 0x01, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x0a,
	0x76, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3e, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x68, 0x1a, 0x6a, 0x0a, 0x18, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x68, 0x1a, 0xb8, 0x05, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c,
	0x69, 0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x0b,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69,
	0x70, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6c,
	0x69, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x1a, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x57, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x4d, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0x82, 0x05, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x6f, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbd, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x42,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x70, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x22, 0xa4, 0x05, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x6c, 0x76, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x2e, 0x46, 0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x66, 0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a,
	0x03, 0x48, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x48, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x03, 0x46, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x44, 0x4b, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x46, 0x6c, 0x76, 0x12, 0x51, 0x0a, 0x10, 0x68, 0x6c, 0x73,
	0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x48, 0x6c, 0x73, 0x50, 0x75,
	0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68,
	0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x6c, 0x76, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x48, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x44, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x0a, 0x53,
	0x61, 0x66, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61,
	0x66, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x6b, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x6b, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x0a, 0x76, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8e, 0x06, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x12, 0x4c, 0x0a, 0x18, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40,
	0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x78, 0x69, 0x67, 0x75, 0x61, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x78, 0x69, 0x67, 0x75, 0x61, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x48, 0x0a,
	0x1b, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x19, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x22, 0xad, 0x36, 0x0a, 0x0e, 0x52, 0x6f, 0x6f,
	0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x69, 0x66,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x75, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x69, 0x67, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x69, 0x67, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x4f, 0x49, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x50, 0x4f, 0x49, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x4d, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4d, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x69, 0x66, 0x74, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4d, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4b,
	0x74, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x4b, 0x74, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x53, 0x65, 0x65, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x79, 0x54, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x6e, 0x6c,
	0x79, 0x54, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x53, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x53, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x53, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x56, 0x53, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x55, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x55, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x12, 0x3c, 0x0a, 0x19, 0x55, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x55, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x61, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6d, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x65, 0x72, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x43, 0x68, 0x61, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x6d, 0x69, 0x63, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x50, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x6f, 0x72,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x6f, 0x72,
	0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4c,
	0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4c,
	0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x63, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75,
	0x62, 0x18, 0x58, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x63, 0x6f, 0x6d, 0x46, 0x61, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x1e, 0x4c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3e, 0x0a,
	0x1a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x6f, 0x6f, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x4f,
	0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x52, 0x09, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x45, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x45, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x47, 0x69, 0x66, 0x74, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x72,
	0x61, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x48, 0x6f, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x72, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x74, 0x6e, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x74,
	0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x6c, 0x62,
	0x61, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x6d, 0x48, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x49, 0x6d, 0x48, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x18, 0x7c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x18, 0x7e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x79, 0x4c,
	0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x49, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x49, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x54, 0x65, 0x78, 0x74, 0x47, 0x69, 0x66, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x54, 0x65, 0x78, 0x74, 0x47, 0x69, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x46, 0x61, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x42, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x46,
	0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x27, 0x0a, 0x0e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c,
	0x75, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x46, 0x61, 0x6e, 0x73,
	0x43, 0x6c, 0x75, 0x62, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x25,
	0x0a, 0x0d, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x23, 0x0a, 0x0c,
	0x56, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x72, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x56, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x72, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x56, 0x73,
	0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x1f,
	0x0a, 0x0a, 0x56, 0x73, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x56, 0x73, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12,
	0x39, 0x0a, 0x17, 0x56, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x56, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x09, 0x56, 0x73,
	0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x56, 0x73, 0x44, 0x6f, 0x75, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x51, 0x75, 0x69,
	0x7a, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x51, 0x75, 0x69, 0x7a, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x11, 0x55, 0x67, 0x63, 0x56, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x55, 0x67,
	0x63, 0x56, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x15, 0x55, 0x67, 0x63, 0x56, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x55, 0x67, 0x63, 0x56, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x33, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd2, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x28, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x66,
	0x74, 0x1a, 0xb4, 0x07, 0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x43, 0x68,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x47, 0x69,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x47, 0x69, 0x66, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x12, 0x3e, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40,
	0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x52, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x0e, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x1a, 0xd7,
	0x02, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x17, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x58, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x61, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x55,
	0x72, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x6e, 0x22, 0xc5, 0x05, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x74, 0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x0c, 0x75, 0x6e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x74, 0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x62, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61,
	0x62, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x62, 0x55, 0x6e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1a,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0e, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x67,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0x6e, 0x0a, 0x0d,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x74, 0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9f, 0x01, 0x0a,
	0x10, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x73, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8b,
	0x0f, 0x0a, 0x18, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x60, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x6d, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x74, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x12, 0x60, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1b, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e,
	0x0a, 0x0d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d,
	0x0a, 0x16, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a,
	0x1a, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0x50, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0x72, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x67, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x47, 0x61, 0x70, 0x1a, 0xbe, 0x03, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x57,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x99, 0x01, 0x0a, 0x15,
	0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x06,
	0x0a, 0x13, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0a, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x88, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x41, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xee, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x61,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x61, 0x72, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x52, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x4b,
	0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x1a, 0x36, 0x0a, 0x0c, 0x43,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x61, 0x72, 0x74, 0x1a, 0x38, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x74, 0x1a, 0xa0, 0x01,
	0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x63,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x22, 0x49, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x0a,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x46, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x57, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x22, 0xf5, 0x5a, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x73, 0x61,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x73, 0x61,
	0x69, 0x63, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x73, 0x61, 0x69, 0x63, 0x54, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d,
	0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x4e,
	0x75, 0x6d, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x5f, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x54, 0x6f, 0x70, 0x46, 0x61, 0x6e, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x46, 0x61, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x6e, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x63, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x66, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x64,
	0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x0f, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x6d, 0x69, 0x63, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x63, 0x64, 0x6e, 0x5f, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x63, 0x64, 0x6e, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x18, 0x49, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x2d, 0x0a,
	0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x29, 0x0a, 0x0c, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x64, 0x65, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x70, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x12, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66,
	0x61, 0x6e, 0x73, 0x63, 0x6c, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x14, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x02, 0x74, 0x76, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x56,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x68, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x2c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f,
	0x78, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6b, 0x74, 0x76, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x4b, 0x74, 0x76, 0x12, 0x2e, 0x0a,
	0x13, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68,
	0x44, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a,
	0x13, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x63, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x63, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63,
	0x61, 0x72, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x61, 0x72, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x65,
	0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8e, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x0a, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x09, 0x71, 0x75, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x39, 0x0a, 0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x42, 0x4d, 0x61, 0x70, 0x18,
	0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x41, 0x42, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x42, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x93, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x69,
	0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x47, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x42, 0x47, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x47, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x15, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x12, 0x63, 0x69, 0x74, 0x79, 0x54,
	0x6f, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x13,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x63, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x4d, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x9f, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x66, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x14, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x71, 0x75, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x71, 0x75, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x73,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x65, 0x72, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x12, 0x37, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x73, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0xa9, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x76, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x61, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0xac, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x61, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x07, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xb2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x40, 0x0a, 0x12, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x0d,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xb5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33,
	0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x52, 0x0f, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x3a,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x77, 0x65,
	0x6c, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x57, 0x65, 0x6c, 0x66,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12,
	0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0f, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xc2, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45,
	0x63, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x63, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x49, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x70, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x50, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x75, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x65, 0x61, 0x75,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x75, 0x74, 0x69,
	0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xce, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x76, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x1d, 0x74, 0x6f, 0x75,
	0x74, 0x69, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a,
	0x1d, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x56, 0x0a, 0x1c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x18, 0x75, 0x70, 0x70, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x12, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd5, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x0d, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x6f, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0xd8, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xd9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xda, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xdf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x13, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x11, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d,
	0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe3, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x17,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x76, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x1c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xe9, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xea, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x68, 0x6b, 0x74, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6b, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42,
	0x61, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0xad, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x72, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6f, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x69,
	0x63, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb3, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x11, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x15, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x56, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb7, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x19, 0x69, 0x6f, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49,
	0x4f, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x16, 0x69, 0x6f, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x89, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x1e, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x8a, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x66, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x8b,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x75, 0x73, 0x73, 0x18, 0x8c, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x47, 0x61, 0x75, 0x73, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x41, 0x42, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x03, 0x0a, 0x0d, 0x45, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x61, 0x73, 0x5f, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb0,
	0x07, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x62,
	0x69, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x62, 0x69, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x69,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x74,
	0x76, 0x5f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6b, 0x74, 0x76, 0x4c, 0x79, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x74, 0x76, 0x5f,
	0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6b, 0x74, 0x76, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x65, 0x6e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x65, 0x6e, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6d,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x75, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3f, 0x0a,
	0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x51, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x75, 0x62, 0x54, 0x61, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x47, 0x0a, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x7e, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x22, 0x3b, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x05, 0x0a, 0x11, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x69,
	0x63, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62,
	0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0a, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x09,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x3d, 0x0a, 0x05, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03, 0x0a, 0x13, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x47, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x65, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x2e, 0x56, 0x73, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf2, 0x01, 0x0a, 0x12, 0x56, 0x73, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x2e, 0x56, 0x73, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x13,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75,
	0x72, 0x69, 0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x72, 0x69, 0x55, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x75, 0x72, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x57, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9a, 0x03, 0x0a, 0x0c,
	0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56,
	0x53, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53,
	0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x70, 0x1a,
	0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb6, 0x06, 0x0a, 0x0c, 0x56, 0x53, 0x50,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x70, 0x5f,
	0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x4c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x70, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1e, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x1b, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4d,
	0x6f, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63,
	0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x16, 0x6c, 0x61,
	0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x14, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x1e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x1b, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x19, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53,
	0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x16, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x6c, 0x0a, 0x14, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x22,
	0x92, 0x09, 0x0a, 0x0c, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x56,
	0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x63, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x47, 0x0a, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x39, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x5b, 0x0a, 0x0e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x4b, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0b, 0x56, 0x53, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x56, 0x53, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x56,
	0x53, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0x51, 0x0a,
	0x0f, 0x56, 0x53, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x56, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x4b, 0x0a,
	0x17, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x56, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x14, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x05, 0x56, 0x53, 0x42, 0x61, 0x72, 0x12, 0x33, 0x0a,
	0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x53, 0x42, 0x61, 0x72, 0x2e, 0x56, 0x53, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x72, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x53, 0x42, 0x61, 0x72, 0x2e, 0x56, 0x53, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x1a,
	0x52, 0x0a, 0x09, 0x56, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x56, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x56, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0x82, 0x01,
	0x0a, 0x0a, 0x56, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x99, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x6c, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x69,
	0x70, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x4f, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1,
	0x1a, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61,
	0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x52, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x12, 0x4f, 0x0a, 0x19,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x16, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x62, 0x0a, 0x1b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x18, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc7, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x52, 0x04, 0x74, 0x61,
	0x62, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x72, 0x0a, 0x08, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a,
	0xab, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x1a, 0x3a, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xba, 0x0c,
	0x0a, 0x10, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x07, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x52, 0x07, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6a, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6a, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c,
	0x65, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x46, 0x0a, 0x0b,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x1a, 0x85, 0x01, 0x0a, 0x07, 0x41,
	0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x5f, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6f,
	0x75, 0x6c, 0x73, 0x1a, 0x7c, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x1a, 0xaa, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0xff, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6d, 0x67, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x63, 0x6f,
	0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x61, 0x6e, 0x5f, 0x78, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x58, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x72, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd5, 0x1a, 0x0a, 0x10, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x0b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x52,
	0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x35,
	0x12, 0x29, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39,
	0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x61, 0x77,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x76, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x76, 0x52, 0x61, 0x77, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x53, 0x47, 0x69, 0x66,
	0x74, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x53, 0x50, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x12, 0x3c,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x36, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x56, 0x32, 0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x56, 0x53, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x6d, 0x6f, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x52, 0x03, 0x6d, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x76,
	0x73, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x53, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x0b, 0x76, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x31, 0x0a, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x76, 0x73, 0x5f,
	0x62, 0x61, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x53, 0x42, 0x61,
	0x72, 0x52, 0x05, 0x76, 0x73, 0x42, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x53, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x53, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x65, 0x72, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65,
	0x72, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x3c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x54, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x62, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62,
	0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x12, 0x32, 0x0a, 0x11, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x42, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x76, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x56, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x72, 0x61, 0x77, 0x65,
	0x72, 0x52, 0x0e, 0x76, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x72, 0x61, 0x77, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x50,
	0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3a, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x0e, 0x56, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x06, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x52, 0x06, 0x64,
	0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x33, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xc9, 0x3a, 0x0a, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x54, 0x61, 0x62, 0x49, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0xbc, 0x36, 0x0a, 0x10, 0x54, 0x6f,
	0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x61, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x52, 0x07, 0x61, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f,
	0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6a, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6a, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2e,
	0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x65, 0x66,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x1a, 0xb6,
	0x23, 0x0a, 0x07, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x16, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x17, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x69, 0x32, 0x61, 0x62, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x66, 0x66, 0x53,
	0x65, 0x69, 0x32, 0x61, 0x62, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c,
	0x65, 0x66, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x12, 0x73, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x75, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x68, 0x0a, 0x10,
	0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75,
	0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x45, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xfb,
	0x11, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x68, 0x69, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75,
	0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x12, 0x6a, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69,
	0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x78, 0x41,
	0x78, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x79, 0x41, 0x78, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75,
	0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x6f, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69,
	0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74,
	0x61, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x73, 0x74, 0x61, 0x72, 0x44, 0x65, 0x73, 0x63, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0xfd, 0x03, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x69, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x69,
	0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x69,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x69, 0x1a, 0xe7, 0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x75, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xab, 0x01, 0x0a,
	0x0f, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x48, 0x61, 0x6c, 0x66, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x47, 0x6f,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xdb, 0x01, 0x0a, 0x19, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x74, 0x68,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x57, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x1a, 0x54, 0x0a, 0x0c, 0x45, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xab, 0x04, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x4f,
	0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x76, 0x65, 0x4d, 0x69, 0x6e, 0x1a, 0xe7, 0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x4f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6c,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a,
	0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x77, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6e, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6e, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xc3, 0x05, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0xdf, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x61, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x2e,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x11, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x09, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x63, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x56, 0x53, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x65, 0x72, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x53, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xa7, 0x2d, 0x0a, 0x0c, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65,
	0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x12,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12,
	0x43, 0x0a, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x15, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x86,
	0x1f, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x46, 0x0a, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x69, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x61, 0x77,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x11, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x68, 0x6f,
	0x77, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x61, 0x77, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x61, 0x77, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f,
	0x62, 0x69, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x61, 0x77, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x42,
	0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x17,
	0x72, 0x61, 0x77, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72,
	0x61, 0x77, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x69, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x17,
	0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72,
	0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x61, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x69, 0x72,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x42, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x42, 0x69, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x38, 0x0a, 0x19, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x69, 0x78, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x69, 0x78, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x69, 0x6e, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x50, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6f, 0x73, 0x50, 0x61, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a,
	0x11, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x50, 0x61, 0x69,
	0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x49,
	0x0a, 0x0b, 0x73, 0x6b, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x73,
	0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x32, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x43, 0x61, 0x73, 0x68,
	0x69, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x60, 0x0a, 0x15, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x50, 0x61, 0x69, 0x64,
	0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x1a, 0x6a, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x97, 0x01, 0x0a,
	0x11, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x64, 0x64, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x64, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x1a, 0x76, 0x0a, 0x13, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x80,
	0x03, 0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0e, 0x64, 0x6f, 0x75, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x0c, 0x64, 0x6f,
	0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49,
	0x64, 0x1a, 0x54, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x72, 0x65, 0x65, 0x1a, 0x26, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x85, 0x02, 0x0a, 0x0d, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x80, 0x05, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x61, 0x69,
	0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x52, 0x07,
	0x74, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x42, 0x61, 0x72, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x62, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x69, 0x6e, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x1a, 0x75,
	0x0a, 0x07, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x69, 0x78, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x78, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x69, 0x6e, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xc7, 0x60, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x65, 0x61,
	0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x69, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53,
	0x4b, 0x55, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0xe7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x83, 0x15, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x62, 0x69, 0x7a, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x4a, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f,
	0x62, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x42, 0x61,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x43, 0x61,
	0x73, 0x68, 0x69, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x0e,
	0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0xa2, 0x02, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x1a, 0x84,
	0x01, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x42, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x69,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x6c, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x9c, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x1a,
	0xdb, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xa9, 0x04,
	0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x1c,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x75, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x80, 0x02, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xba, 0x02, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb7, 0x04, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x1a, 0xe9, 0x01, 0x0a,
	0x09, 0x50, 0x61, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x45, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x76, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x57, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0xaf, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x0a,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x09, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0xa8, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x43, 0x0a,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x5c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x61,
	0x62, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x61, 0x62, 0x53, 0x68, 0x61, 0x72, 0x65, 0x1a, 0xe5, 0x02, 0x0a, 0x0f,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x50, 0x61, 0x69, 0x64, 0x1a, 0xb8, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x61, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0xe2, 0x0f, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x14, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xcf, 0x04, 0x0a, 0x12,
	0x42, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xc8, 0x09,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x75, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc9, 0x05, 0x0a,
	0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x42, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xdb, 0x01, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x89, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x1a, 0xe3,
	0x02, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x67, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x1a, 0x71, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x1a, 0x08, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xc1,
	0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x89, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x1a, 0xe4, 0x03, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x1a, 0x61, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x6f, 0x72, 0x64, 0x75, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x6f, 0x72, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x45, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x1a, 0xbc, 0x0c, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x69, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x4b, 0x55,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x53, 0x4b, 0x55, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x6b, 0x75, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x4b, 0x55, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x4b, 0x55, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53,
	0x4b, 0x55, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x56,
	0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4c, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x6b, 0x75, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x1a, 0x5e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x1a, 0x70, 0x0a, 0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x4b, 0x55,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a,
	0x88, 0x04, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xdb, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x72, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x15, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x75, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x55, 0x49, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x75, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x48, 0x0a,
	0x10, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x74, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x78, 0x0a,
	0x0c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x9f, 0x08, 0x0a, 0x14, 0x50, 0x61, 0x69, 0x64,
	0x4c, 0x69, 0x76, 0x65, 0x55, 0x49, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x49, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x61, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61,
	0x69, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x78,
	0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x78, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x65, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x74, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x42, 0x74, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x6f, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6d, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x16,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x32, 0x0a, 0x16, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x75, 0x6d,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xf6, 0x06, 0x0a, 0x0e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70,
	0x75, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x75, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6b,
	0x75, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x69,
	0x64, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x54, 0x0a, 0x12, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69, 0x6f, 0x73, 0x50, 0x61, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x16, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x47, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x63, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x94, 0x01, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x22, 0x77, 0x0a, 0x0a, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0a, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xa1, 0x0b, 0x0a, 0x0c, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x03, 0x62, 0x67, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x03, 0x62, 0x67, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e,
	0x66, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0xf4, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x06, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x5e, 0x0a, 0x0e, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0xa1, 0x02, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x63, 0x75, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x63, 0x75, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x01,
	0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24,
	0x0a, 0x07, 0x56, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x70,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x69, 0x70,
	0x52, 0x6f, 0x6f, 0x6d, 0x22, 0xf8, 0x03, 0x0a, 0x0b, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x75, 0x70,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x55, 0x70,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6b,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6e, 0x74, 0x4c, 0x61,
	0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4f,
	0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa6, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x2a, 0x0a, 0x12, 0x54, 0x6f, 0x6f, 0x6c,
	0x62, 0x61, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x5d, 0x0a, 0x0c, 0x42, 0x65, 0x61,
	0x75, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0c, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x52, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x50, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x41, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd6, 0x03, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x19, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x65, 0x64, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x22,
	0xf9, 0x07, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x42, 0x61, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12, 0x4d, 0x0a,
	0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09,
	0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x76,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x43, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x61, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61,
	0x6b, 0x55, 0x72, 0x6c, 0x1a, 0x4c, 0x0a, 0x08, 0x45, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xa4, 0x02, 0x0a, 0x06, 0x56, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a,
	0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x1a, 0xd5, 0x01, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x11, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x45, 0x63, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x70, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x50, 0x6f,
	0x70, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x63, 0x6f,
	0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x52, 0x65, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72,
	0x65, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x0c,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x56, 0x32, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x56, 0x32, 0x22, 0x80, 0x01, 0x0a, 0x0c,
	0x45, 0x63, 0x6f, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x45, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xf2,
	0x01, 0x0a, 0x0b, 0x45, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x09, 0x45, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x62, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x1c, 0x0a, 0x08,
	0x45, 0x63, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x0c, 0x45, 0x63,
	0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x45, 0x63, 0x6f, 0x6d, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x63,
	0x6f, 0x6d, 0x42, 0x69, 0x64, 0x64, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x0a, 0x45, 0x63, 0x6f, 0x6d, 0x42, 0x69,
	0x64, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x4c, 0x0a,
	0x0a, 0x45, 0x63, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x07,
	0x45, 0x63, 0x6f, 0x6d, 0x50, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x75, 0x6d, 0x61, 0x6e, 0x6a, 0x69, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x61, 0x6e,
	0x6a, 0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0d, 0x45, 0x63, 0x6f, 0x6d, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x52, 0x65, 0x64,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0a, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x56, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x66, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x67, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x69, 0x66, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7d, 0x0a, 0x14, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x53, 0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x12,
	0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x22, 0x4d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x78, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x78, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x61, 0x77,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x64,
	0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x10,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x74, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x06, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x0c,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x77,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x75, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x75, 0x53, 0x74, 0x72,
	0x12, 0x3a, 0x0a, 0x15, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x36, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x6f, 0x78, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x1a,
	0x3f, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xab, 0x04, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f,
	0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x66, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x22, 0xe7,
	0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f,
	0x75, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x75,
	0x67, 0x68, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8e, 0x08, 0x0a, 0x10, 0x54, 0x6f, 0x75,
	0x74, 0x69, 0x61, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x67, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x67, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x52, 0x07, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x29, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6a, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6a, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2e,
	0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x65, 0x66,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x0b, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x64, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a,
	0x0e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x3e, 0x0a, 0x11,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x75, 0x76, 0x5f, 0x70, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x77, 0x55, 0x76, 0x50, 0x76, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x77, 0x65, 0x6d, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41,
	0x77, 0x65, 0x6d, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x4d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x51,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x69, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x69, 0x74, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x12, 0x5a, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78,
	0x69, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x78, 0x69, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x14,
	0x69, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x4f, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x12, 0x69, 0x6f, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xe5, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x47, 0x0a, 0x08, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x70,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb2, 0x01,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x4a, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x1a, 0x6c, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0xdb, 0x0d, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x27, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x66, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f,
	0x4e, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x08, 0x65, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61,
	0x2e, 0x45, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x1a, 0x41, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc8, 0x02, 0x0a,
	0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x75, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xd4, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb3,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x1a, 0x9e, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a,
	0x13, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x66, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x1a, 0x45,
	0x0a, 0x0b, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa5, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x4d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x69, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xe4, 0x02,
	0x0a, 0x06, 0x45, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4d,
	0x6f, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a,
	0x0a, 0x1a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6d, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x6f, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x62, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xa1, 0x04, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a,
	0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x42, 0x61, 0x67, 0x52, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x1a, 0x5d, 0x0a,
	0x08, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x41, 0x74, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0xff, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x78, 0x69, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x45, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78,
	0x69, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x3c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4f, 0x0a, 0x18, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0x98, 0x06, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x16, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x75, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x85, 0x01, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x6f, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x1a, 0x4c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x1f, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x78, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xea, 0x02, 0x0a,
	0x12, 0x49, 0x4f, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x4f, 0x53, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x50, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x0f, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x4f, 0x53, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x64, 0x0a, 0x0b, 0x49, 0x4f, 0x53,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x6a, 0x0a, 0x12, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb9, 0x0d, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x75, 0x70, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x75, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x61,
	0x75, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x0a,
	0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x15, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x14, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x3d, 0x0a, 0x0f, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x0d, 0x77, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x14, 0x62, 0x6c, 0x75, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x12, 0x62, 0x6c, 0x75, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x1a, 0xce, 0x01, 0x0a, 0x06, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x20, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x48, 0x0a, 0x09,
	0x57, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x38, 0x0a, 0x0c, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xed, 0x03, 0x0a, 0x11, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x36, 0x0a, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x42, 0x0a, 0x05,
	0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x1a, 0xa4, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a,
	0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x39, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x67, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x10, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9,
	0x07, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x63, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x15, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x6d, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x1a, 0x4c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8b, 0x02, 0x0a,
	0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x04, 0x0a, 0x0f, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65,
	0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x1a, 0x75, 0x0a, 0x0f, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xc0,
	0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa4, 0x04, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0b,
	0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x77, 0x68, 0x6f, 0x6c, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x59, 0x0a, 0x18, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x63,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a,
	0x57, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x53, 0x70, 0x6c,
	0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa0, 0x0e, 0x0a, 0x0c, 0x52, 0x6f, 0x6f,
	0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x15,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x9b, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x78, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x79, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x32, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x75, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xd2, 0x09, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x4c, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x72,
	0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x52, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x34, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x1a, 0x98, 0x01, 0x0a,
	0x0c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x23, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x2b, 0x0a, 0x09,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x35, 0x0a, 0x0e, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x98, 0x03, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x72, 0x65, 0x71, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x1a, 0x6f, 0x0a, 0x08, 0x46, 0x72,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x72, 0x65, 0x71, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x72, 0x65, 0x71, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x72, 0x65, 0x71, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x04, 0x0a, 0x0c,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x1d,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x19, 0x72, 0x6f,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5d, 0x0a, 0x19, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x60, 0x0a, 0x12, 0x53, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x07, 0x0a,
	0x08, 0x50, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x63,
	0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x1e, 0x70, 0x69, 0x63, 0x6f, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x69, 0x63, 0x6f, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x69, 0x63, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x47, 0x0a, 0x21, 0x70, 0x69, 0x63, 0x6f, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x69, 0x63, 0x6f,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x69, 0x63, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x42,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x69, 0x63, 0x6f, 0x5f, 0x76, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6f, 0x56, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6f, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x69, 0x63, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xf6, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x55, 0x70, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x50, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x60, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xef, 0x13, 0x0a,
	0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x6b, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x77, 0x65, 0x62, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x3a, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x1a, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x77, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x79, 0x52, 0x13,
	0x67, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x79, 0x12, 0x54, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x11, 0x70, 0x61, 0x69, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x45, 0x0a, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x1c, 0x77, 0x65, 0x62,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x77, 0x65, 0x62, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x52, 0x13, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61,
	0x72, 0x12, 0x54, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x67, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x73, 0x61, 0x69,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x51,
	0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x30, 0x0a, 0x0d, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x63, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x53,
	0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x58, 0x0a,
	0x0c, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4e, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x7d, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x4c, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x34, 0x0a, 0x13, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x5c, 0x0a, 0x12,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0x61, 0x0a, 0x11, 0x50, 0x61,
	0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x49, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6a, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x1a, 0x34, 0x0a, 0x13, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4e,
	0x0a, 0x12, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a,
	0x02, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d,
	0x69, 0x63, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69,
	0x63, 0x1a, 0x40, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x46, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x0f, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x4e, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x05, 0x0a, 0x10, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x76, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x69, 0x0a, 0x1b, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x18, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x15,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x57, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x31,
	0x0a, 0x10, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3a, 0x0a, 0x18, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x51, 0x0a,
	0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x1a, 0x76, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x63, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d,
	0x42, 0x61, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x80, 0x01,
	0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64,
	0x22, 0x89, 0x05, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x43, 0x61, 0x72, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x1a, 0x59, 0x0a, 0x0b, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x1a, 0x76, 0x0a, 0x0d, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x69, 0x0a, 0x0f,
	0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x77, 0x0a, 0x0a, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x7a, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6c, 0x69, 0x76,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x1a,
	0x4a, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x02, 0x0a, 0x0e,
	0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64,
	0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x74, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x5d, 0x0a, 0x11, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x74,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x61, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd8, 0x0a, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42,
	0x47, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x0f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x47, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x47, 0x12, 0x34, 0x0a,
	0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x11, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x42, 0x47, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x47, 0x12,
	0x45, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x62, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x64, 0x42, 0x47, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x64, 0x42, 0x47, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x42, 0x47, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x69, 0x63, 0x42, 0x47, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x69, 0x63,
	0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x69, 0x63, 0x54, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x42, 0x47, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x42,
	0x47, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x32,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x32,
	0x22, 0xdc, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x58, 0x0a,
	0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x1a, 0x49, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x15, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x62, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x51, 0x0a,
	0x0e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xfc, 0x02, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x73, 0x18, 0x88,
	0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x3a, 0x0a, 0x0b, 0x49, 0x4f, 0x53, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x16,
	0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x12, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x49,
	0x4f, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x4f, 0x53, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x10, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0f, 0x6c, 0x61,
	0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a,
	0x0f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x4f, 0x53, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xe6, 0x02, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d,
	0x41, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0e, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x62, 0x74, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x54, 0x4e, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x42, 0x74, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x6f,
	0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x6f, 0x6d, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x1c,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x54,
	0x4e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x73,
	0x67, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22,
	0xc4, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x6e, 0x67,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x11, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x9c, 0x06, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x76, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x39, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x09,
	0x64, 0x73, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x44, 0x53, 0x4c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x64, 0x73, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x09, 0x44, 0x53, 0x4c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x73, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x73,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x6c, 0x5f, 0x67, 0x65, 0x63,
	0x6b, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x73, 0x6c, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73,
	0x6c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x53, 0x4c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x39, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x09,
	0x51, 0x75, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x90, 0x07, 0x0a, 0x09, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x75, 0x76, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x55, 0x76,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x67, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x67, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x75, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x75,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65,
	0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x75, 0x70, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x70,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x75, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x79, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x06, 0x54,
	0x6f, 0x70, 0x46, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x9d, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22,
	0xc5, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x19, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x62, 0x75, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x43, 0x0a, 0x09, 0x54, 0x56, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x4a, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xa5, 0x07, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x1a, 0x62, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a, 0x12,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x1a, 0xe1, 0x02, 0x0a, 0x14,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xc6, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x2a,
	0x0a, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0b, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x12,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0e,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x08, 0x50, 0x61, 0x79,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61,
	0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x08, 0x50, 0x61, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x08, 0x46,
	0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x66,
	0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfe, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x84, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8f, 0x09, 0x0a, 0x08, 0x50, 0x61, 0x79,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x77, 0x44, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x77, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x68, 0x69, 0x73, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x74, 0x68, 0x69, 0x73, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e,
	0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x68, 0x69, 0x73, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x68, 0x69, 0x73, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x61, 0x78, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x06, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x0f, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x49, 0x63,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x49, 0x6d,
	0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x12,
	0x39, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x42, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x46,
	0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x61, 0x6e, 0x73,
	0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x1a, 0x40, 0x0a, 0x0a, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x08, 0x0a, 0x06, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7b,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x63,
	0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x0a,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x22, 0x3c, 0x0a, 0x10, 0x4e, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2e, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x12, 0x0a, 0x02, 0x6b, 0x6b, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6b, 0x22, 0xb1, 0x02, 0x0a, 0x0f, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x78,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x31,
	0x0a, 0x07, 0x45, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xde, 0x01, 0x0a, 0x03, 0x52, 0x73, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x64, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x65, 0x12,
	0x14, 0x0a, 0x01, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x73, 0x70,
	0x2e, 0x46, 0x52, 0x01, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01,
	0x68, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12,
	0x0c, 0x0a, 0x01, 0x6a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6a, 0x1a, 0x43, 0x0a,
	0x01, 0x46, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x71, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x71, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x71, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x71, 0x35, 0x22, 0xac, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x61,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x35, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x55, 0x69, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x55, 0x69,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xa4, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x45, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x67, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xa7,
	0x03, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x6f, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x4c, 0x61, 0x6e, 0x64,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x4d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x7a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x62,
	0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x1b, 0x52, 0x61, 0x6e, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x81, 0x06, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x50, 0x0a, 0x16,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x3e,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xf6,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x79, 0x6e, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x79, 0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x67, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x7a, 0x4c, 0x6f, 0x67, 0x49,
	0x44, 0x22, 0x3c, 0x0a, 0x19, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x54, 0x65, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22,
	0x50, 0x0a, 0x17, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x63, 0x0a, 0x17, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x05, 0x64, 0x65, 0x74, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x05, 0x64, 0x65, 0x74, 0x61, 0x69, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x05, 0x0a, 0x0a, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x77,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x10, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x6e, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x24, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x74,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x74, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x46, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8d, 0x04, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4b, 0x74, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x77, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x75, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f,
	0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x74, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x7c, 0x0a, 0x0e, 0x53, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x56, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4b, 0x74,
	0x76, 0x53, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x65,
	0x65, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65,
	0x6c, 0x66, 0x53, 0x65, 0x65, 0x69, 0x6e, 0x67, 0x22, 0x9c, 0x12, 0x0a, 0x0d, 0x4b, 0x74, 0x76,
	0x53, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x79,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x67, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4b, 0x74, 0x76, 0x53, 0x6f, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x13, 0x61,
	0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4b, 0x74, 0x76, 0x53, 0x6f,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69,
	0x64, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69,
	0x64, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4b, 0x74, 0x76,
	0x53, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x69,
	0x6d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x33, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x53, 0x6f, 0x6e,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0d, 0x73, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x6e,
	0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x53, 0x6f, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x79, 0x72, 0x69, 0x63,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x79, 0x72, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x69, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x69, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x39, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x77,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4b, 0x74, 0x76, 0x53, 0x6f, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4b, 0x74, 0x76, 0x53, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36, 0x0a,
	0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x93, 0x02, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x67,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x75, 0x66, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x75,
	0x66, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x61,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x65, 0x61, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x62, 0x70, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x65, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x85, 0x01, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x1a, 0x72, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x74, 0x76, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6b, 0x74, 0x76, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x69, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x69, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e, 0x67,
	0x22, 0xe5, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x31, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x1a, 0x6b, 0x74, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6b, 0x74, 0x76, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6b, 0x74, 0x76, 0x5f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x74, 0x76, 0x4c, 0x79, 0x72, 0x69, 0x63,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x6b, 0x74, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x6b, 0x74, 0x76, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c,
	0x79, 0x72, 0x69, 0x63, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x4d, 0x0a, 0x24, 0x6b, 0x74, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1f, 0x6b, 0x74, 0x76, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x79, 0x72,
	0x69, 0x63, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x44, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e,
	0x67, 0x54, 0x61, 0x67, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53,
	0x6f, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x68, 0x69, 0x74, 0x5f, 0x6d, 0x69,
	0x64, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x62, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x68, 0x69, 0x74, 0x4d, 0x69, 0x64, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x69,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x69, 0x64, 0x69, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x3c, 0x0a, 0x0e, 0x57, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0d, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xe9, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x61,
	0x67, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x60, 0x0a, 0x19, 0x51, 0x75, 0x69, 0x7a, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x08,
	0x71, 0x75, 0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x04, 0x51, 0x75, 0x69,
	0x7a, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x69, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x71, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb1, 0x03, 0x0a, 0x0e, 0x48, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0b, 0x72, 0x74, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0a, 0x72, 0x74, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x48, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0e, 0x48, 0x6f, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x6f, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x0b, 0x48, 0x6f,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x74,
	0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x69, 0x74, 0x4d, 0x61,
	0x70, 0x22, 0x95, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0b, 0x72, 0x74, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x72,
	0x74, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x07, 0x0a, 0x0d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x65,
	0x78, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0b, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x7a, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x7a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x1a, 0xc2, 0x02, 0x0a, 0x05, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x47, 0x69, 0x66, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67,
	0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0x4b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0x6b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x9c, 0x14, 0x0a, 0x0f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6d, 0x67, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x6c, 0x75,
	0x63, 0x6b, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x10, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x6f, 0x78, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x78, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x4f, 0x0a, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x05, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x12,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6a, 0x6f, 0x69,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x3b, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf1, 0x02, 0x0a,
	0x07, 0x42, 0x6f, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x44, 0x65, 0x73, 0x63,
	0x1a, 0xe5, 0x02, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6c, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e,
	0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa1, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x1a, 0xb1, 0x03, 0x0a,
	0x05, 0x44, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x12,
	0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x6f, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x42, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x6f, 0x42, 0x6f, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x12, 0x5e, 0x0a, 0x14, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4a, 0x75, 0x6d,
	0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x6f, 0x44, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x6f, 0x44, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4a, 0x75,
	0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x6f, 0x44, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xcb, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x1a,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xcb,
	0x06, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x31, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x76,
	0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x32, 0x12, 0x36, 0x0a, 0x13, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x32, 0x12, 0x3f, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0b, 0x72, 0x74, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a,
	0x72, 0x74, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x44, 0x6f, 0x65, 0x73,
	0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x74,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x72, 0x74, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x1a, 0x33, 0x0a, 0x15, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a,
	0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x46, 0x6c, 0x65, 0x78, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa0, 0x09, 0x0a, 0x13, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x06,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x32, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x69,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x75, 0x72, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x31, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x33, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x1a, 0x80, 0x01, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53,
	0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x55, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x69, 0x66,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0xfa,
	0x01, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x0e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2c, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x53,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c,
	0x22, 0x8a, 0x02, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x46, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x51, 0x0a,
	0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x22, 0x25, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5e, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x19, 0x54, 0x65, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x6a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xfd, 0x04, 0x0a, 0x0a, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x64,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x66, 0x52, 0x03,
	0x64, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x11,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x44, 0x65,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x13, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xf5,
	0x03, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x1a,
	0xc4, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x50, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x50, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x93, 0x15, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x50, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67,
	0x61, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x14, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6f,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6f, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6f, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x68, 0x69, 0x6a, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6e, 0x74, 0x69, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x68, 0x69, 0x6a, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x6e, 0x74, 0x69, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4a, 0x75,
	0x6d, 0x70, 0x49, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x53, 0x6b,
	0x75, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x70,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x50,
	0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x12, 0x61, 0x74, 0x6d,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x74, 0x6d, 0x6f, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x10,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x23, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x19, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4e, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x50,
	0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x69, 0x66, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x66, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x4e,
	0x0a, 0x11, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c,
	0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x48, 0x0a,
	0x10, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x15, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x14,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x12, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x64, 0x0a, 0x0e, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf9, 0x0e, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x63, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x13, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x1d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0f, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x69, 0x6e, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x11, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x68, 0x6f, 0x74, 0x5f, 0x61,
	0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x52,
	0x0d, 0x68, 0x6f, 0x74, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x46, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x19, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x88, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x63, 0x6f, 0x6d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x52, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x55, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x06, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c,
	0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x07, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x5f, 0x75, 0x70, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x70, 0x55, 0x70, 0x69, 0x63,
	0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x22,
	0xd7, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x68, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x07, 0x53, 0x6b, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x87, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x6b,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x41, 0x0a, 0x09, 0x53, 0x6b, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x03, 0x0a, 0x0e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcf,
	0x07, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62,
	0x65, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x74, 0x74, 0x69,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x2f, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e,
	0x73, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49,
	0x63, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x22, 0xde, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x54, 0x0a, 0x12, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x75, 0x73,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x74, 0x22,
	0x38, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x63, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xe3, 0x02, 0x0a,
	0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x49, 0x6d, 0x67, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x03,
	0x49, 0x6d, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xdb, 0x03, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x69, 0x6e, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x64,
	0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0xb3, 0x03, 0x0a, 0x0f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x76, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x69, 0x76, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xb5, 0x02,
	0x0a, 0x0d, 0x48, 0x6f, 0x74, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x49, 0x6d, 0x67, 0x2a, 0x43, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x54, 0x41, 0x47, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x54, 0x41, 0x47, 0x53, 0x54, 0x41, 0x52, 0x10, 0x01, 0x2a, 0xdd, 0x01, 0x0a, 0x0f, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x4d, 0x53, 0x47,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x4d, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x59, 0x53, 0x41, 0x56, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x4d, 0x53, 0x47, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x4f, 0x4f, 0x4d, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x4a, 0x55, 0x4d, 0x41, 0x4e, 0x4a, 0x49, 0x44, 0x41, 0x54, 0x41, 0x41, 0x55, 0x54,
	0x48, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x53, 0x57, 0x45, 0x4c, 0x43, 0x4f, 0x4d, 0x45, 0x4d, 0x53, 0x47, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x4d, 0x53, 0x47,
	0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x49, 0x44, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x4f,
	0x4f, 0x4d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x4d, 0x53,
	0x47, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x53, 0x54, 0x54, 0x45, 0x41, 0x4d, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x4d, 0x53, 0x47, 0x10, 0x07, 0x42, 0x13, 0x5a, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_douyin_proto_rawDescOnce sync.Once
	file_douyin_proto_rawDescData = file_douyin_proto_rawDesc
)

func file_douyin_proto_rawDescGZIP() []byte {
	file_douyin_proto_rawDescOnce.Do(func() {
		file_douyin_proto_rawDescData = protoimpl.X.CompressGZIP(file_douyin_proto_rawDescData)
	})
	return file_douyin_proto_rawDescData
}

var file_douyin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_douyin_proto_msgTypes = make([]protoimpl.MessageInfo, 688)
var file_douyin_proto_goTypes = []any{
	(CommentTypeTag)(0),                      // 0: CommentTypeTag
	(RoomMsgTypeEnum)(0),                     // 1: RoomMsgTypeEnum
	(*Response)(nil),                         // 2: Response
	(*Message)(nil),                          // 3: Message
	(*EmojiChatMessage)(nil),                 // 4: EmojiChatMessage
	(*ChatMessage)(nil),                      // 5: ChatMessage
	(*LandscapeAreaCommon)(nil),              // 6: LandscapeAreaCommon
	(*RoomUserSeqMessage)(nil),               // 7: RoomUserSeqMessage
	(*CommonTextMessage)(nil),                // 8: CommonTextMessage
	(*RoomUserSeqMessageContributor)(nil),    // 9: RoomUserSeqMessageContributor
	(*GiftMessage)(nil),                      // 10: GiftMessage
	(*SeriesPlayGift)(nil),                   // 11: SeriesPlayGift
	(*SeriesTrayInfo)(nil),                   // 12: SeriesTrayInfo
	(*RoomHotInfo)(nil),                      // 13: RoomHotInfo
	(*ExtraEffect)(nil),                      // 14: ExtraEffect
	(*SendTogether)(nil),                     // 15: SendTogether
	(*AssetEffectMixInfo)(nil),               // 16: AssetEffectMixInfo
	(*AnchorGiftData)(nil),                   // 17: AnchorGiftData
	(*EffectMixImageInfo)(nil),               // 18: EffectMixImageInfo
	(*GiftTrayInfo)(nil),                     // 19: GiftTrayInfo
	(*TrayPostEffect)(nil),                   // 20: TrayPostEffect
	(*TrayPreEffect)(nil),                    // 21: TrayPreEffect
	(*GiftStruct)(nil),                       // 22: GiftStruct
	(*GiftIMPriority)(nil),                   // 23: GiftIMPriority
	(*TextEffect)(nil),                       // 24: TextEffect
	(*TextEffectDetail)(nil),                 // 25: TextEffectDetail
	(*MemberMessage)(nil),                    // 26: MemberMessage
	(*PublicAreaCommon)(nil),                 // 27: PublicAreaCommon
	(*SuffixText)(nil),                       // 28: SuffixText
	(*ChatReplyRespInfo)(nil),                // 29: ChatReplyRespInfo
	(*EffectConfig)(nil),                     // 30: EffectConfig
	(*Text)(nil),                             // 31: Text
	(*TextPiece)(nil),                        // 32: TextPiece
	(*TextPieceImage)(nil),                   // 33: TextPieceImage
	(*TextPiecePatternRef)(nil),              // 34: TextPiecePatternRef
	(*TextPieceHeart)(nil),                   // 35: TextPieceHeart
	(*TextPieceGift)(nil),                    // 36: TextPieceGift
	(*PatternRef)(nil),                       // 37: PatternRef
	(*TextPieceUser)(nil),                    // 38: TextPieceUser
	(*TextFormat)(nil),                       // 39: TextFormat
	(*LikeMessage)(nil),                      // 40: LikeMessage
	(*SocialMessage)(nil),                    // 41: SocialMessage
	(*PicoDisplayInfo)(nil),                  // 42: PicoDisplayInfo
	(*DoubleLikeDetail)(nil),                 // 43: DoubleLikeDetail
	(*DisplayControlInfo)(nil),               // 44: DisplayControlInfo
	(*EpisodeChatMessage)(nil),               // 45: EpisodeChatMessage
	(*MatchAgainstScoreMessage)(nil),         // 46: MatchAgainstScoreMessage
	(*Against)(nil),                          // 47: Against
	(*Common)(nil),                           // 48: Common
	(*RegionRestriction)(nil),                // 49: RegionRestriction
	(*RegionMatch)(nil),                      // 50: RegionMatch
	(*StreamUrl)(nil),                        // 51: StreamUrl
	(*StreamUrlExtra)(nil),                   // 52: StreamUrlExtra
	(*LiveCoreSDKData)(nil),                  // 53: LiveCoreSDKData
	(*PlaySetting)(nil),                      // 54: PlaySetting
	(*OpenStreamUrlEncrypt)(nil),             // 55: OpenStreamUrlEncrypt
	(*SafeReason)(nil),                       // 56: SafeReason
	(*Quality)(nil),                          // 57: Quality
	(*RoomExtra)(nil),                        // 58: RoomExtra
	(*RoomAuthStatus)(nil),                   // 59: RoomAuthStatus
	(*RoomTab)(nil),                          // 60: RoomTab
	(*RoomActivityTag)(nil),                  // 61: RoomActivityTag
	(*MatchInfo)(nil),                        // 62: MatchInfo
	(*MatchSkinInfo)(nil),                    // 63: MatchSkinInfo
	(*OfficialRoomInfo)(nil),                 // 64: OfficialRoomInfo
	(*RoomShortTouchAreaConfig)(nil),         // 65: RoomShortTouchAreaConfig
	(*GameExtra)(nil),                        // 66: GameExtra
	(*OfficialChannelInfo)(nil),              // 67: OfficialChannelInfo
	(*RoomCart)(nil),                         // 68: RoomCart
	(*LinkerUsers)(nil),                      // 69: LinkerUsers
	(*BorderInfo)(nil),                       // 70: BorderInfo
	(*Room)(nil),                             // 71: Room
	(*EasterEggData)(nil),                    // 72: EasterEggData
	(*LinkerDetail)(nil),                     // 73: LinkerDetail
	(*FilterWord)(nil),                       // 74: FilterWord
	(*VerticalTypeInfo)(nil),                 // 75: VerticalTypeInfo
	(*RoomIMInfo)(nil),                       // 76: RoomIMInfo
	(*AnnouncementInfo)(nil),                 // 77: AnnouncementInfo
	(*ShortTouchAuth)(nil),                   // 78: ShortTouchAuth
	(*EpisodeMod)(nil),                       // 79: EpisodeMod
	(*WatchInfo)(nil),                        // 80: WatchInfo
	(*ToolbarItemConfig)(nil),                // 81: ToolbarItemConfig
	(*EpisodePremierePlay)(nil),              // 82: EpisodePremierePlay
	(*EpisodePreviewImage)(nil),              // 83: EpisodePreviewImage
	(*VSGiftPannel)(nil),                     // 84: VSGiftPannel
	(*VSPannelIcon)(nil),                     // 85: VSPannelIcon
	(*EpisodePreviewBottom)(nil),             // 86: EpisodePreviewBottom
	(*VSCameraInfo)(nil),                     // 87: VSCameraInfo
	(*VSWatermark)(nil),                      // 88: VSWatermark
	(*VSItemComment)(nil),                    // 89: VSItemComment
	(*VSBar)(nil),                            // 90: VSBar
	(*VSLinkInfo)(nil),                       // 91: VSLinkInfo
	(*CommentConfig)(nil),                    // 92: CommentConfig
	(*MatchRoomInfo)(nil),                    // 93: MatchRoomInfo
	(*MultiCameraBasicInfo)(nil),             // 94: MultiCameraBasicInfo
	(*SharePosterInfo)(nil),                  // 95: SharePosterInfo
	(*EpisodeExtraInfo)(nil),                 // 96: EpisodeExtraInfo
	(*TitleIcon)(nil),                        // 97: TitleIcon
	(*VSConfigDrawer)(nil),                   // 98: VSConfigDrawer
	(*MainCameraMatchInfo)(nil),              // 99: MainCameraMatchInfo
	(*MultiTab)(nil),                         // 100: MultiTab
	(*BusinessConfigure)(nil),                // 101: BusinessConfigure
	(*VSPremiereToast)(nil),                  // 102: VSPremiereToast
	(*PaidLiveData)(nil),                     // 103: PaidLiveData
	(*Product)(nil),                          // 104: Product
	(*PrivilegeInfo)(nil),                    // 105: PrivilegeInfo
	(*CircleInfo)(nil),                       // 106: CircleInfo
	(*DesireInfo)(nil),                       // 107: DesireInfo
	(*FeedbackCard)(nil),                     // 108: FeedbackCard
	(*VipData)(nil),                          // 109: VipData
	(*ToolBarData)(nil),                      // 110: ToolBarData
	(*ToolBarComponentData)(nil),             // 111: ToolBarComponentData
	(*ToolbarPermutation)(nil),               // 112: ToolbarPermutation
	(*ComponentSkin)(nil),                    // 113: ComponentSkin
	(*BeautifyInfo)(nil),                     // 114: BeautifyInfo
	(*UnionLiveInfo)(nil),                    // 115: UnionLiveInfo
	(*GameCPData)(nil),                       // 116: GameCPData
	(*GamePlayData)(nil),                     // 117: GamePlayData
	(*AvatarLiveInfo)(nil),                   // 118: AvatarLiveInfo
	(*CommentWallInfo)(nil),                  // 119: CommentWallInfo
	(*CommentWallPosition)(nil),              // 120: CommentWallPosition
	(*RoomSpecificSceneTypeInfo)(nil),        // 121: RoomSpecificSceneTypeInfo
	(*RelevantRecommendation)(nil),           // 122: RelevantRecommendation
	(*IndustryServiceInfo)(nil),              // 123: IndustryServiceInfo
	(*EcomData)(nil),                         // 124: EcomData
	(*EcomLiveCard)(nil),                     // 125: EcomLiveCard
	(*EcomProduct)(nil),                      // 126: EcomProduct
	(*EcomPrice)(nil),                        // 127: EcomPrice
	(*EcomIcon)(nil),                         // 128: EcomIcon
	(*EcomCampaign)(nil),                     // 129: EcomCampaign
	(*EcomAuction)(nil),                      // 130: EcomAuction
	(*EcomBidder)(nil),                       // 131: EcomBidder
	(*EcomAvatar)(nil),                       // 132: EcomAvatar
	(*EcomPop)(nil),                          // 133: EcomPop
	(*EcomGoodsCard)(nil),                    // 134: EcomGoodsCard
	(*RedsShowInfo)(nil),                     // 135: RedsShowInfo
	(*RoomCartV2)(nil),                       // 136: RoomCartV2
	(*LifeGrouponInfo)(nil),                  // 137: LifeGrouponInfo
	(*UpperRightWidgetData)(nil),             // 138: UpperRightWidgetData
	(*LikeDisplayConfig)(nil),                // 139: LikeDisplayConfig
	(*WelfareProjectInfo)(nil),               // 140: WelfareProjectInfo
	(*ActivityData)(nil),                     // 141: ActivityData
	(*MatchDrawer)(nil),                      // 142: MatchDrawer
	(*MatchRoomData)(nil),                    // 143: MatchRoomData
	(*TeamInfo)(nil),                         // 144: TeamInfo
	(*MatchUserInfo)(nil),                    // 145: MatchUserInfo
	(*TeamStats)(nil),                        // 146: TeamStats
	(*PlayerStats)(nil),                      // 147: PlayerStats
	(*ToutiaoMatchData)(nil),                 // 148: ToutiaoMatchData
	(*OfficialChannelExtraInfo)(nil),         // 149: OfficialChannelExtraInfo
	(*PackMetaInfo)(nil),                     // 150: PackMetaInfo
	(*InteractOpenExtra)(nil),                // 151: InteractOpenExtra
	(*PreviewExposeData)(nil),                // 152: PreviewExposeData
	(*Appearance)(nil),                       // 153: Appearance
	(*CommentaryRoomInfo)(nil),               // 154: CommentaryRoomInfo
	(*MatchChatConfig)(nil),                  // 155: MatchChatConfig
	(*ShareResource)(nil),                    // 156: ShareResource
	(*ClientComponent)(nil),                  // 157: ClientComponent
	(*RoomChannelData)(nil),                  // 158: RoomChannelData
	(*OpenContentData)(nil),                  // 159: OpenContentData
	(*LabelInfo)(nil),                        // 160: LabelInfo
	(*RoomFeedData)(nil),                     // 161: RoomFeedData
	(*RoomGameData)(nil),                     // 162: RoomGameData
	(*PicoInfo)(nil),                         // 163: PicoInfo
	(*RoomOthersData)(nil),                   // 164: RoomOthersData
	(*RoomRevenueData)(nil),                  // 165: RoomRevenueData
	(*RoomReqUserData)(nil),                  // 166: RoomReqUserData
	(*RoomAnchorData)(nil),                   // 167: RoomAnchorData
	(*RoomInteractData)(nil),                 // 168: RoomInteractData
	(*RoomBasisData)(nil),                    // 169: RoomBasisData
	(*RoomReplayInfo)(nil),                   // 170: RoomReplayInfo
	(*Bonus)(nil),                            // 171: Bonus
	(*CornerMarkReach)(nil),                  // 172: CornerMarkReach
	(*PublicScreenBottomInfo)(nil),           // 173: PublicScreenBottomInfo
	(*LiveStatusInfo)(nil),                   // 174: LiveStatusInfo
	(*CastScreenData)(nil),                   // 175: CastScreenData
	(*AudioBGData)(nil),                      // 176: AudioBGData
	(*ActivityRoomSkinInfo)(nil),             // 177: ActivityRoomSkinInfo
	(*Image)(nil),                            // 178: Image
	(*AudioSpeakingImageList)(nil),           // 179: AudioSpeakingImageList
	(*AnimatedBgInfo)(nil),                   // 180: AnimatedBgInfo
	(*ActivityLiveRecommendConfig)(nil),      // 181: ActivityLiveRecommendConfig
	(*IOSFragment)(nil),                      // 182: IOSFragment
	(*IOSContainerLayoutRule)(nil),           // 183: IOSContainerLayoutRule
	(*IOSContainerLayout)(nil),               // 184: IOSContainerLayout
	(*IOSClientComponent)(nil),               // 185: IOSClientComponent
	(*RoomPlatformComponentsData)(nil),       // 186: RoomPlatformComponentsData
	(*RoomPublicScreenInfo)(nil),             // 187: RoomPublicScreenInfo
	(*RoomPublicScreenAttachments)(nil),      // 188: RoomPublicScreenAttachments
	(*RoomFullVideoBTN)(nil),                 // 189: RoomFullVideoBTN
	(*RoomBanner)(nil),                       // 190: RoomBanner
	(*AvatorBorder)(nil),                     // 191: AvatorBorder
	(*RoomCore)(nil),                         // 192: RoomCore
	(*RoomViewStats)(nil),                    // 193: RoomViewStats
	(*PaidLiveSubscribe)(nil),                // 194: PaidLiveSubscribe
	(*RoomTitle)(nil),                        // 195: RoomTitle
	(*RoomAvator)(nil),                       // 196: RoomAvator
	(*AnchorTabLabel)(nil),                   // 197: AnchorTabLabel
	(*DSLDetail)(nil),                        // 198: DSLDetail
	(*QuizExtra)(nil),                        // 199: QuizExtra
	(*RoomStats)(nil),                        // 200: RoomStats
	(*TopFan)(nil),                           // 201: TopFan
	(*RoomUserAttr)(nil),                     // 202: RoomUserAttr
	(*BurstInfo)(nil),                        // 203: BurstInfo
	(*RoomHealthScoreInfo)(nil),              // 204: RoomHealthScoreInfo
	(*TVStation)(nil),                        // 205: TVStation
	(*CommentBox)(nil),                       // 206: CommentBox
	(*LinkMic)(nil),                          // 207: LinkMic
	(*User)(nil),                             // 208: User
	(*PayGrade)(nil),                         // 209: PayGrade
	(*FansClub)(nil),                         // 210: FansClub
	(*FansClubData)(nil),                     // 211: FansClubData
	(*UserBadge)(nil),                        // 212: UserBadge
	(*GradeBuffInfo)(nil),                    // 213: GradeBuffInfo
	(*Border)(nil),                           // 214: Border
	(*GradeIcon)(nil),                        // 215: GradeIcon
	(*FollowInfo)(nil),                       // 216: FollowInfo
	(*NinePatchSetting)(nil),                 // 217: NinePatchSetting
	(*PushFrame)(nil),                        // 218: PushFrame
	(*Kk)(nil),                               // 219: kk
	(*SendMessageBody)(nil),                  // 220: SendMessageBody
	(*ExtList)(nil),                          // 221: ExtList
	(*Rsp)(nil),                              // 222: Rsp
	(*PreMessage)(nil),                       // 223: PreMessage
	(*HeadersList)(nil),                      // 224: HeadersList
	(*RoomStatsMessage)(nil),                 // 225: RoomStatsMessage
	(*ProductInfo)(nil),                      // 226: ProductInfo
	(*CategoryInfo)(nil),                     // 227: CategoryInfo
	(*ProductChangeMessage)(nil),             // 228: ProductChangeMessage
	(*ControlMessage)(nil),                   // 229: ControlMessage
	(*FansclubMessage)(nil),                  // 230: FansclubMessage
	(*RoomRankMessage)(nil),                  // 231: RoomRankMessage
	(*RoomMessage)(nil),                      // 232: RoomMessage
	(*RanklistHourEntranceMessage)(nil),      // 233: RanklistHourEntranceMessage
	(*RanklistHourEntrance)(nil),             // 234: RanklistHourEntrance
	(*InRoomBannerMessage)(nil),              // 235: InRoomBannerMessage
	(*RoomDataSyncMessage)(nil),              // 236: RoomDataSyncMessage
	(*LuckyBoxTempStatusMessage)(nil),        // 237: LuckyBoxTempStatusMessage
	(*DecorationModifyMessage)(nil),          // 238: DecorationModifyMessage
	(*DecorationUpdateMessage)(nil),          // 239: DecorationUpdateMessage
	(*DecotationDetail)(nil),                 // 240: DecotationDetail
	(*Decoration)(nil),                       // 241: Decoration
	(*Reservation)(nil),                      // 242: Reservation
	(*DecorationFontConfig)(nil),             // 243: DecorationFontConfig
	(*LinkMicAudienceKtvMessage)(nil),        // 244: LinkMicAudienceKtvMessage
	(*ListInfo)(nil),                         // 245: ListInfo
	(*KtvSongStruct)(nil),                    // 246: KtvSongStruct
	(*PersonalSongInfo)(nil),                 // 247: PersonalSongInfo
	(*UserInfo)(nil),                         // 248: UserInfo
	(*WantListenInfo)(nil),                   // 249: WantListenInfo
	(*MusicInterval)(nil),                    // 250: MusicInterval
	(*ChorusVideoInfo)(nil),                  // 251: ChorusVideoInfo
	(*UserHighScoreSongTag)(nil),             // 252: UserHighScoreSongTag
	(*RoomStreamAdaptationMessage)(nil),      // 253: RoomStreamAdaptationMessage
	(*QuizAudienceStatusMessage)(nil),        // 254: QuizAudienceStatusMessage
	(*Quiz)(nil),                             // 255: Quiz
	(*HotChatMessage)(nil),                   // 256: HotChatMessage
	(*HotRoomMessage)(nil),                   // 257: HotRoomMessage
	(*HotRoomInfo)(nil),                      // 258: HotRoomInfo
	(*AudioChatMessage)(nil),                 // 259: AudioChatMessage
	(*NotifyMessage)(nil),                    // 260: NotifyMessage
	(*LuckyBoxMessage)(nil),                  // 261: LuckyBoxMessage
	(*UpdateFanTicketMessage)(nil),           // 262: UpdateFanTicketMessage
	(*ScreenChatMessage)(nil),                // 263: ScreenChatMessage
	(*Effect)(nil),                           // 264: Effect
	(*FlexImageStruct)(nil),                  // 265: FlexImageStruct
	(*ChatIdentity)(nil),                     // 266: ChatIdentity
	(*NotifyEffectMessage)(nil),              // 267: NotifyEffectMessage
	(*CombinedText)(nil),                     // 268: CombinedText
	(*ComboInfo)(nil),                        // 269: ComboInfo
	(*SchemaInfo)(nil),                       // 270: SchemaInfo
	(*DisplayItem)(nil),                      // 271: DisplayItem
	(*ImagesItem)(nil),                       // 272: ImagesItem
	(*TextItem)(nil),                         // 273: TextItem
	(*DisplayItemFormat)(nil),                // 274: DisplayItemFormat
	(*TempStateAreaReachMessage)(nil),        // 275: TempStateAreaReachMessage
	(*GrowthTask)(nil),                       // 276: GrowthTask
	(*GrowthTaskStage)(nil),                  // 277: GrowthTaskStage
	(*GrowthTaskReward)(nil),                 // 278: GrowthTaskReward
	(*GrowthTaskRewardDef)(nil),              // 279: GrowthTaskRewardDef
	(*GrowthTaskCondDef)(nil),                // 280: GrowthTaskCondDef
	(*GrowthTaskCondition)(nil),              // 281: GrowthTaskCondition
	(*GrowthTaskMessage)(nil),                // 282: GrowthTaskMessage
	(*GrowthTaskContributorRank)(nil),        // 283: GrowthTaskContributorRank
	(*GameCPBaseMessage)(nil),                // 284: GameCPBaseMessage
	(*GameCPShowMessage)(nil),                // 285: GameCPShowMessage
	(*ReserveItem)(nil),                      // 286: ReserveItem
	(*MiniGameMeta)(nil),                     // 287: MiniGameMeta
	(*MiniPlayMeta)(nil),                     // 288: MiniPlayMeta
	(*GameImageBundler)(nil),                 // 289: GameImageBundler
	(*GameImage)(nil),                        // 290: GameImage
	(*CloudGameMeta)(nil),                    // 291: CloudGameMeta
	(*AtmosphereContent)(nil),                // 292: AtmosphereContent
	(*FeaturedContent)(nil),                  // 293: FeaturedContent
	(*Content)(nil),                          // 294: Content
	(*IntroduceCardTag)(nil),                 // 295: IntroduceCardTag
	(*IntroduceCardDisplayInfo)(nil),         // 296: IntroduceCardDisplayInfo
	(*SandwichBorderMessage)(nil),            // 297: SandwichBorderMessage
	(*SandwichBorder)(nil),                   // 298: SandwichBorder
	(*LiveShoppingMessage)(nil),              // 299: LiveShoppingMessage
	(*LiveEcomGeneralMessage)(nil),           // 300: LiveEcomGeneralMessage
	(*TraceTimeMetricV2)(nil),                // 301: TraceTimeMetricV2
	(*FilterSwitchChangeData)(nil),           // 302: FilterSwitchChangeData
	(*UpIcon)(nil),                           // 303: UpIcon
	(*RoomTagOfflineInfo)(nil),               // 304: RoomTagOfflineInfo
	(*InteractionData)(nil),                  // 305: InteractionData
	(*InteractionContent)(nil),               // 306: InteractionContent
	(*InteractionContentCheck)(nil),          // 307: InteractionContentCheck
	(*InteractionElement)(nil),               // 308: InteractionElement
	(*InteractionAvatar)(nil),                // 309: InteractionAvatar
	(*UpdatedProductInfo)(nil),               // 310: UpdatedProductInfo
	(*UpdatedCouponInfo)(nil),                // 311: UpdatedCouponInfo
	(*UpdatedCampaignInfo)(nil),              // 312: UpdatedCampaignInfo
	(*SkuInfo)(nil),                          // 313: SkuInfo
	(*TraceTimeMetric)(nil),                  // 314: TraceTimeMetric
	(*UpdatedSkuInfo)(nil),                   // 315: UpdatedSkuInfo
	(*UpdatedCommentaryVideoInfo)(nil),       // 316: UpdatedCommentaryVideoInfo
	(*UpdatedGroupInfo)(nil),                 // 317: UpdatedGroupInfo
	(*AuctionSuccess)(nil),                   // 318: AuctionSuccess
	(*RedpackActivityInfo)(nil),              // 319: RedpackActivityInfo
	(*UpdatedCartInfo)(nil),                  // 320: UpdatedCartInfo
	(*LotteryProductShortInfo)(nil),          // 321: LotteryProductShortInfo
	(*LotteryInfo)(nil),                      // 322: LotteryInfo
	(*LotteryUnusualInfo)(nil),               // 323: LotteryUnusualInfo
	(*CartVertical)(nil),                     // 324: CartVertical
	(*CartHorizontal)(nil),                   // 325: CartHorizontal
	(*GlobalCustomIcons)(nil),                // 326: GlobalCustomIcons
	(*AuctionInfo)(nil),                      // 327: AuctionInfo
	(*CurrentUserInfo)(nil),                  // 328: CurrentUserInfo
	(*Img)(nil),                              // 329: Img
	(*IncrPriceList)(nil),                    // 330: IncrPriceList
	(*WinLotteryInfo)(nil),                   // 331: WinLotteryInfo
	(*WinLotteryAlert)(nil),                  // 332: WinLotteryAlert
	(*LotteryInfoList)(nil),                  // 333: LotteryInfoList
	(*BenefitLabel)(nil),                     // 334: BenefitLabel
	(*HotAtmosphere)(nil),                    // 335: HotAtmosphere
	nil,                                      // 336: Response.RouteParamsEntry
	nil,                                      // 337: TrayPostEffect.EventTrackingEntry
	nil,                                      // 338: MemberMessage.BuriedPointEntry
	nil,                                      // 339: MemberMessage.AlternativeEffectConfigEntry
	(*MemberMessage_EffectConfig)(nil),       // 340: MemberMessage.EffectConfig
	(*MemberMessage_PicoEffectConfig)(nil),   // 341: MemberMessage.PicoEffectConfig
	nil,                                      // 342: MemberMessage.EffectConfig.ExtraEntry
	nil,                                      // 343: MemberMessage.EffectConfig.PieceValuesEntry
	nil,                                      // 344: MemberMessage.PicoEffectConfig.ExtraEntry
	nil,                                      // 345: PublicAreaCommon.IndividualStrategyResultEntry
	nil,                                      // 346: PublicAreaCommon.TrackingParamsEntry
	nil,                                      // 347: EffectConfig.ExtraMapEntry
	nil,                                      // 348: Text.SchemaInfosEntry
	nil,                                      // 349: StreamUrl.ResolutionNameEntry
	nil,                                      // 350: StreamUrl.FlvPullUrlEntry
	nil,                                      // 351: StreamUrl.FlvPullUrlParamsEntry
	nil,                                      // 352: StreamUrl.HlsPullUrlMapEntry
	nil,                                      // 353: StreamUrl.PullDatasEntry
	nil,                                      // 354: StreamUrl.PushDatasEntry
	(*StreamUrlExtra_SuperResolution)(nil),   // 355: StreamUrlExtra.SuperResolution
	(*StreamUrlExtra_AnchorClientInfo)(nil),  // 356: StreamUrlExtra.AnchorClientInfo
	(*StreamUrlExtra_AdaptionInfo)(nil),      // 357: StreamUrlExtra.AdaptionInfo
	(*LiveCoreSDKData_PullData)(nil),         // 358: LiveCoreSDKData.PullData
	(*LiveCoreSDKData_PushData)(nil),         // 359: LiveCoreSDKData.PushData
	nil,                                      // 360: LiveCoreSDKData.PullData.HlsDataUnencryptedEntry
	(*LiveCoreSDKData_PullData_Options)(nil), // 361: LiveCoreSDKData.PullData.Options
	(*LiveCoreSDKData_PullData_Clip)(nil),    // 362: LiveCoreSDKData.PullData.Clip
	(*LiveCoreSDKData_PullData_CameraHorizontalPosition)(nil), // 363: LiveCoreSDKData.PullData.CameraHorizontalPosition
	(*LiveCoreSDKData_PullData_Extension)(nil),                // 364: LiveCoreSDKData.PullData.Extension
	(*LiveCoreSDKData_PullData_PlayInfo)(nil),                 // 365: LiveCoreSDKData.PullData.PlayInfo
	(*LiveCoreSDKData_PullData_Display)(nil),                  // 366: LiveCoreSDKData.PullData.Display
	(*LiveCoreSDKData_PullData_Options_Quality)(nil),          // 367: LiveCoreSDKData.PullData.Options.Quality
	nil, // 368: LiveCoreSDKData.PushData.ResolutionParamsEntry
	(*LiveCoreSDKData_PushData_ResolutionParams)(nil), // 369: LiveCoreSDKData.PushData.ResolutionParams
	nil, // 370: OpenStreamUrlEncrypt.FlvPullUrlEntry
	nil, // 371: OpenStreamUrlEncrypt.HlsPullUrlMapEntry
	nil, // 372: OpenStreamUrlEncrypt.PullDatasEntry
	(*RoomAuthStatus_RoomAuthOffReasons)(nil),         // 373: RoomAuthStatus.RoomAuthOffReasons
	(*RoomAuthStatus_RoomAuthSpecialStyle)(nil),       // 374: RoomAuthStatus.RoomAuthSpecialStyle
	(*RoomAuthStatus_RoomAuthSpecialStyle_Style)(nil), // 375: RoomAuthStatus.RoomAuthSpecialStyle.Style
	(*MatchSkinInfo_FollowBtnSkin)(nil),               // 376: MatchSkinInfo.FollowBtnSkin
	nil,                                               // 377: RoomShortTouchAreaConfig.ElementsEntry
	nil,                                               // 378: RoomShortTouchAreaConfig.ForbiddenTypesMapEntry
	nil,                                               // 379: RoomShortTouchAreaConfig.TempStateConditionMapEntry
	nil,                                               // 380: RoomShortTouchAreaConfig.TempStateStrategyEntry
	(*RoomShortTouchAreaConfig_Element)(nil),          // 381: RoomShortTouchAreaConfig.Element
	(*RoomShortTouchAreaConfig_ForbiddenType)(nil),            // 382: RoomShortTouchAreaConfig.ForbiddenType
	(*RoomShortTouchAreaConfig_TempStateType)(nil),            // 383: RoomShortTouchAreaConfig.TempStateType
	(*RoomShortTouchAreaConfig_TempStateCondition)(nil),       // 384: RoomShortTouchAreaConfig.TempStateCondition
	(*RoomShortTouchAreaConfig_TempStateStrategy)(nil),        // 385: RoomShortTouchAreaConfig.TempStateStrategy
	(*RoomShortTouchAreaConfig_TempStateGlobalCondition)(nil), // 386: RoomShortTouchAreaConfig.TempStateGlobalCondition
	nil, // 387: RoomShortTouchAreaConfig.TempStateStrategy.StrategyMapEntry
	(*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo)(nil), // 388: RoomShortTouchAreaConfig.TempStateStrategy.TempStateStrategyInfo
	nil,                                  // 389: GameExtra.DataEntry
	nil,                                  // 390: OfficialChannelInfo.DelayEnterTimeEntry
	(*RoomCart_CartVertical)(nil),        // 391: RoomCart.CartVertical
	(*RoomCart_CartHorizontal)(nil),      // 392: RoomCart.CartHorizontal
	(*RoomCart_GlobalCustomIcons)(nil),   // 393: RoomCart.GlobalCustomIcons
	(*BorderInfo_StaticBorderInfo)(nil),  // 394: BorderInfo.StaticBorderInfo
	(*BorderInfo_DynamicBorderInfo)(nil), // 395: BorderInfo.DynamicBorderInfo
	nil,                                  // 396: Room.DynamicCoverDictEntry
	nil,                                  // 397: Room.LinkerMapEntry
	nil,                                  // 398: Room.AnchorABMapEntry
	(*EasterEggData_Image)(nil),          // 399: EasterEggData.Image
	nil,                                  // 400: LinkerDetail.LinkerMapStrEntry
	nil,                                  // 401: LinkerDetail.PlaymodeDetailEntry
	(*VerticalTypeInfo_Image)(nil),       // 402: VerticalTypeInfo.Image
	(*ToolbarItemConfig_Image)(nil),      // 403: ToolbarItemConfig.Image
	(*ToolbarItemConfig_Toast)(nil),      // 404: ToolbarItemConfig.Toast
	(*EpisodePremierePlay_VsEpisodeHighLight)(nil),                                     // 405: EpisodePremierePlay.VsEpisodeHighLight
	(*EpisodePremierePlay_VsEpisodeHighLight_Image)(nil),                               // 406: EpisodePremierePlay.VsEpisodeHighLight.Image
	(*EpisodePreviewImage_Image)(nil),                                                  // 407: EpisodePreviewImage.Image
	(*VSGiftPannel_Image)(nil),                                                         // 408: VSGiftPannel.Image
	(*VSPannelIcon_Image)(nil),                                                         // 409: VSPannelIcon.Image
	(*VSCameraInfo_Image)(nil),                                                         // 410: VSCameraInfo.Image
	(*VSCameraInfo_StreamUrl)(nil),                                                     // 411: VSCameraInfo.StreamUrl
	(*VSCameraInfo_RoomAuthStatus)(nil),                                                // 412: VSCameraInfo.RoomAuthStatus
	(*VSCameraInfo_CameraPaidInfo)(nil),                                                // 413: VSCameraInfo.CameraPaidInfo
	(*VSCameraInfo_CameraMatchInfo)(nil),                                               // 414: VSCameraInfo.CameraMatchInfo
	(*VSWatermark_VSWatermarkIcon)(nil),                                                // 415: VSWatermark.VSWatermarkIcon
	(*VSItemComment_Image)(nil),                                                        // 416: VSItemComment.Image
	(*VSBar_VSItemBar)(nil),                                                            // 417: VSBar.VSItemBar
	(*VSLinkInfo_VSLinkNode)(nil),                                                      // 418: VSLinkInfo.VSLinkNode
	(*CommentConfig_CommentColor)(nil),                                                 // 419: CommentConfig.CommentColor
	(*CommentConfig_CommentRole)(nil),                                                  // 420: CommentConfig.CommentRole
	(*CommentConfig_CommentMedal)(nil),                                                 // 421: CommentConfig.CommentMedal
	nil,                                                                                // 422: MatchRoomInfo.MatchHostChannelEntry
	(*MatchRoomInfo_MatchTabFrame)(nil),                                                // 423: MatchRoomInfo.MatchTabFrame
	(*MatchRoomInfo_MatchTitle)(nil),                                                   // 424: MatchRoomInfo.MatchTitle
	(*MatchRoomInfo_ToutiaoMatchData)(nil),                                             // 425: MatchRoomInfo.ToutiaoMatchData
	(*MatchRoomInfo_Image)(nil),                                                        // 426: MatchRoomInfo.Image
	(*MatchRoomInfo_MatchRoomImInfo)(nil),                                              // 427: MatchRoomInfo.MatchRoomImInfo
	(*MatchRoomInfo_MatchShareBackground)(nil),                                         // 428: MatchRoomInfo.MatchShareBackground
	(*MatchRoomInfo_MatchTabFrame_MatchTab)(nil),                                       // 429: MatchRoomInfo.MatchTabFrame.MatchTab
	(*MatchRoomInfo_MatchTitle_TitleIcon)(nil),                                         // 430: MatchRoomInfo.MatchTitle.TitleIcon
	(*MatchRoomInfo_ToutiaoMatchData_Against)(nil),                                     // 431: MatchRoomInfo.ToutiaoMatchData.Against
	(*MatchRoomInfo_ToutiaoMatchData_TeamStats)(nil),                                   // 432: MatchRoomInfo.ToutiaoMatchData.TeamStats
	(*MatchRoomInfo_ToutiaoMatchData_PlayerStats)(nil),                                 // 433: MatchRoomInfo.ToutiaoMatchData.PlayerStats
	(*MatchRoomInfo_ToutiaoMatchData_Image)(nil),                                       // 434: MatchRoomInfo.ToutiaoMatchData.Image
	(*MatchRoomInfo_MatchRoomImInfo_Image)(nil),                                        // 435: MatchRoomInfo.MatchRoomImInfo.Image
	(*MatchRoomInfo_MatchShareBackground_Image)(nil),                                   // 436: MatchRoomInfo.MatchShareBackground.Image
	(*MultiCameraBasicInfo_Image)(nil),                                                 // 437: MultiCameraBasicInfo.Image
	(*SharePosterInfo_PosterData)(nil),                                                 // 438: SharePosterInfo.PosterData
	(*SharePosterInfo_Image)(nil),                                                      // 439: SharePosterInfo.Image
	nil,                                                                                // 440: EpisodeExtraInfo.PrivilegeInfoEntry
	(*MainCameraMatchInfo_ToutiaoMatchData)(nil),                                       // 441: MainCameraMatchInfo.ToutiaoMatchData
	(*MainCameraMatchInfo_LeagueInfo)(nil),                                             // 442: MainCameraMatchInfo.LeagueInfo
	(*MainCameraMatchInfo_ToutiaoMatchData_Against)(nil),                               // 443: MainCameraMatchInfo.ToutiaoMatchData.Against
	(*MainCameraMatchInfo_ToutiaoMatchData_TeamStats)(nil),                             // 444: MainCameraMatchInfo.ToutiaoMatchData.TeamStats
	(*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats)(nil),                           // 445: MainCameraMatchInfo.ToutiaoMatchData.PlayerStats
	(*MainCameraMatchInfo_ToutiaoMatchData_Image)(nil),                                 // 446: MainCameraMatchInfo.ToutiaoMatchData.Image
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_Image)(nil),                         // 447: MainCameraMatchInfo.ToutiaoMatchData.Against.Image
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo)(nil),                    // 448: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail)(nil),               // 449: MainCameraMatchInfo.ToutiaoMatchData.Against.GoalStageDetail
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail)(nil),     // 450: MainCameraMatchInfo.ToutiaoMatchData.Against.BasketBallGoalStageDetail
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage)(nil),               // 451: MainCameraMatchInfo.ToutiaoMatchData.Against.BasketballStage
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage)(nil),                  // 452: MainCameraMatchInfo.ToutiaoMatchData.Against.ESportsStage
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image)(nil),              // 453: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.Image
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo)(nil), // 454: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayByPlayItemInfo
	(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats)(nil),        // 455: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayerStats
	(*MultiTab_TabItem)(nil),                                                           // 456: MultiTab.TabItem
	(*MultiTab_Bubble)(nil),                                                            // 457: MultiTab.Bubble
	(*BusinessConfigure_ResourceConfigure)(nil),                                        // 458: BusinessConfigure.ResourceConfigure
	(*VSPremiereToast_Image)(nil),                                                      // 459: VSPremiereToast.Image
	nil,                                                                                // 460: PaidLiveData.PrivilegeInfoEntry
	nil,                                                                                // 461: PaidLiveData.PrivilegeInfoMapEntry
	(*PaidLiveData_TicketData)(nil),                                                    // 462: PaidLiveData.TicketData
	(*PaidLiveData_OrderData)(nil),                                                     // 463: PaidLiveData.OrderData
	(*PaidLiveData_AsyncAuthData)(nil),                                                 // 464: PaidLiveData.AsyncAuthData
	(*PaidLiveData_ProductsData)(nil),                                                  // 465: PaidLiveData.ProductsData
	nil,                                                                                // 466: PaidLiveData.TicketData.PriceInfoEntry
	(*PaidLiveData_TicketData_PaidLivePriceInfo)(nil),                                  // 467: PaidLiveData.TicketData.PaidLivePriceInfo
	(*PaidLiveData_TicketData_PaidLivePriceInfoV2)(nil),                                // 468: PaidLiveData.TicketData.PaidLivePriceInfoV2
	(*PaidLiveData_TicketData_TicketSkuDetail)(nil),                                    // 469: PaidLiveData.TicketData.TicketSkuDetail
	(*PaidLiveData_TicketData_SubscribeMemberMark)(nil),                                // 470: PaidLiveData.TicketData.SubscribeMemberMark
	(*PaidLiveData_ProductsData_ToolBar)(nil),                                          // 471: PaidLiveData.ProductsData.ToolBar
	(*PaidLiveData_ProductsData_ExplainCard)(nil),                                      // 472: PaidLiveData.ProductsData.ExplainCard
	(*Product_ProductBasicInfo)(nil),                                                   // 473: Product.ProductBasicInfo
	(*Product_ProductPriceStruct)(nil),                                                 // 474: Product.ProductPriceStruct
	(*Product_LiveInfo)(nil),                                                           // 475: Product.LiveInfo
	(*Product_ItemInfo)(nil),                                                           // 476: Product.ItemInfo
	(*Product_ContentInfo)(nil),                                                        // 477: Product.ContentInfo
	(*Product_PaymentArea)(nil),                                                        // 478: Product.PaymentArea
	(*Product_ProductPriceRichText)(nil),                                               // 479: Product.ProductPriceRichText
	(*Product_ProductComments)(nil),                                                    // 480: Product.ProductComments
	(*Product_ShareTicket)(nil),                                                        // 481: Product.ShareTicket
	(*Product_PrivilegeTicket)(nil),                                                    // 482: Product.PrivilegeTicket
	(*Product_Combined)(nil),                                                           // 483: Product.Combined
	(*Product_Comments)(nil),                                                           // 484: Product.Comments
	(*Product_Rating)(nil),                                                             // 485: Product.Rating
	(*Product_User)(nil),                                                               // 486: Product.User
	(*Product_Author)(nil),                                                             // 487: Product.Author
	(*Product_ProductBanner)(nil),                                                      // 488: Product.ProductBanner
	(*Product_SKU)(nil),                                                                // 489: Product.SKU
	(*Product_SubscribeMember)(nil),                                                    // 490: Product.SubscribeMember
	(*Product_FilterReason)(nil),                                                       // 491: Product.FilterReason
	(*Product_ProductBasicInfo_Introduction)(nil),                                      // 492: Product.ProductBasicInfo.Introduction
	(*Product_ProductBasicInfo_HeaderMedia)(nil),                                       // 493: Product.ProductBasicInfo.HeaderMedia
	(*Product_ProductBasicInfo_ProductTag)(nil),                                        // 494: Product.ProductBasicInfo.ProductTag
	(*Product_ProductBasicInfo_ContentTip)(nil),                                        // 495: Product.ProductBasicInfo.ContentTip
	(*Product_ProductBasicInfo_ProductSellingPoint)(nil),                               // 496: Product.ProductBasicInfo.ProductSellingPoint
	(*Product_ProductBasicInfo_ProductSaleInfo)(nil),                                   // 497: Product.ProductBasicInfo.ProductSaleInfo
	(*Product_ProductBasicInfo_RecentPurchasedUser)(nil),                               // 498: Product.ProductBasicInfo.RecentPurchasedUser
	(*Product_ProductBasicInfo_HeaderMedia_ViewButton)(nil),                            // 499: Product.ProductBasicInfo.HeaderMedia.ViewButton
	(*Product_PaymentArea_PayButton)(nil),                                              // 500: Product.PaymentArea.PayButton
	(*Product_PaymentArea_AdditionalButton)(nil),                                       // 501: Product.PaymentArea.AdditionalButton
	nil, // 502: Product.ProductPriceRichText.ExtraEntry
	(*Product_ProductPriceRichText_ProductRichText)(nil),                                   // 503: Product.ProductPriceRichText.ProductRichText
	(*Product_ProductComments_ProductComment)(nil),                                         // 504: Product.ProductComments.ProductComment
	(*Product_PrivilegeTicket_PrivilegeConfigure)(nil),                                     // 505: Product.PrivilegeTicket.PrivilegeConfigure
	(*Product_Combined_BindSubProductData)(nil),                                            // 506: Product.Combined.BindSubProductData
	(*Product_Combined_ParentProductSimpleData)(nil),                                       // 507: Product.Combined.ParentProductSimpleData
	(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData)(nil),                    // 508: Product.Combined.ParentProductSimpleData.PurchaseSimpleData
	(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag)(nil),         // 509: Product.Combined.ParentProductSimpleData.PurchaseSimpleData.ProductTag
	(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct)(nil), // 510: Product.Combined.ParentProductSimpleData.PurchaseSimpleData.ProductPriceStruct
	(*Product_Comments_TextInfo)(nil),                                                      // 511: Product.Comments.TextInfo
	(*Product_Comments_TextInfo_UserInfo)(nil),                                             // 512: Product.Comments.TextInfo.UserInfo
	(*Product_Author_AuthorBasicInfo)(nil),                                                 // 513: Product.Author.AuthorBasicInfo
	(*Product_Author_User)(nil),                                                            // 514: Product.Author.User
	(*Product_SKU_RelatedSkuSimpleInfo)(nil),                                               // 515: Product.SKU.RelatedSkuSimpleInfo
	(*Product_SKU_CameraInfo)(nil),                                                         // 516: Product.SKU.CameraInfo
	(*Product_SKU_EntityIDsMap)(nil),                                                       // 517: Product.SKU.EntityIDsMap
	(*Product_SKU_LimitedFreeNotice)(nil),                                                  // 518: Product.SKU.LimitedFreeNotice
	(*Product_SKU_Image)(nil),                                                              // 519: Product.SKU.Image
	(*Product_SubscribeMember_ProductPriceStruct)(nil),                                     // 520: Product.SubscribeMember.ProductPriceStruct
	(*PrivilegeInfo_PaidLiveItemInfo)(nil),                                                 // 521: PrivilegeInfo.PaidLiveItemInfo
	(*PrivilegeInfo_PrivilegeBaseInfo)(nil),                                                // 522: PrivilegeInfo.PrivilegeBaseInfo
	(*PrivilegeInfo_PrivilegeUrl)(nil),                                                     // 523: PrivilegeInfo.PrivilegeUrl
	(*PrivilegeInfo_PaidLiveUIBaseConfig)(nil),                                             // 524: PrivilegeInfo.PaidLiveUIBaseConfig
	(*PrivilegeInfo_PaidLiveConfig)(nil),                                                   // 525: PrivilegeInfo.PaidLiveConfig
	(*PrivilegeInfo_PaidLiveUIBaseConfig_Image)(nil),                                       // 526: PrivilegeInfo.PaidLiveUIBaseConfig.Image
	(*PrivilegeInfo_PaidLiveConfig_Image)(nil),                                             // 527: PrivilegeInfo.PaidLiveConfig.Image
	(*PrivilegeInfo_PaidLiveConfig_PriceInfo)(nil),                                         // 528: PrivilegeInfo.PaidLiveConfig.PriceInfo
	(*PrivilegeInfo_PaidLiveConfig_UserRight)(nil),                                         // 529: PrivilegeInfo.PaidLiveConfig.UserRight
	(*FeedbackCard_Question)(nil),                                                          // 530: FeedbackCard.Question
	(*FeedbackCard_Option)(nil),                                                            // 531: FeedbackCard.Option
	(*FeedbackCard_RoomCardStruct)(nil),                                                    // 532: FeedbackCard.RoomCardStruct
	(*FeedbackCard_Condition)(nil),                                                         // 533: FeedbackCard.Condition
	(*FeedbackCard_ClientImpression)(nil),                                                  // 534: FeedbackCard.ClientImpression
	nil,                                                                                    // 535: ToolBarData.SkinResourceEntry
	(*UnionLiveInfo_GuestAnchor)(nil),                                                      // 536: UnionLiveInfo.GuestAnchor
	(*RelevantRecommendation_HighLightInfo)(nil),                                           // 537: RelevantRecommendation.HighLightInfo
	(*RelevantRecommendation_EcomInfo)(nil),                                                // 538: RelevantRecommendation.EcomInfo
	(*RelevantRecommendation_VsInfo)(nil),                                                  // 539: RelevantRecommendation.VsInfo
	(*RelevantRecommendation_WhiteCategoryInfo)(nil),                                       // 540: RelevantRecommendation.WhiteCategoryInfo
	(*RelevantRecommendation_VsInfo_Episode)(nil),                                          // 541: RelevantRecommendation.VsInfo.Episode
	(*IndustryServiceInfo_ConsultInfo)(nil),                                                // 542: IndustryServiceInfo.ConsultInfo
	nil,                                                                                    // 543: MatchUserInfo.UserQuizInfoEntry
	nil,                                                                                    // 544: PackMetaInfo.ExtrasEntry
	nil,                                                                                    // 545: InteractOpenExtra.DebugInfoEntry
	(*PreviewExposeData_PreviewGuide)(nil),                                                 // 546: PreviewExposeData.PreviewGuide
	(*PreviewExposeData_Meta)(nil),                                                         // 547: PreviewExposeData.Meta
	(*PreviewExposeData_ChatMessage)(nil),                                                  // 548: PreviewExposeData.ChatMessage
	(*PreviewExposeData_PreviewExtendArea)(nil),                                            // 549: PreviewExposeData.PreviewExtendArea
	(*PreviewExposeData_PreviewSwitch)(nil),                                                // 550: PreviewExposeData.PreviewSwitch
	(*PreviewExposeData_PreviewPromotion)(nil),                                             // 551: PreviewExposeData.PreviewPromotion
	(*PreviewExposeData_PreviewIMExtend)(nil),                                              // 552: PreviewExposeData.PreviewIMExtend
	(*PreviewExposeData_EtData)(nil),                                                       // 553: PreviewExposeData.EtData
	(*PreviewExposeData_GrowthTask)(nil),                                                   // 554: PreviewExposeData.GrowthTask
	(*PreviewExposeData_PreviewPromotionSyncData)(nil),                                     // 555: PreviewExposeData.PreviewPromotionSyncData
	(*PreviewExposeData_PreviewExitGuide)(nil),                                             // 556: PreviewExposeData.PreviewExitGuide
	(*PreviewExposeData_EnterPublicAreaAnimation)(nil),                                     // 557: PreviewExposeData.EnterPublicAreaAnimation
	(*PreviewExposeData_ClientComponent)(nil),                                              // 558: PreviewExposeData.ClientComponent
	(*PreviewExposeData_ClientComponentInfo)(nil),                                          // 559: PreviewExposeData.ClientComponentInfo
	(*PreviewExposeData_IOSClientComponent)(nil),                                           // 560: PreviewExposeData.IOSClientComponent
	(*PreviewExposeData_IOSFragment)(nil),                                                  // 561: PreviewExposeData.IOSFragment
	(*PreviewExposeData_IOSContainerLayout)(nil),                                           // 562: PreviewExposeData.IOSContainerLayout
	nil,                                 // 563: PreviewExposeData.PreviewGuide.EtExtraEntry
	(*PreviewExposeData_Meta_Host)(nil), // 564: PreviewExposeData.Meta.Host
	nil,                                 // 565: PreviewExposeData.PreviewExtendArea.ExtraEnterRoomEntry
	nil,                                 // 566: PreviewExposeData.PreviewExtendArea.EtExtraEntry
	(*PreviewExposeData_PreviewExtendArea_Part)(nil),         // 567: PreviewExposeData.PreviewExtendArea.Part
	(*PreviewExposeData_PreviewExtendArea_ActionConfig)(nil), // 568: PreviewExposeData.PreviewExtendArea.ActionConfig
	nil, // 569: PreviewExposeData.PreviewExtendArea.ActionConfig.ActionPramsEntry
	(*PreviewExposeData_PreviewPromotion_EmojiDetail)(nil), // 570: PreviewExposeData.PreviewPromotion.EmojiDetail
	nil, // 571: PreviewExposeData.GrowthTask.ExtraEntry
	(*PreviewExposeData_PreviewPromotionSyncData_LuckyBag)(nil),   // 572: PreviewExposeData.PreviewPromotionSyncData.LuckyBag
	(*PreviewExposeData_PreviewPromotionSyncData_LuckyMoney)(nil), // 573: PreviewExposeData.PreviewPromotionSyncData.LuckyMoney
	(*PreviewExposeData_PreviewExitGuide_User)(nil),               // 574: PreviewExposeData.PreviewExitGuide.User
	nil,                                  // 575: PreviewExposeData.ClientComponent.PortraitComponentMapEntry
	nil,                                  // 576: PreviewExposeData.ClientComponent.LandscapeComponentMapEntry
	nil,                                  // 577: PreviewExposeData.ClientComponent.PreviewDefaultComponentMapEntry
	(*Appearance_Bubble)(nil),            // 578: Appearance.Bubble
	(*Appearance_ContentTag)(nil),        // 579: Appearance.ContentTag
	(*Appearance_WideCover)(nil),         // 580: Appearance.WideCover
	(*Appearance_MoreEntrance)(nil),      // 581: Appearance.MoreEntrance
	(*Appearance_ToolbarItemConfig)(nil), // 582: Appearance.ToolbarItemConfig
	(*Appearance_PreviewLabel)(nil),      // 583: Appearance.PreviewLabel
	(*Appearance_ToolbarItemConfig_Toast)(nil), // 584: Appearance.ToolbarItemConfig.Toast
	nil, // 585: ShareResource.QrcodeEntry
	nil, // 586: ClientComponent.PortraitComponentMapEntry
	nil, // 587: ClientComponent.LandscapeComponentMapEntry
	nil, // 588: ClientComponent.PreviewDefaultComponentMapEntry
	(*ClientComponent_ClientComponentInfo)(nil), // 589: ClientComponent.ClientComponentInfo
	nil,                                                      // 590: ClientComponent.ClientComponentInfo.ConfigEntry
	(*RoomChannelData_RoomChannelInfo)(nil),                  // 591: RoomChannelData.RoomChannelInfo
	(*RoomChannelData_Image)(nil),                            // 592: RoomChannelData.Image
	(*OpenContentData_OpenActivityData)(nil),                 // 593: OpenContentData.OpenActivityData
	nil,                                                      // 594: OpenContentData.OpenActivityData.MetadataEntry
	nil,                                                      // 595: LabelInfo.EtExtraEntry
	(*LabelInfo_SpliceLabel)(nil),                            // 596: LabelInfo.SpliceLabel
	(*LabelInfo_ProfilePicSpliceLabel)(nil),                  // 597: LabelInfo.ProfilePicSpliceLabel
	(*RoomFeedData_StreamCutPosition)(nil),                   // 598: RoomFeedData.StreamCutPosition
	(*RoomFeedData_FollowTopAppearance)(nil),                 // 599: RoomFeedData.FollowTopAppearance
	(*RoomFeedData_DrawerConfig)(nil),                        // 600: RoomFeedData.DrawerConfig
	(*RoomFeedData_DrawerConfig_AvatarArea)(nil),             // 601: RoomFeedData.DrawerConfig.AvatarArea
	(*RoomFeedData_DrawerConfig_EntranceIcon)(nil),           // 602: RoomFeedData.DrawerConfig.EntranceIcon
	(*RoomFeedData_DrawerConfig_EntranceTitle)(nil),          // 603: RoomFeedData.DrawerConfig.EntranceTitle
	(*RoomFeedData_DrawerConfig_ArrowView)(nil),              // 604: RoomFeedData.DrawerConfig.ArrowView
	(*RoomFeedData_DrawerConfig_EntranceLayout)(nil),         // 605: RoomFeedData.DrawerConfig.EntranceLayout
	(*RoomFeedData_DrawerConfig_SpecialConfig)(nil),          // 606: RoomFeedData.DrawerConfig.SpecialConfig
	(*RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo)(nil), // 607: RoomFeedData.DrawerConfig.SpecialConfig.FreqInfo
	(*RoomGameData_RoomGameDataChannelConfig)(nil),           // 608: RoomGameData.RoomGameDataChannelConfig
	(*RoomGameData_GameTagInfo)(nil),                         // 609: RoomGameData.GameTagInfo
	(*RoomGameData_SandwichBorderInfo)(nil),                  // 610: RoomGameData.SandwichBorderInfo
	nil,                                                      // 611: PicoInfo.StreamMappingEntry
	(*PicoInfo_VirtualLiveBgImages)(nil),                     // 612: PicoInfo.VirtualLiveBgImages
	(*PicoInfo_VirtualLiveBgImages_ConvertedImage)(nil),      // 613: PicoInfo.VirtualLiveBgImages.ConvertedImage
	(*RoomOthersData_DecotationDetail)(nil),                  // 614: RoomOthersData.DecotationDetail
	(*RoomOthersData_MorePanelData)(nil),                     // 615: RoomOthersData.MorePanelData
	(*RoomOthersData_AppointmentData)(nil),                   // 616: RoomOthersData.AppointmentData
	(*RoomOthersData_WebSkinData)(nil),                       // 617: RoomOthersData.WebSkinData
	(*RoomOthersData_WebProgramme)(nil),                      // 618: RoomOthersData.WebProgramme
	(*RoomOthersData_LiveMatrixInfo)(nil),                    // 619: RoomOthersData.LiveMatrixInfo
	(*RoomOthersData_WebLivePortOptimization)(nil),           // 620: RoomOthersData.WebLivePortOptimization
	(*RoomOthersData_GiftPanelTopperTray)(nil),               // 621: RoomOthersData.GiftPanelTopperTray
	(*RoomOthersData_EnterGiftAnimation)(nil),                // 622: RoomOthersData.EnterGiftAnimation
	(*RoomOthersData_PaidLiveSubscribe)(nil),                 // 623: RoomOthersData.PaidLiveSubscribe
	(*RoomOthersData_GroupLiveData)(nil),                     // 624: RoomOthersData.GroupLiveData
	(*RoomOthersData_WebEnterBenefitPointData)(nil),          // 625: RoomOthersData.WebEnterBenefitPointData
	(*RoomOthersData_StreamRecognitionContainers)(nil),       // 626: RoomOthersData.StreamRecognitionContainers
	(*RoomOthersData_AnchorBottomToolBar)(nil),               // 627: RoomOthersData.AnchorBottomToolBar
	(*RoomOthersData_AnchorTogetherLive)(nil),                // 628: RoomOthersData.AnchorTogetherLive
	(*RoomRevenueData_OpenGame)(nil),                         // 629: RoomRevenueData.OpenGame
	(*RoomRevenueData_AnchorLinkmic)(nil),                    // 630: RoomRevenueData.AnchorLinkmic
	(*RoomAnchorData_GameAnchorInfo)(nil),                    // 631: RoomAnchorData.GameAnchorInfo
	(*RoomInteractData_EpisodeExtraInfo)(nil),                // 632: RoomInteractData.EpisodeExtraInfo
	(*RoomInteractData_FeaturedPublicScreenConf)(nil),        // 633: RoomInteractData.FeaturedPublicScreenConf
	(*RoomInteractData_PublicScreenSpeedConf)(nil),           // 634: RoomInteractData.PublicScreenSpeedConf
	(*RoomInteractData_RoomIntroLabel)(nil),                  // 635: RoomInteractData.RoomIntroLabel
	(*Bonus_BonusAuthor)(nil),                                // 636: Bonus.BonusAuthor
	(*Bonus_BonusCommerce)(nil),                              // 637: Bonus.BonusCommerce
	(*PublicScreenBottomInfo_BottomCard)(nil),                // 638: PublicScreenBottomInfo.BottomCard
	nil,                                      // 639: LiveStatusInfo.LiveNotifyLightEntry
	(*CastScreenData_CastOttPermission)(nil), // 640: CastScreenData.CastOttPermission
	nil,                                      // 641: ActivityRoomSkinInfo.VerticalScreenEntry
	nil,                                      // 642: ActivityRoomSkinInfo.HorizontalScreenEntry
	(*ActivityLiveRecommendConfig_EpisodeInfo)(nil), // 643: ActivityLiveRecommendConfig.EpisodeInfo
	(*RoomTitle_TitleIcon)(nil),                     // 644: RoomTitle.TitleIcon
	nil,                                             // 645: AnchorTabLabel.TrackParamsEntry
	(*DSLDetail_ExtraInfo)(nil),                     // 646: DSLDetail.ExtraInfo
	(*RoomStats_UserCountComposition)(nil),          // 647: RoomStats.UserCountComposition
	(*LinkMic_LinkMicChannelInfo)(nil),              // 648: LinkMic.LinkMicChannelInfo
	(*LinkMic_LinkMicBattleScore)(nil),              // 649: LinkMic.LinkMicBattleScore
	(*LinkMic_LinkMicBattleSetting)(nil),            // 650: LinkMic.LinkMicBattleSetting
	nil,                                             // 651: FansClub.PreferDataEntry
	nil,                                             // 652: UserBadge.IconsEntry
	(*Rsp_F)(nil),                                   // 653: Rsp.F
	(*RoomRankMessage_RoomRank)(nil),                // 654: RoomRankMessage.RoomRank
	nil,                                             // 655: RoomMessage.BuriedPointMapEntry
	(*RanklistHourEntrance_Info)(nil),               // 656: RanklistHourEntrance.Info
	(*RanklistHourEntrance_Detail)(nil),             // 657: RanklistHourEntrance.Detail
	(*RanklistHourEntrance_Page)(nil),               // 658: RanklistHourEntrance.Page
	(*LinkMicAudienceKtvMessage_SongUniqueInfo)(nil), // 659: LinkMicAudienceKtvMessage.SongUniqueInfo
	nil,                                      // 660: KtvSongStruct.ExtEntry
	(*KtvSongStruct_AudioInfo)(nil),          // 661: KtvSongStruct.AudioInfo
	(*KtvSongStruct_OrderInfo)(nil),          // 662: KtvSongStruct.OrderInfo
	(*KtvSongStruct_ChallengeInfo)(nil),      // 663: KtvSongStruct.ChallengeInfo
	nil,                                      // 664: HotChatMessage.ExtraEntry
	(*NotifyMessage_Extra)(nil),              // 665: NotifyMessage.Extra
	(*NotifyMessage_Background)(nil),         // 666: NotifyMessage.Background
	(*NotifyMessage_Content)(nil),            // 667: NotifyMessage.Content
	(*NotifyMessage_ContentList)(nil),        // 668: NotifyMessage.ContentList
	nil,                                      // 669: NotifyMessage.Extra.ParamsEntry
	(*LuckyBoxMessage_ImgText)(nil),          // 670: LuckyBoxMessage.ImgText
	(*LuckyBoxMessage_BoxMeta)(nil),          // 671: LuckyBoxMessage.BoxMeta
	(*LuckyBoxMessage_Extra)(nil),            // 672: LuckyBoxMessage.Extra
	(*LuckyBoxMessage_BottomCommentMsg)(nil), // 673: LuckyBoxMessage.BottomCommentMsg
	(*LuckyBoxMessage_Dress)(nil),            // 674: LuckyBoxMessage.Dress
	nil,                                      // 675: LuckyBoxMessage.Extra.AllDescEntry
	nil,                                      // 676: LuckyBoxMessage.Extra.AllImageEntry
	nil,                                      // 677: LuckyBoxMessage.Dress.JumpSchemaToBoxEntry
	nil,                                      // 678: LuckyBoxMessage.Dress.JumpSchemaToDressEntry
	(*ScreenChatMessage_OfficialCommentConfig)(nil), // 679: ScreenChatMessage.OfficialCommentConfig
	nil,                                    // 680: NotifyEffectMessage.BuriedPointEntry
	(*NotifyEffectMessage_Background)(nil), // 681: NotifyEffectMessage.Background
	(*NotifyEffectMessage_DynamicConfig)(nil),      // 682: NotifyEffectMessage.DynamicConfig
	(*NotifyEffectMessage_BindingGiftMessage)(nil), // 683: NotifyEffectMessage.BindingGiftMessage
	(*NotifyEffectMessage_SceneConfig)(nil),        // 684: NotifyEffectMessage.SceneConfig
	(*TempStateAreaReachMessage_Resource)(nil),     // 685: TempStateAreaReachMessage.Resource
	(*GrowthTaskMessage_CurrentContribution)(nil),  // 686: GrowthTaskMessage.CurrentContribution
	nil, // 687: GrowthTaskMessage.CurrentContribution.DeltaInfoEntry
	nil, // 688: InteractionContent.EventParamEntry
	nil, // 689: UpdatedSkuInfo.SkusEntry
}
var file_douyin_proto_depIdxs = []int32{
	3,    // 0: Response.messagesList:type_name -> Message
	336,  // 1: Response.routeParams:type_name -> Response.RouteParamsEntry
	48,   // 2: EmojiChatMessage.common:type_name -> Common
	208,  // 3: EmojiChatMessage.user:type_name -> User
	31,   // 4: EmojiChatMessage.emojiContent:type_name -> Text
	178,  // 5: EmojiChatMessage.backgroundImage:type_name -> Image
	27,   // 6: EmojiChatMessage.public_area_common:type_name -> PublicAreaCommon
	48,   // 7: ChatMessage.common:type_name -> Common
	208,  // 8: ChatMessage.user:type_name -> User
	178,  // 9: ChatMessage.backgroundImage:type_name -> Image
	178,  // 10: ChatMessage.backgroundImageV2:type_name -> Image
	27,   // 11: ChatMessage.publicAreaCommon:type_name -> PublicAreaCommon
	178,  // 12: ChatMessage.giftImage:type_name -> Image
	6,    // 13: ChatMessage.landscapeAreaCommon:type_name -> LandscapeAreaCommon
	31,   // 14: ChatMessage.rtfContent:type_name -> Text
	0,    // 15: LandscapeAreaCommon.commentTypeTagsList:type_name -> CommentTypeTag
	48,   // 16: RoomUserSeqMessage.common:type_name -> Common
	9,    // 17: RoomUserSeqMessage.ranksList:type_name -> RoomUserSeqMessageContributor
	9,    // 18: RoomUserSeqMessage.seatsList:type_name -> RoomUserSeqMessageContributor
	48,   // 19: CommonTextMessage.common:type_name -> Common
	208,  // 20: CommonTextMessage.user:type_name -> User
	208,  // 21: RoomUserSeqMessageContributor.user:type_name -> User
	48,   // 22: GiftMessage.common:type_name -> Common
	208,  // 23: GiftMessage.user:type_name -> User
	208,  // 24: GiftMessage.to_user:type_name -> User
	24,   // 25: GiftMessage.text_effect:type_name -> TextEffect
	23,   // 26: GiftMessage.priority:type_name -> GiftIMPriority
	22,   // 27: GiftMessage.gift:type_name -> GiftStruct
	27,   // 28: GiftMessage.public_area_common:type_name -> PublicAreaCommon
	31,   // 29: GiftMessage.tray_display_text:type_name -> Text
	19,   // 30: GiftMessage.tray_info:type_name -> GiftTrayInfo
	16,   // 31: GiftMessage.asset_effect_mix_info:type_name -> AssetEffectMixInfo
	17,   // 32: GiftMessage.anchor_gift:type_name -> AnchorGiftData
	15,   // 33: GiftMessage.send_together:type_name -> SendTogether
	14,   // 34: GiftMessage.extra_effect:type_name -> ExtraEffect
	13,   // 35: GiftMessage.room_hot_info:type_name -> RoomHotInfo
	11,   // 36: GiftMessage.series_gift_data:type_name -> SeriesPlayGift
	22,   // 37: SeriesPlayGift.gift_struct:type_name -> GiftStruct
	12,   // 38: SeriesPlayGift.series_tray_info:type_name -> SeriesTrayInfo
	15,   // 39: SeriesPlayGift.send_together:type_name -> SendTogether
	17,   // 40: SeriesPlayGift.anchor_gift:type_name -> AnchorGiftData
	16,   // 41: SeriesPlayGift.asset_effect_mix_info:type_name -> AssetEffectMixInfo
	178,  // 42: SeriesTrayInfo.static_img:type_name -> Image
	178,  // 43: SeriesTrayInfo.dynamic_img:type_name -> Image
	18,   // 44: AssetEffectMixInfo.effect_mix_image_infos:type_name -> EffectMixImageInfo
	178,  // 45: AnchorGiftData.anchor_diy_origin_img:type_name -> Image
	178,  // 46: EffectMixImageInfo.mix_image:type_name -> Image
	31,   // 47: GiftTrayInfo.tray_display_text:type_name -> Text
	178,  // 48: GiftTrayInfo.tray_base_img:type_name -> Image
	178,  // 49: GiftTrayInfo.tray_head_img:type_name -> Image
	178,  // 50: GiftTrayInfo.tray_right_img:type_name -> Image
	178,  // 51: GiftTrayInfo.tray_dynamic_img:type_name -> Image
	178,  // 52: GiftTrayInfo.tray_base_img_v2:type_name -> Image
	178,  // 53: GiftTrayInfo.tray_right_img_v2:type_name -> Image
	21,   // 54: GiftTrayInfo.tray_pre_effect:type_name -> TrayPreEffect
	20,   // 55: GiftTrayInfo.tray_post_effect:type_name -> TrayPostEffect
	178,  // 56: GiftTrayInfo.tray_base_webp_img:type_name -> Image
	178,  // 57: TrayPostEffect.post_effect_img:type_name -> Image
	31,   // 58: TrayPostEffect.sub_title:type_name -> Text
	337,  // 59: TrayPostEffect.event_tracking:type_name -> TrayPostEffect.EventTrackingEntry
	178,  // 60: TrayPreEffect.pre_effect_img:type_name -> Image
	178,  // 61: TrayPreEffect.tray_ripple:type_name -> Image
	178,  // 62: GiftStruct.image:type_name -> Image
	178,  // 63: GiftStruct.giftLabelIcon:type_name -> Image
	178,  // 64: GiftStruct.icon:type_name -> Image
	25,   // 65: TextEffect.portrait:type_name -> TextEffectDetail
	25,   // 66: TextEffect.landscape:type_name -> TextEffectDetail
	31,   // 67: TextEffectDetail.text:type_name -> Text
	178,  // 68: TextEffectDetail.background:type_name -> Image
	48,   // 69: MemberMessage.common:type_name -> Common
	208,  // 70: MemberMessage.user:type_name -> User
	208,  // 71: MemberMessage.operator:type_name -> User
	340,  // 72: MemberMessage.effect_config:type_name -> MemberMessage.EffectConfig
	340,  // 73: MemberMessage.enter_effect_config:type_name -> MemberMessage.EffectConfig
	178,  // 74: MemberMessage.background_image:type_name -> Image
	178,  // 75: MemberMessage.background_image_v2:type_name -> Image
	31,   // 76: MemberMessage.anchor_display_text:type_name -> Text
	27,   // 77: MemberMessage.public_area_common:type_name -> PublicAreaCommon
	338,  // 78: MemberMessage.buried_point:type_name -> MemberMessage.BuriedPointEntry
	339,  // 79: MemberMessage.alternative_effect_config:type_name -> MemberMessage.AlternativeEffectConfigEntry
	341,  // 80: MemberMessage.pico_enter_effect_config:type_name -> MemberMessage.PicoEffectConfig
	178,  // 81: PublicAreaCommon.user_label:type_name -> Image
	28,   // 82: PublicAreaCommon.suffix_text:type_name -> SuffixText
	29,   // 83: PublicAreaCommon.reply_resp:type_name -> ChatReplyRespInfo
	345,  // 84: PublicAreaCommon.individual_strategy_result:type_name -> PublicAreaCommon.IndividualStrategyResultEntry
	346,  // 85: PublicAreaCommon.tracking_params:type_name -> PublicAreaCommon.TrackingParamsEntry
	31,   // 86: SuffixText.text:type_name -> Text
	31,   // 87: ChatReplyRespInfo.reply_text:type_name -> Text
	178,  // 88: EffectConfig.icon:type_name -> Image
	31,   // 89: EffectConfig.text:type_name -> Text
	178,  // 90: EffectConfig.textIcon:type_name -> Image
	178,  // 91: EffectConfig.badge:type_name -> Image
	178,  // 92: EffectConfig.textIconOverlay:type_name -> Image
	178,  // 93: EffectConfig.animatedBadge:type_name -> Image
	178,  // 94: EffectConfig.dynamicImage:type_name -> Image
	347,  // 95: EffectConfig.extraMap:type_name -> EffectConfig.ExtraMapEntry
	39,   // 96: Text.default_format:type_name -> TextFormat
	32,   // 97: Text.pieces:type_name -> TextPiece
	348,  // 98: Text.schema_infos:type_name -> Text.SchemaInfosEntry
	39,   // 99: TextPiece.format:type_name -> TextFormat
	38,   // 100: TextPiece.uservalue:type_name -> TextPieceUser
	36,   // 101: TextPiece.giftvalue:type_name -> TextPieceGift
	35,   // 102: TextPiece.heartvalue:type_name -> TextPieceHeart
	34,   // 103: TextPiece.patternrefvalue:type_name -> TextPiecePatternRef
	33,   // 104: TextPiece.imagevalue:type_name -> TextPieceImage
	178,  // 105: TextPieceImage.image:type_name -> Image
	37,   // 106: TextPieceGift.nameRef:type_name -> PatternRef
	208,  // 107: TextPieceUser.user:type_name -> User
	48,   // 108: LikeMessage.common:type_name -> Common
	208,  // 109: LikeMessage.user:type_name -> User
	43,   // 110: LikeMessage.doubleLikeDetail:type_name -> DoubleLikeDetail
	44,   // 111: LikeMessage.displayControlInfo:type_name -> DisplayControlInfo
	42,   // 112: LikeMessage.picoDisplayInfo:type_name -> PicoDisplayInfo
	48,   // 113: SocialMessage.common:type_name -> Common
	208,  // 114: SocialMessage.user:type_name -> User
	27,   // 115: SocialMessage.publicAreaCommon:type_name -> PublicAreaCommon
	178,  // 116: PicoDisplayInfo.emojiIcon:type_name -> Image
	3,    // 117: EpisodeChatMessage.common:type_name -> Message
	208,  // 118: EpisodeChatMessage.user:type_name -> User
	178,  // 119: EpisodeChatMessage.giftImage:type_name -> Image
	48,   // 120: MatchAgainstScoreMessage.common:type_name -> Common
	47,   // 121: MatchAgainstScoreMessage.against:type_name -> Against
	178,  // 122: Against.leftLogo:type_name -> Image
	178,  // 123: Against.rightLogo:type_name -> Image
	31,   // 124: Common.display_text:type_name -> Text
	208,  // 125: Common.user:type_name -> User
	71,   // 126: Common.room:type_name -> Room
	349,  // 127: StreamUrl.resolution_name:type_name -> StreamUrl.ResolutionNameEntry
	52,   // 128: StreamUrl.extra:type_name -> StreamUrlExtra
	350,  // 129: StreamUrl.flv_pull_url:type_name -> StreamUrl.FlvPullUrlEntry
	351,  // 130: StreamUrl.flv_pull_url_params:type_name -> StreamUrl.FlvPullUrlParamsEntry
	53,   // 131: StreamUrl.live_core_sdk_data:type_name -> LiveCoreSDKData
	352,  // 132: StreamUrl.hls_pull_url_map:type_name -> StreamUrl.HlsPullUrlMapEntry
	353,  // 133: StreamUrl.pull_datas:type_name -> StreamUrl.PullDatasEntry
	54,   // 134: StreamUrl.play:type_name -> PlaySetting
	354,  // 135: StreamUrl.push_datas:type_name -> StreamUrl.PushDatasEntry
	55,   // 136: StreamUrl.open_stream_url_encrypt:type_name -> OpenStreamUrlEncrypt
	355,  // 137: StreamUrlExtra.super_resolution:type_name -> StreamUrlExtra.SuperResolution
	356,  // 138: StreamUrlExtra.anchor_client_info:type_name -> StreamUrlExtra.AnchorClientInfo
	357,  // 139: StreamUrlExtra.adaption_info:type_name -> StreamUrlExtra.AdaptionInfo
	358,  // 140: LiveCoreSDKData.pull_data:type_name -> LiveCoreSDKData.PullData
	359,  // 141: LiveCoreSDKData.push_data:type_name -> LiveCoreSDKData.PushData
	370,  // 142: OpenStreamUrlEncrypt.flv_pull_url:type_name -> OpenStreamUrlEncrypt.FlvPullUrlEntry
	365,  // 143: OpenStreamUrlEncrypt.Hls:type_name -> LiveCoreSDKData.PullData.PlayInfo
	365,  // 144: OpenStreamUrlEncrypt.Flv:type_name -> LiveCoreSDKData.PullData.PlayInfo
	371,  // 145: OpenStreamUrlEncrypt.hls_pull_url_map:type_name -> OpenStreamUrlEncrypt.HlsPullUrlMapEntry
	372,  // 146: OpenStreamUrlEncrypt.pull_datas:type_name -> OpenStreamUrlEncrypt.PullDatasEntry
	49,   // 147: RoomExtra.enter_region_restriction:type_name -> RegionRestriction
	50,   // 148: RoomExtra.enter_region_match:type_name -> RegionMatch
	56,   // 149: RoomExtra.filter_with_no_context:type_name -> SafeReason
	57,   // 150: RoomExtra.realtime_playback_qualities:type_name -> Quality
	373,  // 151: RoomAuthStatus.OffReason:type_name -> RoomAuthStatus.RoomAuthOffReasons
	374,  // 152: RoomAuthStatus.SpecialStyle:type_name -> RoomAuthStatus.RoomAuthSpecialStyle
	178,  // 153: RoomActivityTag.icon:type_name -> Image
	63,   // 154: MatchInfo.skin:type_name -> MatchSkinInfo
	376,  // 155: MatchSkinInfo.unfollow_skin:type_name -> MatchSkinInfo.FollowBtnSkin
	376,  // 156: MatchSkinInfo.followed_skin:type_name -> MatchSkinInfo.FollowBtnSkin
	178,  // 157: MatchSkinInfo.user_banner_image:type_name -> Image
	178,  // 158: MatchSkinInfo.tool_bar_image:type_name -> Image
	178,  // 159: MatchSkinInfo.share_icon:type_name -> Image
	377,  // 160: RoomShortTouchAreaConfig.elements:type_name -> RoomShortTouchAreaConfig.ElementsEntry
	378,  // 161: RoomShortTouchAreaConfig.forbidden_types_map:type_name -> RoomShortTouchAreaConfig.ForbiddenTypesMapEntry
	379,  // 162: RoomShortTouchAreaConfig.temp_state_condition_map:type_name -> RoomShortTouchAreaConfig.TempStateConditionMapEntry
	380,  // 163: RoomShortTouchAreaConfig.temp_state_strategy:type_name -> RoomShortTouchAreaConfig.TempStateStrategyEntry
	386,  // 164: RoomShortTouchAreaConfig.temp_state_global_condition:type_name -> RoomShortTouchAreaConfig.TempStateGlobalCondition
	389,  // 165: GameExtra.data:type_name -> GameExtra.DataEntry
	208,  // 166: OfficialChannelInfo.channel_user:type_name -> User
	390,  // 167: OfficialChannelInfo.delay_enter_time:type_name -> OfficialChannelInfo.DelayEnterTimeEntry
	208,  // 168: OfficialChannelInfo.living_user:type_name -> User
	391,  // 169: RoomCart.vertical:type_name -> RoomCart.CartVertical
	392,  // 170: RoomCart.horizontal:type_name -> RoomCart.CartHorizontal
	393,  // 171: RoomCart.global_custom_icons:type_name -> RoomCart.GlobalCustomIcons
	208,  // 172: LinkerUsers.users_info:type_name -> User
	394,  // 173: BorderInfo.static_border:type_name -> BorderInfo.StaticBorderInfo
	395,  // 174: BorderInfo.dynamic_border:type_name -> BorderInfo.DynamicBorderInfo
	58,   // 175: Room.extra:type_name -> RoomExtra
	396,  // 176: Room.dynamic_cover_dict:type_name -> Room.DynamicCoverDictEntry
	178,  // 177: Room.cover:type_name -> Image
	178,  // 178: Room.dynamic_cover:type_name -> Image
	178,  // 179: Room.dynamic_cover_low:type_name -> Image
	51,   // 180: Room.stream_url:type_name -> StreamUrl
	207,  // 181: Room.link_mic:type_name -> LinkMic
	241,  // 182: Room.deco_list:type_name -> Decoration
	201,  // 183: Room.top_fans:type_name -> TopFan
	200,  // 184: Room.stats:type_name -> RoomStats
	178,  // 185: Room.feed_room_label:type_name -> Image
	202,  // 186: Room.living_room_attrs:type_name -> RoomUserAttr
	208,  // 187: Room.owner:type_name -> User
	59,   // 188: Room.room_auth:type_name -> RoomAuthStatus
	60,   // 189: Room.room_tabs:type_name -> RoomTab
	203,  // 190: Room.burst:type_name -> BurstInfo
	204,  // 191: Room.health_score:type_name -> RoomHealthScoreInfo
	61,   // 192: Room.activity_tag:type_name -> RoomActivityTag
	178,  // 193: Room.portrait_cover:type_name -> Image
	178,  // 194: Room.background:type_name -> Image
	178,  // 195: Room.guide_button:type_name -> Image
	62,   // 196: Room.match_info:type_name -> MatchInfo
	64,   // 197: Room.official_room_info:type_name -> OfficialRoomInfo
	65,   // 198: Room.short_touch_area_config:type_name -> RoomShortTouchAreaConfig
	205,  // 199: Room.tv:type_name -> TVStation
	178,  // 200: Room.content_label:type_name -> Image
	178,  // 201: Room.operation_label:type_name -> Image
	66,   // 202: Room.game_extra:type_name -> GameExtra
	67,   // 203: Room.official_channel:type_name -> OfficialChannelInfo
	206,  // 204: Room.comment_box:type_name -> CommentBox
	397,  // 205: Room.linker_map:type_name -> Room.LinkerMapEntry
	68,   // 206: Room.room_cart:type_name -> RoomCart
	178,  // 207: Room.preview_tag_url:type_name -> Image
	199,  // 208: Room.quiz_extra:type_name -> QuizExtra
	398,  // 209: Room.AnchorABMap:type_name -> Room.AnchorABMapEntry
	69,   // 210: Room.linker_users:type_name -> LinkerUsers
	176,  // 211: Room.AudioRoomBGImage:type_name -> AudioBGData
	69,   // 212: Room.city_top_linker_users:type_name -> LinkerUsers
	70,   // 213: Room.border_info:type_name -> BorderInfo
	178,  // 214: Room.city_top_background:type_name -> Image
	171,  // 215: Room.bonus:type_name -> Bonus
	177,  // 216: Room.activity_room_skin_info:type_name -> ActivityRoomSkinInfo
	170,  // 217: Room.replay_info:type_name -> RoomReplayInfo
	119,  // 218: Room.comment_wall_info:type_name -> CommentWallInfo
	120,  // 219: Room.comment_wall_position:type_name -> CommentWallPosition
	96,   // 220: Room.episode_extra:type_name -> EpisodeExtraInfo
	78,   // 221: Room.short_touch_auth:type_name -> ShortTouchAuth
	77,   // 222: Room.announcement_info:type_name -> AnnouncementInfo
	174,  // 223: Room.live_status_info:type_name -> LiveStatusInfo
	76,   // 224: Room.im_info:type_name -> RoomIMInfo
	160,  // 225: Room.assist_label:type_name -> LabelInfo
	151,  // 226: Room.interact_open_extra:type_name -> InteractOpenExtra
	75,   // 227: Room.vertical_type_info:type_name -> VerticalTypeInfo
	74,   // 228: Room.filter_words:type_name -> FilterWord
	160,  // 229: Room.dynamic_label:type_name -> LabelInfo
	73,   // 230: Room.linker_detail:type_name -> LinkerDetail
	172,  // 231: Room.corner_mark_reach:type_name -> CornerMarkReach
	152,  // 232: Room.preview_expose:type_name -> PreviewExposeData
	140,  // 233: Room.welfare_project_info:type_name -> WelfareProjectInfo
	103,  // 234: Room.paid_live_data:type_name -> PaidLiveData
	72,   // 235: Room.easter_egg_data:type_name -> EasterEggData
	118,  // 236: Room.avatar_live_info:type_name -> AvatarLiveInfo
	106,  // 237: Room.circle_info:type_name -> CircleInfo
	178,  // 238: Room.screenshot_sover:type_name -> Image
	153,  // 239: Room.appearance:type_name -> Appearance
	124,  // 240: Room.ecom_data:type_name -> EcomData
	123,  // 241: Room.industry_service_info:type_name -> IndustryServiceInfo
	122,  // 242: Room.relevant_recommendation:type_name -> RelevantRecommendation
	121,  // 243: Room.scene_type_info:type_name -> RoomSpecificSceneTypeInfo
	116,  // 244: Room.game_cp:type_name -> GameCPData
	117,  // 245: Room.game_play:type_name -> GamePlayData
	115,  // 246: Room.union_live_info:type_name -> UnionLiveInfo
	114,  // 247: Room.beautify_info:type_name -> BeautifyInfo
	110,  // 248: Room.toolbar_data:type_name -> ToolBarData
	197,  // 249: Room.anchor_tab_label:type_name -> AnchorTabLabel
	137,  // 250: Room.life_groupon_info:type_name -> LifeGrouponInfo
	109,  // 251: Room.vip_data:type_name -> VipData
	138,  // 252: Room.upper_right_widget_data_list:type_name -> UpperRightWidgetData
	108,  // 253: Room.live_feedback_card:type_name -> FeedbackCard
	160,  // 254: Room.assist_label_list:type_name -> LabelInfo
	107,  // 255: Room.desire_info:type_name -> DesireInfo
	258,  // 256: Room.hot_room_info:type_name -> HotRoomInfo
	175,  // 257: Room.cast_screen_data:type_name -> CastScreenData
	149,  // 258: Room.official_channel_extra:type_name -> OfficialChannelExtraInfo
	181,  // 259: Room.activity_live_recommend_config:type_name -> ActivityLiveRecommendConfig
	158,  // 260: Room.room_channel:type_name -> RoomChannelData
	150,  // 261: Room.pack_meta:type_name -> PackMetaInfo
	141,  // 262: Room.activity_data:type_name -> ActivityData
	139,  // 263: Room.like_display_config:type_name -> LikeDisplayConfig
	193,  // 264: Room.room_view_stats:type_name -> RoomViewStats
	143,  // 265: Room.match:type_name -> MatchRoomData
	154,  // 266: Room.commentary_room_info:type_name -> CommentaryRoomInfo
	155,  // 267: Room.match_chat_config:type_name -> MatchChatConfig
	156,  // 268: Room.share_resource:type_name -> ShareResource
	173,  // 269: Room.public_screen_bottom_info:type_name -> PublicScreenBottomInfo
	51,   // 270: Room.push_stream_hkt:type_name -> StreamUrl
	169,  // 271: Room.basis:type_name -> RoomBasisData
	168,  // 272: Room.interact:type_name -> RoomInteractData
	165,  // 273: Room.revenue:type_name -> RoomRevenueData
	166,  // 274: Room.req_user:type_name -> RoomReqUserData
	167,  // 275: Room.anchor_data:type_name -> RoomAnchorData
	164,  // 276: Room.others:type_name -> RoomOthersData
	163,  // 277: Room.pico_info:type_name -> PicoInfo
	162,  // 278: Room.game_data:type_name -> RoomGameData
	161,  // 279: Room.feed_data:type_name -> RoomFeedData
	159,  // 280: Room.open_content_data:type_name -> OpenContentData
	157,  // 281: Room.client_component_data:type_name -> ClientComponent
	186,  // 282: Room.platform_components_data:type_name -> RoomPlatformComponentsData
	185,  // 283: Room.ios_client_component_data:type_name -> IOSClientComponent
	178,  // 284: Room.cover_gauss:type_name -> Image
	399,  // 285: EasterEggData.entrance_icon:type_name -> EasterEggData.Image
	400,  // 286: LinkerDetail.linker_map_str:type_name -> LinkerDetail.LinkerMapStrEntry
	401,  // 287: LinkerDetail.playmode_detail:type_name -> LinkerDetail.PlaymodeDetailEntry
	402,  // 288: VerticalTypeInfo.icon:type_name -> VerticalTypeInfo.Image
	403,  // 289: ToolbarItemConfig.icon:type_name -> ToolbarItemConfig.Image
	403,  // 290: ToolbarItemConfig.dynamic_icon:type_name -> ToolbarItemConfig.Image
	403,  // 291: ToolbarItemConfig.icon_vertical:type_name -> ToolbarItemConfig.Image
	403,  // 292: ToolbarItemConfig.dynamic_bottom_icon:type_name -> ToolbarItemConfig.Image
	403,  // 293: ToolbarItemConfig.bottom_icon:type_name -> ToolbarItemConfig.Image
	404,  // 294: ToolbarItemConfig.toast_list:type_name -> ToolbarItemConfig.Toast
	405,  // 295: EpisodePremierePlay.highlights:type_name -> EpisodePremierePlay.VsEpisodeHighLight
	407,  // 296: EpisodePreviewImage.preview_uri_up:type_name -> EpisodePreviewImage.Image
	407,  // 297: EpisodePreviewImage.preview_uri_down:type_name -> EpisodePreviewImage.Image
	408,  // 298: VSGiftPannel.background:type_name -> VSGiftPannel.Image
	408,  // 299: VSGiftPannel.selected:type_name -> VSGiftPannel.Image
	408,  // 300: VSGiftPannel.top_title:type_name -> VSGiftPannel.Image
	408,  // 301: VSGiftPannel.background_bottom:type_name -> VSGiftPannel.Image
	408,  // 302: VSGiftPannel.background_top:type_name -> VSGiftPannel.Image
	409,  // 303: VSPannelIcon.sp_landscape_icon:type_name -> VSPannelIcon.Image
	409,  // 304: VSPannelIcon.sp_vertical_icon:type_name -> VSPannelIcon.Image
	409,  // 305: VSPannelIcon.landscape_vertical_switch_icon:type_name -> VSPannelIcon.Image
	409,  // 306: VSPannelIcon.lock_screen_icon:type_name -> VSPannelIcon.Image
	409,  // 307: VSPannelIcon.landscape_more_icon:type_name -> VSPannelIcon.Image
	409,  // 308: VSPannelIcon.vertical_more_icon:type_name -> VSPannelIcon.Image
	409,  // 309: VSPannelIcon.landscape_comment_icon:type_name -> VSPannelIcon.Image
	409,  // 310: VSPannelIcon.vertical_comment_icon:type_name -> VSPannelIcon.Image
	409,  // 311: VSPannelIcon.vertical_landscape_switch_icon:type_name -> VSPannelIcon.Image
	409,  // 312: VSPannelIcon.vertical_lock_screen_icon:type_name -> VSPannelIcon.Image
	410,  // 313: VSCameraInfo.cover:type_name -> VSCameraInfo.Image
	410,  // 314: VSCameraInfo.cover_vertical:type_name -> VSCameraInfo.Image
	411,  // 315: VSCameraInfo.stream_info:type_name -> VSCameraInfo.StreamUrl
	412,  // 316: VSCameraInfo.camera_room_auth:type_name -> VSCameraInfo.RoomAuthStatus
	413,  // 317: VSCameraInfo.camera_paid_info:type_name -> VSCameraInfo.CameraPaidInfo
	414,  // 318: VSCameraInfo.camera_match_info:type_name -> VSCameraInfo.CameraMatchInfo
	410,  // 319: VSCameraInfo.label:type_name -> VSCameraInfo.Image
	415,  // 320: VSWatermark.watermark_icon:type_name -> VSWatermark.VSWatermarkIcon
	416,  // 321: VSItemComment.item_comment_icon_dark:type_name -> VSItemComment.Image
	416,  // 322: VSItemComment.item_comment_icon_light:type_name -> VSItemComment.Image
	417,  // 323: VSBar.item_comment:type_name -> VSBar.VSItemBar
	417,  // 324: VSBar.item_bar:type_name -> VSBar.VSItemBar
	418,  // 325: VSLinkInfo.rooms:type_name -> VSLinkInfo.VSLinkNode
	419,  // 326: CommentConfig.comment_colors:type_name -> CommentConfig.CommentColor
	420,  // 327: CommentConfig.comment_roles:type_name -> CommentConfig.CommentRole
	421,  // 328: CommentConfig.comment_medals:type_name -> CommentConfig.CommentMedal
	423,  // 329: MatchRoomInfo.match_tab_frame:type_name -> MatchRoomInfo.MatchTabFrame
	424,  // 330: MatchRoomInfo.match_title:type_name -> MatchRoomInfo.MatchTitle
	425,  // 331: MatchRoomInfo.match_data:type_name -> MatchRoomInfo.ToutiaoMatchData
	422,  // 332: MatchRoomInfo.match_host_channel:type_name -> MatchRoomInfo.MatchHostChannelEntry
	426,  // 333: MatchRoomInfo.background_image_url_list:type_name -> MatchRoomInfo.Image
	426,  // 334: MatchRoomInfo.share_icon:type_name -> MatchRoomInfo.Image
	427,  // 335: MatchRoomInfo.im_info:type_name -> MatchRoomInfo.MatchRoomImInfo
	428,  // 336: MatchRoomInfo.match_share_background:type_name -> MatchRoomInfo.MatchShareBackground
	428,  // 337: MatchRoomInfo.match_live_share_background:type_name -> MatchRoomInfo.MatchShareBackground
	437,  // 338: MultiCameraBasicInfo.icon:type_name -> MultiCameraBasicInfo.Image
	437,  // 339: MultiCameraBasicInfo.icon_pad:type_name -> MultiCameraBasicInfo.Image
	438,  // 340: SharePosterInfo.data:type_name -> SharePosterInfo.PosterData
	79,   // 341: EpisodeExtraInfo.episode_mod:type_name -> EpisodeMod
	80,   // 342: EpisodeExtraInfo.watch_info:type_name -> WatchInfo
	81,   // 343: EpisodeExtraInfo.toolbar_list:type_name -> ToolbarItemConfig
	178,  // 344: EpisodeExtraInfo.cover:type_name -> Image
	178,  // 345: EpisodeExtraInfo.cover_vertical:type_name -> Image
	82,   // 346: EpisodeExtraInfo.play_control:type_name -> EpisodePremierePlay
	83,   // 347: EpisodeExtraInfo.preview_image:type_name -> EpisodePreviewImage
	84,   // 348: EpisodeExtraInfo.gift_pannel:type_name -> VSGiftPannel
	85,   // 349: EpisodeExtraInfo.pannel_icon:type_name -> VSPannelIcon
	81,   // 350: EpisodeExtraInfo.pannel_toolbar:type_name -> ToolbarItemConfig
	86,   // 351: EpisodeExtraInfo.preview_bottom:type_name -> EpisodePreviewBottom
	178,  // 352: EpisodeExtraInfo.season_cover_vertical:type_name -> Image
	87,   // 353: EpisodeExtraInfo.camera_infos:type_name -> VSCameraInfo
	87,   // 354: EpisodeExtraInfo.priority_camera:type_name -> VSCameraInfo
	178,  // 355: EpisodeExtraInfo.preview_background:type_name -> Image
	178,  // 356: EpisodeExtraInfo.background:type_name -> Image
	79,   // 357: EpisodeExtraInfo.mod:type_name -> EpisodeMod
	178,  // 358: EpisodeExtraInfo.item_comment_icon:type_name -> Image
	88,   // 359: EpisodeExtraInfo.vs_watermark:type_name -> VSWatermark
	89,   // 360: EpisodeExtraInfo.item_comment:type_name -> VSItemComment
	90,   // 361: EpisodeExtraInfo.vs_bar:type_name -> VSBar
	80,   // 362: EpisodeExtraInfo.season_watch_info:type_name -> WatchInfo
	91,   // 363: EpisodeExtraInfo.link_room_info:type_name -> VSLinkInfo
	92,   // 364: EpisodeExtraInfo.comment_config:type_name -> CommentConfig
	93,   // 365: EpisodeExtraInfo.match_room_info:type_name -> MatchRoomInfo
	94,   // 366: EpisodeExtraInfo.multi_camera_basic_info:type_name -> MultiCameraBasicInfo
	95,   // 367: EpisodeExtraInfo.share_poster_info:type_name -> SharePosterInfo
	102,  // 368: EpisodeExtraInfo.premiere_toast:type_name -> VSPremiereToast
	101,  // 369: EpisodeExtraInfo.business_configure:type_name -> BusinessConfigure
	100,  // 370: EpisodeExtraInfo.multi_tab:type_name -> MultiTab
	178,  // 371: EpisodeExtraInfo.main_camera_cover:type_name -> Image
	440,  // 372: EpisodeExtraInfo.privilege_info:type_name -> EpisodeExtraInfo.PrivilegeInfoEntry
	99,   // 373: EpisodeExtraInfo.main_camera_match_info:type_name -> MainCameraMatchInfo
	98,   // 374: EpisodeExtraInfo.vs_config_drawer:type_name -> VSConfigDrawer
	97,   // 375: EpisodeExtraInfo.title_icon:type_name -> TitleIcon
	142,  // 376: VSConfigDrawer.drawer:type_name -> MatchDrawer
	178,  // 377: VSConfigDrawer.drawer_label:type_name -> Image
	178,  // 378: VSConfigDrawer.drawer_background:type_name -> Image
	441,  // 379: MainCameraMatchInfo.match_data:type_name -> MainCameraMatchInfo.ToutiaoMatchData
	442,  // 380: MainCameraMatchInfo.league_info:type_name -> MainCameraMatchInfo.LeagueInfo
	456,  // 381: MultiTab.tabs:type_name -> MultiTab.TabItem
	458,  // 382: BusinessConfigure.ResConfig:type_name -> BusinessConfigure.ResourceConfigure
	459,  // 383: VSPremiereToast.icon:type_name -> VSPremiereToast.Image
	462,  // 384: PaidLiveData.ticket_session:type_name -> PaidLiveData.TicketData
	463,  // 385: PaidLiveData.order_data:type_name -> PaidLiveData.OrderData
	460,  // 386: PaidLiveData.privilege_info:type_name -> PaidLiveData.PrivilegeInfoEntry
	461,  // 387: PaidLiveData.privilege_info_map:type_name -> PaidLiveData.PrivilegeInfoMapEntry
	464,  // 388: PaidLiveData.async_auth_data:type_name -> PaidLiveData.AsyncAuthData
	465,  // 389: PaidLiveData.products_data:type_name -> PaidLiveData.ProductsData
	473,  // 390: Product.basic_info:type_name -> Product.ProductBasicInfo
	474,  // 391: Product.price_info:type_name -> Product.ProductPriceStruct
	475,  // 392: Product.live_info:type_name -> Product.LiveInfo
	476,  // 393: Product.item_info:type_name -> Product.ItemInfo
	477,  // 394: Product.content_info:type_name -> Product.ContentInfo
	478,  // 395: Product.payment_arrea:type_name -> Product.PaymentArea
	479,  // 396: Product.price_rich_info:type_name -> Product.ProductPriceRichText
	480,  // 397: Product.product_comments:type_name -> Product.ProductComments
	481,  // 398: Product.share_ticket:type_name -> Product.ShareTicket
	482,  // 399: Product.privilege:type_name -> Product.PrivilegeTicket
	483,  // 400: Product.combined:type_name -> Product.Combined
	484,  // 401: Product.comments:type_name -> Product.Comments
	485,  // 402: Product.rating:type_name -> Product.Rating
	486,  // 403: Product.user:type_name -> Product.User
	487,  // 404: Product.authors:type_name -> Product.Author
	488,  // 405: Product.banner:type_name -> Product.ProductBanner
	489,  // 406: Product.sku_list:type_name -> Product.SKU
	490,  // 407: Product.subscribe_member:type_name -> Product.SubscribeMember
	491,  // 408: Product.filter_node:type_name -> Product.FilterReason
	521,  // 409: PrivilegeInfo.item_list:type_name -> PrivilegeInfo.PaidLiveItemInfo
	522,  // 410: PrivilegeInfo.paid_live_info:type_name -> PrivilegeInfo.PrivilegeBaseInfo
	523,  // 411: PrivilegeInfo.privilege_url:type_name -> PrivilegeInfo.PrivilegeUrl
	524,  // 412: PrivilegeInfo.ui_config:type_name -> PrivilegeInfo.PaidLiveUIBaseConfig
	525,  // 413: PrivilegeInfo.entity_config:type_name -> PrivilegeInfo.PaidLiveConfig
	178,  // 414: CircleInfo.cover_img:type_name -> Image
	530,  // 415: FeedbackCard.question:type_name -> FeedbackCard.Question
	533,  // 416: FeedbackCard.condition:type_name -> FeedbackCard.Condition
	71,   // 417: FeedbackCard.room_data:type_name -> Room
	178,  // 418: FeedbackCard.bgm:type_name -> Image
	111,  // 419: ToolBarData.entrance_list:type_name -> ToolBarComponentData
	111,  // 420: ToolBarData.more_panel:type_name -> ToolBarComponentData
	111,  // 421: ToolBarData.landscape_up_right:type_name -> ToolBarComponentData
	535,  // 422: ToolBarData.skin_resource:type_name -> ToolBarData.SkinResourceEntry
	112,  // 423: ToolBarData.permutation:type_name -> ToolbarPermutation
	536,  // 424: UnionLiveInfo.guest_anchors:type_name -> UnionLiveInfo.GuestAnchor
	178,  // 425: AvatarLiveInfo.image:type_name -> Image
	178,  // 426: RelevantRecommendation.icon:type_name -> Image
	537,  // 427: RelevantRecommendation.high_light_info:type_name -> RelevantRecommendation.HighLightInfo
	538,  // 428: RelevantRecommendation.ecom_info:type_name -> RelevantRecommendation.EcomInfo
	539,  // 429: RelevantRecommendation.vs_info:type_name -> RelevantRecommendation.VsInfo
	540,  // 430: RelevantRecommendation.white_category_info:type_name -> RelevantRecommendation.WhiteCategoryInfo
	178,  // 431: IndustryServiceInfo.icon_image:type_name -> Image
	542,  // 432: IndustryServiceInfo.consult_info:type_name -> IndustryServiceInfo.ConsultInfo
	125,  // 433: EcomData.live_card:type_name -> EcomLiveCard
	133,  // 434: EcomData.pop:type_name -> EcomPop
	134,  // 435: EcomData.goods_card:type_name -> EcomGoodsCard
	135,  // 436: EcomData.reds_show_infos:type_name -> RedsShowInfo
	136,  // 437: EcomData.room_cart_v2:type_name -> RoomCartV2
	126,  // 438: EcomLiveCard.product:type_name -> EcomProduct
	128,  // 439: EcomLiveCard.icon:type_name -> EcomIcon
	129,  // 440: EcomLiveCard.campaign:type_name -> EcomCampaign
	127,  // 441: EcomProduct.price:type_name -> EcomPrice
	130,  // 442: EcomCampaign.auction:type_name -> EcomAuction
	131,  // 443: EcomAuction.user:type_name -> EcomBidder
	132,  // 444: EcomBidder.avatar:type_name -> EcomAvatar
	127,  // 445: EcomPop.min_price:type_name -> EcomPrice
	143,  // 446: ActivityData.match:type_name -> MatchRoomData
	178,  // 447: MatchDrawer.entry_icon:type_name -> Image
	178,  // 448: MatchDrawer.drawer_background:type_name -> Image
	142,  // 449: MatchRoomData.drawer:type_name -> MatchDrawer
	148,  // 450: MatchRoomData.match:type_name -> ToutiaoMatchData
	178,  // 451: MatchRoomData.drawer_label:type_name -> Image
	178,  // 452: MatchRoomData.drawer_official_label:type_name -> Image
	178,  // 453: MatchRoomData.match_background:type_name -> Image
	145,  // 454: MatchRoomData.match_user_info:type_name -> MatchUserInfo
	178,  // 455: TeamInfo.team_icon:type_name -> Image
	178,  // 456: TeamInfo.team_badge:type_name -> Image
	178,  // 457: TeamInfo.team_background:type_name -> Image
	178,  // 458: TeamInfo.team_avatar_box:type_name -> Image
	144,  // 459: MatchUserInfo.user_team_info:type_name -> TeamInfo
	543,  // 460: MatchUserInfo.user_quiz_info:type_name -> MatchUserInfo.UserQuizInfoEntry
	47,   // 461: ToutiaoMatchData.against:type_name -> Against
	146,  // 462: ToutiaoMatchData.team_stats:type_name -> TeamStats
	147,  // 463: ToutiaoMatchData.player_stats:type_name -> PlayerStats
	178,  // 464: ToutiaoMatchData.winner_icon:type_name -> Image
	544,  // 465: PackMetaInfo.extras:type_name -> PackMetaInfo.ExtrasEntry
	545,  // 466: InteractOpenExtra.debug_info:type_name -> InteractOpenExtra.DebugInfoEntry
	546,  // 467: PreviewExposeData.preview_guide:type_name -> PreviewExposeData.PreviewGuide
	547,  // 468: PreviewExposeData.metas:type_name -> PreviewExposeData.Meta
	548,  // 469: PreviewExposeData.chat_msgs:type_name -> PreviewExposeData.ChatMessage
	547,  // 470: PreviewExposeData.force_insertion:type_name -> PreviewExposeData.Meta
	549,  // 471: PreviewExposeData.preview_extend_area:type_name -> PreviewExposeData.PreviewExtendArea
	550,  // 472: PreviewExposeData.switch:type_name -> PreviewExposeData.PreviewSwitch
	551,  // 473: PreviewExposeData.preview_promotion:type_name -> PreviewExposeData.PreviewPromotion
	552,  // 474: PreviewExposeData.preview_im_extend:type_name -> PreviewExposeData.PreviewIMExtend
	553,  // 475: PreviewExposeData.et_data:type_name -> PreviewExposeData.EtData
	557,  // 476: PreviewExposeData.enter_public_area_animation:type_name -> PreviewExposeData.EnterPublicAreaAnimation
	555,  // 477: PreviewExposeData.preview_promotion_sync_data:type_name -> PreviewExposeData.PreviewPromotionSyncData
	554,  // 478: PreviewExposeData.growth_task:type_name -> PreviewExposeData.GrowthTask
	556,  // 479: PreviewExposeData.preview_exit_guide:type_name -> PreviewExposeData.PreviewExitGuide
	556,  // 480: PreviewExposeData.preview_exit_guide_list:type_name -> PreviewExposeData.PreviewExitGuide
	558,  // 481: PreviewExposeData.client_component:type_name -> PreviewExposeData.ClientComponent
	560,  // 482: PreviewExposeData.ios_client_component:type_name -> PreviewExposeData.IOSClientComponent
	578,  // 483: Appearance.head_bubble:type_name -> Appearance.Bubble
	581,  // 484: Appearance.entrance:type_name -> Appearance.MoreEntrance
	582,  // 485: Appearance.toolbar_list:type_name -> Appearance.ToolbarItemConfig
	178,  // 486: Appearance.cover_gauss:type_name -> Image
	579,  // 487: Appearance.content_tags:type_name -> Appearance.ContentTag
	583,  // 488: Appearance.preview_label:type_name -> Appearance.PreviewLabel
	178,  // 489: Appearance.cover_dynamic_mask:type_name -> Image
	178,  // 490: Appearance.horizontal_background:type_name -> Image
	580,  // 491: Appearance.wide_cover_list:type_name -> Appearance.WideCover
	178,  // 492: Appearance.blur_placeholder_img:type_name -> Image
	178,  // 493: CommentaryRoomInfo.avatar:type_name -> Image
	178,  // 494: ShareResource.toast_background:type_name -> Image
	585,  // 495: ShareResource.qrcode:type_name -> ShareResource.QrcodeEntry
	586,  // 496: ClientComponent.portrait_component_map:type_name -> ClientComponent.PortraitComponentMapEntry
	587,  // 497: ClientComponent.landscape_component_map:type_name -> ClientComponent.LandscapeComponentMapEntry
	588,  // 498: ClientComponent.preview_default_component_map:type_name -> ClientComponent.PreviewDefaultComponentMapEntry
	591,  // 499: RoomChannelData.channel_list:type_name -> RoomChannelData.RoomChannelInfo
	592,  // 500: RoomChannelData.background:type_name -> RoomChannelData.Image
	593,  // 501: OpenContentData.open_activity_data:type_name -> OpenContentData.OpenActivityData
	596,  // 502: LabelInfo.splice_label:type_name -> LabelInfo.SpliceLabel
	178,  // 503: LabelInfo.whole_label:type_name -> Image
	597,  // 504: LabelInfo.profile_pic_splice_label:type_name -> LabelInfo.ProfilePicSpliceLabel
	595,  // 505: LabelInfo.et_extra:type_name -> LabelInfo.EtExtraEntry
	160,  // 506: RoomFeedData.relation_label:type_name -> LabelInfo
	599,  // 507: RoomFeedData.follow_top_appearance:type_name -> RoomFeedData.FollowTopAppearance
	598,  // 508: RoomFeedData.cut_position:type_name -> RoomFeedData.StreamCutPosition
	600,  // 509: RoomFeedData.drawer_config:type_name -> RoomFeedData.DrawerConfig
	608,  // 510: RoomGameData.room_game_data_channel_config:type_name -> RoomGameData.RoomGameDataChannelConfig
	609,  // 511: RoomGameData.game_tag_info:type_name -> RoomGameData.GameTagInfo
	610,  // 512: RoomGameData.sandwich_border_info:type_name -> RoomGameData.SandwichBorderInfo
	612,  // 513: PicoInfo.virtual_live_bg_images:type_name -> PicoInfo.VirtualLiveBgImages
	611,  // 514: PicoInfo.stream_mapping:type_name -> PicoInfo.StreamMappingEntry
	614,  // 515: RoomOthersData.deco_detail:type_name -> RoomOthersData.DecotationDetail
	615,  // 516: RoomOthersData.more_panel_info:type_name -> RoomOthersData.MorePanelData
	616,  // 517: RoomOthersData.appointment_info:type_name -> RoomOthersData.AppointmentData
	617,  // 518: RoomOthersData.web_skin:type_name -> RoomOthersData.WebSkinData
	618,  // 519: RoomOthersData.programme:type_name -> RoomOthersData.WebProgramme
	619,  // 520: RoomOthersData.live_matrix_info:type_name -> RoomOthersData.LiveMatrixInfo
	620,  // 521: RoomOthersData.web_live_port_optimization:type_name -> RoomOthersData.WebLivePortOptimization
	621,  // 522: RoomOthersData.gift_panel_topper_tray:type_name -> RoomOthersData.GiftPanelTopperTray
	622,  // 523: RoomOthersData.enter_gift_animation:type_name -> RoomOthersData.EnterGiftAnimation
	623,  // 524: RoomOthersData.paid_live_subscribe:type_name -> RoomOthersData.PaidLiveSubscribe
	624,  // 525: RoomOthersData.group_live_data:type_name -> RoomOthersData.GroupLiveData
	625,  // 526: RoomOthersData.web_enter_benefit_point_data:type_name -> RoomOthersData.WebEnterBenefitPointData
	626,  // 527: RoomOthersData.recognition_containers:type_name -> RoomOthersData.StreamRecognitionContainers
	627,  // 528: RoomOthersData.anchor_bottom_tool_bar:type_name -> RoomOthersData.AnchorBottomToolBar
	628,  // 529: RoomOthersData.anchor_together_live:type_name -> RoomOthersData.AnchorTogetherLive
	629,  // 530: RoomRevenueData.open_game:type_name -> RoomRevenueData.OpenGame
	630,  // 531: RoomRevenueData.anchor_linkmic:type_name -> RoomRevenueData.AnchorLinkmic
	631,  // 532: RoomAnchorData.game_anchor_info:type_name -> RoomAnchorData.GameAnchorInfo
	632,  // 533: RoomInteractData.vs_component_extra:type_name -> RoomInteractData.EpisodeExtraInfo
	633,  // 534: RoomInteractData.featured_public_screen_data:type_name -> RoomInteractData.FeaturedPublicScreenConf
	634,  // 535: RoomInteractData.public_screen_speed_conf:type_name -> RoomInteractData.PublicScreenSpeedConf
	635,  // 536: RoomInteractData.public_room_intro_label:type_name -> RoomInteractData.RoomIntroLabel
	636,  // 537: Bonus.author:type_name -> Bonus.BonusAuthor
	637,  // 538: Bonus.commerce_info:type_name -> Bonus.BonusCommerce
	178,  // 539: Bonus.label:type_name -> Image
	638,  // 540: PublicScreenBottomInfo.bottom_cards:type_name -> PublicScreenBottomInfo.BottomCard
	208,  // 541: LiveStatusInfo.live_user:type_name -> User
	639,  // 542: LiveStatusInfo.live_notify_light:type_name -> LiveStatusInfo.LiveNotifyLightEntry
	640,  // 543: CastScreenData.permission:type_name -> CastScreenData.CastOttPermission
	178,  // 544: AudioBGData.image:type_name -> Image
	178,  // 545: AudioBGData.imageThumbnail:type_name -> Image
	178,  // 546: AudioBGData.imageAnimatedBG:type_name -> Image
	178,  // 547: AudioBGData.imageNormalAvatar:type_name -> Image
	178,  // 548: AudioBGData.imageStartupAvatar:type_name -> Image
	178,  // 549: AudioBGData.imageChatJoinIcon:type_name -> Image
	178,  // 550: AudioBGData.imageStaticBG:type_name -> Image
	179,  // 551: AudioBGData.speakingImageList:type_name -> AudioSpeakingImageList
	178,  // 552: AudioBGData.imageColdBG:type_name -> Image
	178,  // 553: AudioBGData.iconMicNormals:type_name -> Image
	178,  // 554: AudioBGData.iconMicLock:type_name -> Image
	180,  // 555: AudioBGData.animateInfo:type_name -> AnimatedBgInfo
	179,  // 556: AudioBGData.speaking_image_v2:type_name -> AudioSpeakingImageList
	641,  // 557: ActivityRoomSkinInfo.vertical_screen:type_name -> ActivityRoomSkinInfo.VerticalScreenEntry
	642,  // 558: ActivityRoomSkinInfo.horizontal_screen:type_name -> ActivityRoomSkinInfo.HorizontalScreenEntry
	178,  // 559: AudioSpeakingImageList.images:type_name -> Image
	643,  // 560: ActivityLiveRecommendConfig.episode_info:type_name -> ActivityLiveRecommendConfig.EpisodeInfo
	183,  // 561: IOSContainerLayout.layout_rule:type_name -> IOSContainerLayoutRule
	182,  // 562: IOSClientComponent.fragments:type_name -> IOSFragment
	184,  // 563: IOSClientComponent.landscape_layout:type_name -> IOSContainerLayout
	184,  // 564: IOSClientComponent.portrait_layout:type_name -> IOSContainerLayout
	182,  // 565: IOSClientComponent.elements:type_name -> IOSFragment
	195,  // 566: RoomPlatformComponentsData.room_title:type_name -> RoomTitle
	193,  // 567: RoomPlatformComponentsData.room_count:type_name -> RoomViewStats
	196,  // 568: RoomPlatformComponentsData.room_avator:type_name -> RoomAvator
	187,  // 569: RoomPlatformComponentsData.public_screen_info:type_name -> RoomPublicScreenInfo
	189,  // 570: RoomPlatformComponentsData.full_video_btn:type_name -> RoomFullVideoBTN
	190,  // 571: RoomPlatformComponentsData.banner:type_name -> RoomBanner
	192,  // 572: RoomPlatformComponentsData.core:type_name -> RoomCore
	188,  // 573: RoomPublicScreenInfo.attachments:type_name -> RoomPublicScreenAttachments
	178,  // 574: RoomFullVideoBTN.icon:type_name -> Image
	178,  // 575: RoomFullVideoBTN.disable_icon:type_name -> Image
	178,  // 576: AvatorBorder.icon:type_name -> Image
	178,  // 577: AvatorBorder.thumb_icon:type_name -> Image
	644,  // 578: RoomTitle.left_icon:type_name -> RoomTitle.TitleIcon
	178,  // 579: RoomAvator.avatar:type_name -> Image
	178,  // 580: RoomAvator.authentication_info:type_name -> Image
	191,  // 581: RoomAvator.border:type_name -> AvatorBorder
	197,  // 582: RoomAvator.first_tab_label:type_name -> AnchorTabLabel
	197,  // 583: RoomAvator.second_tab_label:type_name -> AnchorTabLabel
	178,  // 584: AnchorTabLabel.label:type_name -> Image
	178,  // 585: AnchorTabLabel.icon:type_name -> Image
	645,  // 586: AnchorTabLabel.track_params:type_name -> AnchorTabLabel.TrackParamsEntry
	198,  // 587: AnchorTabLabel.dsl_label:type_name -> DSLDetail
	646,  // 588: DSLDetail.extra:type_name -> DSLDetail.ExtraInfo
	647,  // 589: RoomStats.user_count_composition:type_name -> RoomStats.UserCountComposition
	208,  // 590: TopFan.user:type_name -> User
	178,  // 591: BurstInfo.property_icon:type_name -> Image
	178,  // 592: CommentBox.icon:type_name -> Image
	648,  // 593: LinkMic.channel_info:type_name -> LinkMic.LinkMicChannelInfo
	649,  // 594: LinkMic.battle_scores:type_name -> LinkMic.LinkMicBattleScore
	650,  // 595: LinkMic.battle_settings:type_name -> LinkMic.LinkMicBattleSetting
	178,  // 596: User.AvatarThumb:type_name -> Image
	178,  // 597: User.AvatarMedium:type_name -> Image
	178,  // 598: User.AvatarLarge:type_name -> Image
	178,  // 599: User.BadgeImageList:type_name -> Image
	216,  // 600: User.FollowInfo:type_name -> FollowInfo
	209,  // 601: User.PayGrade:type_name -> PayGrade
	210,  // 602: User.FansClub:type_name -> FansClub
	178,  // 603: User.AvatarBorder:type_name -> Image
	178,  // 604: User.Medal:type_name -> Image
	178,  // 605: User.RealTimeIconsList:type_name -> Image
	178,  // 606: PayGrade.diamondIcon:type_name -> Image
	178,  // 607: PayGrade.icon:type_name -> Image
	178,  // 608: PayGrade.nextIcon:type_name -> Image
	215,  // 609: PayGrade.gradeIconList:type_name -> GradeIcon
	178,  // 610: PayGrade.imIcon:type_name -> Image
	178,  // 611: PayGrade.imIconWithLevel:type_name -> Image
	178,  // 612: PayGrade.liveIcon:type_name -> Image
	178,  // 613: PayGrade.newImIconWithLevel:type_name -> Image
	178,  // 614: PayGrade.newLiveIcon:type_name -> Image
	178,  // 615: PayGrade.background:type_name -> Image
	178,  // 616: PayGrade.backgroundBack:type_name -> Image
	213,  // 617: PayGrade.buffInfo:type_name -> GradeBuffInfo
	178,  // 618: PayGrade.profileDialogBg:type_name -> Image
	178,  // 619: PayGrade.profileDialogBgBack:type_name -> Image
	211,  // 620: FansClub.data:type_name -> FansClubData
	651,  // 621: FansClub.preferData:type_name -> FansClub.PreferDataEntry
	212,  // 622: FansClubData.badge:type_name -> UserBadge
	652,  // 623: UserBadge.icons:type_name -> UserBadge.IconsEntry
	178,  // 624: GradeIcon.icon:type_name -> Image
	224,  // 625: PushFrame.headersList:type_name -> HeadersList
	221,  // 626: SendMessageBody.ext:type_name -> ExtList
	653,  // 627: Rsp.f:type_name -> Rsp.F
	220,  // 628: PreMessage.sendMessageBody:type_name -> SendMessageBody
	224,  // 629: PreMessage.headers:type_name -> HeadersList
	48,   // 630: RoomStatsMessage.common:type_name -> Common
	48,   // 631: ProductChangeMessage.common:type_name -> Common
	226,  // 632: ProductChangeMessage.updateProductInfoList:type_name -> ProductInfo
	227,  // 633: ProductChangeMessage.updateCategoryInfoList:type_name -> CategoryInfo
	48,   // 634: ControlMessage.common:type_name -> Common
	48,   // 635: FansclubMessage.commonInfo:type_name -> Common
	208,  // 636: FansclubMessage.user:type_name -> User
	48,   // 637: RoomRankMessage.common:type_name -> Common
	654,  // 638: RoomRankMessage.ranksList:type_name -> RoomRankMessage.RoomRank
	48,   // 639: RoomMessage.common:type_name -> Common
	1,    // 640: RoomMessage.roommessagetype:type_name -> RoomMsgTypeEnum
	655,  // 641: RoomMessage.buriedPointMap:type_name -> RoomMessage.BuriedPointMapEntry
	48,   // 642: RanklistHourEntranceMessage.common:type_name -> Common
	234,  // 643: RanklistHourEntranceMessage.info:type_name -> RanklistHourEntrance
	656,  // 644: RanklistHourEntrance.global_infos:type_name -> RanklistHourEntrance.Info
	656,  // 645: RanklistHourEntrance.default_global_infos:type_name -> RanklistHourEntrance.Info
	656,  // 646: RanklistHourEntrance.vertical_infos:type_name -> RanklistHourEntrance.Info
	656,  // 647: RanklistHourEntrance.default_vertical_infos:type_name -> RanklistHourEntrance.Info
	48,   // 648: InRoomBannerMessage.common:type_name -> Common
	48,   // 649: RoomDataSyncMessage.common:type_name -> Common
	48,   // 650: LuckyBoxTempStatusMessage.common:type_name -> Common
	48,   // 651: DecorationModifyMessage.common:type_name -> Common
	48,   // 652: DecorationUpdateMessage.common:type_name -> Common
	240,  // 653: DecorationUpdateMessage.detai:type_name -> DecotationDetail
	241,  // 654: DecotationDetail.text_decoration:type_name -> Decoration
	241,  // 655: DecotationDetail.image_decoration:type_name -> Decoration
	178,  // 656: Decoration.image:type_name -> Image
	242,  // 657: Decoration.reservation:type_name -> Reservation
	178,  // 658: Decoration.nine_patch_image:type_name -> Image
	243,  // 659: Decoration.text_font_config:type_name -> DecorationFontConfig
	48,   // 660: LinkMicAudienceKtvMessage.common:type_name -> Common
	245,  // 661: LinkMicAudienceKtvMessage.list_info:type_name -> ListInfo
	659,  // 662: LinkMicAudienceKtvMessage.all_song_unique_list:type_name -> LinkMicAudienceKtvMessage.SongUniqueInfo
	246,  // 663: ListInfo.music:type_name -> KtvSongStruct
	661,  // 664: KtvSongStruct.full_track:type_name -> KtvSongStruct.AudioInfo
	661,  // 665: KtvSongStruct.accompaniment_track:type_name -> KtvSongStruct.AudioInfo
	662,  // 666: KtvSongStruct.order_info:type_name -> KtvSongStruct.OrderInfo
	250,  // 667: KtvSongStruct.music_climax:type_name -> MusicInterval
	250,  // 668: KtvSongStruct.preludes:type_name -> MusicInterval
	250,  // 669: KtvSongStruct.interludes:type_name -> MusicInterval
	250,  // 670: KtvSongStruct.segments:type_name -> MusicInterval
	250,  // 671: KtvSongStruct.bridge_segments:type_name -> MusicInterval
	250,  // 672: KtvSongStruct.main_segments:type_name -> MusicInterval
	250,  // 673: KtvSongStruct.finale_segments:type_name -> MusicInterval
	251,  // 674: KtvSongStruct.chorus_info:type_name -> ChorusVideoInfo
	247,  // 675: KtvSongStruct.personal_song_info:type_name -> PersonalSongInfo
	249,  // 676: KtvSongStruct.want_listen_info:type_name -> WantListenInfo
	663,  // 677: KtvSongStruct.challenge_info:type_name -> KtvSongStruct.ChallengeInfo
	660,  // 678: KtvSongStruct.ext:type_name -> KtvSongStruct.ExtEntry
	178,  // 679: UserInfo.avatar:type_name -> Image
	252,  // 680: UserInfo.high_score_song_tag:type_name -> UserHighScoreSongTag
	178,  // 681: ChorusVideoInfo.image:type_name -> Image
	48,   // 682: RoomStreamAdaptationMessage.common:type_name -> Common
	48,   // 683: QuizAudienceStatusMessage.common:type_name -> Common
	255,  // 684: QuizAudienceStatusMessage.quiz_list:type_name -> Quiz
	48,   // 685: HotChatMessage.common:type_name -> Common
	31,   // 686: HotChatMessage.rtf_content:type_name -> Text
	664,  // 687: HotChatMessage.extra:type_name -> HotChatMessage.ExtraEntry
	48,   // 688: HotRoomMessage.common:type_name -> Common
	258,  // 689: HotRoomMessage.info:type_name -> HotRoomInfo
	48,   // 690: AudioChatMessage.common:type_name -> Common
	208,  // 691: AudioChatMessage.user:type_name -> User
	27,   // 692: AudioChatMessage.public_area_common:type_name -> PublicAreaCommon
	31,   // 693: AudioChatMessage.rtf_content:type_name -> Text
	48,   // 694: NotifyMessage.common:type_name -> Common
	208,  // 695: NotifyMessage.user:type_name -> User
	665,  // 696: NotifyMessage.extra:type_name -> NotifyMessage.Extra
	48,   // 697: LuckyBoxMessage.common:type_name -> Common
	178,  // 698: LuckyBoxMessage.background:type_name -> Image
	208,  // 699: LuckyBoxMessage.user:type_name -> User
	670,  // 700: LuckyBoxMessage.description_list:type_name -> LuckyBoxMessage.ImgText
	178,  // 701: LuckyBoxMessage.lucky_icon:type_name -> Image
	671,  // 702: LuckyBoxMessage.meta:type_name -> LuckyBoxMessage.BoxMeta
	672,  // 703: LuckyBoxMessage.extra:type_name -> LuckyBoxMessage.Extra
	178,  // 704: LuckyBoxMessage.top_cover_image:type_name -> Image
	178,  // 705: LuckyBoxMessage.bottom_cover_image:type_name -> Image
	673,  // 706: LuckyBoxMessage.bottom_comment_msg:type_name -> LuckyBoxMessage.BottomCommentMsg
	674,  // 707: LuckyBoxMessage.dress:type_name -> LuckyBoxMessage.Dress
	27,   // 708: LuckyBoxMessage.public_area_common:type_name -> PublicAreaCommon
	48,   // 709: UpdateFanTicketMessage.common:type_name -> Common
	48,   // 710: ScreenChatMessage.common:type_name -> Common
	208,  // 711: ScreenChatMessage.user:type_name -> User
	264,  // 712: ScreenChatMessage.effect:type_name -> Effect
	178,  // 713: ScreenChatMessage.background_image:type_name -> Image
	264,  // 714: ScreenChatMessage.effect_v2:type_name -> Effect
	178,  // 715: ScreenChatMessage.background_image_v2:type_name -> Image
	27,   // 716: ScreenChatMessage.public_area_common:type_name -> PublicAreaCommon
	679,  // 717: ScreenChatMessage.official_comment_config:type_name -> ScreenChatMessage.OfficialCommentConfig
	266,  // 718: ScreenChatMessage.chat_identity_info:type_name -> ChatIdentity
	31,   // 719: ScreenChatMessage.rtf_content:type_name -> Text
	31,   // 720: ScreenChatMessage.rtf_content_v2:type_name -> Text
	265,  // 721: Effect.icon:type_name -> FlexImageStruct
	178,  // 722: Effect.avatar_icon:type_name -> Image
	178,  // 723: ChatIdentity.identity_label:type_name -> Image
	48,   // 724: NotifyEffectMessage.common:type_name -> Common
	178,  // 725: NotifyEffectMessage.icons:type_name -> Image
	268,  // 726: NotifyEffectMessage.text:type_name -> CombinedText
	681,  // 727: NotifyEffectMessage.background:type_name -> NotifyEffectMessage.Background
	682,  // 728: NotifyEffectMessage.dynamic_config:type_name -> NotifyEffectMessage.DynamicConfig
	268,  // 729: NotifyEffectMessage.text_v2:type_name -> CombinedText
	684,  // 730: NotifyEffectMessage.scene_config:type_name -> NotifyEffectMessage.SceneConfig
	680,  // 731: NotifyEffectMessage.buried_point:type_name -> NotifyEffectMessage.BuriedPointEntry
	271,  // 732: CombinedText.display_items:type_name -> DisplayItem
	270,  // 733: CombinedText.schema_info:type_name -> SchemaInfo
	269,  // 734: CombinedText.combo_info:type_name -> ComboInfo
	270,  // 735: DisplayItem.schema_info:type_name -> SchemaInfo
	272,  // 736: DisplayItem.images_item:type_name -> ImagesItem
	273,  // 737: DisplayItem.text_item:type_name -> TextItem
	274,  // 738: DisplayItem.format:type_name -> DisplayItemFormat
	178,  // 739: ImagesItem.images:type_name -> Image
	31,   // 740: TextItem.text:type_name -> Text
	48,   // 741: TempStateAreaReachMessage.common:type_name -> Common
	685,  // 742: TempStateAreaReachMessage.resource:type_name -> TempStateAreaReachMessage.Resource
	277,  // 743: GrowthTask.stage_list:type_name -> GrowthTaskStage
	281,  // 744: GrowthTaskStage.condition_list:type_name -> GrowthTaskCondition
	278,  // 745: GrowthTaskStage.reward_list:type_name -> GrowthTaskReward
	279,  // 746: GrowthTaskReward.def:type_name -> GrowthTaskRewardDef
	280,  // 747: GrowthTaskCondition.def:type_name -> GrowthTaskCondDef
	48,   // 748: GrowthTaskMessage.common:type_name -> Common
	276,  // 749: GrowthTaskMessage.task:type_name -> GrowthTask
	686,  // 750: GrowthTaskMessage.current_contribution:type_name -> GrowthTaskMessage.CurrentContribution
	283,  // 751: GrowthTaskMessage.contributors:type_name -> GrowthTaskContributorRank
	208,  // 752: GrowthTaskContributorRank.user:type_name -> User
	48,   // 753: GameCPBaseMessage.common:type_name -> Common
	285,  // 754: GameCPBaseMessage.show_info:type_name -> GameCPShowMessage
	31,   // 755: GameCPShowMessage.introduce_download_info:type_name -> Text
	31,   // 756: GameCPShowMessage.introduce_stop_message:type_name -> Text
	286,  // 757: GameCPShowMessage.reserve_item:type_name -> ReserveItem
	287,  // 758: GameCPShowMessage.mini_game_meta:type_name -> MiniGameMeta
	288,  // 759: GameCPShowMessage.mini_play_meta:type_name -> MiniPlayMeta
	289,  // 760: GameCPShowMessage.game_icon:type_name -> GameImageBundler
	291,  // 761: GameCPShowMessage.cloud_game_meta:type_name -> CloudGameMeta
	292,  // 762: GameCPShowMessage.atmosphere_content:type_name -> AtmosphereContent
	293,  // 763: GameCPShowMessage.featured_content:type_name -> FeaturedContent
	295,  // 764: GameCPShowMessage.tag:type_name -> IntroduceCardTag
	296,  // 765: GameCPShowMessage.card_display_info:type_name -> IntroduceCardDisplayInfo
	290,  // 766: GameImageBundler.origin_image:type_name -> GameImage
	290,  // 767: GameImageBundler.thumb_image:type_name -> GameImage
	290,  // 768: GameImageBundler.thumb_heif_image:type_name -> GameImage
	294,  // 769: FeaturedContent.contents:type_name -> Content
	48,   // 770: SandwichBorderMessage.common:type_name -> Common
	298,  // 771: SandwichBorderMessage.sandwich_border_info:type_name -> SandwichBorder
	48,   // 772: LiveShoppingMessage.common:type_name -> Common
	310,  // 773: LiveShoppingMessage.updated_product_info:type_name -> UpdatedProductInfo
	311,  // 774: LiveShoppingMessage.updated_coupon_info:type_name -> UpdatedCouponInfo
	312,  // 775: LiveShoppingMessage.updated_campaign_info:type_name -> UpdatedCampaignInfo
	315,  // 776: LiveShoppingMessage.update_sku_info:type_name -> UpdatedSkuInfo
	316,  // 777: LiveShoppingMessage.updated_commentary_video_info:type_name -> UpdatedCommentaryVideoInfo
	317,  // 778: LiveShoppingMessage.updated_group_info:type_name -> UpdatedGroupInfo
	314,  // 779: LiveShoppingMessage.trace_time_metric:type_name -> TraceTimeMetric
	318,  // 780: LiveShoppingMessage.auction_success:type_name -> AuctionSuccess
	327,  // 781: LiveShoppingMessage.auction_info:type_name -> AuctionInfo
	319,  // 782: LiveShoppingMessage.redpack_activity_info:type_name -> RedpackActivityInfo
	320,  // 783: LiveShoppingMessage.updated_cart_info:type_name -> UpdatedCartInfo
	322,  // 784: LiveShoppingMessage.lottery_info:type_name -> LotteryInfo
	331,  // 785: LiveShoppingMessage.win_lotteryinfo:type_name -> WinLotteryInfo
	333,  // 786: LiveShoppingMessage.lottery_info_list:type_name -> LotteryInfoList
	335,  // 787: LiveShoppingMessage.hot_atmosphere:type_name -> HotAtmosphere
	304,  // 788: LiveShoppingMessage.room_tag_offline_info:type_name -> RoomTagOfflineInfo
	302,  // 789: LiveShoppingMessage.filter_switch_change_data:type_name -> FilterSwitchChangeData
	305,  // 790: LiveShoppingMessage.interaction_data:type_name -> InteractionData
	48,   // 791: LiveEcomGeneralMessage.common:type_name -> Common
	301,  // 792: LiveEcomGeneralMessage.trace_time_metric:type_name -> TraceTimeMetricV2
	303,  // 793: FilterSwitchChangeData.up_icon:type_name -> UpIcon
	306,  // 794: InteractionData.contents:type_name -> InteractionContent
	307,  // 795: InteractionContent.check:type_name -> InteractionContentCheck
	308,  // 796: InteractionContent.content:type_name -> InteractionElement
	688,  // 797: InteractionContent.event_param:type_name -> InteractionContent.EventParamEntry
	309,  // 798: InteractionElement.avatars:type_name -> InteractionAvatar
	689,  // 799: UpdatedSkuInfo.skus:type_name -> UpdatedSkuInfo.SkusEntry
	324,  // 800: UpdatedCartInfo.vertical:type_name -> CartVertical
	325,  // 801: UpdatedCartInfo.horizontal:type_name -> CartHorizontal
	326,  // 802: UpdatedCartInfo.global_custom_icons:type_name -> GlobalCustomIcons
	321,  // 803: LotteryInfo.product_info:type_name -> LotteryProductShortInfo
	328,  // 804: AuctionInfo.current_user_info:type_name -> CurrentUserInfo
	330,  // 805: AuctionInfo.incr_price_lists:type_name -> IncrPriceList
	329,  // 806: CurrentUserInfo.user_pic:type_name -> Img
	332,  // 807: WinLotteryInfo.alert:type_name -> WinLotteryAlert
	334,  // 808: LotteryInfoList.benefit_label:type_name -> BenefitLabel
	340,  // 809: MemberMessage.AlternativeEffectConfigEntry.value:type_name -> MemberMessage.EffectConfig
	178,  // 810: MemberMessage.EffectConfig.icon:type_name -> Image
	31,   // 811: MemberMessage.EffectConfig.text:type_name -> Text
	178,  // 812: MemberMessage.EffectConfig.text_icon:type_name -> Image
	178,  // 813: MemberMessage.EffectConfig.badge:type_name -> Image
	178,  // 814: MemberMessage.EffectConfig.text_icon_overlay:type_name -> Image
	178,  // 815: MemberMessage.EffectConfig.animated_badge:type_name -> Image
	178,  // 816: MemberMessage.EffectConfig.dynamic_image:type_name -> Image
	342,  // 817: MemberMessage.EffectConfig.extra:type_name -> MemberMessage.EffectConfig.ExtraEntry
	343,  // 818: MemberMessage.EffectConfig.piece_values:type_name -> MemberMessage.EffectConfig.PieceValuesEntry
	178,  // 819: MemberMessage.PicoEffectConfig.icon:type_name -> Image
	31,   // 820: MemberMessage.PicoEffectConfig.text:type_name -> Text
	178,  // 821: MemberMessage.PicoEffectConfig.text_icon:type_name -> Image
	178,  // 822: MemberMessage.PicoEffectConfig.badge:type_name -> Image
	344,  // 823: MemberMessage.PicoEffectConfig.extra:type_name -> MemberMessage.PicoEffectConfig.ExtraEntry
	32,   // 824: MemberMessage.EffectConfig.PieceValuesEntry.value:type_name -> TextPiece
	270,  // 825: Text.SchemaInfosEntry.value:type_name -> SchemaInfo
	358,  // 826: StreamUrl.PullDatasEntry.value:type_name -> LiveCoreSDKData.PullData
	359,  // 827: StreamUrl.PushDatasEntry.value:type_name -> LiveCoreSDKData.PushData
	361,  // 828: LiveCoreSDKData.PullData.options:type_name -> LiveCoreSDKData.PullData.Options
	360,  // 829: LiveCoreSDKData.PullData.hls_data_unencrypted:type_name -> LiveCoreSDKData.PullData.HlsDataUnencryptedEntry
	364,  // 830: LiveCoreSDKData.PullData.extension:type_name -> LiveCoreSDKData.PullData.Extension
	365,  // 831: LiveCoreSDKData.PullData.Hls:type_name -> LiveCoreSDKData.PullData.PlayInfo
	365,  // 832: LiveCoreSDKData.PullData.Flv:type_name -> LiveCoreSDKData.PullData.PlayInfo
	366,  // 833: LiveCoreSDKData.PullData.display:type_name -> LiveCoreSDKData.PullData.Display
	368,  // 834: LiveCoreSDKData.PushData.resolution_params:type_name -> LiveCoreSDKData.PushData.ResolutionParamsEntry
	367,  // 835: LiveCoreSDKData.PullData.Options.default_quality:type_name -> LiveCoreSDKData.PullData.Options.Quality
	367,  // 836: LiveCoreSDKData.PullData.Options.qualities:type_name -> LiveCoreSDKData.PullData.Options.Quality
	362,  // 837: LiveCoreSDKData.PullData.Extension.game_clip:type_name -> LiveCoreSDKData.PullData.Clip
	362,  // 838: LiveCoreSDKData.PullData.Extension.camera_clip:type_name -> LiveCoreSDKData.PullData.Clip
	362,  // 839: LiveCoreSDKData.PullData.Extension.camera_clip_custom:type_name -> LiveCoreSDKData.PullData.Clip
	363,  // 840: LiveCoreSDKData.PullData.Extension.camera_horizontal_position:type_name -> LiveCoreSDKData.PullData.CameraHorizontalPosition
	369,  // 841: LiveCoreSDKData.PushData.ResolutionParamsEntry.value:type_name -> LiveCoreSDKData.PushData.ResolutionParams
	358,  // 842: OpenStreamUrlEncrypt.PullDatasEntry.value:type_name -> LiveCoreSDKData.PullData
	375,  // 843: RoomAuthStatus.RoomAuthSpecialStyle.Chat:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 844: RoomAuthStatus.RoomAuthSpecialStyle.Gift:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 845: RoomAuthStatus.RoomAuthSpecialStyle.RoomContributor:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 846: RoomAuthStatus.RoomAuthSpecialStyle.Like:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 847: RoomAuthStatus.RoomAuthSpecialStyle.RoomChannel:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 848: RoomAuthStatus.RoomAuthSpecialStyle.Share:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 849: RoomAuthStatus.RoomAuthSpecialStyle.CastScreenAuth:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	375,  // 850: RoomAuthStatus.RoomAuthSpecialStyle.Landscape:type_name -> RoomAuthStatus.RoomAuthSpecialStyle.Style
	381,  // 851: RoomShortTouchAreaConfig.ElementsEntry.value:type_name -> RoomShortTouchAreaConfig.Element
	382,  // 852: RoomShortTouchAreaConfig.ForbiddenTypesMapEntry.value:type_name -> RoomShortTouchAreaConfig.ForbiddenType
	384,  // 853: RoomShortTouchAreaConfig.TempStateConditionMapEntry.value:type_name -> RoomShortTouchAreaConfig.TempStateCondition
	385,  // 854: RoomShortTouchAreaConfig.TempStateStrategyEntry.value:type_name -> RoomShortTouchAreaConfig.TempStateStrategy
	383,  // 855: RoomShortTouchAreaConfig.TempStateCondition.type:type_name -> RoomShortTouchAreaConfig.TempStateType
	387,  // 856: RoomShortTouchAreaConfig.TempStateStrategy.strategy_map:type_name -> RoomShortTouchAreaConfig.TempStateStrategy.StrategyMapEntry
	388,  // 857: RoomShortTouchAreaConfig.TempStateStrategy.StrategyMapEntry.value:type_name -> RoomShortTouchAreaConfig.TempStateStrategy.TempStateStrategyInfo
	383,  // 858: RoomShortTouchAreaConfig.TempStateStrategy.TempStateStrategyInfo.type:type_name -> RoomShortTouchAreaConfig.TempStateType
	406,  // 859: EpisodePremierePlay.VsEpisodeHighLight.image:type_name -> EpisodePremierePlay.VsEpisodeHighLight.Image
	429,  // 860: MatchRoomInfo.MatchTabFrame.tabs:type_name -> MatchRoomInfo.MatchTabFrame.MatchTab
	429,  // 861: MatchRoomInfo.MatchTabFrame.replay_tabs:type_name -> MatchRoomInfo.MatchTabFrame.MatchTab
	430,  // 862: MatchRoomInfo.MatchTitle.title_icon:type_name -> MatchRoomInfo.MatchTitle.TitleIcon
	431,  // 863: MatchRoomInfo.ToutiaoMatchData.against:type_name -> MatchRoomInfo.ToutiaoMatchData.Against
	432,  // 864: MatchRoomInfo.ToutiaoMatchData.team_stats:type_name -> MatchRoomInfo.ToutiaoMatchData.TeamStats
	433,  // 865: MatchRoomInfo.ToutiaoMatchData.player_stats:type_name -> MatchRoomInfo.ToutiaoMatchData.PlayerStats
	434,  // 866: MatchRoomInfo.ToutiaoMatchData.winner_icon:type_name -> MatchRoomInfo.ToutiaoMatchData.Image
	435,  // 867: MatchRoomInfo.MatchRoomImInfo.icon:type_name -> MatchRoomInfo.MatchRoomImInfo.Image
	436,  // 868: MatchRoomInfo.MatchShareBackground.vertical_img:type_name -> MatchRoomInfo.MatchShareBackground.Image
	436,  // 869: MatchRoomInfo.MatchShareBackground.horizontal_img:type_name -> MatchRoomInfo.MatchShareBackground.Image
	439,  // 870: SharePosterInfo.PosterData.poster:type_name -> SharePosterInfo.Image
	439,  // 871: SharePosterInfo.PosterData.decorator:type_name -> SharePosterInfo.Image
	105,  // 872: EpisodeExtraInfo.PrivilegeInfoEntry.value:type_name -> PrivilegeInfo
	443,  // 873: MainCameraMatchInfo.ToutiaoMatchData.against:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against
	444,  // 874: MainCameraMatchInfo.ToutiaoMatchData.team_stats:type_name -> MainCameraMatchInfo.ToutiaoMatchData.TeamStats
	445,  // 875: MainCameraMatchInfo.ToutiaoMatchData.player_stats:type_name -> MainCameraMatchInfo.ToutiaoMatchData.PlayerStats
	446,  // 876: MainCameraMatchInfo.ToutiaoMatchData.winner_icon:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Image
	447,  // 877: MainCameraMatchInfo.ToutiaoMatchData.Against.left_logo:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.Image
	448,  // 878: MainCameraMatchInfo.ToutiaoMatchData.Against.left_players:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo
	449,  // 879: MainCameraMatchInfo.ToutiaoMatchData.Against.left_goal_stage_detail:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.GoalStageDetail
	447,  // 880: MainCameraMatchInfo.ToutiaoMatchData.Against.right_logo:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.Image
	448,  // 881: MainCameraMatchInfo.ToutiaoMatchData.Against.right_players:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo
	449,  // 882: MainCameraMatchInfo.ToutiaoMatchData.Against.right_goal_stage_detail:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.GoalStageDetail
	450,  // 883: MainCameraMatchInfo.ToutiaoMatchData.Against.left_score_detail:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.BasketBallGoalStageDetail
	450,  // 884: MainCameraMatchInfo.ToutiaoMatchData.Against.right_score_detail:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.BasketBallGoalStageDetail
	451,  // 885: MainCameraMatchInfo.ToutiaoMatchData.Against.basketball_stage:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.BasketballStage
	452,  // 886: MainCameraMatchInfo.ToutiaoMatchData.Against.esport_stage:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.ESportsStage
	453,  // 887: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.portrait:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.Image
	454,  // 888: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.last_event:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayByPlayItemInfo
	455,  // 889: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.player_stats:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayerStats
	454,  // 890: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.last_up_event:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayByPlayItemInfo
	454,  // 891: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.event_list:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.PlayByPlayItemInfo
	453,  // 892: MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.superstar_img:type_name -> MainCameraMatchInfo.ToutiaoMatchData.Against.PlayerInfo.Image
	457,  // 893: MultiTab.TabItem.bubble:type_name -> MultiTab.Bubble
	105,  // 894: PaidLiveData.PrivilegeInfoEntry.value:type_name -> PrivilegeInfo
	105,  // 895: PaidLiveData.PrivilegeInfoMapEntry.value:type_name -> PrivilegeInfo
	178,  // 896: PaidLiveData.TicketData.cover:type_name -> Image
	467,  // 897: PaidLiveData.TicketData.friend_priceInfo:type_name -> PaidLiveData.TicketData.PaidLivePriceInfo
	467,  // 898: PaidLiveData.TicketData.helping_priceInfo:type_name -> PaidLiveData.TicketData.PaidLivePriceInfo
	466,  // 899: PaidLiveData.TicketData.price_info:type_name -> PaidLiveData.TicketData.PriceInfoEntry
	469,  // 900: PaidLiveData.TicketData.sku_details:type_name -> PaidLiveData.TicketData.TicketSkuDetail
	468,  // 901: PaidLiveData.TicketData.final_price_info:type_name -> PaidLiveData.TicketData.PaidLivePriceInfoV2
	470,  // 902: PaidLiveData.TicketData.subscribe_member_mark:type_name -> PaidLiveData.TicketData.SubscribeMemberMark
	471,  // 903: PaidLiveData.ProductsData.tool_bar:type_name -> PaidLiveData.ProductsData.ToolBar
	472,  // 904: PaidLiveData.ProductsData.explain_card:type_name -> PaidLiveData.ProductsData.ExplainCard
	471,  // 905: PaidLiveData.ProductsData.product_list_tool_bar:type_name -> PaidLiveData.ProductsData.ToolBar
	468,  // 906: PaidLiveData.TicketData.PriceInfoEntry.value:type_name -> PaidLiveData.TicketData.PaidLivePriceInfoV2
	468,  // 907: PaidLiveData.TicketData.TicketSkuDetail.price_info:type_name -> PaidLiveData.TicketData.PaidLivePriceInfoV2
	468,  // 908: PaidLiveData.TicketData.TicketSkuDetail.dou_price_info:type_name -> PaidLiveData.TicketData.PaidLivePriceInfoV2
	104,  // 909: PaidLiveData.ProductsData.ExplainCard.product:type_name -> Product
	178,  // 910: Product.ProductBasicInfo.cover:type_name -> Image
	492,  // 911: Product.ProductBasicInfo.introduction:type_name -> Product.ProductBasicInfo.Introduction
	493,  // 912: Product.ProductBasicInfo.header_media:type_name -> Product.ProductBasicInfo.HeaderMedia
	494,  // 913: Product.ProductBasicInfo.tags:type_name -> Product.ProductBasicInfo.ProductTag
	495,  // 914: Product.ProductBasicInfo.content_tips:type_name -> Product.ProductBasicInfo.ContentTip
	496,  // 915: Product.ProductBasicInfo.selling_points:type_name -> Product.ProductBasicInfo.ProductSellingPoint
	497,  // 916: Product.ProductBasicInfo.sale_info:type_name -> Product.ProductBasicInfo.ProductSaleInfo
	498,  // 917: Product.ProductBasicInfo.recent_purchased_user:type_name -> Product.ProductBasicInfo.RecentPurchasedUser
	500,  // 918: Product.PaymentArea.pay_button:type_name -> Product.PaymentArea.PayButton
	501,  // 919: Product.PaymentArea.additional_button:type_name -> Product.PaymentArea.AdditionalButton
	503,  // 920: Product.ProductPriceRichText.rich_texts:type_name -> Product.ProductPriceRichText.ProductRichText
	502,  // 921: Product.ProductPriceRichText.extra:type_name -> Product.ProductPriceRichText.ExtraEntry
	504,  // 922: Product.ProductComments.Comments:type_name -> Product.ProductComments.ProductComment
	486,  // 923: Product.ShareTicket.from_user:type_name -> Product.User
	505,  // 924: Product.PrivilegeTicket.privilege_conf:type_name -> Product.PrivilegeTicket.PrivilegeConfigure
	506,  // 925: Product.Combined.bind_sub_ticket_list:type_name -> Product.Combined.BindSubProductData
	507,  // 926: Product.Combined.parent_ticket_panel_data:type_name -> Product.Combined.ParentProductSimpleData
	511,  // 927: Product.Comments.texts:type_name -> Product.Comments.TextInfo
	514,  // 928: Product.Author.user_info:type_name -> Product.Author.User
	513,  // 929: Product.Author.author_basic_info:type_name -> Product.Author.AuthorBasicInfo
	178,  // 930: Product.ProductBanner.cover:type_name -> Image
	519,  // 931: Product.SKU.cover:type_name -> Product.SKU.Image
	515,  // 932: Product.SKU.related_sku_simple_infos:type_name -> Product.SKU.RelatedSkuSimpleInfo
	516,  // 933: Product.SKU.camera_info:type_name -> Product.SKU.CameraInfo
	517,  // 934: Product.SKU.entity_ids_map:type_name -> Product.SKU.EntityIDsMap
	518,  // 935: Product.SKU.limited_free_notice:type_name -> Product.SKU.LimitedFreeNotice
	520,  // 936: Product.SubscribeMember.price_info:type_name -> Product.SubscribeMember.ProductPriceStruct
	178,  // 937: Product.ProductBasicInfo.HeaderMedia.image_info:type_name -> Image
	499,  // 938: Product.ProductBasicInfo.HeaderMedia.view_button:type_name -> Product.ProductBasicInfo.HeaderMedia.ViewButton
	178,  // 939: Product.ProductBasicInfo.ProductTag.icon:type_name -> Image
	178,  // 940: Product.ProductBasicInfo.RecentPurchasedUser.avatar:type_name -> Image
	178,  // 941: Product.ProductBasicInfo.HeaderMedia.ViewButton.icon:type_name -> Image
	178,  // 942: Product.PaymentArea.PayButton.icon:type_name -> Image
	178,  // 943: Product.PaymentArea.AdditionalButton.icon:type_name -> Image
	178,  // 944: Product.PrivilegeTicket.PrivilegeConfigure.icon:type_name -> Image
	178,  // 945: Product.Combined.ParentProductSimpleData.cover:type_name -> Image
	508,  // 946: Product.Combined.ParentProductSimpleData.data:type_name -> Product.Combined.ParentProductSimpleData.PurchaseSimpleData
	509,  // 947: Product.Combined.ParentProductSimpleData.PurchaseSimpleData.tags:type_name -> Product.Combined.ParentProductSimpleData.PurchaseSimpleData.ProductTag
	510,  // 948: Product.Combined.ParentProductSimpleData.PurchaseSimpleData.price_info:type_name -> Product.Combined.ParentProductSimpleData.PurchaseSimpleData.ProductPriceStruct
	178,  // 949: Product.Combined.ParentProductSimpleData.PurchaseSimpleData.ProductTag.icon:type_name -> Image
	512,  // 950: Product.Comments.TextInfo.user_info:type_name -> Product.Comments.TextInfo.UserInfo
	178,  // 951: Product.Comments.TextInfo.UserInfo.avatar:type_name -> Image
	178,  // 952: Product.Author.AuthorBasicInfo.cover:type_name -> Image
	519,  // 953: Product.SKU.LimitedFreeNotice.icon:type_name -> Product.SKU.Image
	526,  // 954: PrivilegeInfo.PaidLiveUIBaseConfig.paid_live_icon:type_name -> PrivilegeInfo.PaidLiveUIBaseConfig.Image
	527,  // 955: PrivilegeInfo.PaidLiveConfig.cover:type_name -> PrivilegeInfo.PaidLiveConfig.Image
	528,  // 956: PrivilegeInfo.PaidLiveConfig.ios_pay_price_info:type_name -> PrivilegeInfo.PaidLiveConfig.PriceInfo
	528,  // 957: PrivilegeInfo.PaidLiveConfig.android_pay_price_info:type_name -> PrivilegeInfo.PaidLiveConfig.PriceInfo
	529,  // 958: PrivilegeInfo.PaidLiveConfig.user_right:type_name -> PrivilegeInfo.PaidLiveConfig.UserRight
	531,  // 959: FeedbackCard.Question.options:type_name -> FeedbackCard.Option
	532,  // 960: FeedbackCard.Question.room_cards:type_name -> FeedbackCard.RoomCardStruct
	71,   // 961: FeedbackCard.RoomCardStruct.data:type_name -> Room
	534,  // 962: FeedbackCard.Condition.client_impression:type_name -> FeedbackCard.ClientImpression
	113,  // 963: ToolBarData.SkinResourceEntry.value:type_name -> ComponentSkin
	208,  // 964: UnionLiveInfo.GuestAnchor.user:type_name -> User
	541,  // 965: RelevantRecommendation.VsInfo.episodes:type_name -> RelevantRecommendation.VsInfo.Episode
	178,  // 966: RelevantRecommendation.VsInfo.Episode.episode_cover:type_name -> Image
	178,  // 967: PreviewExposeData.PreviewGuide.icon:type_name -> Image
	563,  // 968: PreviewExposeData.PreviewGuide.et_extra:type_name -> PreviewExposeData.PreviewGuide.EtExtraEntry
	564,  // 969: PreviewExposeData.Meta.host:type_name -> PreviewExposeData.Meta.Host
	178,  // 970: PreviewExposeData.PreviewExtendArea.extend_icon:type_name -> Image
	567,  // 971: PreviewExposeData.PreviewExtendArea.right_part:type_name -> PreviewExposeData.PreviewExtendArea.Part
	567,  // 972: PreviewExposeData.PreviewExtendArea.mid_part:type_name -> PreviewExposeData.PreviewExtendArea.Part
	567,  // 973: PreviewExposeData.PreviewExtendArea.bottom_part:type_name -> PreviewExposeData.PreviewExtendArea.Part
	568,  // 974: PreviewExposeData.PreviewExtendArea.action_cfg:type_name -> PreviewExposeData.PreviewExtendArea.ActionConfig
	565,  // 975: PreviewExposeData.PreviewExtendArea.extra_enter_room:type_name -> PreviewExposeData.PreviewExtendArea.ExtraEnterRoomEntry
	566,  // 976: PreviewExposeData.PreviewExtendArea.et_extra:type_name -> PreviewExposeData.PreviewExtendArea.EtExtraEntry
	178,  // 977: PreviewExposeData.PreviewPromotion.avatar_icons:type_name -> Image
	570,  // 978: PreviewExposeData.PreviewPromotion.fast_comments_emoji:type_name -> PreviewExposeData.PreviewPromotion.EmojiDetail
	178,  // 979: PreviewExposeData.PreviewIMExtend.icon:type_name -> Image
	571,  // 980: PreviewExposeData.GrowthTask.extra:type_name -> PreviewExposeData.GrowthTask.ExtraEntry
	178,  // 981: PreviewExposeData.PreviewPromotionSyncData.icon:type_name -> Image
	572,  // 982: PreviewExposeData.PreviewPromotionSyncData.lucky_bag:type_name -> PreviewExposeData.PreviewPromotionSyncData.LuckyBag
	573,  // 983: PreviewExposeData.PreviewPromotionSyncData.lucky_money:type_name -> PreviewExposeData.PreviewPromotionSyncData.LuckyMoney
	178,  // 984: PreviewExposeData.PreviewExitGuide.icon:type_name -> Image
	574,  // 985: PreviewExposeData.PreviewExitGuide.user_list:type_name -> PreviewExposeData.PreviewExitGuide.User
	575,  // 986: PreviewExposeData.ClientComponent.portrait_component_map:type_name -> PreviewExposeData.ClientComponent.PortraitComponentMapEntry
	576,  // 987: PreviewExposeData.ClientComponent.landscape_component_map:type_name -> PreviewExposeData.ClientComponent.LandscapeComponentMapEntry
	577,  // 988: PreviewExposeData.ClientComponent.preview_default_component_map:type_name -> PreviewExposeData.ClientComponent.PreviewDefaultComponentMapEntry
	561,  // 989: PreviewExposeData.IOSClientComponent.fragments:type_name -> PreviewExposeData.IOSFragment
	562,  // 990: PreviewExposeData.IOSClientComponent.landscape_layout:type_name -> PreviewExposeData.IOSContainerLayout
	562,  // 991: PreviewExposeData.IOSClientComponent.portrait_layout:type_name -> PreviewExposeData.IOSContainerLayout
	561,  // 992: PreviewExposeData.IOSClientComponent.elements:type_name -> PreviewExposeData.IOSFragment
	178,  // 993: PreviewExposeData.Meta.Host.icon:type_name -> Image
	178,  // 994: PreviewExposeData.PreviewExtendArea.Part.image:type_name -> Image
	178,  // 995: PreviewExposeData.PreviewExtendArea.Part.left_image:type_name -> Image
	569,  // 996: PreviewExposeData.PreviewExtendArea.ActionConfig.actionPrams:type_name -> PreviewExposeData.PreviewExtendArea.ActionConfig.ActionPramsEntry
	559,  // 997: PreviewExposeData.ClientComponent.PortraitComponentMapEntry.value:type_name -> PreviewExposeData.ClientComponentInfo
	559,  // 998: PreviewExposeData.ClientComponent.LandscapeComponentMapEntry.value:type_name -> PreviewExposeData.ClientComponentInfo
	559,  // 999: PreviewExposeData.ClientComponent.PreviewDefaultComponentMapEntry.value:type_name -> PreviewExposeData.ClientComponentInfo
	178,  // 1000: Appearance.Bubble.icon:type_name -> Image
	178,  // 1001: Appearance.WideCover.cover:type_name -> Image
	178,  // 1002: Appearance.ToolbarItemConfig.icon:type_name -> Image
	178,  // 1003: Appearance.ToolbarItemConfig.dynamic_icon:type_name -> Image
	178,  // 1004: Appearance.ToolbarItemConfig.icon_vertical:type_name -> Image
	178,  // 1005: Appearance.ToolbarItemConfig.dynamic_bottom_icon:type_name -> Image
	178,  // 1006: Appearance.ToolbarItemConfig.bottom_icon:type_name -> Image
	584,  // 1007: Appearance.ToolbarItemConfig.toast_list:type_name -> Appearance.ToolbarItemConfig.Toast
	178,  // 1008: Appearance.PreviewLabel.label_image:type_name -> Image
	589,  // 1009: ClientComponent.PortraitComponentMapEntry.value:type_name -> ClientComponent.ClientComponentInfo
	589,  // 1010: ClientComponent.LandscapeComponentMapEntry.value:type_name -> ClientComponent.ClientComponentInfo
	589,  // 1011: ClientComponent.PreviewDefaultComponentMapEntry.value:type_name -> ClientComponent.ClientComponentInfo
	590,  // 1012: ClientComponent.ClientComponentInfo.config:type_name -> ClientComponent.ClientComponentInfo.ConfigEntry
	594,  // 1013: OpenContentData.OpenActivityData.metadata:type_name -> OpenContentData.OpenActivityData.MetadataEntry
	598,  // 1014: RoomFeedData.FollowTopAppearance.cut_position:type_name -> RoomFeedData.StreamCutPosition
	178,  // 1015: RoomFeedData.FollowTopAppearance.image:type_name -> Image
	601,  // 1016: RoomFeedData.DrawerConfig.avatar_area:type_name -> RoomFeedData.DrawerConfig.AvatarArea
	602,  // 1017: RoomFeedData.DrawerConfig.entrance_icon:type_name -> RoomFeedData.DrawerConfig.EntranceIcon
	603,  // 1018: RoomFeedData.DrawerConfig.entrace_title:type_name -> RoomFeedData.DrawerConfig.EntranceTitle
	604,  // 1019: RoomFeedData.DrawerConfig.arrow_view:type_name -> RoomFeedData.DrawerConfig.ArrowView
	605,  // 1020: RoomFeedData.DrawerConfig.entrance_layout:type_name -> RoomFeedData.DrawerConfig.EntranceLayout
	606,  // 1021: RoomFeedData.DrawerConfig.special_config:type_name -> RoomFeedData.DrawerConfig.SpecialConfig
	178,  // 1022: RoomFeedData.DrawerConfig.EntranceIcon.image:type_name -> Image
	603,  // 1023: RoomFeedData.DrawerConfig.SpecialConfig.entrace_title:type_name -> RoomFeedData.DrawerConfig.EntranceTitle
	607,  // 1024: RoomFeedData.DrawerConfig.SpecialConfig.freq_info:type_name -> RoomFeedData.DrawerConfig.SpecialConfig.FreqInfo
	178,  // 1025: PicoInfo.VirtualLiveBgImages.original_image:type_name -> Image
	178,  // 1026: PicoInfo.VirtualLiveBgImages.converted_images:type_name -> Image
	613,  // 1027: PicoInfo.VirtualLiveBgImages.converted_list:type_name -> PicoInfo.VirtualLiveBgImages.ConvertedImage
	178,  // 1028: PicoInfo.VirtualLiveBgImages.ConvertedImage.image:type_name -> Image
	178,  // 1029: LiveStatusInfo.LiveNotifyLightEntry.value:type_name -> Image
	178,  // 1030: ActivityRoomSkinInfo.VerticalScreenEntry.value:type_name -> Image
	178,  // 1031: ActivityRoomSkinInfo.HorizontalScreenEntry.value:type_name -> Image
	211,  // 1032: FansClub.PreferDataEntry.value:type_name -> FansClubData
	178,  // 1033: UserBadge.IconsEntry.value:type_name -> Image
	208,  // 1034: RoomRankMessage.RoomRank.user:type_name -> User
	657,  // 1035: RanklistHourEntrance.Info.details:type_name -> RanklistHourEntrance.Detail
	658,  // 1036: RanklistHourEntrance.Detail.pages:type_name -> RanklistHourEntrance.Page
	248,  // 1037: KtvSongStruct.OrderInfo.top_user:type_name -> UserInfo
	666,  // 1038: NotifyMessage.Extra.background:type_name -> NotifyMessage.Background
	668,  // 1039: NotifyMessage.Extra.content_list:type_name -> NotifyMessage.ContentList
	669,  // 1040: NotifyMessage.Extra.params:type_name -> NotifyMessage.Extra.ParamsEntry
	667,  // 1041: NotifyMessage.ContentList.contents:type_name -> NotifyMessage.Content
	178,  // 1042: LuckyBoxMessage.ImgText.image:type_name -> Image
	178,  // 1043: LuckyBoxMessage.BoxMeta.ad_image:type_name -> Image
	675,  // 1044: LuckyBoxMessage.Extra.all_desc:type_name -> LuckyBoxMessage.Extra.AllDescEntry
	676,  // 1045: LuckyBoxMessage.Extra.all_image:type_name -> LuckyBoxMessage.Extra.AllImageEntry
	31,   // 1046: LuckyBoxMessage.BottomCommentMsg.text:type_name -> Text
	178,  // 1047: LuckyBoxMessage.BottomCommentMsg.background:type_name -> Image
	178,  // 1048: LuckyBoxMessage.BottomCommentMsg.left_icon:type_name -> Image
	178,  // 1049: LuckyBoxMessage.BottomCommentMsg.right_icon:type_name -> Image
	677,  // 1050: LuckyBoxMessage.Dress.jump_schema_to_box:type_name -> LuckyBoxMessage.Dress.JumpSchemaToBoxEntry
	678,  // 1051: LuckyBoxMessage.Dress.jump_schema_to_dress:type_name -> LuckyBoxMessage.Dress.JumpSchemaToDressEntry
	178,  // 1052: LuckyBoxMessage.Extra.AllImageEntry.value:type_name -> Image
	178,  // 1053: NotifyEffectMessage.Background.background_image:type_name -> Image
	178,  // 1054: NotifyEffectMessage.Background.background_effect:type_name -> Image
	10,   // 1055: NotifyEffectMessage.BindingGiftMessage.msg:type_name -> GiftMessage
	48,   // 1056: NotifyEffectMessage.BindingGiftMessage.common:type_name -> Common
	31,   // 1057: NotifyEffectMessage.SceneConfig.aggregate_text:type_name -> Text
	208,  // 1058: GrowthTaskMessage.CurrentContribution.user:type_name -> User
	687,  // 1059: GrowthTaskMessage.CurrentContribution.delta_info:type_name -> GrowthTaskMessage.CurrentContribution.DeltaInfoEntry
	313,  // 1060: UpdatedSkuInfo.SkusEntry.value:type_name -> SkuInfo
	1061, // [1061:1061] is the sub-list for method output_type
	1061, // [1061:1061] is the sub-list for method input_type
	1061, // [1061:1061] is the sub-list for extension type_name
	1061, // [1061:1061] is the sub-list for extension extendee
	0,    // [0:1061] is the sub-list for field type_name
}

func init() { file_douyin_proto_init() }
func file_douyin_proto_init() {
	if File_douyin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_douyin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EmojiChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LandscapeAreaCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RoomUserSeqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CommonTextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RoomUserSeqMessageContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GiftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SeriesPlayGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SeriesTrayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RoomHotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ExtraEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SendTogether); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AssetEffectMixInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AnchorGiftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*EffectMixImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GiftTrayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TrayPostEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TrayPreEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GiftIMPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TextEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TextEffectDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MemberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PublicAreaCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SuffixText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ChatReplyRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*EffectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*TextPiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*TextPieceImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*TextPiecePatternRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TextPieceHeart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TextPieceGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PatternRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*TextPieceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*TextFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*LikeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SocialMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PicoDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DoubleLikeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DisplayControlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*MatchAgainstScoreMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Against); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*Common); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*RegionRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*RegionMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*StreamUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*StreamUrlExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*PlaySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*OpenStreamUrlEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SafeReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*RoomExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAuthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*RoomTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*RoomActivityTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*MatchSkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*OfficialRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*GameExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*OfficialChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*BorderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*EasterEggData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*FilterWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*VerticalTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*RoomIMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*AnnouncementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*ShortTouchAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*WatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*ToolbarItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePremierePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePreviewImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*VSGiftPannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*VSPannelIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePreviewBottom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*VSWatermark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*VSItemComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*VSBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*VSLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*CommentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*MultiCameraBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*SharePosterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodeExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*TitleIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*VSConfigDrawer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*MultiTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*VSPremiereToast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*CircleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*DesireInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*VipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*ToolBarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*ToolBarComponentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*ToolbarPermutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*ComponentSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*BeautifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*UnionLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*GameCPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*GamePlayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*AvatarLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*CommentWallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*CommentWallPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSpecificSceneTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*IndustryServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*EcomData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*EcomLiveCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*EcomProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*EcomPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*EcomIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*EcomCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*EcomAuction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*EcomBidder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*EcomAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*EcomPop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*EcomGoodsCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*RedsShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCartV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*LifeGrouponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*UpperRightWidgetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*LikeDisplayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*WelfareProjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*MatchDrawer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*MatchUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*ToutiaoMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*OfficialChannelExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*PackMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*InteractOpenExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*CommentaryRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*MatchChatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*ShareResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*ClientComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*RoomChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*OpenContentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*LabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*RoomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*PicoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*RoomRevenueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReqUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAnchorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInteractData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*RoomBasisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*CornerMarkReach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*PublicScreenBottomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*LiveStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*CastScreenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*AudioBGData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityRoomSkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*AudioSpeakingImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*AnimatedBgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityLiveRecommendConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[180].Exporter = func(v any, i int) any {
			switch v := v.(*IOSFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*IOSContainerLayoutRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*IOSContainerLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*IOSClientComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*RoomPlatformComponentsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*RoomPublicScreenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*RoomPublicScreenAttachments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFullVideoBTN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*RoomBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*AvatorBorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*RoomViewStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[193].Exporter = func(v any, i int) any {
			switch v := v.(*RoomTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAvator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*AnchorTabLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*DSLDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*QuizExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[198].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[199].Exporter = func(v any, i int) any {
			switch v := v.(*TopFan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[200].Exporter = func(v any, i int) any {
			switch v := v.(*RoomUserAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[201].Exporter = func(v any, i int) any {
			switch v := v.(*BurstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[202].Exporter = func(v any, i int) any {
			switch v := v.(*RoomHealthScoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[203].Exporter = func(v any, i int) any {
			switch v := v.(*TVStation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[204].Exporter = func(v any, i int) any {
			switch v := v.(*CommentBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[205].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[206].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[207].Exporter = func(v any, i int) any {
			switch v := v.(*PayGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[208].Exporter = func(v any, i int) any {
			switch v := v.(*FansClub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[209].Exporter = func(v any, i int) any {
			switch v := v.(*FansClubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[210].Exporter = func(v any, i int) any {
			switch v := v.(*UserBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[211].Exporter = func(v any, i int) any {
			switch v := v.(*GradeBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[212].Exporter = func(v any, i int) any {
			switch v := v.(*Border); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[213].Exporter = func(v any, i int) any {
			switch v := v.(*GradeIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[214].Exporter = func(v any, i int) any {
			switch v := v.(*FollowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[215].Exporter = func(v any, i int) any {
			switch v := v.(*NinePatchSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[216].Exporter = func(v any, i int) any {
			switch v := v.(*PushFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[217].Exporter = func(v any, i int) any {
			switch v := v.(*Kk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[218].Exporter = func(v any, i int) any {
			switch v := v.(*SendMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[219].Exporter = func(v any, i int) any {
			switch v := v.(*ExtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[220].Exporter = func(v any, i int) any {
			switch v := v.(*Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[221].Exporter = func(v any, i int) any {
			switch v := v.(*PreMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[222].Exporter = func(v any, i int) any {
			switch v := v.(*HeadersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[223].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStatsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[224].Exporter = func(v any, i int) any {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[225].Exporter = func(v any, i int) any {
			switch v := v.(*CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[226].Exporter = func(v any, i int) any {
			switch v := v.(*ProductChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[227].Exporter = func(v any, i int) any {
			switch v := v.(*ControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[228].Exporter = func(v any, i int) any {
			switch v := v.(*FansclubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[229].Exporter = func(v any, i int) any {
			switch v := v.(*RoomRankMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[230].Exporter = func(v any, i int) any {
			switch v := v.(*RoomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[231].Exporter = func(v any, i int) any {
			switch v := v.(*RanklistHourEntranceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[232].Exporter = func(v any, i int) any {
			switch v := v.(*RanklistHourEntrance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[233].Exporter = func(v any, i int) any {
			switch v := v.(*InRoomBannerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[234].Exporter = func(v any, i int) any {
			switch v := v.(*RoomDataSyncMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[235].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxTempStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[236].Exporter = func(v any, i int) any {
			switch v := v.(*DecorationModifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[237].Exporter = func(v any, i int) any {
			switch v := v.(*DecorationUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[238].Exporter = func(v any, i int) any {
			switch v := v.(*DecotationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[239].Exporter = func(v any, i int) any {
			switch v := v.(*Decoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[240].Exporter = func(v any, i int) any {
			switch v := v.(*Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[241].Exporter = func(v any, i int) any {
			switch v := v.(*DecorationFontConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[242].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMicAudienceKtvMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[243].Exporter = func(v any, i int) any {
			switch v := v.(*ListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[244].Exporter = func(v any, i int) any {
			switch v := v.(*KtvSongStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[245].Exporter = func(v any, i int) any {
			switch v := v.(*PersonalSongInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[246].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[247].Exporter = func(v any, i int) any {
			switch v := v.(*WantListenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[248].Exporter = func(v any, i int) any {
			switch v := v.(*MusicInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[249].Exporter = func(v any, i int) any {
			switch v := v.(*ChorusVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[250].Exporter = func(v any, i int) any {
			switch v := v.(*UserHighScoreSongTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[251].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStreamAdaptationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[252].Exporter = func(v any, i int) any {
			switch v := v.(*QuizAudienceStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[253].Exporter = func(v any, i int) any {
			switch v := v.(*Quiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[254].Exporter = func(v any, i int) any {
			switch v := v.(*HotChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[255].Exporter = func(v any, i int) any {
			switch v := v.(*HotRoomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[256].Exporter = func(v any, i int) any {
			switch v := v.(*HotRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[257].Exporter = func(v any, i int) any {
			switch v := v.(*AudioChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[258].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[259].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[260].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFanTicketMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[261].Exporter = func(v any, i int) any {
			switch v := v.(*ScreenChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[262].Exporter = func(v any, i int) any {
			switch v := v.(*Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[263].Exporter = func(v any, i int) any {
			switch v := v.(*FlexImageStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[264].Exporter = func(v any, i int) any {
			switch v := v.(*ChatIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[265].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyEffectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[266].Exporter = func(v any, i int) any {
			switch v := v.(*CombinedText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[267].Exporter = func(v any, i int) any {
			switch v := v.(*ComboInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[268].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[269].Exporter = func(v any, i int) any {
			switch v := v.(*DisplayItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[270].Exporter = func(v any, i int) any {
			switch v := v.(*ImagesItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[271].Exporter = func(v any, i int) any {
			switch v := v.(*TextItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[272].Exporter = func(v any, i int) any {
			switch v := v.(*DisplayItemFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[273].Exporter = func(v any, i int) any {
			switch v := v.(*TempStateAreaReachMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[274].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[275].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[276].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[277].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskRewardDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[278].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskCondDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[279].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[280].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[281].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskContributorRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[282].Exporter = func(v any, i int) any {
			switch v := v.(*GameCPBaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[283].Exporter = func(v any, i int) any {
			switch v := v.(*GameCPShowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[284].Exporter = func(v any, i int) any {
			switch v := v.(*ReserveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[285].Exporter = func(v any, i int) any {
			switch v := v.(*MiniGameMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[286].Exporter = func(v any, i int) any {
			switch v := v.(*MiniPlayMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[287].Exporter = func(v any, i int) any {
			switch v := v.(*GameImageBundler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[288].Exporter = func(v any, i int) any {
			switch v := v.(*GameImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[289].Exporter = func(v any, i int) any {
			switch v := v.(*CloudGameMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[290].Exporter = func(v any, i int) any {
			switch v := v.(*AtmosphereContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[291].Exporter = func(v any, i int) any {
			switch v := v.(*FeaturedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[292].Exporter = func(v any, i int) any {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[293].Exporter = func(v any, i int) any {
			switch v := v.(*IntroduceCardTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[294].Exporter = func(v any, i int) any {
			switch v := v.(*IntroduceCardDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[295].Exporter = func(v any, i int) any {
			switch v := v.(*SandwichBorderMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[296].Exporter = func(v any, i int) any {
			switch v := v.(*SandwichBorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[297].Exporter = func(v any, i int) any {
			switch v := v.(*LiveShoppingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[298].Exporter = func(v any, i int) any {
			switch v := v.(*LiveEcomGeneralMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[299].Exporter = func(v any, i int) any {
			switch v := v.(*TraceTimeMetricV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[300].Exporter = func(v any, i int) any {
			switch v := v.(*FilterSwitchChangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[301].Exporter = func(v any, i int) any {
			switch v := v.(*UpIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[302].Exporter = func(v any, i int) any {
			switch v := v.(*RoomTagOfflineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[303].Exporter = func(v any, i int) any {
			switch v := v.(*InteractionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[304].Exporter = func(v any, i int) any {
			switch v := v.(*InteractionContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[305].Exporter = func(v any, i int) any {
			switch v := v.(*InteractionContentCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[306].Exporter = func(v any, i int) any {
			switch v := v.(*InteractionElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[307].Exporter = func(v any, i int) any {
			switch v := v.(*InteractionAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[308].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[309].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedCouponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[310].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedCampaignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[311].Exporter = func(v any, i int) any {
			switch v := v.(*SkuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[312].Exporter = func(v any, i int) any {
			switch v := v.(*TraceTimeMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[313].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedSkuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[314].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedCommentaryVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[315].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[316].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[317].Exporter = func(v any, i int) any {
			switch v := v.(*RedpackActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[318].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedCartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[319].Exporter = func(v any, i int) any {
			switch v := v.(*LotteryProductShortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[320].Exporter = func(v any, i int) any {
			switch v := v.(*LotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[321].Exporter = func(v any, i int) any {
			switch v := v.(*LotteryUnusualInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[322].Exporter = func(v any, i int) any {
			switch v := v.(*CartVertical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[323].Exporter = func(v any, i int) any {
			switch v := v.(*CartHorizontal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[324].Exporter = func(v any, i int) any {
			switch v := v.(*GlobalCustomIcons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[325].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[326].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[327].Exporter = func(v any, i int) any {
			switch v := v.(*Img); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[328].Exporter = func(v any, i int) any {
			switch v := v.(*IncrPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[329].Exporter = func(v any, i int) any {
			switch v := v.(*WinLotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[330].Exporter = func(v any, i int) any {
			switch v := v.(*WinLotteryAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[331].Exporter = func(v any, i int) any {
			switch v := v.(*LotteryInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[332].Exporter = func(v any, i int) any {
			switch v := v.(*BenefitLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[333].Exporter = func(v any, i int) any {
			switch v := v.(*HotAtmosphere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[338].Exporter = func(v any, i int) any {
			switch v := v.(*MemberMessage_EffectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[339].Exporter = func(v any, i int) any {
			switch v := v.(*MemberMessage_PicoEffectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[353].Exporter = func(v any, i int) any {
			switch v := v.(*StreamUrlExtra_SuperResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[354].Exporter = func(v any, i int) any {
			switch v := v.(*StreamUrlExtra_AnchorClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[355].Exporter = func(v any, i int) any {
			switch v := v.(*StreamUrlExtra_AdaptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[356].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[357].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PushData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[359].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[360].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_Clip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[361].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_CameraHorizontalPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[362].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[363].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_PlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[364].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[365].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PullData_Options_Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[367].Exporter = func(v any, i int) any {
			switch v := v.(*LiveCoreSDKData_PushData_ResolutionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[371].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAuthStatus_RoomAuthOffReasons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[372].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAuthStatus_RoomAuthSpecialStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[373].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAuthStatus_RoomAuthSpecialStyle_Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[374].Exporter = func(v any, i int) any {
			switch v := v.(*MatchSkinInfo_FollowBtnSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[379].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[380].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_ForbiddenType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[381].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_TempStateType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[382].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_TempStateCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[383].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_TempStateStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[384].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_TempStateGlobalCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[386].Exporter = func(v any, i int) any {
			switch v := v.(*RoomShortTouchAreaConfig_TempStateStrategy_TempStateStrategyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[389].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCart_CartVertical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[390].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCart_CartHorizontal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[391].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCart_GlobalCustomIcons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[392].Exporter = func(v any, i int) any {
			switch v := v.(*BorderInfo_StaticBorderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[393].Exporter = func(v any, i int) any {
			switch v := v.(*BorderInfo_DynamicBorderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[397].Exporter = func(v any, i int) any {
			switch v := v.(*EasterEggData_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[400].Exporter = func(v any, i int) any {
			switch v := v.(*VerticalTypeInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[401].Exporter = func(v any, i int) any {
			switch v := v.(*ToolbarItemConfig_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[402].Exporter = func(v any, i int) any {
			switch v := v.(*ToolbarItemConfig_Toast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[403].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePremierePlay_VsEpisodeHighLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[404].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePremierePlay_VsEpisodeHighLight_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[405].Exporter = func(v any, i int) any {
			switch v := v.(*EpisodePreviewImage_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[406].Exporter = func(v any, i int) any {
			switch v := v.(*VSGiftPannel_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[407].Exporter = func(v any, i int) any {
			switch v := v.(*VSPannelIcon_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[408].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[409].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo_StreamUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[410].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo_RoomAuthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[411].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo_CameraPaidInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[412].Exporter = func(v any, i int) any {
			switch v := v.(*VSCameraInfo_CameraMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[413].Exporter = func(v any, i int) any {
			switch v := v.(*VSWatermark_VSWatermarkIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[414].Exporter = func(v any, i int) any {
			switch v := v.(*VSItemComment_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[415].Exporter = func(v any, i int) any {
			switch v := v.(*VSBar_VSItemBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[416].Exporter = func(v any, i int) any {
			switch v := v.(*VSLinkInfo_VSLinkNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[417].Exporter = func(v any, i int) any {
			switch v := v.(*CommentConfig_CommentColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[418].Exporter = func(v any, i int) any {
			switch v := v.(*CommentConfig_CommentRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[419].Exporter = func(v any, i int) any {
			switch v := v.(*CommentConfig_CommentMedal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[421].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchTabFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[422].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[423].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_ToutiaoMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[424].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[425].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchRoomImInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[426].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchShareBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[427].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchTabFrame_MatchTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[428].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchTitle_TitleIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[429].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_ToutiaoMatchData_Against); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[430].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_ToutiaoMatchData_TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[431].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_ToutiaoMatchData_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[432].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_ToutiaoMatchData_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[433].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchRoomImInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[434].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo_MatchShareBackground_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[435].Exporter = func(v any, i int) any {
			switch v := v.(*MultiCameraBasicInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[436].Exporter = func(v any, i int) any {
			switch v := v.(*SharePosterInfo_PosterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[437].Exporter = func(v any, i int) any {
			switch v := v.(*SharePosterInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[439].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[440].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_LeagueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[441].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[442].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[443].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[444].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[445].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[446].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[447].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_GoalStageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[448].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketBallGoalStageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[449].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_BasketballStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[450].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_ESportsStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[451].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[452].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayByPlayItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[453].Exporter = func(v any, i int) any {
			switch v := v.(*MainCameraMatchInfo_ToutiaoMatchData_Against_PlayerInfo_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[454].Exporter = func(v any, i int) any {
			switch v := v.(*MultiTab_TabItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[455].Exporter = func(v any, i int) any {
			switch v := v.(*MultiTab_Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[456].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessConfigure_ResourceConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[457].Exporter = func(v any, i int) any {
			switch v := v.(*VSPremiereToast_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[460].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_TicketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[461].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_OrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[462].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_AsyncAuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[463].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_ProductsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[465].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_TicketData_PaidLivePriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[466].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_TicketData_PaidLivePriceInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[467].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_TicketData_TicketSkuDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[468].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_TicketData_SubscribeMemberMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[469].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_ProductsData_ToolBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[470].Exporter = func(v any, i int) any {
			switch v := v.(*PaidLiveData_ProductsData_ExplainCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[471].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[472].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductPriceStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[473].Exporter = func(v any, i int) any {
			switch v := v.(*Product_LiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[474].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[475].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[476].Exporter = func(v any, i int) any {
			switch v := v.(*Product_PaymentArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[477].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductPriceRichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[478].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[479].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ShareTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[480].Exporter = func(v any, i int) any {
			switch v := v.(*Product_PrivilegeTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[481].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[482].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Comments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[483].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Rating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[484].Exporter = func(v any, i int) any {
			switch v := v.(*Product_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[485].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[486].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[487].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[488].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SubscribeMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[489].Exporter = func(v any, i int) any {
			switch v := v.(*Product_FilterReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[490].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_Introduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[491].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_HeaderMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[492].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_ProductTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[493].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_ContentTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[494].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_ProductSellingPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[495].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_ProductSaleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[496].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_RecentPurchasedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[497].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductBasicInfo_HeaderMedia_ViewButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[498].Exporter = func(v any, i int) any {
			switch v := v.(*Product_PaymentArea_PayButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[499].Exporter = func(v any, i int) any {
			switch v := v.(*Product_PaymentArea_AdditionalButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[501].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductPriceRichText_ProductRichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[502].Exporter = func(v any, i int) any {
			switch v := v.(*Product_ProductComments_ProductComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[503].Exporter = func(v any, i int) any {
			switch v := v.(*Product_PrivilegeTicket_PrivilegeConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[504].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined_BindSubProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[505].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined_ParentProductSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[506].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[507].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[508].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Combined_ParentProductSimpleData_PurchaseSimpleData_ProductPriceStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[509].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Comments_TextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[510].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Comments_TextInfo_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[511].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Author_AuthorBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[512].Exporter = func(v any, i int) any {
			switch v := v.(*Product_Author_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[513].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU_RelatedSkuSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[514].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU_CameraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[515].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU_EntityIDsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[516].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU_LimitedFreeNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[517].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SKU_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[518].Exporter = func(v any, i int) any {
			switch v := v.(*Product_SubscribeMember_ProductPriceStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[519].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[520].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PrivilegeBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[521].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PrivilegeUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[522].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveUIBaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[523].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[524].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveUIBaseConfig_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[525].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveConfig_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[526].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveConfig_PriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[527].Exporter = func(v any, i int) any {
			switch v := v.(*PrivilegeInfo_PaidLiveConfig_UserRight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[528].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[529].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[530].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard_RoomCardStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[531].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[532].Exporter = func(v any, i int) any {
			switch v := v.(*FeedbackCard_ClientImpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[534].Exporter = func(v any, i int) any {
			switch v := v.(*UnionLiveInfo_GuestAnchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[535].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation_HighLightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[536].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation_EcomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[537].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation_VsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[538].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation_WhiteCategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[539].Exporter = func(v any, i int) any {
			switch v := v.(*RelevantRecommendation_VsInfo_Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[540].Exporter = func(v any, i int) any {
			switch v := v.(*IndustryServiceInfo_ConsultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[544].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[545].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[546].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[547].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewExtendArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[548].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[549].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewPromotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[550].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewIMExtend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[551].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_EtData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[552].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_GrowthTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[553].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewPromotionSyncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[554].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewExitGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[555].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_EnterPublicAreaAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[556].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_ClientComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[557].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_ClientComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[558].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_IOSClientComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[559].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_IOSFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[560].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_IOSContainerLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[562].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_Meta_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[565].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewExtendArea_Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[566].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewExtendArea_ActionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[568].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewPromotion_EmojiDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[570].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewPromotionSyncData_LuckyBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[571].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewPromotionSyncData_LuckyMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[572].Exporter = func(v any, i int) any {
			switch v := v.(*PreviewExposeData_PreviewExitGuide_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[576].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[577].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_ContentTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[578].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_WideCover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[579].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_MoreEntrance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[580].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_ToolbarItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[581].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_PreviewLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[582].Exporter = func(v any, i int) any {
			switch v := v.(*Appearance_ToolbarItemConfig_Toast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[587].Exporter = func(v any, i int) any {
			switch v := v.(*ClientComponent_ClientComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[589].Exporter = func(v any, i int) any {
			switch v := v.(*RoomChannelData_RoomChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[590].Exporter = func(v any, i int) any {
			switch v := v.(*RoomChannelData_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[591].Exporter = func(v any, i int) any {
			switch v := v.(*OpenContentData_OpenActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[594].Exporter = func(v any, i int) any {
			switch v := v.(*LabelInfo_SpliceLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[595].Exporter = func(v any, i int) any {
			switch v := v.(*LabelInfo_ProfilePicSpliceLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[596].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_StreamCutPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[597].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_FollowTopAppearance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[598].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[599].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_AvatarArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[600].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_EntranceIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[601].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_EntranceTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[602].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_ArrowView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[603].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_EntranceLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[604].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_SpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[605].Exporter = func(v any, i int) any {
			switch v := v.(*RoomFeedData_DrawerConfig_SpecialConfig_FreqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[606].Exporter = func(v any, i int) any {
			switch v := v.(*RoomGameData_RoomGameDataChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[607].Exporter = func(v any, i int) any {
			switch v := v.(*RoomGameData_GameTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[608].Exporter = func(v any, i int) any {
			switch v := v.(*RoomGameData_SandwichBorderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[610].Exporter = func(v any, i int) any {
			switch v := v.(*PicoInfo_VirtualLiveBgImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[611].Exporter = func(v any, i int) any {
			switch v := v.(*PicoInfo_VirtualLiveBgImages_ConvertedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[612].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_DecotationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[613].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_MorePanelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[614].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_AppointmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[615].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_WebSkinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[616].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_WebProgramme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[617].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_LiveMatrixInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[618].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_WebLivePortOptimization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[619].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_GiftPanelTopperTray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[620].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_EnterGiftAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[621].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_PaidLiveSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[622].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_GroupLiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[623].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_WebEnterBenefitPointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[624].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_StreamRecognitionContainers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[625].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_AnchorBottomToolBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[626].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOthersData_AnchorTogetherLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[627].Exporter = func(v any, i int) any {
			switch v := v.(*RoomRevenueData_OpenGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[628].Exporter = func(v any, i int) any {
			switch v := v.(*RoomRevenueData_AnchorLinkmic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[629].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAnchorData_GameAnchorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[630].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInteractData_EpisodeExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[631].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInteractData_FeaturedPublicScreenConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[632].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInteractData_PublicScreenSpeedConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[633].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInteractData_RoomIntroLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[634].Exporter = func(v any, i int) any {
			switch v := v.(*Bonus_BonusAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[635].Exporter = func(v any, i int) any {
			switch v := v.(*Bonus_BonusCommerce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[636].Exporter = func(v any, i int) any {
			switch v := v.(*PublicScreenBottomInfo_BottomCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[638].Exporter = func(v any, i int) any {
			switch v := v.(*CastScreenData_CastOttPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[641].Exporter = func(v any, i int) any {
			switch v := v.(*ActivityLiveRecommendConfig_EpisodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[642].Exporter = func(v any, i int) any {
			switch v := v.(*RoomTitle_TitleIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[644].Exporter = func(v any, i int) any {
			switch v := v.(*DSLDetail_ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[645].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStats_UserCountComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[646].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMic_LinkMicChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[647].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMic_LinkMicBattleScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[648].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMic_LinkMicBattleSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[651].Exporter = func(v any, i int) any {
			switch v := v.(*Rsp_F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[652].Exporter = func(v any, i int) any {
			switch v := v.(*RoomRankMessage_RoomRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[654].Exporter = func(v any, i int) any {
			switch v := v.(*RanklistHourEntrance_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[655].Exporter = func(v any, i int) any {
			switch v := v.(*RanklistHourEntrance_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[656].Exporter = func(v any, i int) any {
			switch v := v.(*RanklistHourEntrance_Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[657].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMicAudienceKtvMessage_SongUniqueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[659].Exporter = func(v any, i int) any {
			switch v := v.(*KtvSongStruct_AudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[660].Exporter = func(v any, i int) any {
			switch v := v.(*KtvSongStruct_OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[661].Exporter = func(v any, i int) any {
			switch v := v.(*KtvSongStruct_ChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[663].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyMessage_Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[664].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyMessage_Background); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[665].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyMessage_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[666].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyMessage_ContentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[668].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage_ImgText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[669].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage_BoxMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[670].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage_Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[671].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage_BottomCommentMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[672].Exporter = func(v any, i int) any {
			switch v := v.(*LuckyBoxMessage_Dress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[677].Exporter = func(v any, i int) any {
			switch v := v.(*ScreenChatMessage_OfficialCommentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[679].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyEffectMessage_Background); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[680].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyEffectMessage_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[681].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyEffectMessage_BindingGiftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[682].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyEffectMessage_SceneConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[683].Exporter = func(v any, i int) any {
			switch v := v.(*TempStateAreaReachMessage_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_douyin_proto_msgTypes[684].Exporter = func(v any, i int) any {
			switch v := v.(*GrowthTaskMessage_CurrentContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_douyin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   688,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_douyin_proto_goTypes,
		DependencyIndexes: file_douyin_proto_depIdxs,
		EnumInfos:         file_douyin_proto_enumTypes,
		MessageInfos:      file_douyin_proto_msgTypes,
	}.Build()
	File_douyin_proto = out.File
	file_douyin_proto_rawDesc = nil
	file_douyin_proto_goTypes = nil
	file_douyin_proto_depIdxs = nil
}
